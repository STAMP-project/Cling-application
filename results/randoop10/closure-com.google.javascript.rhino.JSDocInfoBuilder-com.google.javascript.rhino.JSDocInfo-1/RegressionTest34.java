import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest34 {

    public static boolean debug = false;

    @Test
    public void test17001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17001");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExterns();
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        jSDocInfoBuilder1.recordOriginalCommentString("TYPEOF");
        boolean boolean14 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.recordOriginalCommentString("OR  54\n");
        boolean boolean17 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean19 = jSDocInfoBuilder1.recordLends("Node tree inequality:\nTree1:\nSTRING  43 [synthetic: 1]\n\n\nTree2:\nEQ  32\n\n\nSubtree1: STRING  43 [synthetic: 1]\n\n\nSubtree2: EQ  32\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder21.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = null;
        jSDocInfoBuilder21.markName("hi!", staticSourceFile25, (int) (short) 0, (int) (short) 100);
        boolean boolean29 = jSDocInfoBuilder21.recordNoTypeCheck();
        boolean boolean30 = jSDocInfoBuilder21.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int41 = strList39.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int52 = strList50.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList71 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList39, (java.lang.Iterable<java.lang.String>) strList50, (java.lang.Iterable<java.lang.String>) strList61, (java.lang.Iterable<java.lang.String>) strList70);
        boolean boolean72 = jSDocInfoBuilder21.recordTemplateTypeNames((java.util.List<java.lang.String>) strList70);
        boolean boolean73 = strList70.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator74 = strList70.spliterator();
        int int75 = strList70.size();
        boolean boolean76 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList70);
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nBITXOR Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n 51 [quoted: 1]\n\n\nTree2:\nGETELEM [length: 31]\n    STRING  43\n    NUMBER 0.0 43 [directives: []]\n\n\nSubtree1: BITXOR Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n 51 [quoted: 1]\n\n\nSubtree2: GETELEM [length: 31]\n    STRING  43\n    NUMBER 0.0 43 [directives: []]\n", 49, (int) (byte) 0, 37, 9);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = null;
        boolean boolean84 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression83);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strIterableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test17002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17002");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean3 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (byte) 100, 176180);
        boolean boolean9 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj15 = node13.getProp(43);
        boolean boolean16 = node13.isCall();
        boolean boolean17 = node13.isGetterDef();
        node13.putBooleanProp(41, false);
        node13.addSuppression("NUMBER 0.0 [directives: []]");
        jSDocInfoBuilder1.markTypeNode(node13, 54, 50, 0, 50, true);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType34 = node32.getJSType();
        boolean boolean35 = node32.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = jSDocInfoBuilder1.build(node32);
        boolean boolean37 = jSDocInfo36.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test17003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17003");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node23 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node17, node45, node58, node63, 1, 100);
        boolean boolean68 = node67.isFromExterns();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(53, node67, node80, node84);
        com.google.javascript.rhino.InputId inputId87 = null;
        node84.setInputId(inputId87);
        boolean boolean89 = node84.isSwitch();
        boolean boolean90 = node84.isUnscopedQualifiedName();
        int int91 = node84.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test17004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17004");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder10.recordNoCompile();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        boolean boolean20 = node17.isCall();
        boolean boolean21 = node17.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node17, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder24 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray26 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray27 = (java.util.ArrayList<java.lang.String>[]) arrayListArray26;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder28 = strListBuilder24.add((java.util.ArrayList<java.lang.String>[]) arrayListArray26);
        boolean boolean29 = jSTypeExpression23.equals((java.lang.Object) arrayListArray26);
        boolean boolean30 = jSDocInfoBuilder10.recordParameter("", jSTypeExpression23);
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression23);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder33.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder33.recordParameter("hi!", jSTypeExpression36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder39.isInterfaceRecorded();
        boolean boolean41 = jSDocInfoBuilder39.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.isInterfaceRecorded();
        boolean boolean46 = jSDocInfoBuilder43.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        boolean boolean54 = node50.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node50, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray59 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray60 = (java.util.ArrayList<java.lang.String>[]) arrayListArray59;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray59);
        boolean boolean62 = jSTypeExpression56.equals((java.lang.Object) arrayListArray59);
        boolean boolean63 = jSDocInfoBuilder43.recordDefineType(jSTypeExpression56);
        com.google.javascript.rhino.Node node64 = jSTypeExpression56.getRoot();
        boolean boolean66 = jSDocInfoBuilder39.recordThrowDescription(jSTypeExpression56, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.isInterfaceRecorded();
        boolean boolean71 = jSDocInfoBuilder68.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj77 = node75.getProp(43);
        boolean boolean78 = node75.isCall();
        boolean boolean79 = node75.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = new com.google.javascript.rhino.JSTypeExpression(node75, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder82 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray84 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray85 = (java.util.ArrayList<java.lang.String>[]) arrayListArray84;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder86 = strListBuilder82.add((java.util.ArrayList<java.lang.String>[]) arrayListArray84);
        boolean boolean87 = jSTypeExpression81.equals((java.lang.Object) arrayListArray84);
        boolean boolean88 = jSDocInfoBuilder68.recordDefineType(jSTypeExpression81);
        boolean boolean89 = jSDocInfoBuilder39.recordEnumParameterType(jSTypeExpression81);
        boolean boolean90 = jSTypeExpression81.isOptionalArg();
        boolean boolean91 = jSDocInfoBuilder33.recordEnumParameterType(jSTypeExpression81);
        boolean boolean92 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression81);
        boolean boolean93 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean94 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean95 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strListBuilder24);
        org.junit.Assert.assertNotNull(arrayListArray26);
        org.junit.Assert.assertNotNull(strListArray27);
        org.junit.Assert.assertNotNull(strListBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(arrayListArray59);
        org.junit.Assert.assertNotNull(strListArray60);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strListBuilder82);
        org.junit.Assert.assertNotNull(arrayListArray84);
        org.junit.Assert.assertNotNull(strListArray85);
        org.junit.Assert.assertNotNull(strListBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test17005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17005");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression24);
        boolean boolean32 = jSDocInfoBuilder1.recordThisType(jSTypeExpression24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object[] objArray42 = strSet39.toArray();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet49);
        java.lang.Object[] objArray52 = strSet49.toArray();
        boolean boolean53 = strSet39.retainAll((java.util.Collection<java.lang.String>) strSet49);
        java.lang.Object[] objArray54 = strSet39.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder56.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        jSDocInfoBuilder56.markName("hi!", staticSourceFile60, (int) (short) 0, (int) (short) 100);
        boolean boolean64 = jSDocInfoBuilder56.recordNoTypeCheck();
        boolean boolean65 = jSDocInfoBuilder56.recordExpose();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node69.addChildrenToFront(node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = jSDocInfoBuilder56.build(node73);
        java.lang.String str76 = jSDocInfo75.getMeaning();
        boolean boolean77 = jSDocInfo75.isExport();
        boolean boolean78 = strSet39.equals((java.lang.Object) jSDocInfo75);
        java.util.stream.Stream<java.lang.String> strStream79 = strSet39.stream();
        boolean boolean80 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet39);
        boolean boolean81 = jSDocInfoBuilder1.recordExpose();
        boolean boolean82 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean83 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean84 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSDocInfo75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test17006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17006");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        java.lang.Object[] objArray12 = strList8.toArray();
        int int13 = strList8.size();
        java.lang.Object[] objArray14 = strList8.toArray();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) 12);
        node16.setSourceEncodedPositionForTree(4);
        boolean boolean19 = strList8.equals((java.lang.Object) node16);
        java.util.Set<java.lang.String> strSet20 = node16.getDirectives();
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(42, nodeArray24, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(44, nodeArray24);
        node16.addChildToBack(node29);
        com.google.javascript.rhino.Node node31 = node16.getFirstChild();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj38 = node36.getProp(43);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean43 = node42.isIf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj49 = node47.getProp(43);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int54 = node53.getSourceOffset();
        com.google.javascript.rhino.Node node55 = node47.useSourceInfoIfMissingFromForTree(node53);
        boolean boolean56 = node55.isAssignAdd();
        boolean boolean57 = node55.isEmpty();
        node55.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet71);
        java.lang.Object obj75 = node68.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node76 = node63.copyInformationFrom(node68);
        boolean boolean77 = node63.isOr();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(1, node36, node42, node55, node63, 176180, 1);
        boolean boolean81 = node36.isExprResult();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean86 = node85.isOptionalArg();
        boolean boolean87 = node85.isNull();
        com.google.javascript.rhino.Node node88 = node36.srcrefTree(node85);
        com.google.javascript.rhino.Node node89 = node16.copyInformationFromForTree(node88);
        boolean boolean90 = node89.isGetElem();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(strSet20);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test17007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17007");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setSourceEncodedPositionForTree((int) (byte) -1);
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isVar();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node37 = node31.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node38 = node19.copyInformationFromForTree(node37);
        boolean boolean39 = node10.isEquivalentToTyped(node19);
        boolean boolean40 = node19.isNew();
        node19.setOptionalArg(true);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj48 = node46.getProp(43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        com.google.javascript.rhino.Node node54 = node46.useSourceInfoIfMissingFromForTree(node52);
        int int55 = node46.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node46.getJSDocInfo();
        boolean boolean57 = node46.isIn();
        boolean boolean58 = node46.isHook();
        java.lang.String str62 = node46.toString(true, false, false);
        com.google.javascript.rhino.Node node63 = node19.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean68 = node67.isNull();
        boolean boolean69 = node67.isSyntheticBlock();
        boolean boolean70 = node67.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node71 = node67.removeChildren();
        java.util.Set<java.lang.String> strSet72 = node67.getDirectives();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node76.addChildrenToFront(node80);
        com.google.javascript.rhino.Node node83 = node76.getChildAtIndex(0);
        java.lang.String str84 = node83.toString();
        node83.setSourceEncodedPositionForTree((int) (byte) -1);
        node83.setOptionalArg(false);
        boolean boolean89 = node67.hasChild(node83);
        com.google.javascript.rhino.Node node90 = node63.copyInformationFrom(node67);
        boolean boolean91 = node63.isString();
        boolean boolean92 = node63.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "STRING  43" + "'", str62, "STRING  43");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(strSet72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "STRING  43" + "'", str84, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test17008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17008");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        boolean boolean67 = node44.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj73 = node71.getProp(43);
        boolean boolean74 = node71.isCall();
        boolean boolean75 = node71.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = new com.google.javascript.rhino.JSTypeExpression(node71, "STRING ");
        boolean boolean78 = node71.isDo();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node82.addChildrenToFront(node86);
        boolean boolean88 = node86.isComma();
        com.google.javascript.rhino.Node node89 = node71.useSourceInfoFromForTree(node86);
        boolean boolean90 = node89.isAssignAdd();
        com.google.javascript.rhino.Node node91 = node89.getLastSibling();
        boolean boolean92 = node44.hasChild(node89);
        boolean boolean93 = node44.hasChildren();
        boolean boolean94 = node44.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test17009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17009");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean52 = strSet49.equals((java.lang.Object) (-1));
        boolean boolean53 = strSet6.contains((java.lang.Object) (-1));
        boolean boolean55 = strSet6.add("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.lang.Object obj56 = null;
        boolean boolean57 = strSet6.contains(obj56);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.isInterfaceRecorded();
        boolean boolean61 = jSDocInfoBuilder59.isPopulatedWithFileOverview();
        boolean boolean63 = jSDocInfoBuilder59.recordDeprecationReason("hi!");
        boolean boolean64 = strSet6.equals((java.lang.Object) jSDocInfoBuilder59);
        boolean boolean66 = jSDocInfoBuilder59.recordDescription("ERROR  43\n");
        jSDocInfoBuilder59.markText("", 53, 0, 35, 46);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test17010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17010");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean23 = jSDocInfoBuilder1.recordDeprecationReason("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean24 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean25 = jSDocInfoBuilder1.recordInterface();
        boolean boolean27 = jSDocInfoBuilder1.recordBlockDescription("ERROR\n    NUMBER 40.0\n");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet44);
        java.lang.Object[] objArray47 = strSet44.toArray();
        boolean boolean48 = strSet34.retainAll((java.util.Collection<java.lang.String>) strSet44);
        java.lang.Object[] objArray49 = strSet34.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder51.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = null;
        jSDocInfoBuilder51.markName("hi!", staticSourceFile55, (int) (short) 0, (int) (short) 100);
        boolean boolean59 = jSDocInfoBuilder51.recordNoTypeCheck();
        boolean boolean60 = jSDocInfoBuilder51.recordExpose();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node64.addChildrenToFront(node68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = jSDocInfoBuilder51.build(node68);
        java.lang.String str71 = jSDocInfo70.getMeaning();
        boolean boolean72 = jSDocInfo70.isExport();
        boolean boolean73 = strSet34.equals((java.lang.Object) jSDocInfo70);
        boolean boolean75 = strSet34.add("JSDocInfo");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj81 = node79.getProp(43);
        boolean boolean82 = node79.isCall();
        int int83 = node79.getSourcePosition();
        java.lang.String str87 = node79.toString(false, true, false);
        boolean boolean88 = node79.isNot();
        boolean boolean89 = strSet34.contains((java.lang.Object) node79);
        java.lang.Object[] objArray90 = strSet34.toArray();
        boolean boolean91 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet34);
        boolean boolean93 = jSDocInfoBuilder1.recordReturnDescription("STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(jSDocInfo70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 176180 + "'", int83 == 176180);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "STRING " + "'", str87, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[, JSDocInfo]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test17011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17011");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isGetElem();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        node17.detachChildren();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node17);
        boolean boolean21 = node3.isLabelName();
        boolean boolean22 = node3.hasOneChild();
        boolean boolean23 = node3.isSyntheticBlock();
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble((double) 24);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  43 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test17012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17012");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        boolean boolean35 = node29.isGetterDef();
        boolean boolean36 = node29.hasMoreThanOneChild();
        jSDocInfo20.setAssociatedNode(node29);
        boolean boolean38 = jSDocInfo20.hasReturnType();
        int int39 = jSDocInfo20.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test17013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17013");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        boolean boolean11 = strSet7.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList52 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList20, (java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList51);
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator64 = strList61.spliterator();
        boolean boolean65 = strList31.equals((java.lang.Object) strList61);
        boolean boolean66 = strSet7.addAll((java.util.Collection<java.lang.String>) strList61);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean71 = node70.isIf();
        boolean boolean72 = strSet7.equals((java.lang.Object) node70);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, node70);
        int int74 = node73.getSourcePosition();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder75 = node73.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node76 = node73.removeFirstChild();
        boolean boolean77 = node73.isVarArgs();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable78 = node73.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strIterableList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(ancestorIterable78);
    }

    @Test
    public void test17014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17014");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean12 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean13 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean14 = jSDocInfoBuilder1.isDescriptionRecorded();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        boolean boolean22 = node19.isCall();
        boolean boolean23 = node19.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = new com.google.javascript.rhino.JSTypeExpression(node19, "STRING ");
        boolean boolean26 = jSDocInfoBuilder1.recordParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", jSTypeExpression25);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        jSDocInfoBuilder30.markName("hi!", staticSourceFile34, (int) (short) 0, (int) (short) 100);
        boolean boolean38 = jSDocInfoBuilder30.recordNoTypeCheck();
        boolean boolean39 = jSDocInfoBuilder30.recordExpose();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node43.addChildrenToFront(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = jSDocInfoBuilder30.build(node47);
        boolean boolean50 = jSDocInfo49.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo49.getTypedefType();
        java.util.Collection<java.lang.String> strCollection52 = jSDocInfo49.getAuthors();
        boolean boolean53 = jSDocInfo49.isNoTypeCheck();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList54 = jSDocInfo49.getThrownTypes();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo49.getParameterNames();
        boolean boolean56 = jSDocInfoBuilder1.recordSuppressions(strSet55);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node60.addChildrenToFront(node64);
        boolean boolean66 = node60.isGetterDef();
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node60.setJSType(jSType67);
        node60.setDouble((double) 10L);
        boolean boolean71 = strSet55.contains((java.lang.Object) 10L);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder73 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean75 = jSDocInfoBuilder73.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile77 = null;
        jSDocInfoBuilder73.markName("hi!", staticSourceFile77, (int) (short) 0, (int) (short) 100);
        boolean boolean81 = jSDocInfoBuilder73.recordNoTypeCheck();
        boolean boolean82 = jSDocInfoBuilder73.recordExpose();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node90 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node86.addChildrenToFront(node90);
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = jSDocInfoBuilder73.build(node90);
        boolean boolean93 = jSDocInfo92.isExport();
        boolean boolean94 = jSDocInfo92.isNoCompile();
        java.lang.String str96 = jSDocInfo92.getDescriptionForParameter("NUMBER 0.0 43");
        java.lang.String str97 = jSDocInfo92.getReturnDescription();
        boolean boolean98 = jSDocInfo92.hasEnumParameterType();
        boolean boolean99 = strSet55.equals((java.lang.Object) jSDocInfo92);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertNull(strCollection52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(jSTypeExpressionList54);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertNotNull(jSDocInfo92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test17015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17015");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder12.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.isInterfaceRecorded();
        boolean boolean19 = jSDocInfoBuilder16.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        boolean boolean26 = node23.isCall();
        boolean boolean27 = node23.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = new com.google.javascript.rhino.JSTypeExpression(node23, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder30 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray32 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray33 = (java.util.ArrayList<java.lang.String>[]) arrayListArray32;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder34 = strListBuilder30.add((java.util.ArrayList<java.lang.String>[]) arrayListArray32);
        boolean boolean35 = jSTypeExpression29.equals((java.lang.Object) arrayListArray32);
        boolean boolean36 = jSDocInfoBuilder16.recordDefineType(jSTypeExpression29);
        com.google.javascript.rhino.Node node37 = jSTypeExpression29.getRoot();
        boolean boolean39 = jSDocInfoBuilder12.recordThrowDescription(jSTypeExpression29, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.isInterfaceRecorded();
        boolean boolean44 = jSDocInfoBuilder41.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj50 = node48.getProp(43);
        boolean boolean51 = node48.isCall();
        boolean boolean52 = node48.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node48, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder55 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray57 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray58 = (java.util.ArrayList<java.lang.String>[]) arrayListArray57;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder59 = strListBuilder55.add((java.util.ArrayList<java.lang.String>[]) arrayListArray57);
        boolean boolean60 = jSTypeExpression54.equals((java.lang.Object) arrayListArray57);
        boolean boolean61 = jSDocInfoBuilder41.recordDefineType(jSTypeExpression54);
        boolean boolean62 = jSDocInfoBuilder12.recordEnumParameterType(jSTypeExpression54);
        boolean boolean63 = jSTypeExpression54.isOptionalArg();
        boolean boolean64 = jSTypeExpression54.isVarArgs();
        boolean boolean65 = jSTypeExpression54.isOptionalArg();
        boolean boolean66 = jSTypeExpression54.isVarArgs();
        boolean boolean67 = jSDocInfoBuilder1.recordParameter("STRING  43", jSTypeExpression54);
        boolean boolean68 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean70 = jSDocInfoBuilder1.recordDeprecationReason("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean71 = jSDocInfoBuilder1.recordImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strListBuilder30);
        org.junit.Assert.assertNotNull(arrayListArray32);
        org.junit.Assert.assertNotNull(strListArray33);
        org.junit.Assert.assertNotNull(strListBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strListBuilder55);
        org.junit.Assert.assertNotNull(arrayListArray57);
        org.junit.Assert.assertNotNull(strListArray58);
        org.junit.Assert.assertNotNull(strListBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test17016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17016");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node3.siblings();
        boolean boolean11 = node3.isRegExp();
        boolean boolean12 = node3.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17017");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo14.getParameterNames();
        boolean boolean19 = jSDocInfo14.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getReturnType();
        java.lang.String str21 = jSDocInfo14.getDescription();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean26 = node25.isNull();
        boolean boolean27 = node25.isSyntheticBlock();
        boolean boolean28 = node25.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node29 = node25.removeChildren();
        java.util.Set<java.lang.String> strSet30 = node25.getDirectives();
        boolean boolean31 = node25.hasChildren();
        boolean boolean32 = node25.isSetterDef();
        java.lang.Object obj34 = node25.getProp(51);
        boolean boolean35 = node25.isLabel();
        boolean boolean36 = node25.isFromExterns();
        node25.setType(37);
        jSDocInfo14.setAssociatedNode(node25);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList40 = jSDocInfo14.getExtendedInterfaces();
        java.lang.String str41 = jSDocInfo14.getDescription();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test17018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17018");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        node3.putBooleanProp(30, false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder10 = node3.getJsDocBuilderForNode();
        node3.setSourceEncodedPositionForTree(12);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object[] objArray22 = strSet19.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        java.lang.Object[] objArray32 = strSet29.toArray();
        boolean boolean33 = strSet19.retainAll((java.util.Collection<java.lang.String>) strSet29);
        strSet29.clear();
        java.lang.Comparable[][] comparableArray36 = new java.lang.Comparable[0][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray37 = (java.lang.Comparable<java.lang.String>[][]) comparableArray36;
        java.lang.Comparable[][] comparableArray39 = new java.lang.Comparable[0][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray40 = (java.lang.Comparable<java.lang.String>[][]) comparableArray39;
        java.lang.Comparable[][] comparableArray42 = new java.lang.Comparable[0][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray43 = (java.lang.Comparable<java.lang.String>[][]) comparableArray42;
        java.lang.Comparable[][][] comparableArray45 = new java.lang.Comparable[3][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][] strComparableArray46 = (java.lang.Comparable<java.lang.String>[][][]) comparableArray45;
        strComparableArray46[0] = strComparableArray37;
        strComparableArray46[1] = strComparableArray40;
        strComparableArray46[2] = strComparableArray43;
        java.lang.Comparable<java.lang.String>[][][] strComparableArray53 = strSet29.toArray(strComparableArray46);
        java.lang.Object[] objArray54 = strSet29.toArray();
        node3.setDirectives((java.util.Set<java.lang.String>) strSet29);
        int int56 = strSet29.size();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(comparableArray36);
        org.junit.Assert.assertNotNull(strComparableArray37);
        org.junit.Assert.assertNotNull(comparableArray39);
        org.junit.Assert.assertNotNull(strComparableArray40);
        org.junit.Assert.assertNotNull(comparableArray42);
        org.junit.Assert.assertNotNull(strComparableArray43);
        org.junit.Assert.assertNotNull(comparableArray45);
        org.junit.Assert.assertNotNull(strComparableArray46);
        org.junit.Assert.assertNotNull(strComparableArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test17019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17019");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        java.lang.Object obj23 = null;
        boolean boolean24 = strSet6.equals(obj23);
        int int25 = strSet6.size();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test17020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17020");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node18.isComma();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFromForTree(node18);
        boolean boolean22 = node18.isFor();
        com.google.javascript.rhino.Node node23 = node18.detachFromParent();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node23.setJSType(jSType24);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test17021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17021");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isFromExterns();
        boolean boolean6 = node3.isFunction();
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        boolean boolean8 = node3.isLocalResultCall();
        boolean boolean9 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = node3.cloneNode();
        int int11 = node3.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
    }

    @Test
    public void test17022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17022");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 43, (-1));
        boolean boolean4 = node3.isNot();
        boolean boolean5 = node3.isNot();
        boolean boolean6 = node3.isSetterDef();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test17023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17023");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        java.lang.String str15 = jSDocInfo14.getLendsName();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        boolean boolean17 = jSDocInfo14.isImplicitCast();
        boolean boolean18 = jSDocInfo14.hasEnumParameterType();
        java.lang.String str19 = jSDocInfo14.getMeaning();
        boolean boolean20 = jSDocInfo14.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test17024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17024");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("JSDocInfo");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        java.lang.Object[] objArray33 = strSet30.toArray();
        boolean boolean34 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet30);
        java.lang.Object[] objArray35 = strSet20.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder37.markName("hi!", staticSourceFile41, (int) (short) 0, (int) (short) 100);
        boolean boolean45 = jSDocInfoBuilder37.recordNoTypeCheck();
        boolean boolean46 = jSDocInfoBuilder37.recordExpose();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node50.addChildrenToFront(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = jSDocInfoBuilder37.build(node54);
        java.lang.String str57 = jSDocInfo56.getMeaning();
        boolean boolean58 = jSDocInfo56.isExport();
        boolean boolean59 = strSet20.equals((java.lang.Object) jSDocInfo56);
        boolean boolean61 = strSet20.add("JSDocInfo");
        java.util.Spliterator<java.lang.String> strSpliterator62 = strSet20.spliterator();
        boolean boolean63 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder65.recordJavaDispatch();
        boolean boolean67 = jSDocInfoBuilder65.recordNoCompile();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        boolean boolean75 = node72.isCall();
        boolean boolean76 = node72.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node72, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder79 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray81 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray82 = (java.util.ArrayList<java.lang.String>[]) arrayListArray81;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder83 = strListBuilder79.add((java.util.ArrayList<java.lang.String>[]) arrayListArray81);
        boolean boolean84 = jSTypeExpression78.equals((java.lang.Object) arrayListArray81);
        boolean boolean85 = jSDocInfoBuilder65.recordParameter("", jSTypeExpression78);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression78);
        boolean boolean87 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression78);
        boolean boolean88 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean89 = jSDocInfoBuilder1.recordNoShadow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strListBuilder79);
        org.junit.Assert.assertNotNull(arrayListArray81);
        org.junit.Assert.assertNotNull(strListArray82);
        org.junit.Assert.assertNotNull(strListBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test17025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17025");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        node1.setSourceEncodedPositionForTree(4);
        java.lang.Object obj5 = node1.getProp(2);
        boolean boolean6 = node1.hasOneChild();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test17026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17026");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        boolean boolean49 = node48.isVarArgs();
        com.google.javascript.rhino.jstype.JSType jSType50 = node48.getJSType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition51 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean52 = typePosition51.hasBrackets();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean57 = node56.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node61.setDirectives((java.util.Set<java.lang.String>) strSet64);
        java.lang.Object obj68 = node61.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node69 = node56.copyInformationFrom(node61);
        typePosition51.setItem(node69);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj76 = node74.getProp(43);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int81 = node80.getSourceOffset();
        com.google.javascript.rhino.Node node82 = node74.useSourceInfoIfMissingFromForTree(node80);
        boolean boolean83 = node82.isAssignAdd();
        boolean boolean84 = node82.isFromExterns();
        com.google.javascript.rhino.Node node85 = node69.copyInformationFromForTree(node82);
        node85.setWasEmptyNode(false);
        boolean boolean88 = node85.isTypeOf();
        boolean boolean89 = node85.isString();
        com.google.javascript.rhino.Node node90 = node48.useSourceInfoFromForTree(node85);
        boolean boolean91 = node90.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test17027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17027");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getVersion();
        boolean boolean32 = jSDocInfo20.isNoCompile();
        java.lang.String str33 = jSDocInfo20.getVersion();
        java.lang.String str34 = jSDocInfo20.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo20.getThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = jSDocInfo20.getTemplateTypeNames();
        java.util.ListIterator<java.lang.String> strItor37 = strList36.listIterator();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("NUMBER 0.0", 44, 29);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(167974);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 10, node42, node44);
        int int46 = strList36.lastIndexOf((java.lang.Object) node42);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test17028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17028");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isVar();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node19 = node13.copyInformationFromForTree(node18);
        com.google.javascript.rhino.Node node20 = node13.cloneTree();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = new com.google.javascript.rhino.JSTypeExpression(node20, "STRING  43");
        boolean boolean23 = jSTypeExpression22.isVarArgs();
        boolean boolean24 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression22);
        boolean boolean26 = jSDocInfoBuilder1.addAuthor("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean27 = jSDocInfoBuilder1.recordExpose();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test17029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17029");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        int int23 = node14.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node14.getJSDocInfo();
        boolean boolean25 = node14.isIn();
        node3.addChildrenToFront(node14);
        boolean boolean27 = node14.isWhile();
        boolean boolean28 = node14.isCatch();
        boolean boolean29 = node14.isInstanceOf();
        boolean boolean30 = node14.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test17030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17030");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.recordJavaDispatch();
        jSDocInfoBuilder7.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        boolean boolean15 = jSDocInfoBuilder7.shouldParseDocumentation();
        boolean boolean16 = jSDocInfoBuilder7.recordHiddenness();
        boolean boolean18 = jSDocInfoBuilder7.recordLends("[, hi!, , , hi!, , hi!, ]");
        boolean boolean19 = jSDocInfoBuilder7.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder22.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.isInterfaceRecorded();
        boolean boolean29 = jSDocInfoBuilder26.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj35 = node33.getProp(43);
        boolean boolean36 = node33.isCall();
        boolean boolean37 = node33.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = new com.google.javascript.rhino.JSTypeExpression(node33, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder40 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray42 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray43 = (java.util.ArrayList<java.lang.String>[]) arrayListArray42;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder44 = strListBuilder40.add((java.util.ArrayList<java.lang.String>[]) arrayListArray42);
        boolean boolean45 = jSTypeExpression39.equals((java.lang.Object) arrayListArray42);
        boolean boolean46 = jSDocInfoBuilder26.recordDefineType(jSTypeExpression39);
        com.google.javascript.rhino.Node node47 = jSTypeExpression39.getRoot();
        boolean boolean49 = jSDocInfoBuilder22.recordThrowDescription(jSTypeExpression39, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder51.isInterfaceRecorded();
        boolean boolean54 = jSDocInfoBuilder51.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj60 = node58.getProp(43);
        boolean boolean61 = node58.isCall();
        boolean boolean62 = node58.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = new com.google.javascript.rhino.JSTypeExpression(node58, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder65 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray67 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray68 = (java.util.ArrayList<java.lang.String>[]) arrayListArray67;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder69 = strListBuilder65.add((java.util.ArrayList<java.lang.String>[]) arrayListArray67);
        boolean boolean70 = jSTypeExpression64.equals((java.lang.Object) arrayListArray67);
        boolean boolean71 = jSDocInfoBuilder51.recordDefineType(jSTypeExpression64);
        boolean boolean72 = jSDocInfoBuilder22.recordEnumParameterType(jSTypeExpression64);
        boolean boolean73 = jSDocInfoBuilder7.recordParameter("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", jSTypeExpression64);
        boolean boolean74 = jSDocInfoBuilder1.recordThisType(jSTypeExpression64);
        boolean boolean75 = jSDocInfoBuilder1.recordDeprecated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strListBuilder40);
        org.junit.Assert.assertNotNull(arrayListArray42);
        org.junit.Assert.assertNotNull(strListArray43);
        org.junit.Assert.assertNotNull(strListBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strListBuilder65);
        org.junit.Assert.assertNotNull(arrayListArray67);
        org.junit.Assert.assertNotNull(strListArray68);
        org.junit.Assert.assertNotNull(strListBuilder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test17031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17031");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 52, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = new com.google.javascript.rhino.JSTypeExpression(node3, "NUMBER 0.0 43 [directives: []]\n");
        boolean boolean6 = node3.isAssign();
        boolean boolean7 = node3.isStringKey();
        int int8 = node3.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test17032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17032");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "", "", "", "", "hi!", "", "hi!");
        java.lang.Object[] objArray9 = strList8.toArray();
        java.lang.Object[] objArray10 = strList8.toArray();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[, , , , , hi!, , hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[, , , , , hi!, , hi!]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[, , , , , hi!, , hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[, , , , , hi!, , hi!]");
    }

    @Test
    public void test17033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17033");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        boolean boolean27 = node24.isCall();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node24, "STRING ");
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        jSDocInfoBuilder33.markName("hi!", staticSourceFile37, (int) (short) 0, (int) (short) 100);
        boolean boolean41 = jSDocInfoBuilder33.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder33.recordExpose();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.addChildrenToFront(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = jSDocInfoBuilder33.build(node50);
        boolean boolean53 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node54 = node50.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = jSDocInfoBuilder1.build(node54);
        java.lang.String str56 = jSDocInfo55.getReturnDescription();
        boolean boolean57 = jSDocInfo55.isNoShadow();
        boolean boolean58 = jSDocInfo55.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = jSDocInfo55.getType();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo55.getSuppressions();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(jSTypeExpression59);
        org.junit.Assert.assertNotNull(strSet60);
    }

    @Test
    public void test17034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17034");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        double double5 = node3.getDouble();
        boolean boolean6 = node3.isFalse();
        boolean boolean7 = node3.isCatch();
        boolean boolean8 = node3.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test17035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17035");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        jSDocInfo20.addSuppression("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean44 = node43.isVar();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node49 = node43.copyInformationFromForTree(node48);
        com.google.javascript.rhino.Node node50 = node31.copyInformationFromForTree(node49);
        boolean boolean51 = node50.isTrue();
        boolean boolean52 = node50.isAnd();
        jSDocInfo20.setAssociatedNode(node50);
        boolean boolean54 = node50.isFor();
        com.google.javascript.rhino.Node node55 = node50.getLastSibling();
        boolean boolean56 = node50.isNew();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test17036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17036");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        boolean boolean11 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecated();
        jSDocInfoBuilder1.markAnnotation("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n", 100, 37);
        boolean boolean17 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 52, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node21, "NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression23);
        boolean boolean25 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression23);
        jSDocInfoBuilder1.recordOriginalCommentString("STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean28 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17037");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        boolean boolean26 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean31 = node30.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.Object obj42 = node35.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node43 = node30.copyInformationFrom(node35);
        jSDocInfo20.setAssociatedNode(node43);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo20.getEnumParameterType();
        boolean boolean46 = jSDocInfo20.shouldPreserveTry();
        java.lang.String str47 = jSDocInfo20.getBlockDescription();
        boolean boolean48 = jSDocInfo20.containsDeclaration();
        int int49 = jSDocInfo20.getExtendedInterfacesCount();
        java.lang.String str50 = jSDocInfo20.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "JSDocInfo" + "'", str50, "JSDocInfo");
    }

    @Test
    public void test17038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17038");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = null;
        boolean boolean9 = jSDocInfoBuilder5.recordParameter("", jSTypeExpression8);
        boolean boolean10 = jSDocInfoBuilder5.recordExterns();
        boolean boolean11 = jSDocInfoBuilder5.recordPreserveTry();
        boolean boolean12 = jSDocInfoBuilder5.recordNoCompile();
        boolean boolean14 = jSDocInfoBuilder5.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordJavaDispatch();
        jSDocInfoBuilder16.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordJavaDispatch();
        boolean boolean27 = jSDocInfoBuilder25.recordNoCompile();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordParameter("", jSTypeExpression38);
        boolean boolean46 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression38);
        boolean boolean47 = jSDocInfoBuilder5.recordBaseType(jSTypeExpression38);
        boolean boolean48 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression38);
        boolean boolean49 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean50 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean52 = jSDocInfoBuilder1.recordReturnDescription("TYPEOF");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean56 = jSDocInfoBuilder54.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        jSDocInfoBuilder54.markName("hi!", staticSourceFile58, (int) (short) 0, (int) (short) 100);
        boolean boolean62 = jSDocInfoBuilder54.recordNoTypeCheck();
        boolean boolean63 = jSDocInfoBuilder54.recordExpose();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node67.addChildrenToFront(node71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = jSDocInfoBuilder54.build(node71);
        java.lang.String str74 = jSDocInfo73.getMeaning();
        boolean boolean75 = jSDocInfo73.isExport();
        boolean boolean76 = jSDocInfo73.isConstant();
        boolean boolean77 = jSDocInfo73.hasEnumParameterType();
        boolean boolean78 = jSDocInfo73.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility79 = jSDocInfo73.getVisibility();
        boolean boolean80 = jSDocInfoBuilder1.recordVisibility(visibility79);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(jSDocInfo73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + visibility79 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility79.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test17039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17039");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean10 = node3.getBooleanProp(8);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean33 = node32.isContinue();
        boolean boolean34 = node32.isVoid();
        double double35 = node32.getDouble();
        java.lang.String str36 = node3.checkTreeEquals(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node32.getJSDocInfo();
        boolean boolean38 = node32.isDec();
        boolean boolean39 = node32.isAdd();
        node32.setOptionalArg(false);
        boolean boolean42 = node32.isInc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str36, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test17040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17040");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.Node node27 = jSDocInfo20.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getEnumParameterType();
        boolean boolean29 = jSDocInfo20.isNoShadow();
        boolean boolean30 = jSDocInfo20.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo20.getBaseType();
        boolean boolean32 = jSDocInfo20.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo20.getType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
    }

    @Test
    public void test17041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17041");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder14.append("GETELEM  43\n");
        fileLevelJsDocBuilder14.append("STRING hi!");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test17042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17042");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        int int17 = typePosition2.getStartLine();
        com.google.javascript.rhino.Node node18 = typePosition2.getItem();
        int int19 = typePosition2.getStartLine();
        boolean boolean20 = typePosition2.hasBrackets();
        com.google.javascript.rhino.Node node21 = typePosition2.getItem();
        boolean boolean22 = node21.isArrayLit();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test17043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17043");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        int int30 = node4.getSourcePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean37 = typePosition36.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList38 = com.google.common.collect.ImmutableList.of(typePosition31, typePosition32, typePosition33, typePosition34, typePosition35, typePosition36);
        int int39 = typePosition33.getEndLine();
        int int40 = typePosition33.getStartLine();
        com.google.javascript.rhino.Node node41 = typePosition33.getItem();
        int int42 = typePosition33.getStartLine();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean48 = node47.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet55);
        java.lang.Object obj59 = node52.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node60 = node47.copyInformationFrom(node52);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean65 = node64.isNull();
        boolean boolean66 = node64.isSyntheticBlock();
        com.google.javascript.rhino.Node node67 = node64.removeChildren();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean72 = node71.isDebugger();
        com.google.javascript.rhino.Node node73 = node71.getFirstChild();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj79 = node77.getProp(43);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int84 = node83.getSourceOffset();
        com.google.javascript.rhino.Node node85 = node77.useSourceInfoIfMissingFromForTree(node83);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(38, node52, node64, node71, node77);
        java.lang.String str87 = node77.getQualifiedName();
        node77.setType((int) (short) 100);
        typePosition33.setItem(node77);
        com.google.javascript.rhino.Node node91 = node4.clonePropsFrom(node77);
        int int92 = node91.getLength();
        node91.detachChildren();
        boolean boolean94 = node91.isDec();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 176180 + "'", int30 == 176180);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(typePositionList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test17044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17044");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder1.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        int int22 = node18.getSourcePosition();
        java.lang.String str26 = node18.toString(false, true, false);
        boolean boolean27 = node18.isDo();
        boolean boolean28 = node18.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = jSDocInfoBuilder1.build(node18);
        boolean boolean30 = node18.isUnscopedQualifiedName();
        int int31 = node18.getCharno();
        com.google.javascript.rhino.Node node32 = node18.getNext();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj38 = node36.getProp(43);
        boolean boolean39 = node36.isParamList();
        boolean boolean40 = node36.isParamList();
        com.google.javascript.rhino.Node node41 = node36.cloneNode();
        node41.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj49 = node47.getProp(43);
        boolean boolean50 = node47.isCall();
        int int51 = node47.getSourcePosition();
        java.lang.String str55 = node47.toString(false, true, false);
        boolean boolean56 = node47.isExprResult();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder57 = node47.getJsDocBuilderForNode();
        boolean boolean58 = node47.isSwitch();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable59 = node47.getAncestors();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition60 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean61 = typePosition60.hasBrackets();
        int int62 = typePosition60.getEndLine();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node66.addChildrenToFront(node70);
        boolean boolean72 = node66.isGetterDef();
        boolean boolean73 = node66.isEmpty();
        typePosition60.setItem(node66);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable75 = node66.children();
        com.google.javascript.rhino.Node node76 = node47.copyInformationFromForTree(node66);
        boolean boolean77 = node76.isContinue();
        int int78 = node76.getLength();
        com.google.javascript.rhino.Node node79 = node41.useSourceInfoFromForTree(node76);
        com.google.javascript.rhino.Node node80 = node18.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node81 = node80.getParent();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node(16, (int) (short) 0, 51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable86 = node85.siblings();
        node80.addChildToBack(node85);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 176180 + "'", int22 == 176180);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING " + "'", str26, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 176180 + "'", int51 == 176180);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "STRING " + "'", str55, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(ancestorIterable59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(nodeIterable86);
    }

    @Test
    public void test17045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17045");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node18.isComma();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFromForTree(node18);
        boolean boolean22 = node21.isAssignAdd();
        boolean boolean23 = node21.isNot();
        boolean boolean24 = node21.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test17046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17046");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        node62.setWasEmptyNode(true);
        boolean boolean69 = node62.isQuotedString();
        boolean boolean71 = node62.getBooleanProp((int) (byte) 0);
        com.google.javascript.rhino.Node node72 = node62.getFirstChild();
        node62.removeProp(15);
        boolean boolean75 = node62.isEmpty();
        com.google.javascript.rhino.InputId inputId76 = node62.getInputId();
        node62.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(inputId76);
    }

    @Test
    public void test17047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17047");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder7.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        boolean boolean17 = node14.isCall();
        boolean boolean18 = node14.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = new com.google.javascript.rhino.JSTypeExpression(node14, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder21 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray23 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray24 = (java.util.ArrayList<java.lang.String>[]) arrayListArray23;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = strListBuilder21.add((java.util.ArrayList<java.lang.String>[]) arrayListArray23);
        boolean boolean26 = jSTypeExpression20.equals((java.lang.Object) arrayListArray23);
        boolean boolean27 = jSDocInfoBuilder7.recordDefineType(jSTypeExpression20);
        com.google.javascript.rhino.Node node28 = jSTypeExpression20.getRoot();
        boolean boolean29 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression20);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj35 = node33.getProp(43);
        boolean boolean36 = node33.isCall();
        boolean boolean37 = node33.isGetterDef();
        boolean boolean38 = node33.isCase();
        boolean boolean39 = node33.isVoid();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = new com.google.javascript.rhino.JSTypeExpression(node33, "NUMBER 0.0");
        boolean boolean43 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression41, "OR  54\n");
        jSDocInfoBuilder1.markText("NUMBER 0.0 43", (int) (byte) 1, 52, 7, (int) (byte) -1);
        boolean boolean50 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strListBuilder21);
        org.junit.Assert.assertNotNull(arrayListArray23);
        org.junit.Assert.assertNotNull(strListArray24);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test17048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17048");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean52 = strSet49.equals((java.lang.Object) (-1));
        boolean boolean53 = strSet6.contains((java.lang.Object) (-1));
        int int54 = strSet6.size();
        strSet6.clear();
        java.util.Spliterator<java.lang.String> strSpliterator56 = strSet6.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(strSpliterator56);
    }

    @Test
    public void test17049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17049");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) ' ', 167974, (int) (byte) 1);
        com.google.javascript.rhino.jstype.JSType jSType4 = null;
        node3.setJSType(jSType4);
        boolean boolean6 = node3.isDebugger();
        node3.setDouble(0.0d);
        int int10 = node3.getIntProp(29);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test17050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17050");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) 10, 50, 30);
        boolean boolean4 = node3.isScript();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node8.addChildrenToFront(node12);
        node12.setQuotedString();
        com.google.javascript.rhino.Node node15 = node3.srcrefTree(node12);
        node15.setType(39);
        boolean boolean18 = node15.isDebugger();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node15.new FileLevelJsDocBuilder();
        boolean boolean20 = node15.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test17051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17051");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable3 = node1.getAncestors();
        boolean boolean4 = node1.isFunction();
        double double5 = node1.getDouble();
        boolean boolean6 = node1.isTry();
        int int7 = node1.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(ancestorIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 12.0d + "'", double5 == 12.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test17052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17052");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node3.hasChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj12 = node10.getProp(43);
        boolean boolean13 = node10.isCall();
        boolean boolean14 = node10.isEmpty();
        boolean boolean15 = node10.isCatch();
        node3.addChildToBack(node10);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj22 = node20.getProp(43);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int27 = node26.getSourceOffset();
        com.google.javascript.rhino.Node node28 = node20.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet35);
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        boolean boolean39 = node32.isThrow();
        boolean boolean40 = node32.isNot();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node45 = node32.useSourceInfoFromForTree(node44);
        boolean boolean46 = node45.isCatch();
        node10.addChildrenToBack(node45);
        com.google.javascript.rhino.Node node48 = null;
        // The following exception was thrown during execution in test generation
        try {
            node10.addChildrenToBack(node48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test17053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17053");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
    }

    @Test
    public void test17054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17054");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("FALSE 10\n    NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test17055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17055");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile11, (int) (short) 100, 8);
        boolean boolean16 = jSDocInfoBuilder1.addAuthor("JSDocInfo");
        boolean boolean18 = jSDocInfoBuilder1.addReference("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test17056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17056");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 7, 26, 48);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test17057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17057");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(42, nodeArray2, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(49, nodeArray2, 53, 43);
        boolean boolean9 = node8.isFalse();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int14 = node13.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType15 = node13.getJSType();
        boolean boolean16 = node13.isWith();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet23);
        boolean boolean26 = node20.isParamList();
        boolean boolean27 = node20.isExprResult();
        boolean boolean28 = node20.isDo();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int39 = node38.getSourceOffset();
        com.google.javascript.rhino.Node node40 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean41 = node40.isIf();
        boolean boolean42 = node40.isAnd();
        boolean boolean43 = node40.isVar();
        node40.setType((int) (byte) -1);
        int int46 = node20.getIndexOfChild(node40);
        node13.addChildToFront(node20);
        com.google.javascript.rhino.Node node48 = node8.useSourceInfoIfMissingFrom(node20);
        boolean boolean49 = node8.isInc();
        boolean boolean51 = node8.getBooleanProp(176180);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNull(jSType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test17058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17058");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        int int6 = node3.getType();
        boolean boolean7 = node3.isGetterDef();
        node3.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        boolean boolean27 = node3.isEquivalentToTyped(node13);
        boolean boolean28 = node3.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node3.siblings();
        // The following exception was thrown during execution in test generation
        try {
            double double30 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
    }

    @Test
    public void test17059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17059");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 44, 39);
        com.google.javascript.rhino.Node node4 = node3.getFirstChild();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        boolean boolean16 = strSet12.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int27 = strList25.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int38 = strList36.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList57 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList25, (java.lang.Iterable<java.lang.String>) strList36, (java.lang.Iterable<java.lang.String>) strList47, (java.lang.Iterable<java.lang.String>) strList56);
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int68 = strList66.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator69 = strList66.spliterator();
        boolean boolean70 = strList36.equals((java.lang.Object) strList66);
        boolean boolean71 = strSet12.addAll((java.util.Collection<java.lang.String>) strList66);
        java.util.ListIterator<java.lang.String> strItor72 = strList66.listIterator();
        node3.putProp(43, (java.lang.Object) strList66);
        boolean boolean74 = node3.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strIterableList57);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test17060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17060");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList81 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList49, (java.lang.Iterable<java.lang.String>) strList60, (java.lang.Iterable<java.lang.String>) strList71, (java.lang.Iterable<java.lang.String>) strList80);
        boolean boolean82 = strList30.containsAll((java.util.Collection<java.lang.String>) strList80);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder84 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean85 = jSDocInfoBuilder84.recordNoTypeCheck();
        boolean boolean86 = jSDocInfoBuilder84.isJavaDispatch();
        boolean boolean87 = strList80.contains((java.lang.Object) boolean86);
        java.util.Spliterator<java.lang.String> strSpliterator88 = strList80.spliterator();
        java.lang.Object[] objArray89 = strList80.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList90 = strList80.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList91 = strList90.asList();
        java.util.stream.Stream<java.lang.String> strStream92 = strList91.stream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = strList91.add("NUMBER 40.0 [source_file: hi!]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strIterableList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strSpliterator88);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(strStream92);
    }

    @Test
    public void test17061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17061");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        int int13 = node4.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node4.getJSDocInfo();
        boolean boolean15 = node4.isIn();
        boolean boolean16 = node4.isHook();
        boolean boolean17 = node4.isScript();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node20 = node19.cloneTree();
        int int21 = node20.getLineno();
        boolean boolean22 = node20.isGetProp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        boolean boolean46 = node44.isVoid();
        double double47 = node44.getDouble();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node51.addChildrenToFront(node55);
        node55.setQuotedString();
        boolean boolean58 = node55.isHook();
        int int59 = node55.getType();
        node55.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node63 = node55.getAncestor(10);
        node20.addChildrenAfter(node44, node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(38, node4, node20);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj71 = node69.getProp(43);
        boolean boolean72 = node69.isCall();
        int int73 = node69.getSourcePosition();
        java.lang.String str77 = node69.toString(false, true, false);
        boolean boolean78 = node69.isDo();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        boolean boolean82 = node69.isEquivalentTo(node81);
        boolean boolean83 = node69.isIn();
        node69.setWasEmptyNode(true);
        boolean boolean86 = node69.isTypeOf();
        com.google.javascript.rhino.Node node87 = node20.srcref(node69);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 40 + "'", int59 == 40);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 176180 + "'", int73 == 176180);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "STRING " + "'", str77, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test17062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17062");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        boolean boolean20 = node18.isVarArgs();
        boolean boolean21 = node18.isDec();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node18.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator23 = nodeIterable22.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
    }

    @Test
    public void test17063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17063");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition8.getEndLine();
        java.lang.String str32 = stringPosition8.getItem();
        int int33 = stringPosition8.getPositionOnStartLine();
        stringPosition8.setItem("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        stringPosition8.setPositionInformation(0, 0, 48, 51);
        int int41 = stringPosition8.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test17064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17064");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        node74.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        node74.setJSType(jSType77);
        com.google.javascript.rhino.Node node79 = node66.useSourceInfoIfMissingFromForTree(node74);
        boolean boolean80 = node66.isLocalResultCall();
        node66.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node83 = node66.removeChildren();
        com.google.javascript.rhino.jstype.JSType jSType84 = node83.getJSType();
        com.google.javascript.rhino.Node node85 = node83.getLastSibling();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber((double) 49, (int) (byte) 10, 4095);
        boolean boolean90 = node89.isDelProp();
        int int91 = node89.getSourcePosition();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node92 = node85.getChildBefore(node89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(jSType84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 45055 + "'", int91 == 45055);
    }

    @Test
    public void test17065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17065");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = null;
        boolean boolean8 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression7);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.isInterfaceRecorded();
        boolean boolean12 = jSDocInfoBuilder10.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.isInterfaceRecorded();
        boolean boolean17 = jSDocInfoBuilder14.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        boolean boolean24 = node21.isCall();
        boolean boolean25 = node21.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = new com.google.javascript.rhino.JSTypeExpression(node21, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder28 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray30 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray31 = (java.util.ArrayList<java.lang.String>[]) arrayListArray30;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder32 = strListBuilder28.add((java.util.ArrayList<java.lang.String>[]) arrayListArray30);
        boolean boolean33 = jSTypeExpression27.equals((java.lang.Object) arrayListArray30);
        boolean boolean34 = jSDocInfoBuilder14.recordDefineType(jSTypeExpression27);
        com.google.javascript.rhino.Node node35 = jSTypeExpression27.getRoot();
        boolean boolean37 = jSDocInfoBuilder10.recordThrowDescription(jSTypeExpression27, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean38 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression27);
        boolean boolean39 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean40 = jSDocInfoBuilder1.recordExpose();
        boolean boolean41 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean42 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strListBuilder28);
        org.junit.Assert.assertNotNull(arrayListArray30);
        org.junit.Assert.assertNotNull(strListArray31);
        org.junit.Assert.assertNotNull(strListBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test17066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17066");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("");
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str26 = strList25.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = strList25.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = strList27.asList();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test17067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17067");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node23 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node17, node45, node58, node63, 1, 100);
        boolean boolean68 = node67.isFromExterns();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(53, node67, node80, node84);
        boolean boolean87 = node80.isThis();
        java.lang.String str91 = node80.toString(true, false, true);
        int int92 = node80.getChildCount();
        boolean boolean93 = node80.isTry();
        java.util.Set<java.lang.String> strSet94 = node80.getDirectives();
        boolean boolean95 = node80.isTypeOf();
        node80.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "STRING  43" + "'", str91, "STRING  43");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(strSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test17068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17068");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean4 = node3.isIf();
        double double5 = node3.getDouble();
        boolean boolean6 = node3.isSetterDef();
        boolean boolean7 = node3.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 40.0d + "'", double5 == 40.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test17069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17069");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        boolean boolean12 = strList8.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean19 = typePosition18.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList20 = com.google.common.collect.ImmutableList.of(typePosition13, typePosition14, typePosition15, typePosition16, typePosition17, typePosition18);
        int int21 = strList8.indexOf((java.lang.Object) typePosition18);
        com.google.javascript.rhino.Node node22 = typePosition18.getItem();
        typePosition18.setPositionInformation(15, (int) (short) -1, (int) (byte) 100, 35);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typePositionList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test17070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17070");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.addAuthor("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        jSDocInfoBuilder1.markName("NUMBER 0.0 43\n    STRING  43\n", 48, 8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test17071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17071");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isGetterDef();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node3.getAncestors();
        node3.setWasEmptyNode(true);
        boolean boolean11 = node3.isAdd();
        boolean boolean12 = node3.isName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17072");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        com.google.javascript.rhino.Node node35 = null;
        com.google.javascript.rhino.Node node36 = node15.getChildBefore(node35);
        boolean boolean37 = node15.isVarArgs();
        boolean boolean38 = node15.isIn();
        boolean boolean39 = node15.isNE();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node15.setStaticSourceFile(staticSourceFile40);
        boolean boolean42 = node15.isAssign();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder43 = node15.new FileLevelJsDocBuilder();
        boolean boolean44 = node15.isName();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj50 = node48.getProp(43);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int55 = node54.getSourceOffset();
        com.google.javascript.rhino.Node node56 = node48.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node60.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.javascript.rhino.Node node66 = node54.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean67 = node60.isThrow();
        boolean boolean68 = node60.isNot();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean73 = node72.isVar();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node78 = node72.copyInformationFromForTree(node77);
        java.lang.String str79 = node60.checkTreeEquals(node78);
        com.google.javascript.rhino.Node node80 = null;
        com.google.javascript.rhino.Node node81 = node60.getChildBefore(node80);
        boolean boolean82 = node60.isVarArgs();
        boolean boolean83 = node60.isIn();
        boolean boolean84 = node60.isNE();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile85 = null;
        node60.setStaticSourceFile(staticSourceFile85);
        boolean boolean87 = node60.isAssign();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder88 = node60.new FileLevelJsDocBuilder();
        boolean boolean89 = node60.isIn();
        com.google.javascript.rhino.Node node90 = node15.srcrefTree(node60);
        node90.setLength(39);
        boolean boolean93 = node90.isInc();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder94 = node90.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str79, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder94);
    }

    @Test
    public void test17073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17073");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder19.recordParameter("hi!", jSTypeExpression22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean25 = jSDocInfoBuilder19.recordVisibility(visibility24);
        jSDocInfo14.setVisibility(visibility24);
        java.lang.String str28 = jSDocInfo14.getDescriptionForParameter("hi!");
        java.util.Set<java.lang.String> strSet29 = jSDocInfo14.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo14.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(jSTypeExpression30);
    }

    @Test
    public void test17074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17074");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        boolean boolean51 = jSDocInfo42.hasType();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo42.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo42.getType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection54 = jSDocInfo42.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo42.getExtendedInterfaces();
        boolean boolean56 = jSDocInfo42.isOverride();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo42.getSuppressions();
        java.util.Iterator<java.lang.String> strItor58 = strSet57.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertNotNull(nodeCollection54);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strItor58);
    }

    @Test
    public void test17075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17075");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("TYPEOF");
        node2.setType(0);
        boolean boolean5 = node2.isFalse();
        com.google.javascript.rhino.Node node6 = node2.getParent();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(49, node2, 31, 45);
        boolean boolean10 = node2.isSyntheticBlock();
        boolean boolean11 = node2.isSetterDef();
        boolean boolean12 = node2.isCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17076");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isExterns();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        java.lang.String str27 = jSDocInfo20.getVersion();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test17077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17077");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        node4.putBooleanProp(30, false);
        boolean boolean9 = node4.isSwitch();
        boolean boolean10 = node4.isUnscopedQualifiedName();
        boolean boolean11 = node4.isName();
        node4.setWasEmptyNode(false);
        boolean boolean14 = node4.isArrayLit();
        int int15 = node4.getChildCount();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean20 = node19.isOptionalArg();
        boolean boolean21 = node19.isSwitch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node26.addChildrenToFront(node30);
        boolean boolean32 = node26.isGetterDef();
        boolean boolean33 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj39 = node37.getProp(43);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int44 = node43.getSourceOffset();
        com.google.javascript.rhino.Node node45 = node37.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        node49.setDirectives((java.util.Set<java.lang.String>) strSet52);
        com.google.javascript.rhino.Node node55 = node43.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(32, node26, node43);
        boolean boolean57 = node56.isExprResult();
        boolean boolean58 = node56.isFunction();
        com.google.javascript.rhino.Node node59 = node19.srcrefTree(node56);
        java.lang.Object obj61 = node19.getProp((int) (byte) -1);
        boolean boolean62 = node19.isStringKey();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean67 = node66.isNull();
        node66.putIntProp(1, (int) (byte) 0);
        boolean boolean71 = node66.isIf();
        com.google.javascript.rhino.Node node72 = node19.useSourceInfoFromForTree(node66);
        boolean boolean73 = node72.isFor();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(43);
        boolean boolean76 = node75.isTrue();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        node75.setJSType(jSType77);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(47, node4, node72, node75, 8, 42);
        int int82 = node4.getSourceOffset();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test17078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17078");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean5 = node4.isNull();
        boolean boolean6 = node4.isSyntheticBlock();
        com.google.javascript.rhino.Node node7 = node4.removeChildren();
        com.google.javascript.rhino.InputId inputId8 = null;
        node4.setInputId(inputId8);
        boolean boolean10 = node4.isThis();
        boolean boolean11 = node4.isSwitch();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(43, node4, (int) (short) 10, 36);
        boolean boolean15 = node4.isInc();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node4.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(ancestorIterable16);
    }

    @Test
    public void test17079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17079");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isInc();
        boolean boolean10 = node3.isEmpty();
        int int12 = node3.getIntProp(49);
        java.util.Set<java.lang.String> strSet13 = node3.getDirectives();
        boolean boolean14 = node3.isCatch();
        // The following exception was thrown during execution in test generation
        try {
            node3.setString("Node tree inequality:\nTree1:\nSTRING  43 [quoted: 1]\n\n\nTree2:\nCALL NUMBER 43.0\n\n\n\nSubtree1: STRING  43 [quoted: 1]\n\n\nSubtree2: CALL NUMBER 43.0\n\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 43 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test17080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17080");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 39, 51);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test17081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17081");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isExprResult();
        int int13 = node3.getSideEffectFlags();
        com.google.javascript.rhino.Node node14 = node3.removeChildren();
        boolean boolean15 = node3.isAdd();
        boolean boolean16 = node3.isThrow();
        boolean boolean17 = node3.isNull();
        boolean boolean18 = node3.isAdd();
        boolean boolean19 = node3.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test17082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17082");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        com.google.javascript.rhino.Node node17 = node12.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.children();
        boolean boolean19 = node12.isLabelName();
        java.lang.Object obj21 = node12.getProp(48);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node25.setIsSyntheticBlock(true);
        boolean boolean28 = node25.isReturn();
        boolean boolean29 = node25.isCatch();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node25.getJSDocInfo();
        boolean boolean31 = node25.hasMoreThanOneChild();
        boolean boolean32 = node12.isEquivalentToTyped(node25);
        node12.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean40 = node39.isNull();
        boolean boolean41 = node39.isFromExterns();
        boolean boolean42 = node39.isFunction();
        com.google.javascript.rhino.Node node43 = node39.cloneTree();
        boolean boolean44 = node43.isFor();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean53 = node52.isOptionalArg();
        boolean boolean54 = node52.isSwitch();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node59.addChildrenToFront(node63);
        boolean boolean65 = node59.isGetterDef();
        boolean boolean66 = node59.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj72 = node70.getProp(43);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int77 = node76.getSourceOffset();
        com.google.javascript.rhino.Node node78 = node70.useSourceInfoIfMissingFromForTree(node76);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        node82.setDirectives((java.util.Set<java.lang.String>) strSet85);
        com.google.javascript.rhino.Node node88 = node76.useSourceInfoIfMissingFromForTree(node82);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(32, node59, node76);
        boolean boolean90 = node89.isExprResult();
        boolean boolean91 = node89.isFunction();
        com.google.javascript.rhino.Node node92 = node52.srcrefTree(node89);
        com.google.javascript.rhino.Node node93 = node48.srcrefTree(node89);
        com.google.javascript.rhino.Node node94 = node43.useSourceInfoFrom(node93);
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(49, node94);
        com.google.javascript.rhino.Node node96 = node12.copyInformationFrom(node95);
        com.google.javascript.rhino.Node node97 = node95.cloneNode();
        boolean boolean98 = node97.isVar();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test17083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17083");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nSTRING NUMBER 0.0 43 43\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: STRING NUMBER 0.0 43 43\n", 46, (-1));
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test17084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17084");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.Iterator<java.lang.String> strItor9 = strList8.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder11.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        jSDocInfoBuilder11.markName("hi!", staticSourceFile15, (int) (short) 0, (int) (short) 100);
        boolean boolean19 = jSDocInfoBuilder11.recordNoTypeCheck();
        boolean boolean20 = jSDocInfoBuilder11.recordExpose();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node24.addChildrenToFront(node28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = jSDocInfoBuilder11.build(node28);
        java.lang.String str31 = jSDocInfo30.getMeaning();
        boolean boolean32 = jSDocInfo30.isExport();
        boolean boolean33 = jSDocInfo30.isConstant();
        boolean boolean34 = strList8.equals((java.lang.Object) boolean33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.lang.Object[] objArray44 = strSet41.toArray();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet51);
        java.lang.Object[] objArray54 = strSet51.toArray();
        boolean boolean55 = strSet41.retainAll((java.util.Collection<java.lang.String>) strSet51);
        boolean boolean56 = strSet51.isEmpty();
        int int57 = strSet51.size();
        int int58 = strList8.indexOf((java.lang.Object) strSet51);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags60 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
        boolean boolean61 = strList8.equals((java.lang.Object) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = strList8.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (52) must be less than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSDocInfo30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test17085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17085");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(30);
        sideEffectFlags1.setMutatesArguments();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test17086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17086");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        boolean boolean10 = node3.isIn();
        node3.setSourceFileForTesting("NUMBER 0.0");
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable13 = node3.getAncestors();
        boolean boolean14 = node3.isOr();
        int int16 = node3.getIntProp((int) (short) 1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ancestorIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test17087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17087");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        boolean boolean75 = jSDocInfo42.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0);
        jSDocInfo42.setAssociatedNode(node77);
        boolean boolean79 = jSDocInfo42.hasModifies();
        boolean boolean80 = jSDocInfo42.isConstructor();
        boolean boolean81 = jSDocInfo42.isNoAlias();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test17088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17088");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        boolean boolean26 = jSDocInfo20.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo20.getThrownTypes();
        java.lang.String str28 = jSDocInfo20.getLicense();
        jSDocInfo20.setLicense("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING  43\n\n\nSubtree2: STRING hi!\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test17089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17089");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str27 = jSDocInfo20.getVersion();
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        java.lang.String str29 = jSDocInfo20.getMeaning();
        jSDocInfo20.addSuppression("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.lang.String str33 = jSDocInfo20.getDescriptionForParameter("OR  54\n");
        java.util.Set<java.lang.String> strSet34 = jSDocInfo20.getParameterNames();
        boolean boolean35 = jSDocInfo20.isNoSideEffects();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo20.getModifies();
        java.lang.String str37 = jSDocInfo20.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo20.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo20.getType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertNull(jSTypeExpression39);
    }

    @Test
    public void test17090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17090");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(36, nodeArray6, 40, 4);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(12, nodeArray6, 32, (int) (byte) 0);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray6);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(52, nodeArray6, (-2147483596), 176180);
        boolean boolean21 = node20.isTypeOf();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test17091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17091");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        java.lang.String str31 = stringPosition24.getItem();
        stringPosition24.setItem("JSDocInfo");
        int int34 = stringPosition24.getPositionOnEndLine();
        java.lang.String str35 = stringPosition24.getItem();
        java.lang.String str36 = stringPosition24.getItem();
        int int37 = stringPosition24.getPositionOnStartLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition24.setPositionInformation((int) (byte) 100, 23, 37, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 100?end-line: 37");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JSDocInfo" + "'", str35, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JSDocInfo" + "'", str36, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test17092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17092");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str24 = jSDocInfo20.getDescription();
        boolean boolean25 = jSDocInfo20.isExport();
        boolean boolean26 = jSDocInfo20.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo20.getParameterType("NUMBER 10.0 50");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        boolean boolean32 = jSDocInfo20.hasDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNULL\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NULL\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test17093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17093");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.isName();
        node3.setWasEmptyNode(false);
        boolean boolean13 = node3.isArrayLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoIfMissingFromForTree(node23);
        node17.setIsSyntheticBlock(true);
        boolean boolean28 = node17.isBlock();
        com.google.javascript.rhino.Node node29 = node3.clonePropsFrom(node17);
        com.google.javascript.rhino.jstype.JSType jSType30 = node29.getJSType();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        boolean boolean37 = node34.isCall();
        int int38 = node34.getSourcePosition();
        java.lang.String str42 = node34.toString(false, true, false);
        boolean boolean43 = node34.isExprResult();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder44 = node34.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(40, "hi!");
        java.lang.String str48 = node47.getSourceFileName();
        node47.putBooleanProp(30, false);
        node34.addChildToFront(node47);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node34.children();
        java.lang.Object obj55 = node34.getProp(53);
        com.google.javascript.rhino.Node node56 = node34.cloneNode();
        boolean boolean57 = node29.hasChild(node34);
        boolean boolean58 = node34.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(jSType30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 176180 + "'", int38 == 176180);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "STRING " + "'", str42, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test17094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17094");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.wasEmptyNode();
        node15.removeProp((int) (short) -1);
        boolean boolean26 = node15.isFalse();
        boolean boolean27 = node15.isLocalResultCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test17095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17095");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 39, 45055, 44);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test17096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17096");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        boolean boolean13 = node3.isWith();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node3.isEquivalentTo(node17);
        com.google.javascript.rhino.Node node25 = node3.getParent();
        node3.setQuotedString();
        node3.putBooleanProp(176180, false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test17097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17097");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        java.lang.String str24 = jSDocInfo20.getDescription();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getSuppressions();
        boolean boolean26 = jSDocInfo20.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo20.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
    }

    @Test
    public void test17098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17098");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        boolean boolean63 = strList19.containsAll((java.util.Collection<java.lang.String>) strList62);
        java.lang.Object[] objArray64 = strList62.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder66 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean67 = jSDocInfoBuilder66.recordNoTypeCheck();
        boolean boolean69 = jSDocInfoBuilder66.addAuthor("");
        boolean boolean70 = jSDocInfoBuilder66.recordExport();
        int int71 = strList62.indexOf((java.lang.Object) boolean70);
        com.google.common.collect.ImmutableList<java.util.ListIterator<java.lang.String>> strItorList72 = com.google.common.collect.ImmutableList.of();
        boolean boolean73 = strList62.contains((java.lang.Object) strItorList72);
        // The following exception was thrown during execution in test generation
        try {
            strList62.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(strItorList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test17099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17099");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        node29.setLength(31);
        com.google.javascript.rhino.Node node32 = node29.cloneNode();
        boolean boolean33 = node32.isAssignAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test17100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17100");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        boolean boolean30 = jSDocInfo20.hasDescriptionForParameter("");
        java.lang.String str31 = jSDocInfo20.getFileOverview();
        com.google.javascript.rhino.Node node32 = jSDocInfo20.getAssociatedNode();
        com.google.javascript.rhino.Node node33 = jSDocInfo20.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNull(node33);
    }

    @Test
    public void test17101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17101");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isVar();
        boolean boolean59 = strList49.contains((java.lang.Object) node57);
        boolean boolean60 = node57.isThis();
        java.util.Set<java.lang.String> strSet61 = node57.getDirectives();
        boolean boolean62 = node57.isUnscopedQualifiedName();
        boolean boolean63 = node57.isDec();
        int int64 = node57.getLineno();
        int int65 = node57.getType();
        node57.setType(7);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder69 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder69.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = null;
        jSDocInfoBuilder69.markName("hi!", staticSourceFile73, (int) (short) 0, (int) (short) 100);
        boolean boolean77 = jSDocInfoBuilder69.recordNoTypeCheck();
        boolean boolean78 = jSDocInfoBuilder69.recordExpose();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node82.addChildrenToFront(node86);
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = jSDocInfoBuilder69.build(node86);
        boolean boolean89 = jSDocInfo88.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = jSDocInfo88.getTypedefType();
        java.util.Collection<java.lang.String> strCollection91 = jSDocInfo88.getAuthors();
        boolean boolean92 = jSDocInfo88.isNoTypeCheck();
        boolean boolean93 = jSDocInfo88.shouldPreserveTry();
        boolean boolean94 = jSDocInfo88.isNoSideEffects();
        java.util.Set<java.lang.String> strSet95 = jSDocInfo88.getSuppressions();
        node57.setDirectives(strSet95);
        java.util.stream.Stream<java.lang.String> strStream97 = strSet95.parallelStream();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 43 + "'", int64 == 43);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 40 + "'", int65 == 40);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(jSDocInfo88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(jSTypeExpression90);
        org.junit.Assert.assertNull(strCollection91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(strStream97);
    }

    @Test
    public void test17102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17102");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(41, 31, (int) (short) 1);
        com.google.javascript.rhino.Node node4 = node3.getLastSibling();
        com.google.javascript.rhino.Node node5 = node4.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = node5.isTry();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test17103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17103");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isString();
        boolean boolean14 = node3.isInc();
        node3.setOptionalArg(false);
        java.lang.String[] strArray33 = new java.lang.String[] { "GETELEM", "STRING  43", "GETELEM", "JSDocInfo", "NUMBER 0.0 43 [jsdoc_info: JSDocInfo]\n", "[]", "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", "OR  54\n", "NUMBER 0.0", "STRING  43", "NUMBER 0.0 43 [jsdoc_info: JSDocInfo]\n", "STRING  43", "JSDocInfo", "NUMBER 0.0 43", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n", "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList36 = com.google.common.collect.ImmutableList.of(strList34);
        boolean boolean38 = strList34.add("NUMBER 0.0 [directives: []]");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet45);
        java.lang.Object[] objArray48 = strSet45.toArray();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet55);
        java.lang.Object[] objArray58 = strSet55.toArray();
        boolean boolean59 = strSet45.retainAll((java.util.Collection<java.lang.String>) strSet55);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node63.setDirectives((java.util.Set<java.lang.String>) strSet66);
        boolean boolean69 = strSet55.containsAll((java.util.Collection<java.lang.String>) strSet66);
        boolean boolean71 = strSet55.add("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder73 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean74 = jSDocInfoBuilder73.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = null;
        boolean boolean77 = jSDocInfoBuilder73.recordParameter("hi!", jSTypeExpression76);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean79 = jSDocInfoBuilder73.recordVisibility(visibility78);
        boolean boolean80 = strSet55.contains((java.lang.Object) jSDocInfoBuilder73);
        java.lang.Object[] objArray81 = strSet55.toArray();
        strSet55.clear();
        boolean boolean83 = strList34.containsAll((java.util.Collection<java.lang.String>) strSet55);
        strSet55.clear();
        node3.setDirectives((java.util.Set<java.lang.String>) strSet55);
        boolean boolean86 = strSet55.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strListList36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + visibility78 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility78.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test17104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17104");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression24);
        boolean boolean32 = jSDocInfoBuilder1.recordThisType(jSTypeExpression24);
        com.google.javascript.rhino.Node node33 = jSTypeExpression24.getRoot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test17105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17105");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setSourceEncodedPositionForTree((int) (byte) -1);
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isVar();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node37 = node31.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node38 = node19.copyInformationFromForTree(node37);
        boolean boolean39 = node10.isEquivalentToTyped(node19);
        boolean boolean40 = node19.isAnd();
        com.google.javascript.rhino.Node node41 = node19.getLastSibling();
        com.google.javascript.rhino.jstype.JSType jSType42 = node41.getJSType();
        boolean boolean43 = node41.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test17106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17106");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean13 = node12.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node12.getStaticSourceFile();
        node12.setVarArgs(false);
        boolean boolean17 = node12.wasEmptyNode();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        boolean boolean24 = node21.isCall();
        int int25 = node21.getSourcePosition();
        java.lang.String str29 = node21.toString(false, true, false);
        boolean boolean30 = node21.isNot();
        boolean boolean31 = node21.isString();
        boolean boolean32 = node21.isInc();
        boolean boolean33 = node21.isEmpty();
        boolean boolean34 = node21.isGetElem();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean38 = jSDocInfoBuilder36.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        jSDocInfoBuilder36.markName("hi!", staticSourceFile40, (int) (short) 0, (int) (short) 100);
        boolean boolean44 = jSDocInfoBuilder36.recordNoTypeCheck();
        boolean boolean45 = jSDocInfoBuilder36.recordExpose();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node49.addChildrenToFront(node53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = jSDocInfoBuilder36.build(node53);
        java.lang.String str56 = jSDocInfo55.getMeaning();
        boolean boolean57 = jSDocInfo55.isExport();
        int int58 = jSDocInfo55.getParameterCount();
        boolean boolean59 = jSDocInfo55.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = jSDocInfo55.getTypedefType();
        node21.setJSDocInfo(jSDocInfo55);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = new com.google.javascript.rhino.JSTypeExpression(node21, "GETELEM\n");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(221199, node12, node21, (int) (byte) 100, 9);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 176180 + "'", int25 == 176180);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "STRING " + "'", str29, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(jSDocInfo55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSTypeExpression60);
    }

    @Test
    public void test17107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17107");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder7.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.isInterfaceRecorded();
        boolean boolean15 = jSDocInfoBuilder12.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        boolean boolean22 = node19.isCall();
        boolean boolean23 = node19.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = new com.google.javascript.rhino.JSTypeExpression(node19, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder26 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray28 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray29 = (java.util.ArrayList<java.lang.String>[]) arrayListArray28;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder30 = strListBuilder26.add((java.util.ArrayList<java.lang.String>[]) arrayListArray28);
        boolean boolean31 = jSTypeExpression25.equals((java.lang.Object) arrayListArray28);
        boolean boolean32 = jSDocInfoBuilder12.recordDefineType(jSTypeExpression25);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int34 = namePosition33.getEndLine();
        int int35 = namePosition33.getStartLine();
        com.google.javascript.rhino.Node node36 = namePosition33.getItem();
        boolean boolean37 = jSTypeExpression25.equals((java.lang.Object) node36);
        boolean boolean38 = jSDocInfoBuilder7.recordTypedef(jSTypeExpression25);
        boolean boolean39 = jSDocInfoBuilder1.recordParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", jSTypeExpression25);
        boolean boolean41 = jSDocInfoBuilder1.recordDeprecationReason("JSDocInfo");
        boolean boolean42 = jSDocInfoBuilder1.recordOverride();
        boolean boolean44 = jSDocInfoBuilder1.recordLends("");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strListBuilder26);
        org.junit.Assert.assertNotNull(arrayListArray28);
        org.junit.Assert.assertNotNull(strListArray29);
        org.junit.Assert.assertNotNull(strListBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test17108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17108");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo14.getParameterNames();
        boolean boolean19 = jSDocInfo14.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getReturnType();
        jSDocInfo14.setLicense("STRING ");
        jSDocInfo14.setDeprecated(false);
        int int25 = jSDocInfo14.getImplementedInterfaceCount();
        boolean boolean26 = jSDocInfo14.isExpose();
        boolean boolean27 = jSDocInfo14.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test17109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17109");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        strSet16.clear();
        boolean boolean22 = strSet16.isEmpty();
        int int23 = strSet16.size();
        java.lang.Object[] objArray24 = strSet16.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet16.spliterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder27.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder27.markName("hi!", staticSourceFile31, (int) (short) 0, (int) (short) 100);
        boolean boolean35 = jSDocInfoBuilder27.recordNoTypeCheck();
        boolean boolean36 = jSDocInfoBuilder27.recordExpose();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node40.addChildrenToFront(node44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = jSDocInfoBuilder27.build(node44);
        boolean boolean47 = jSDocInfo46.isExport();
        boolean boolean48 = jSDocInfo46.isNoCompile();
        java.lang.String str50 = jSDocInfo46.getDescriptionForParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        boolean boolean52 = jSDocInfo46.hasDescriptionForParameter("NUMBER 0.0 43 [directives: []]");
        boolean boolean53 = strSet16.remove((java.lang.Object) "NUMBER 0.0 43 [directives: []]");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSDocInfo46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test17110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17110");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean10 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean11 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder1.recordExpose();
        jSDocInfoBuilder1.recordOriginalCommentString("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition17 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition21 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean22 = typePosition21.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList23 = com.google.common.collect.ImmutableList.of(typePosition16, typePosition17, typePosition18, typePosition19, typePosition20, typePosition21);
        int int24 = typePosition18.getEndLine();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean29 = node28.isNull();
        boolean boolean30 = node28.isSyntheticBlock();
        boolean boolean31 = node28.hasMoreThanOneChild();
        typePosition18.setItem(node28);
        com.google.javascript.rhino.Node node33 = node28.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node28.children();
        boolean boolean35 = node28.isVar();
        boolean boolean36 = node28.isGetterDef();
        node28.addSuppression("NUMBER 0.0 43");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean43 = node42.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet50);
        java.lang.Object obj54 = node47.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node55 = node42.copyInformationFrom(node47);
        boolean boolean56 = node42.isOr();
        int int58 = node42.getIntProp(53);
        com.google.javascript.rhino.Node node59 = node42.cloneNode();
        boolean boolean60 = node59.wasEmptyNode();
        node59.removeProp(36);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean67 = node66.isNull();
        boolean boolean68 = node66.isSyntheticBlock();
        com.google.javascript.rhino.Node node69 = node66.removeChildren();
        com.google.javascript.rhino.InputId inputId70 = null;
        node66.setInputId(inputId70);
        boolean boolean72 = node66.isThis();
        boolean boolean73 = node59.hasChild(node66);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node77.setIsSyntheticBlock(true);
        boolean boolean80 = node77.isReturn();
        boolean boolean81 = node77.isReturn();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 1, node28, node66, node77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = jSDocInfoBuilder1.build(node66);
        boolean boolean84 = jSDocInfoBuilder1.recordExport();
        boolean boolean85 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(typePositionList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test17111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17111");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        boolean boolean6 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = node3.removeChildren();
        java.util.Set<java.lang.String> strSet8 = node3.getDirectives();
        boolean boolean9 = node3.hasChildren();
        boolean boolean10 = node3.isSetterDef();
        java.lang.Object obj12 = node3.getProp(51);
        boolean boolean13 = node3.isLabel();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isOptionalArg();
        boolean boolean19 = node17.isSwitch();
        boolean boolean20 = node17.isOr();
        boolean boolean21 = node17.isQuotedString();
        com.google.javascript.rhino.Node node22 = node3.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node23 = node3.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test17112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17112");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        boolean boolean6 = jSDocInfoBuilder1.recordReturnDescription("STRING ");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean11 = node10.isOptionalArg();
        node10.setSourceEncodedPosition(12);
        node10.setSourceEncodedPositionForTree(26);
        jSDocInfoBuilder1.markTypeNode(node10, 0, 51, 36, (int) 'a', true);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test17113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17113");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) '4');
        node1.setDouble((double) 38);
        boolean boolean4 = node1.isObjectLit();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test17114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17114");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder19.recordParameter("hi!", jSTypeExpression22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean25 = jSDocInfoBuilder19.recordVisibility(visibility24);
        jSDocInfo14.setVisibility(visibility24);
        boolean boolean27 = jSDocInfo14.isConstant();
        boolean boolean28 = jSDocInfo14.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo14.getThisType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(jSTypeExpression29);
    }

    @Test
    public void test17115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17115");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        boolean boolean8 = jSDocInfoBuilder5.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        boolean boolean16 = node12.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node12, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray22 = (java.util.ArrayList<java.lang.String>[]) arrayListArray21;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder23 = strListBuilder19.add((java.util.ArrayList<java.lang.String>[]) arrayListArray21);
        boolean boolean24 = jSTypeExpression18.equals((java.lang.Object) arrayListArray21);
        boolean boolean25 = jSDocInfoBuilder5.recordDefineType(jSTypeExpression18);
        com.google.javascript.rhino.Node node26 = jSTypeExpression18.getRoot();
        boolean boolean28 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression18, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean29 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean31 = jSDocInfoBuilder1.recordLends("hi!");
        boolean boolean32 = jSDocInfoBuilder1.recordOverride();
        boolean boolean33 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean34 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean35 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(strListArray22);
        org.junit.Assert.assertNotNull(strListBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test17116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17116");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isOptionalArg();
        boolean boolean6 = node4.isSwitch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node11.addChildrenToFront(node15);
        boolean boolean17 = node11.isGetterDef();
        boolean boolean18 = node11.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int29 = node28.getSourceOffset();
        com.google.javascript.rhino.Node node30 = node22.useSourceInfoIfMissingFromForTree(node28);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet37);
        com.google.javascript.rhino.Node node40 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(32, node11, node28);
        boolean boolean42 = node41.isExprResult();
        boolean boolean43 = node41.isFunction();
        com.google.javascript.rhino.Node node44 = node4.srcrefTree(node41);
        node41.addSuppression("NUMBER 0.0 [directives: []]");
        node41.setIsSyntheticBlock(false);
        boolean boolean49 = node41.isIf();
        int int50 = node41.getSourceOffset();
        node41.removeProp(43);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(167974, node41);
        boolean boolean54 = node53.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test17117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17117");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node11.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node11);
        typePosition1.setItem(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean33 = node32.isAssignAdd();
        boolean boolean34 = node32.isFromExterns();
        com.google.javascript.rhino.Node node35 = node19.copyInformationFromForTree(node32);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.hasOneChild();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node42 = node41.getNext();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100, node32, node41, 26, 16);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean50 = node49.isVar();
        node49.putBooleanProp(30, false);
        boolean boolean54 = node49.isSwitch();
        boolean boolean55 = node49.isUnscopedQualifiedName();
        boolean boolean56 = node49.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node49.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node49.isGetElem();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int64 = node63.getSourceOffset();
        node63.detachChildren();
        com.google.javascript.rhino.Node node66 = node49.useSourceInfoFromForTree(node63);
        boolean boolean67 = node63.isNumber();
        boolean boolean68 = node63.isFalse();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node63.children();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 4);
        com.google.javascript.rhino.Node node72 = node71.removeFirstChild();
        node71.putIntProp(26, 2);
        com.google.javascript.rhino.Node node76 = node63.copyInformationFrom(node71);
        boolean boolean77 = node71.isReturn();
        node41.addChildrenToBack(node71);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test17118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17118");
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(42, nodeArray10, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(49, nodeArray10, 53, 43);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(176180, nodeArray10, 41, 38);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(37, nodeArray10, 43, 16);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(49, nodeArray10, (int) (short) 100, (int) '#');
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(48, nodeArray10, 100, 30);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(35, nodeArray10, 36, 50);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) '#', nodeArray10, 35, 50);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(147494, nodeArray10, 11, 29);
        org.junit.Assert.assertNotNull(nodeArray10);
    }

    @Test
    public void test17119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17119");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((-1.0d));
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj8 = node6.getProp(43);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        com.google.javascript.rhino.Node node14 = node6.useSourceInfoIfMissingFromForTree(node12);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        com.google.javascript.rhino.Node node24 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.javascript.rhino.Node node46 = node34.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj53 = node51.getProp(43);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int58 = node57.getSourceOffset();
        com.google.javascript.rhino.Node node59 = node51.useSourceInfoIfMissingFromForTree(node57);
        boolean boolean60 = node59.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean65 = node64.isVar();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) ' ', node18, node46, node59, node64, 1, 100);
        node64.setWasEmptyNode(true);
        boolean boolean71 = node64.isQuotedString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node64.children();
        com.google.javascript.rhino.jstype.JSType jSType73 = node64.getJSType();
        int int75 = node64.getIntProp(4095);
        java.lang.String str76 = node64.getQualifiedName();
        com.google.javascript.rhino.Node node77 = node1.clonePropsFrom(node64);
        boolean boolean78 = node77.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeIterable72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test17120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17120");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo20.isImplicitCast();
        jSDocInfo20.addSuppression("hi!");
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo20.getAuthors();
        java.lang.String str28 = jSDocInfo20.getBlockDescription();
        boolean boolean29 = jSDocInfo20.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test17121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17121");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getVersion();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean36 = node34.getBooleanProp(51);
        boolean boolean37 = strSet32.contains((java.lang.Object) 51);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = null;
        boolean boolean41 = jSDocInfoBuilder39.recordThrowType(jSTypeExpression40);
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int52 = strList50.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList81 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList82 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList50, (java.lang.Iterable<java.lang.String>) strList61, (java.lang.Iterable<java.lang.String>) strList72, (java.lang.Iterable<java.lang.String>) strList81);
        boolean boolean83 = jSDocInfoBuilder39.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        com.google.common.collect.ImmutableList<java.lang.String> strList84 = strList50.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList85 = strList84.asList();
        boolean boolean86 = strSet32.containsAll((java.util.Collection<java.lang.String>) strList85);
        boolean boolean87 = strList85.isEmpty();
        boolean boolean88 = strList85.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strIterableList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test17122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17122");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj15 = node13.getProp(43);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int20 = node19.getSourceOffset();
        com.google.javascript.rhino.Node node21 = node13.useSourceInfoIfMissingFromForTree(node19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean32 = node31.isContinue();
        boolean boolean33 = node31.isOnlyModifiesThisCall();
        boolean boolean34 = node31.isDefaultCase();
        boolean boolean35 = node4.hasChild(node31);
        int int36 = node4.getSourceOffset();
        boolean boolean37 = node4.isNew();
        boolean boolean38 = node4.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(44, node4, 54, (int) (byte) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder42 = node4.getJsDocBuilderForNode();
        fileLevelJsDocBuilder42.append("STRING  43 [source_file: [, hi!, , , hi!, , hi!, ]]\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder42);
    }

    @Test
    public void test17123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17123");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        boolean boolean23 = node16.isThrow();
        boolean boolean24 = node16.isNot();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isVar();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node34 = node28.copyInformationFromForTree(node33);
        java.lang.String str35 = node16.checkTreeEquals(node34);
        com.google.javascript.rhino.Node node36 = null;
        com.google.javascript.rhino.Node node37 = node16.getChildBefore(node36);
        boolean boolean38 = node16.isVarArgs();
        boolean boolean39 = node16.isIn();
        com.google.javascript.rhino.Node node41 = node16.getAncestor(46);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = null;
        node16.setStaticSourceFile(staticSourceFile42);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder45.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = null;
        jSDocInfoBuilder45.markName("hi!", staticSourceFile49, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder45.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj64 = node62.getProp(43);
        boolean boolean65 = node62.isCall();
        int int66 = node62.getSourcePosition();
        java.lang.String str70 = node62.toString(false, true, false);
        boolean boolean71 = node62.isDo();
        boolean boolean72 = node62.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = jSDocInfoBuilder45.build(node62);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = node62.getJSDocInfo();
        boolean boolean75 = node62.isReturn();
        boolean boolean76 = node62.isQualifiedName();
        com.google.javascript.rhino.Node node77 = node16.useSourceInfoIfMissingFromForTree(node62);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(4095, node77);
        com.google.javascript.rhino.Node node79 = node78.cloneTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str35, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 176180 + "'", int66 == 176180);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "STRING " + "'", str70, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSDocInfo73);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node79);
    }

    @Test
    public void test17124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17124");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder8.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder8.isPopulatedWithFileOverview();
        boolean boolean11 = jSDocInfoBuilder8.isPopulated();
        boolean boolean12 = jSDocInfoBuilder8.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = null;
        boolean boolean16 = jSDocInfoBuilder14.recordTypedef(jSTypeExpression15);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.recordNoTypeCheck();
        boolean boolean20 = jSDocInfoBuilder18.isInterfaceRecorded();
        jSDocInfoBuilder18.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean25 = jSDocInfoBuilder18.recordIdGenerator();
        boolean boolean26 = jSDocInfoBuilder18.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.isInterfaceRecorded();
        boolean boolean31 = jSDocInfoBuilder28.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj37 = node35.getProp(43);
        boolean boolean38 = node35.isCall();
        boolean boolean39 = node35.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = new com.google.javascript.rhino.JSTypeExpression(node35, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder42 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray44 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray45 = (java.util.ArrayList<java.lang.String>[]) arrayListArray44;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder46 = strListBuilder42.add((java.util.ArrayList<java.lang.String>[]) arrayListArray44);
        boolean boolean47 = jSTypeExpression41.equals((java.lang.Object) arrayListArray44);
        boolean boolean48 = jSDocInfoBuilder28.recordDefineType(jSTypeExpression41);
        boolean boolean49 = jSDocInfoBuilder18.recordThisType(jSTypeExpression41);
        boolean boolean50 = jSDocInfoBuilder14.recordThisType(jSTypeExpression41);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression41);
        boolean boolean52 = jSDocInfoBuilder8.recordExtendedInterface(jSTypeExpression51);
        boolean boolean53 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression51);
        boolean boolean55 = jSDocInfoBuilder1.recordLends("Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strListBuilder42);
        org.junit.Assert.assertNotNull(arrayListArray44);
        org.junit.Assert.assertNotNull(strListArray45);
        org.junit.Assert.assertNotNull(strListBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test17125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17125");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder6.markName("hi!", staticSourceFile10, (int) (short) 0, (int) (short) 100);
        boolean boolean14 = jSDocInfoBuilder6.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder6.recordExpose();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node19.addChildrenToFront(node23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = jSDocInfoBuilder6.build(node23);
        java.lang.String str26 = jSDocInfo25.getMeaning();
        boolean boolean27 = jSDocInfo25.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getExtendedInterfaces();
        boolean boolean29 = jSDocInfo25.isImplicitCast();
        node3.setJSDocInfo(jSDocInfo25);
        boolean boolean31 = node3.isExprResult();
        boolean boolean32 = node3.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSDocInfo25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test17126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17126");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        com.google.javascript.rhino.Node node11 = node3.getNext();
        com.google.javascript.rhino.Node node12 = node3.getNext();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType19 = node17.getJSType();
        boolean boolean20 = node17.isWith();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node25.addChildrenToFront(node29);
        boolean boolean31 = node25.isGetterDef();
        boolean boolean32 = node25.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj38 = node36.getProp(43);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int43 = node42.getSourceOffset();
        com.google.javascript.rhino.Node node44 = node36.useSourceInfoIfMissingFromForTree(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet51);
        com.google.javascript.rhino.Node node54 = node42.useSourceInfoIfMissingFromForTree(node48);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(32, node25, node42);
        boolean boolean56 = node55.isExprResult();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 0, node17, node55);
        boolean boolean58 = node57.isObjectLit();
        com.google.javascript.rhino.Node node59 = node3.copyInformationFromForTree(node57);
        boolean boolean60 = node3.isSyntheticBlock();
        boolean boolean61 = node3.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(jSType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test17127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17127");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        boolean boolean75 = jSDocInfo42.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 0);
        jSDocInfo42.setAssociatedNode(node77);
        int int79 = jSDocInfo42.getParameterCount();
        java.util.Collection<java.lang.String> strCollection80 = jSDocInfo42.getAuthors();
        boolean boolean81 = jSDocInfo42.hasReturnType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(strCollection80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test17128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17128");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        boolean boolean5 = node3.isWhile();
        java.util.Set<java.lang.String> strSet6 = node3.getDirectives();
        node3.addSuppression("NUMBER 43.0\n");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        double double14 = node12.getDouble();
        boolean boolean15 = node12.isFor();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable16 = node12.getAncestors();
        boolean boolean17 = node3.isEquivalentToTyped(node12);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(ancestorIterable16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test17129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17129");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean14 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object[] objArray24 = strSet21.toArray();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet31);
        java.lang.Object[] objArray34 = strSet31.toArray();
        boolean boolean35 = strSet21.retainAll((java.util.Collection<java.lang.String>) strSet31);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        boolean boolean45 = strSet31.containsAll((java.util.Collection<java.lang.String>) strSet42);
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int56 = strList54.indexOf((java.lang.Object) 'a');
        int int57 = strList54.size();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray61 = strList54.toArray(strArray60);
        boolean boolean62 = strSet31.containsAll((java.util.Collection<java.lang.String>) strList54);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray68 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet69 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet69, strArray68);
        node66.setDirectives((java.util.Set<java.lang.String>) strSet69);
        boolean boolean73 = strSet69.contains((java.lang.Object) 10.0d);
        boolean boolean74 = strSet31.retainAll((java.util.Collection<java.lang.String>) strSet69);
        boolean boolean75 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet69);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test17130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17130");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isGetterDef();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable8 = node3.getAncestors();
        node3.setWasEmptyNode(true);
        node3.setSourceEncodedPositionForTree(46);
        boolean boolean13 = node3.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ancestorIterable8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test17131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17131");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression24);
        boolean boolean32 = jSDocInfoBuilder1.recordThisType(jSTypeExpression24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object[] objArray42 = strSet39.toArray();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet49);
        java.lang.Object[] objArray52 = strSet49.toArray();
        boolean boolean53 = strSet39.retainAll((java.util.Collection<java.lang.String>) strSet49);
        java.lang.Object[] objArray54 = strSet39.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder56.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        jSDocInfoBuilder56.markName("hi!", staticSourceFile60, (int) (short) 0, (int) (short) 100);
        boolean boolean64 = jSDocInfoBuilder56.recordNoTypeCheck();
        boolean boolean65 = jSDocInfoBuilder56.recordExpose();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node69.addChildrenToFront(node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = jSDocInfoBuilder56.build(node73);
        java.lang.String str76 = jSDocInfo75.getMeaning();
        boolean boolean77 = jSDocInfo75.isExport();
        boolean boolean78 = strSet39.equals((java.lang.Object) jSDocInfo75);
        java.util.stream.Stream<java.lang.String> strStream79 = strSet39.stream();
        boolean boolean80 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet39);
        boolean boolean81 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean82 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean84 = jSDocInfoBuilder1.recordVersion("GETELEM 43");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSDocInfo75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test17132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17132");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object[] objArray16 = strSet13.toArray();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet23);
        java.lang.Object[] objArray26 = strSet23.toArray();
        boolean boolean27 = strSet13.retainAll((java.util.Collection<java.lang.String>) strSet23);
        boolean boolean29 = strSet23.add("JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder31.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        jSDocInfoBuilder31.markName("hi!", staticSourceFile35, (int) (short) 0, (int) (short) 100);
        boolean boolean39 = jSDocInfoBuilder31.recordNoTypeCheck();
        boolean boolean40 = jSDocInfoBuilder31.recordExpose();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node44.addChildrenToFront(node48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = jSDocInfoBuilder31.build(node48);
        boolean boolean51 = jSDocInfo50.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo50.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility53 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo50.setVisibility(visibility53);
        boolean boolean55 = jSDocInfo50.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo50.getImplementedInterfaces();
        java.lang.Class<?> wildcardClass57 = jSDocInfo50.getClass();
        boolean boolean58 = strSet23.contains((java.lang.Object) wildcardClass57);
        java.lang.Object[] objArray59 = strSet23.toArray();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node63.setDirectives((java.util.Set<java.lang.String>) strSet66);
        java.lang.Object[] objArray69 = strSet66.toArray();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        node73.setDirectives((java.util.Set<java.lang.String>) strSet76);
        java.lang.Object[] objArray79 = strSet76.toArray();
        boolean boolean80 = strSet66.retainAll((java.util.Collection<java.lang.String>) strSet76);
        boolean boolean82 = strSet76.add("JSDocInfo");
        boolean boolean83 = strSet23.removeAll((java.util.Collection<java.lang.String>) strSet76);
        boolean boolean84 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet23);
        boolean boolean85 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean86 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSDocInfo50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertTrue("'" + visibility53 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility53.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[, JSDocInfo]");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test17133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17133");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        boolean boolean51 = jSDocInfo42.hasType();
        boolean boolean52 = jSDocInfo42.isImplicitCast();
        java.lang.String str53 = jSDocInfo42.toString();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder55 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder55.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile59 = null;
        jSDocInfoBuilder55.markName("hi!", staticSourceFile59, (int) (short) 0, (int) (short) 100);
        boolean boolean63 = jSDocInfoBuilder55.recordNoTypeCheck();
        boolean boolean64 = jSDocInfoBuilder55.recordExpose();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node68.addChildrenToFront(node72);
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = jSDocInfoBuilder55.build(node72);
        boolean boolean75 = jSDocInfo74.isExport();
        boolean boolean76 = jSDocInfo74.isNoCompile();
        java.lang.String str78 = jSDocInfo74.getDescriptionForParameter("NUMBER 0.0 43");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList79 = jSDocInfo74.getImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility80 = jSDocInfo74.getVisibility();
        jSDocInfo42.setVisibility(visibility80);
        boolean boolean82 = jSDocInfo42.isNoSideEffects();
        boolean boolean83 = jSDocInfo42.hasFileOverview();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "JSDocInfo" + "'", str53, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(jSDocInfo74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jSTypeExpressionList79);
        org.junit.Assert.assertTrue("'" + visibility80 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility80.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test17134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17134");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean3 = jSDocInfoBuilder1.recordOverride();
        boolean boolean4 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean5 = jSDocInfoBuilder1.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder7.recordThisType(jSTypeExpression9);
        jSDocInfoBuilder7.markText("[, hi!, , , hi!, , hi!, ]", 44, 49, 176129, 10);
        boolean boolean17 = jSDocInfoBuilder7.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder19.recordParameter("", jSTypeExpression22);
        boolean boolean24 = jSDocInfoBuilder19.recordExterns();
        boolean boolean25 = jSDocInfoBuilder19.recordPreserveTry();
        boolean boolean26 = jSDocInfoBuilder19.recordNoCompile();
        boolean boolean28 = jSDocInfoBuilder19.recordLends("");
        boolean boolean31 = jSDocInfoBuilder19.recordParameterDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder33.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder33.recordParameter("", jSTypeExpression36);
        boolean boolean38 = jSDocInfoBuilder33.recordExterns();
        boolean boolean39 = jSDocInfoBuilder33.recordPreserveTry();
        boolean boolean40 = jSDocInfoBuilder33.recordNoCompile();
        boolean boolean42 = jSDocInfoBuilder33.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.recordJavaDispatch();
        jSDocInfoBuilder44.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder53 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder53.recordJavaDispatch();
        boolean boolean55 = jSDocInfoBuilder53.recordNoCompile();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj62 = node60.getProp(43);
        boolean boolean63 = node60.isCall();
        boolean boolean64 = node60.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression66 = new com.google.javascript.rhino.JSTypeExpression(node60, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder67 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray69 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray70 = (java.util.ArrayList<java.lang.String>[]) arrayListArray69;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder71 = strListBuilder67.add((java.util.ArrayList<java.lang.String>[]) arrayListArray69);
        boolean boolean72 = jSTypeExpression66.equals((java.lang.Object) arrayListArray69);
        boolean boolean73 = jSDocInfoBuilder53.recordParameter("", jSTypeExpression66);
        boolean boolean74 = jSDocInfoBuilder44.recordThrowType(jSTypeExpression66);
        boolean boolean75 = jSDocInfoBuilder33.recordBaseType(jSTypeExpression66);
        boolean boolean76 = jSDocInfoBuilder19.recordImplementedInterface(jSTypeExpression66);
        boolean boolean77 = jSDocInfoBuilder7.recordType(jSTypeExpression66);
        boolean boolean78 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression66);
        boolean boolean79 = jSDocInfoBuilder1.shouldParseDocumentation();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile81 = null;
        jSDocInfoBuilder1.markName("STRING  43 [jsdoc_info: JSDocInfo]\n", staticSourceFile81, 54, (int) (byte) 10);
        boolean boolean87 = jSDocInfoBuilder1.recordParameterDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 49.0\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 49.0\n", "STRING  43");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = null;
        jSDocInfoBuilder1.markName("TYPEOF", staticSourceFile89, 0, 54);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strListBuilder67);
        org.junit.Assert.assertNotNull(arrayListArray69);
        org.junit.Assert.assertNotNull(strListArray70);
        org.junit.Assert.assertNotNull(strListBuilder71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test17135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17135");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean9 = typePosition8.hasBrackets();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        typePosition8.setItem(node26);
        int int28 = typePosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean35 = typePosition34.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList36 = com.google.common.collect.ImmutableList.of(typePosition29, typePosition30, typePosition31, typePosition32, typePosition33, typePosition34);
        int int37 = typePosition31.getEndLine();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean42 = node41.isNull();
        boolean boolean43 = node41.isSyntheticBlock();
        boolean boolean44 = node41.hasMoreThanOneChild();
        typePosition31.setItem(node41);
        boolean boolean46 = typePosition31.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition4, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition8, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition31);
        int int48 = typePosition31.getStartLine();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        node52.addSuppression("[, hi!, , , hi!, , hi!, ]");
        typePosition31.setItem(node52);
        com.google.javascript.rhino.Node node57 = node52.removeChildren();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int68 = node67.getSourceOffset();
        com.google.javascript.rhino.Node node69 = node61.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray75 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet76 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet76, strArray75);
        node73.setDirectives((java.util.Set<java.lang.String>) strSet76);
        com.google.javascript.rhino.Node node79 = node67.useSourceInfoIfMissingFromForTree(node73);
        boolean boolean80 = node79.isContinue();
        boolean boolean81 = node79.isVoid();
        double double82 = node79.getDouble();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable83 = node79.siblings();
        boolean boolean84 = node79.isVar();
        boolean boolean85 = node79.isWhile();
        java.lang.String str86 = node79.toStringTree();
        boolean boolean87 = node79.isQualifiedName();
        node52.addChildToFront(node79);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(typePositionList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d);
        org.junit.Assert.assertNotNull(nodeIterable83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "NUMBER 0.0 43\n" + "'", str86, "NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test17136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17136");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        boolean boolean63 = strList19.containsAll((java.util.Collection<java.lang.String>) strList62);
        java.lang.Object[] objArray64 = strList62.toArray();
        java.util.Iterator<java.lang.String> strItor65 = strList62.iterator();
        java.lang.String str66 = strList62.toString();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags68 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags68.clearAllFlags();
        boolean boolean70 = strList62.equals((java.lang.Object) sideEffectFlags68);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor72 = strList62.listIterator((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (10) must not be greater than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strItor65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str66, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test17137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17137");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        java.lang.String str25 = jSDocInfo20.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getReturnType();
        boolean boolean28 = jSDocInfo20.isInterface();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17138");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo42.getReturnType();
        java.lang.String str50 = jSDocInfo42.getVersion();
        java.lang.String str51 = jSDocInfo42.getDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection52 = jSDocInfo42.getTypeNodes();
        boolean boolean53 = jSDocInfo42.isNoTypeCheck();
        boolean boolean54 = jSDocInfo42.isHidden();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(nodeCollection52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test17139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17139");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        boolean boolean6 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordReturnDescription("GETELEM  43\n");
        boolean boolean9 = jSDocInfoBuilder1.recordExport();
        jSDocInfoBuilder1.recordOriginalCommentString("NUMBER 0.0");
        boolean boolean12 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean13 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test17140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17140");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nSTRING NUMBER 0.0 43 43\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: STRING NUMBER 0.0 43 43\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test17141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17141");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isVar();
        boolean boolean59 = strList49.contains((java.lang.Object) node57);
        boolean boolean60 = node57.isThis();
        java.util.Set<java.lang.String> strSet61 = node57.getDirectives();
        boolean boolean62 = node57.isUnscopedQualifiedName();
        boolean boolean63 = node57.isDec();
        int int64 = node57.getLineno();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable65 = node57.children();
        // The following exception was thrown during execution in test generation
        try {
            int int67 = node57.getExistingIntProp(54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 54");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 43 + "'", int64 == 43);
        org.junit.Assert.assertNotNull(nodeIterable65);
    }

    @Test
    public void test17142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17142");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getReturnType();
        boolean boolean28 = jSDocInfo20.isNoTypeCheck();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo20.getParameterNames();
        java.lang.String str30 = jSDocInfo20.getMeaning();
        java.util.Collection<java.lang.String> strCollection31 = jSDocInfo20.getReferences();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(strCollection31);
    }

    @Test
    public void test17143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17143");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        double double5 = node3.getDouble();
        boolean boolean6 = node3.isInc();
        boolean boolean7 = node3.isSetterDef();
        node3.setOptionalArg(false);
        boolean boolean10 = node3.isAssignAdd();
        node3.putIntProp(10, 31);
        int int14 = node3.getSideEffectFlags();
        boolean boolean15 = node3.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test17144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17144");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean16 = typePosition15.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList17 = com.google.common.collect.ImmutableList.of(typePosition10, typePosition11, typePosition12, typePosition13, typePosition14, typePosition15);
        int int18 = typePosition12.getEndLine();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean23 = node22.isNull();
        boolean boolean24 = node22.isSyntheticBlock();
        boolean boolean25 = node22.hasMoreThanOneChild();
        typePosition12.setItem(node22);
        com.google.javascript.rhino.Node node27 = node22.getParent();
        boolean boolean28 = node22.isLabelName();
        boolean boolean29 = node22.isNE();
        jSDocInfoBuilder1.markTypeNode(node22, 40, 100, (-1), 38, false);
        boolean boolean36 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean37 = jSDocInfoBuilder1.isInterfaceRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(typePositionList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test17145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17145");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        boolean boolean6 = jSDocInfoBuilder1.recordReturnDescription("STRING ");
        boolean boolean7 = jSDocInfoBuilder1.recordExterns();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        boolean boolean10 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet17);
        java.lang.Object[] objArray20 = strSet17.toArray();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        java.lang.Object[] objArray30 = strSet27.toArray();
        boolean boolean31 = strSet17.retainAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean32 = strSet27.isEmpty();
        int int33 = strSet27.size();
        java.lang.Object[] objArray34 = strSet27.toArray();
        boolean boolean35 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet27);
        boolean boolean37 = strSet27.add("STRING  43");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition39 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition40 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition41 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition42 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition43 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean44 = typePosition43.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList45 = com.google.common.collect.ImmutableList.of(typePosition38, typePosition39, typePosition40, typePosition41, typePosition42, typePosition43);
        int int46 = typePosition40.getEndLine();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean51 = node50.isNull();
        boolean boolean52 = node50.isSyntheticBlock();
        boolean boolean53 = node50.hasMoreThanOneChild();
        typePosition40.setItem(node50);
        com.google.javascript.rhino.Node node55 = node50.getParent();
        boolean boolean56 = node50.isLabelName();
        com.google.javascript.rhino.Node node57 = node50.getLastSibling();
        boolean boolean58 = node57.isWith();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        node62.putBooleanProp(30, false);
        boolean boolean67 = node62.isSwitch();
        boolean boolean68 = node62.isIn();
        boolean boolean69 = node62.isIn();
        node62.setSourceFileForTesting("NUMBER 0.0");
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable72 = node62.getAncestors();
        boolean boolean73 = node62.isContinue();
        node57.addChildrenToBack(node62);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        boolean boolean77 = node62.isEquivalentToTyped(node76);
        java.lang.String str78 = node62.toString();
        boolean boolean79 = strSet27.equals((java.lang.Object) node62);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(typePositionList45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(ancestorIterable72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "STRING  43 [source_file: NUMBER 0.0]" + "'", str78, "STRING  43 [source_file: NUMBER 0.0]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test17146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17146");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        boolean boolean10 = node7.isHook();
        boolean boolean11 = node7.isUnscopedQualifiedName();
        boolean boolean12 = node7.isSyntheticBlock();
        java.lang.String str16 = node7.toString(true, false, false);
        java.lang.String str17 = node7.getQualifiedName();
        com.google.javascript.rhino.Node node18 = node7.cloneNode();
        node18.setQuotedString();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean24 = node23.isVar();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder26.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder26.markName("hi!", staticSourceFile30, (int) (short) 0, (int) (short) 100);
        boolean boolean34 = jSDocInfoBuilder26.recordNoTypeCheck();
        boolean boolean35 = jSDocInfoBuilder26.recordExpose();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node39.addChildrenToFront(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = jSDocInfoBuilder26.build(node43);
        java.lang.String str46 = jSDocInfo45.getMeaning();
        boolean boolean47 = jSDocInfo45.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo45.getExtendedInterfaces();
        boolean boolean49 = jSDocInfo45.isImplicitCast();
        node23.setJSDocInfo(jSDocInfo45);
        boolean boolean51 = node23.isLabel();
        com.google.javascript.rhino.Node node52 = node18.srcrefTree(node23);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "STRING  43" + "'", str16, "STRING  43");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSDocInfo45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test17147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17147");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        java.lang.String str6 = node5.toStringTree();
        boolean boolean7 = node5.isUnscopedQualifiedName();
        boolean boolean9 = node5.getBooleanProp(176129);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(147494, node5);
        boolean boolean11 = node5.isQualifiedName();
        boolean boolean12 = node5.isNull();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR  54\n" + "'", str6, "OR  54\n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17148");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        boolean boolean5 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test17149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17149");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean55 = jSDocInfoBuilder1.hasParameter("hi!");
        boolean boolean56 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean58 = jSDocInfoBuilder1.recordDeprecationReason("ERROR  43\n");
        boolean boolean59 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean61 = jSDocInfoBuilder1.recordLends("NUMBER 18.0");
        boolean boolean62 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test17150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17150");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.stream.Stream<java.lang.String> strStream9 = strList8.stream();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        boolean boolean30 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet26);
        java.lang.Object[] objArray31 = strSet16.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        jSDocInfoBuilder33.markName("hi!", staticSourceFile37, (int) (short) 0, (int) (short) 100);
        boolean boolean41 = jSDocInfoBuilder33.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder33.recordExpose();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.addChildrenToFront(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = jSDocInfoBuilder33.build(node50);
        java.lang.String str53 = jSDocInfo52.getMeaning();
        boolean boolean54 = jSDocInfo52.isExport();
        boolean boolean55 = strSet16.equals((java.lang.Object) jSDocInfo52);
        boolean boolean56 = jSDocInfo52.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo52.getType();
        boolean boolean58 = jSDocInfo52.containsDeclaration();
        boolean boolean59 = strList8.contains((java.lang.Object) jSDocInfo52);
        java.lang.Object[] objArray60 = strList8.toArray();
        java.util.ListIterator<java.lang.String> strItor61 = strList8.listIterator();
        java.lang.Object obj62 = null;
        boolean boolean63 = strList8.equals(obj62);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSDocInfo52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test17151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17151");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean7 = jSDocInfoBuilder1.recordVisibility(visibility6);
        boolean boolean8 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordVersion("Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n");
        boolean boolean11 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test17152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17152");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isExterns();
        boolean boolean26 = jSDocInfo20.isHidden();
        boolean boolean27 = jSDocInfo20.isNoAlias();
        boolean boolean29 = jSDocInfo20.hasParameter("TYPEOF");
        boolean boolean30 = jSDocInfo20.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test17153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17153");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo14.getTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection20 = jSDocInfo14.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertNotNull(nodeCollection20);
    }

    @Test
    public void test17154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17154");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        java.util.Spliterator<java.lang.String> strSpliterator24 = strList23.spliterator();
        boolean boolean26 = strList23.equals((java.lang.Object) 100.0d);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor27 = strList23.iterator();
        java.lang.Object[] objArray28 = strList23.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor29 = strList23.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = strList23.add("ERROR  43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strSpliterator24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(strItor29);
    }

    @Test
    public void test17155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17155");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        boolean boolean47 = strSet6.contains((java.lang.Object) namePosition46);
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor57 = strList56.iterator();
        boolean boolean58 = strSet6.addAll((java.util.Collection<java.lang.String>) strList56);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean62 = jSDocInfoBuilder60.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = null;
        jSDocInfoBuilder60.markName("hi!", staticSourceFile64, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = null;
        boolean boolean69 = jSDocInfoBuilder60.recordEnumParameterType(jSTypeExpression68);
        boolean boolean70 = jSDocInfoBuilder60.recordConstructor();
        boolean boolean71 = strList56.equals((java.lang.Object) boolean70);
        java.lang.Object[] objArray72 = strList56.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = strList56.reverse();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor75 = strList73.listIterator(46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (46) must not be greater than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test17156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17156");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        java.lang.String str46 = jSDocInfo42.getBlockDescription();
        boolean boolean47 = jSDocInfo42.hasReturnType();
        boolean boolean48 = jSDocInfo42.shouldPreserveTry();
        java.lang.String str49 = jSDocInfo42.getMeaning();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
    }

    @Test
    public void test17157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17157");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        boolean boolean24 = jSDocInfo20.hasReturnType();
        boolean boolean25 = jSDocInfo20.hasType();
        boolean boolean26 = jSDocInfo20.isOverride();
        java.lang.String str27 = jSDocInfo20.getBlockDescription();
        boolean boolean28 = jSDocInfo20.isJavaDispatch();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo20.getTemplateTypeNames();
        java.lang.Object[] objArray30 = strList29.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
    }

    @Test
    public void test17158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17158");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder7.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.isInterfaceRecorded();
        boolean boolean15 = jSDocInfoBuilder12.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        boolean boolean22 = node19.isCall();
        boolean boolean23 = node19.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = new com.google.javascript.rhino.JSTypeExpression(node19, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder26 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray28 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray29 = (java.util.ArrayList<java.lang.String>[]) arrayListArray28;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder30 = strListBuilder26.add((java.util.ArrayList<java.lang.String>[]) arrayListArray28);
        boolean boolean31 = jSTypeExpression25.equals((java.lang.Object) arrayListArray28);
        boolean boolean32 = jSDocInfoBuilder12.recordDefineType(jSTypeExpression25);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int34 = namePosition33.getEndLine();
        int int35 = namePosition33.getStartLine();
        com.google.javascript.rhino.Node node36 = namePosition33.getItem();
        boolean boolean37 = jSTypeExpression25.equals((java.lang.Object) node36);
        boolean boolean38 = jSDocInfoBuilder7.recordTypedef(jSTypeExpression25);
        boolean boolean39 = jSDocInfoBuilder1.recordParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", jSTypeExpression25);
        boolean boolean41 = jSDocInfoBuilder1.recordVersion("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean42 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(0, "[]");
        jSDocInfoBuilder1.markTypeNode(node45, (-2147483596), 176129, (int) (byte) 1, 45, true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strListBuilder26);
        org.junit.Assert.assertNotNull(arrayListArray28);
        org.junit.Assert.assertNotNull(strListArray29);
        org.junit.Assert.assertNotNull(strListBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test17159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17159");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression24);
        boolean boolean32 = jSDocInfoBuilder1.recordThisType(jSTypeExpression24);
        boolean boolean33 = jSTypeExpression24.isVarArgs();
        com.google.javascript.rhino.Node node34 = jSTypeExpression24.getRoot();
        java.lang.String str35 = node34.getString();
        boolean boolean36 = node34.isThis();
        boolean boolean37 = node34.isThis();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test17160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17160");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node9 = node3.copyInformationFromForTree(node8);
        boolean boolean10 = node9.isVarArgs();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node32.getJsDocBuilderForNode();
        boolean boolean34 = node32.isAnd();
        node9.addChildToBack(node32);
        node9.putIntProp(46, 36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node9.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
    }

    @Test
    public void test17161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17161");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo20.getVisibility();
        java.lang.String str26 = jSDocInfo20.getDescriptionForParameter("STRING ");
        boolean boolean27 = jSDocInfo20.isNoShadow();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection28 = jSDocInfo20.getMarkers();
        java.lang.String str29 = jSDocInfo20.getBlockDescription();
        java.lang.String str30 = jSDocInfo20.getSourceName();
        jSDocInfo20.setLicense("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(markerCollection28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test17162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17162");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getExtendedInterfaces();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isVar();
        node28.putBooleanProp(30, false);
        boolean boolean33 = node28.isSwitch();
        boolean boolean34 = node28.isIn();
        boolean boolean35 = node28.isFromExterns();
        com.google.javascript.rhino.Node node36 = node28.cloneNode();
        jSDocInfo20.setAssociatedNode(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet44);
        java.lang.Object[] objArray47 = strSet44.toArray();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet54);
        java.lang.Object[] objArray57 = strSet54.toArray();
        boolean boolean58 = strSet44.retainAll((java.util.Collection<java.lang.String>) strSet54);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node62.setDirectives((java.util.Set<java.lang.String>) strSet65);
        java.lang.Object[] objArray68 = strSet65.toArray();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet75);
        java.lang.Object[] objArray78 = strSet75.toArray();
        boolean boolean79 = strSet65.retainAll((java.util.Collection<java.lang.String>) strSet75);
        boolean boolean81 = strSet75.add("JSDocInfo");
        boolean boolean82 = strSet44.addAll((java.util.Collection<java.lang.String>) strSet75);
        java.util.Iterator<java.lang.String> strItor83 = strSet44.iterator();
        node36.setDirectives((java.util.Set<java.lang.String>) strSet44);
        int int85 = strSet44.size();
        java.lang.Object[] objArray86 = strSet44.toArray();
        java.util.stream.Stream<java.lang.String> strStream87 = strSet44.stream();
        strSet44.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strItor83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[, JSDocInfo]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[, JSDocInfo]");
        org.junit.Assert.assertNotNull(strStream87);
    }

    @Test
    public void test17163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17163");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        boolean boolean10 = node3.isFromExterns();
        boolean boolean11 = node3.isSyntheticBlock();
        boolean boolean12 = node3.isQuotedString();
        boolean boolean13 = node3.isIf();
        boolean boolean14 = node3.isVar();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(42, nodeArray19, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(49, nodeArray19, 53, 43);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(176180, nodeArray19, 41, 38);
        node28.setIsSyntheticBlock(false);
        node28.setIsSyntheticBlock(false);
        node28.setLength((int) ' ');
        com.google.javascript.rhino.Node node35 = node3.useSourceInfoFrom(node28);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder15);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertNotNull(node35);
    }

    @Test
    public void test17164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17164");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isAssignAdd();
        boolean boolean19 = node17.isFromExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node17);
        boolean boolean21 = jSDocInfo20.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo20.getExtendedInterfaces();
        java.lang.String str23 = jSDocInfo20.getLicense();
        jSDocInfo20.setLicense("ERROR  43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test17165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17165");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node12 = node9.cloneNode();
        node9.setSourceFileForTesting("[]");
        boolean boolean15 = node9.isInc();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test17166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17166");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test17167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17167");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.InputId inputId22 = null;
        node15.setInputId(inputId22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.javascript.rhino.Node node46 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node62.setDirectives((java.util.Set<java.lang.String>) strSet65);
        com.google.javascript.rhino.Node node68 = node56.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj75 = node73.getProp(43);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int80 = node79.getSourceOffset();
        com.google.javascript.rhino.Node node81 = node73.useSourceInfoIfMissingFromForTree(node79);
        boolean boolean82 = node81.isAssignAdd();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean87 = node86.isVar();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) ' ', node40, node68, node81, node86, 1, 100);
        node86.setWasEmptyNode(true);
        boolean boolean93 = node86.isQuotedString();
        boolean boolean95 = node86.getBooleanProp((int) (byte) 0);
        boolean boolean96 = node86.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node97 = node15.copyInformationFromForTree(node86);
        node86.setCharno(4);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test17168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17168");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder2 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder2.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        boolean boolean8 = jSDocInfoBuilder5.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        boolean boolean16 = node12.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node12, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray22 = (java.util.ArrayList<java.lang.String>[]) arrayListArray21;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder23 = strListBuilder19.add((java.util.ArrayList<java.lang.String>[]) arrayListArray21);
        boolean boolean24 = jSTypeExpression18.equals((java.lang.Object) arrayListArray21);
        boolean boolean25 = jSDocInfoBuilder5.recordDefineType(jSTypeExpression18);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int27 = namePosition26.getEndLine();
        int int28 = namePosition26.getStartLine();
        com.google.javascript.rhino.Node node29 = namePosition26.getItem();
        boolean boolean30 = jSTypeExpression18.equals((java.lang.Object) node29);
        boolean boolean31 = jSDocInfoBuilder2.recordExtendedInterface(jSTypeExpression18);
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int54 = strList52.indexOf((java.lang.Object) 'a');
        int int55 = strList52.size();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray59 = strList52.toArray(strArray58);
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("[, hi!, , , hi!, , hi!, ]", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "STRING ", "NUMBER 12.0\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "NUMBER 0.0 43 [directives: []]\n", "NUMBER 0.0", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "hi!", "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", strArray58);
        boolean boolean61 = jSTypeExpression18.equals((java.lang.Object) "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        com.google.javascript.rhino.Node node62 = jSTypeExpression18.getRoot();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node62.children();
        com.google.javascript.rhino.Node node64 = node62.cloneNode();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) '#', node62, 51, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(strListArray22);
        org.junit.Assert.assertNotNull(strListBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test17169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17169");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 176180);
        node1.setOptionalArg(true);
        com.google.javascript.rhino.jstype.JSType jSType4 = node1.getJSType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(jSType4);
    }

    @Test
    public void test17170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17170");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean7 = node6.isNull();
        boolean boolean8 = node6.isSyntheticBlock();
        namePosition0.setItem(node6);
        int int10 = namePosition0.getPositionOnStartLine();
        int int11 = namePosition0.getStartLine();
        int int12 = namePosition0.getPositionOnStartLine();
        int int13 = namePosition0.getEndLine();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        com.google.javascript.rhino.Node node35 = node23.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean36 = node35.isLabel();
        node35.removeProp(41);
        node35.setVarArgs(false);
        namePosition0.setItem(node35);
        boolean boolean42 = node35.isSyntheticBlock();
        boolean boolean43 = node35.isIf();
        // The following exception was thrown during execution in test generation
        try {
            node35.setString("Node tree inequality:\nTree1:\nSTRING  43 [quoted: 1]\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING  43 [quoted: 1]\n\n\nSubtree2: STRING hi!\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 0.0 43 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test17171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17171");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        boolean boolean27 = node24.isCall();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node24, "STRING ");
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        jSDocInfoBuilder33.markName("hi!", staticSourceFile37, (int) (short) 0, (int) (short) 100);
        boolean boolean41 = jSDocInfoBuilder33.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder33.recordExpose();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.addChildrenToFront(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = jSDocInfoBuilder33.build(node50);
        boolean boolean53 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node54 = node50.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = jSDocInfoBuilder1.build(node54);
        boolean boolean57 = jSDocInfoBuilder1.recordFileOverview("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        boolean boolean58 = jSDocInfoBuilder1.shouldParseDocumentation();
        jSDocInfoBuilder1.markName("STRING ", 52, 4);
        boolean boolean63 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test17172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17172");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable17 = node12.getAncestors();
        boolean boolean18 = node12.isVoid();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(ancestorIterable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17173");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        boolean boolean49 = node10.isVar();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 35);
        com.google.javascript.rhino.Node node52 = node10.useSourceInfoFromForTree(node51);
        com.google.javascript.rhino.jstype.JSType jSType53 = node52.getJSType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(jSType53);
    }

    @Test
    public void test17174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17174");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean13 = node12.isIf();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(49, node12, 0, 100);
        com.google.javascript.rhino.Node node17 = node16.getLastChild();
        boolean boolean18 = node17.isSetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17175");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        boolean boolean11 = node8.isCall();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node8, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder15 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray17 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray18 = (java.util.ArrayList<java.lang.String>[]) arrayListArray17;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = strListBuilder15.add((java.util.ArrayList<java.lang.String>[]) arrayListArray17);
        boolean boolean20 = jSTypeExpression14.equals((java.lang.Object) arrayListArray17);
        boolean boolean21 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.isInterfaceRecorded();
        boolean boolean26 = jSDocInfoBuilder23.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        boolean boolean33 = node30.isCall();
        boolean boolean34 = node30.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node30, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder37 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray39 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray40 = (java.util.ArrayList<java.lang.String>[]) arrayListArray39;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder41 = strListBuilder37.add((java.util.ArrayList<java.lang.String>[]) arrayListArray39);
        boolean boolean42 = jSTypeExpression36.equals((java.lang.Object) arrayListArray39);
        boolean boolean43 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression36);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition44 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int45 = namePosition44.getEndLine();
        int int46 = namePosition44.getStartLine();
        com.google.javascript.rhino.Node node47 = namePosition44.getItem();
        boolean boolean48 = jSTypeExpression36.equals((java.lang.Object) node47);
        boolean boolean49 = jSTypeExpression36.isOptionalArg();
        boolean boolean50 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression36);
        boolean boolean51 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean52 = jSDocInfoBuilder1.recordInterface();
        boolean boolean53 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean54 = jSDocInfoBuilder1.recordOverride();
        boolean boolean55 = jSDocInfoBuilder1.recordExport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strListBuilder15);
        org.junit.Assert.assertNotNull(arrayListArray17);
        org.junit.Assert.assertNotNull(strListArray18);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strListBuilder37);
        org.junit.Assert.assertNotNull(arrayListArray39);
        org.junit.Assert.assertNotNull(strListArray40);
        org.junit.Assert.assertNotNull(strListBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test17176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17176");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj50 = node48.getProp(43);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int55 = node54.getSourceOffset();
        com.google.javascript.rhino.Node node56 = node48.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray62 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        node60.setDirectives((java.util.Set<java.lang.String>) strSet63);
        com.google.javascript.rhino.Node node66 = node54.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean67 = node66.isContinue();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj73 = node71.getProp(43);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int78 = node77.getSourceOffset();
        com.google.javascript.rhino.Node node79 = node71.useSourceInfoIfMissingFromForTree(node77);
        boolean boolean80 = node79.isAssignAdd();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) ' ', node38, node66, node79, node84, 1, 100);
        node84.setWasEmptyNode(true);
        boolean boolean91 = node84.isQuotedString();
        boolean boolean92 = node84.isScript();
        com.google.javascript.rhino.Node node93 = node15.srcref(node84);
        boolean boolean94 = node15.isUnscopedQualifiedName();
        boolean boolean95 = node15.isNull();
        boolean boolean96 = node15.isString();
        node15.setCharno((int) (byte) 0);
        boolean boolean99 = node15.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test17177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17177");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getVersion();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean36 = node34.getBooleanProp(51);
        boolean boolean37 = strSet32.contains((java.lang.Object) 51);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = null;
        boolean boolean41 = jSDocInfoBuilder39.recordThrowType(jSTypeExpression40);
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int52 = strList50.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList81 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList82 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList50, (java.lang.Iterable<java.lang.String>) strList61, (java.lang.Iterable<java.lang.String>) strList72, (java.lang.Iterable<java.lang.String>) strList81);
        boolean boolean83 = jSDocInfoBuilder39.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        com.google.common.collect.ImmutableList<java.lang.String> strList84 = strList50.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList85 = strList84.asList();
        boolean boolean86 = strSet32.containsAll((java.util.Collection<java.lang.String>) strList85);
        boolean boolean87 = strList85.isEmpty();
        int int88 = strList85.size();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String> strList91 = strList85.subList(30, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (30) must not be greater than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strIterableList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 8 + "'", int88 == 8);
    }

    @Test
    public void test17178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17178");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean10 = node3.getBooleanProp(8);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean33 = node32.isContinue();
        boolean boolean34 = node32.isVoid();
        double double35 = node32.getDouble();
        java.lang.String str36 = node3.checkTreeEquals(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node3.children();
        java.util.Set<java.lang.String> strSet38 = node3.getDirectives();
        boolean boolean39 = node3.isNull();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean43 = jSDocInfoBuilder41.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        jSDocInfoBuilder41.markName("hi!", staticSourceFile45, (int) (short) 0, (int) (short) 100);
        boolean boolean49 = jSDocInfoBuilder41.recordNoTypeCheck();
        boolean boolean50 = jSDocInfoBuilder41.recordExpose();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node54.addChildrenToFront(node58);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = jSDocInfoBuilder41.build(node58);
        boolean boolean61 = jSDocInfo60.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo60.getTypedefType();
        java.util.Collection<java.lang.String> strCollection63 = jSDocInfo60.getAuthors();
        boolean boolean64 = jSDocInfo60.hasReturnType();
        boolean boolean65 = jSDocInfo60.hasType();
        boolean boolean66 = jSDocInfo60.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList67 = jSDocInfo60.getThrownTypes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = jSDocInfo60.getVisibility();
        node3.setJSDocInfo(jSDocInfo60);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str36, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(jSDocInfo60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertNull(strCollection63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList67);
        org.junit.Assert.assertTrue("'" + visibility68 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility68.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test17179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17179");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isHidden();
        java.lang.String str16 = jSDocInfo14.getDescription();
        boolean boolean17 = jSDocInfo14.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo14.getThrownTypes();
        java.lang.String str20 = jSDocInfo14.getDescriptionForParameter("NUMBER 0.0 43 [directives: []]\n");
        java.lang.String str21 = jSDocInfo14.getMeaning();
        boolean boolean22 = jSDocInfo14.isImplicitCast();
        boolean boolean23 = jSDocInfo14.isOverride();
        java.lang.String str24 = jSDocInfo14.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test17180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17180");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("");
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean26 = strList25.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = strList25.reverse();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = strList25.remove((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test17181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17181");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        boolean boolean9 = node3.isParamList();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        boolean boolean27 = node13.isOr();
        int int29 = node13.getIntProp(53);
        com.google.javascript.rhino.Node node30 = node13.cloneNode();
        boolean boolean31 = node30.wasEmptyNode();
        boolean boolean32 = node3.isEquivalentTo(node30);
        boolean boolean33 = node30.isNew();
        boolean boolean34 = node30.isSwitch();
        com.google.javascript.rhino.Node node35 = node30.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test17182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17182");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(42, nodeArray3, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(39, nodeArray3, (int) '4', 32);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(37, nodeArray3);
        boolean boolean11 = node10.isVar();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test17183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17183");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder7.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.isInterfaceRecorded();
        boolean boolean15 = jSDocInfoBuilder12.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        boolean boolean22 = node19.isCall();
        boolean boolean23 = node19.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = new com.google.javascript.rhino.JSTypeExpression(node19, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder26 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray28 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray29 = (java.util.ArrayList<java.lang.String>[]) arrayListArray28;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder30 = strListBuilder26.add((java.util.ArrayList<java.lang.String>[]) arrayListArray28);
        boolean boolean31 = jSTypeExpression25.equals((java.lang.Object) arrayListArray28);
        boolean boolean32 = jSDocInfoBuilder12.recordDefineType(jSTypeExpression25);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int34 = namePosition33.getEndLine();
        int int35 = namePosition33.getStartLine();
        com.google.javascript.rhino.Node node36 = namePosition33.getItem();
        boolean boolean37 = jSTypeExpression25.equals((java.lang.Object) node36);
        boolean boolean38 = jSDocInfoBuilder7.recordTypedef(jSTypeExpression25);
        boolean boolean39 = jSDocInfoBuilder1.recordParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", jSTypeExpression25);
        boolean boolean40 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean41 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.setIsSyntheticBlock(true);
        boolean boolean49 = node46.isReturn();
        boolean boolean50 = node46.isCatch();
        boolean boolean51 = node46.isStringKey();
        boolean boolean52 = node46.isBlock();
        boolean boolean53 = node46.isBlock();
        node46.setVarArgs(false);
        jSDocInfoBuilder1.markTypeNode(node46, (int) (byte) 100, 38, 46, (int) (byte) 100, false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strListBuilder26);
        org.junit.Assert.assertNotNull(arrayListArray28);
        org.junit.Assert.assertNotNull(strListArray29);
        org.junit.Assert.assertNotNull(strListBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test17184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17184");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        boolean boolean13 = node3.isWith();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node3.isEquivalentTo(node17);
        boolean boolean25 = node17.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test17185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17185");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder19.recordParameter("hi!", jSTypeExpression22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean25 = jSDocInfoBuilder19.recordVisibility(visibility24);
        jSDocInfo14.setVisibility(visibility24);
        java.lang.String str28 = jSDocInfo14.getDescriptionForParameter("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo14.getBaseType();
        java.lang.String str30 = jSDocInfo14.getSourceName();
        java.lang.String str31 = jSDocInfo14.getBlockDescription();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.isInterfaceRecorded();
        boolean boolean37 = jSDocInfoBuilder34.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj43 = node41.getProp(43);
        boolean boolean44 = node41.isCall();
        boolean boolean45 = node41.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node41, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder48 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray50 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray51 = (java.util.ArrayList<java.lang.String>[]) arrayListArray50;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder52 = strListBuilder48.add((java.util.ArrayList<java.lang.String>[]) arrayListArray50);
        boolean boolean53 = jSTypeExpression47.equals((java.lang.Object) arrayListArray50);
        boolean boolean54 = jSDocInfoBuilder34.recordDefineType(jSTypeExpression47);
        com.google.javascript.rhino.Node node55 = jSTypeExpression47.getRoot();
        com.google.javascript.rhino.Node node56 = jSTypeExpression47.getRoot();
        java.lang.String str57 = node56.toStringTree();
        boolean boolean58 = node56.isFor();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition60 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition61 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition62 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition63 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition64 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean65 = typePosition64.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList66 = com.google.common.collect.ImmutableList.of(typePosition59, typePosition60, typePosition61, typePosition62, typePosition63, typePosition64);
        int int67 = typePosition61.getEndLine();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean72 = node71.isNull();
        boolean boolean73 = node71.isSyntheticBlock();
        boolean boolean74 = node71.hasMoreThanOneChild();
        typePosition61.setItem(node71);
        com.google.javascript.rhino.Node node76 = node71.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable77 = node71.children();
        boolean boolean78 = node71.isLabelName();
        java.lang.Object obj80 = node71.getProp(48);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node84.setIsSyntheticBlock(true);
        boolean boolean87 = node84.isReturn();
        boolean boolean88 = node84.isCatch();
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = node84.getJSDocInfo();
        boolean boolean90 = node84.hasMoreThanOneChild();
        boolean boolean91 = node71.isEquivalentToTyped(node84);
        boolean boolean92 = node71.isParamList();
        boolean boolean93 = node71.isContinue();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(0, node56, node71);
        jSDocInfo14.setAssociatedNode(node71);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strListBuilder48);
        org.junit.Assert.assertNotNull(arrayListArray50);
        org.junit.Assert.assertNotNull(strListArray51);
        org.junit.Assert.assertNotNull(strListBuilder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "STRING  43\n" + "'", str57, "STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(typePositionList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(nodeIterable77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSDocInfo89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test17186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17186");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 15);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags3.setReturnsTainted();
        sideEffectFlags3.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test17187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17187");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        boolean boolean10 = node3.isFromExterns();
        boolean boolean11 = node3.isNot();
        boolean boolean12 = node3.isNumber();
        boolean boolean13 = node3.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test17188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17188");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
    }

    @Test
    public void test17189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17189");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node3.hasChildren();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(15);
        com.google.javascript.rhino.Node node9 = node3.useSourceInfoIfMissingFrom(node8);
        boolean boolean10 = node9.isAssignAdd();
        boolean boolean11 = node9.isSetterDef();
        boolean boolean12 = node9.isNot();
        boolean boolean13 = node9.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test17190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17190");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean55 = jSDocInfoBuilder1.recordDescription("STRING  43");
        boolean boolean56 = jSDocInfoBuilder1.recordExpose();
        boolean boolean57 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder59.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        jSDocInfoBuilder59.markName("hi!", staticSourceFile63, (int) (short) 0, (int) (short) 100);
        boolean boolean67 = jSDocInfoBuilder59.recordNoTypeCheck();
        boolean boolean68 = jSDocInfoBuilder59.recordExpose();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node72.addChildrenToFront(node76);
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = jSDocInfoBuilder59.build(node76);
        java.lang.String str79 = jSDocInfo78.getMeaning();
        boolean boolean80 = jSDocInfo78.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList81 = jSDocInfo78.getExtendedInterfaces();
        java.lang.String str82 = jSDocInfo78.getDescription();
        java.util.Set<java.lang.String> strSet83 = jSDocInfo78.getSuppressions();
        boolean boolean84 = jSDocInfoBuilder1.recordModifies(strSet83);
        java.util.Spliterator<java.lang.String> strSpliterator85 = strSet83.spliterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(jSDocInfo78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strSpliterator85);
    }

    @Test
    public void test17191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17191");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        java.util.Spliterator<java.lang.String> strSpliterator24 = strList23.spliterator();
        boolean boolean26 = strList23.equals((java.lang.Object) 100.0d);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor27 = strList23.iterator();
        java.lang.Object[] objArray28 = strList23.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor29 = strList23.listIterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder31.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile35 = null;
        jSDocInfoBuilder31.markName("hi!", staticSourceFile35, (int) (short) 0, (int) (short) 100);
        boolean boolean39 = jSDocInfoBuilder31.recordNoTypeCheck();
        boolean boolean40 = jSDocInfoBuilder31.recordExpose();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node44.addChildrenToFront(node48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = jSDocInfoBuilder31.build(node48);
        java.lang.String str51 = jSDocInfo50.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo50.getBaseType();
        boolean boolean53 = jSDocInfo50.isConstant();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo50.getParameterNames();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection55 = jSDocInfo50.getTypeNodes();
        java.util.Set<java.lang.String> strSet56 = jSDocInfo50.getParameterNames();
        com.google.common.collect.ImmutableCollection[][] immutableCollectionArray57 = new com.google.common.collect.ImmutableCollection[][] {};
        com.google.common.collect.ImmutableCollection[][] immutableCollectionArray58 = strSet56.toArray(immutableCollectionArray57);
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection[]> immutableCollectionArrayList59 = com.google.common.collect.ImmutableList.of(immutableCollectionArray57);
        com.google.common.collect.ImmutableCollection[][] immutableCollectionArray60 = strList23.toArray(immutableCollectionArray57);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strSpliterator24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSDocInfo50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(nodeCollection55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(immutableCollectionArray57);
        org.junit.Assert.assertNotNull(immutableCollectionArray58);
        org.junit.Assert.assertNotNull(immutableCollectionArrayList59);
        org.junit.Assert.assertNotNull(immutableCollectionArray60);
    }

    @Test
    public void test17192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17192");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node18.getNext();
        node18.setType(43);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test17193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17193");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        node29.setLength(31);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean36 = node35.isNull();
        boolean boolean37 = node35.isFromExterns();
        boolean boolean38 = node35.isFunction();
        com.google.javascript.rhino.Node node39 = node35.cloneTree();
        boolean boolean40 = node39.isFor();
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node39);
        node41.removeProp((int) '#');
        boolean boolean44 = node41.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node41.getJSDocInfo();
        node41.addSuppression("Node tree inequality:\nTree1:\nSTRING  43 [quoted: 1]\n\n\nTree2:\nSTRING hi!\n\n\nSubtree1: STRING  43 [quoted: 1]\n\n\nSubtree2: STRING hi!\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
    }

    @Test
    public void test17194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17194");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isDebugger();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean10 = node9.isOptionalArg();
        boolean boolean11 = node9.isSwitch();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node16.addChildrenToFront(node20);
        boolean boolean22 = node16.isGetterDef();
        boolean boolean23 = node16.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(32, node16, node33);
        boolean boolean47 = node46.isExprResult();
        boolean boolean48 = node46.isFunction();
        com.google.javascript.rhino.Node node49 = node9.srcrefTree(node46);
        java.lang.Object obj51 = node9.getProp((int) (byte) -1);
        boolean boolean52 = node9.isStringKey();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean57 = node56.isNull();
        node56.putIntProp(1, (int) (byte) 0);
        boolean boolean61 = node56.isIf();
        com.google.javascript.rhino.Node node62 = node9.useSourceInfoFromForTree(node56);
        node3.addChildToFront(node62);
        boolean boolean64 = node62.isOr();
        boolean boolean65 = node62.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test17195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17195");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder0 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray2 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray3 = (java.util.ArrayList<java.lang.String>[]) arrayListArray2;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder4 = strListBuilder0.add((java.util.ArrayList<java.lang.String>[]) arrayListArray2);
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList5 = strListBuilder4.build();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        boolean boolean12 = node9.isCall();
        boolean boolean13 = node9.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = new com.google.javascript.rhino.JSTypeExpression(node9, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder16 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray18 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray19 = (java.util.ArrayList<java.lang.String>[]) arrayListArray18;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder20 = strListBuilder16.add((java.util.ArrayList<java.lang.String>[]) arrayListArray18);
        boolean boolean21 = jSTypeExpression15.equals((java.lang.Object) arrayListArray18);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder22 = strListBuilder4.add((java.util.ArrayList<java.lang.String>[]) arrayListArray18);
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList23 = strListBuilder4.build();
        org.junit.Assert.assertNotNull(strListBuilder0);
        org.junit.Assert.assertNotNull(arrayListArray2);
        org.junit.Assert.assertNotNull(strListArray3);
        org.junit.Assert.assertNotNull(strListBuilder4);
        org.junit.Assert.assertNotNull(strListList5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strListBuilder16);
        org.junit.Assert.assertNotNull(arrayListArray18);
        org.junit.Assert.assertNotNull(strListArray19);
        org.junit.Assert.assertNotNull(strListBuilder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strListBuilder22);
        org.junit.Assert.assertNotNull(strListList23);
    }

    @Test
    public void test17196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17196");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = null;
        boolean boolean14 = jSDocInfoBuilder11.recordThisType(jSTypeExpression13);
        boolean boolean16 = jSDocInfoBuilder11.addReference("hi!");
        boolean boolean17 = jSDocInfoBuilder11.shouldParseDocumentation();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object[] objArray27 = strSet24.toArray();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        boolean boolean38 = strSet24.retainAll((java.util.Collection<java.lang.String>) strSet34);
        java.lang.Object[] objArray39 = strSet24.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator40 = strSet24.spliterator();
        boolean boolean42 = strSet24.add("STRING ");
        boolean boolean43 = jSDocInfoBuilder11.recordSuppressions((java.util.Set<java.lang.String>) strSet24);
        boolean boolean44 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet24);
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int55 = strList53.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int66 = strList64.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList84 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList85 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList64, (java.lang.Iterable<java.lang.String>) strList75, (java.lang.Iterable<java.lang.String>) strList84);
        com.google.common.collect.ImmutableList<java.lang.String> strList88 = strList53.subList(0, (int) (byte) 1);
        boolean boolean89 = strSet24.addAll((java.util.Collection<java.lang.String>) strList88);
        boolean boolean91 = strSet24.remove((java.lang.Object) true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strIterableList85);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test17197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17197");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        boolean boolean24 = node21.isDelProp();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isNull();
        boolean boolean30 = node28.isFromExterns();
        boolean boolean31 = node28.isFunction();
        com.google.javascript.rhino.Node node32 = node28.cloneTree();
        java.lang.String str33 = node21.checkTreeEquals(node28);
        com.google.javascript.rhino.Node node34 = node21.getLastSibling();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n" + "'", str33, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertNotNull(node34);
    }

    @Test
    public void test17198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17198");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        boolean boolean35 = node29.isGetterDef();
        boolean boolean36 = node29.hasMoreThanOneChild();
        jSDocInfo20.setAssociatedNode(node29);
        jSDocInfo20.setLicense("GETELEM");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection40 = jSDocInfo20.getTypeNodes();
        java.lang.String str41 = jSDocInfo20.getSourceName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection42 = jSDocInfo20.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(nodeCollection40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(markerCollection42);
    }

    @Test
    public void test17199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17199");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        boolean boolean10 = node7.isHook();
        int int11 = node7.getType();
        boolean boolean12 = node7.isCall();
        node7.setVarArgs(false);
        com.google.javascript.rhino.Node node15 = node7.cloneNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test17200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17200");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isExprResult();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        java.lang.Object[] objArray33 = strSet30.toArray();
        boolean boolean34 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        boolean boolean44 = strSet30.containsAll((java.util.Collection<java.lang.String>) strSet41);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet30);
        boolean boolean46 = node3.isWhile();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable47 = node3.children();
        boolean boolean48 = node3.isTry();
        boolean boolean49 = node3.isNot();
        com.google.javascript.rhino.InputId inputId50 = null;
        node3.setInputId(inputId50);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeIterable47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test17201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17201");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        boolean boolean11 = node3.isDefaultCase();
        int int13 = node3.getIntProp((int) '#');
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node3.children();
        boolean boolean15 = node3.isIn();
        boolean boolean16 = node3.isNE();
        boolean boolean17 = node3.isTrue();
        node3.setType(35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node3.children();
        node3.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
    }

    @Test
    public void test17202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17202");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        double double5 = node3.getDouble();
        boolean boolean6 = node3.isInc();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        java.lang.String str12 = node11.toStringTree();
        boolean boolean13 = node11.isNoSideEffectsCall();
        boolean boolean14 = node3.hasChild(node11);
        java.lang.String str15 = node11.toString();
        boolean boolean16 = node11.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR  54\n" + "'", str12, "OR  54\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "OR  54" + "'", str15, "OR  54");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test17203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17203");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = jSDocInfo42.getBaseType();
        java.lang.String str49 = jSDocInfo42.getOriginalCommentString();
        boolean boolean50 = jSDocInfo42.isNoCompile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(jSTypeExpression48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test17204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17204");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getExtendedInterfaces();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isVar();
        node28.putBooleanProp(30, false);
        boolean boolean33 = node28.isSwitch();
        boolean boolean34 = node28.isIn();
        boolean boolean35 = node28.isFromExterns();
        com.google.javascript.rhino.Node node36 = node28.cloneNode();
        jSDocInfo20.setAssociatedNode(node36);
        boolean boolean38 = node36.isQuotedString();
        boolean boolean39 = node36.isThis();
        com.google.javascript.rhino.Node[] nodeArray42 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(42, nodeArray42, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(39, nodeArray42, (int) '4', 32);
        int int49 = node48.getLength();
        java.lang.String str50 = node48.getSourceFileName();
        node36.addChildrenToFront(node48);
        boolean boolean52 = node36.isHook();
        boolean boolean53 = node36.isArrayLit();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeArray42);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test17205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17205");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isParamList();
        java.lang.String str7 = node3.getSourceFileName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node3.siblings();
        boolean boolean9 = node3.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test17206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17206");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 1, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", 1, 16);
        boolean boolean5 = node4.isOptionalArg();
        boolean boolean6 = node4.isWhile();
        boolean boolean7 = node4.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            node4.setSideEffectFlags((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test17207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17207");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        node27.setIsSyntheticBlock(false);
        boolean boolean38 = node27.isNumber();
        boolean boolean39 = strList23.equals((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.String> strSpliterator40 = strList23.spliterator();
        boolean boolean41 = strList23.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = strList23.remove(16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test17208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17208");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean12 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean14 = jSDocInfoBuilder1.addAuthor("JSDocInfo");
        boolean boolean16 = jSDocInfoBuilder1.recordDescription("STRING  43 [var_args_name: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test17209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17209");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isExterns();
        boolean boolean18 = jSDocInfo14.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo14.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo14.getReturnType();
        int int21 = jSDocInfo14.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test17210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17210");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        node27.setIsSyntheticBlock(false);
        boolean boolean38 = node27.isNumber();
        boolean boolean39 = strList23.equals((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.String> strSpliterator40 = strList23.spliterator();
        java.util.ListIterator<java.lang.String> strItor41 = strList23.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = strList23.get(42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (42) must be less than size (0)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(strItor41);
    }

    @Test
    public void test17211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17211");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        boolean boolean36 = node33.getBooleanProp(43);
        boolean boolean37 = node33.isIn();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj43 = node41.getProp(43);
        int int44 = node41.getType();
        boolean boolean45 = node41.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node46 = node33.clonePropsFrom(node41);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean51 = node50.isVar();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node56 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node57 = node50.cloneTree();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        boolean boolean64 = node61.isCall();
        boolean boolean65 = node61.isGetterDef();
        java.lang.String str66 = node50.checkTreeEquals(node61);
        boolean boolean67 = node61.isSetterDef();
        com.google.javascript.rhino.Node node68 = node46.clonePropsFrom(node61);
        boolean boolean69 = node61.isComma();
        boolean boolean70 = node61.isNull();
        java.lang.Appendable appendable71 = null;
        // The following exception was thrown during execution in test generation
        try {
            node61.appendStringTree(appendable71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 40 + "'", int44 == 40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test17212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17212");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        jSDocInfoBuilder1.markAnnotation("STRING  43", 39, 47);
        boolean boolean25 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean26 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.isInterfaceRecorded();
        boolean boolean30 = jSDocInfoBuilder28.isPopulatedWithFileOverview();
        boolean boolean31 = jSDocInfoBuilder28.isPopulated();
        boolean boolean32 = jSDocInfoBuilder28.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordNoTypeCheck();
        boolean boolean36 = jSDocInfoBuilder34.isInterfaceRecorded();
        jSDocInfoBuilder34.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean41 = jSDocInfoBuilder34.isPopulated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordJavaDispatch();
        boolean boolean45 = jSDocInfoBuilder43.recordNoCompile();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        boolean boolean54 = node50.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node50, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray59 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray60 = (java.util.ArrayList<java.lang.String>[]) arrayListArray59;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray59);
        boolean boolean62 = jSTypeExpression56.equals((java.lang.Object) arrayListArray59);
        boolean boolean63 = jSDocInfoBuilder43.recordParameter("", jSTypeExpression56);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression56);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList65 = com.google.common.collect.ImmutableList.of(jSTypeExpression56);
        boolean boolean67 = jSDocInfoBuilder34.recordThrowDescription(jSTypeExpression56, "");
        boolean boolean68 = jSDocInfoBuilder28.recordImplementedInterface(jSTypeExpression56);
        boolean boolean70 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression56, "NUMBER 0.0 43\n    STRING  43\n");
        boolean boolean71 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean72 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(arrayListArray59);
        org.junit.Assert.assertNotNull(strListArray60);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression64);
        org.junit.Assert.assertNotNull(jSTypeExpressionList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test17213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17213");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        boolean boolean6 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = node3.removeChildren();
        java.util.Set<java.lang.String> strSet8 = node3.getDirectives();
        boolean boolean9 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet17);
        java.lang.Object[] objArray20 = strSet17.toArray();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        java.lang.Object[] objArray30 = strSet27.toArray();
        boolean boolean31 = strSet17.retainAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.Object[] objArray32 = strSet17.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet17.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int55 = strList53.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList74 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList64, (java.lang.Iterable<java.lang.String>) strList73);
        boolean boolean75 = strSet17.equals((java.lang.Object) strList73);
        java.util.Spliterator<java.lang.String> strSpliterator76 = strList73.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor77 = strList73.listIterator();
        node3.putProp((-1), (java.lang.Object) strList73);
        node3.putIntProp(49, 4095);
        boolean boolean82 = node3.isNE();
        com.google.javascript.rhino.InputId inputId83 = node3.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder84 = node3.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strIterableList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strSpliterator76);
        org.junit.Assert.assertNotNull(strItor77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(inputId83);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder84);
    }

    @Test
    public void test17214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17214");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
    }

    @Test
    public void test17215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17215");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 0.0 43 [jsdoc_info: JSDocInfo]\n    STRING \n");
        boolean boolean3 = node2.isName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test17216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17216");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(15, "");
        boolean boolean3 = node2.isVoid();
        boolean boolean4 = node2.isVarArgs();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test17217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17217");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        java.lang.String str50 = jSDocInfo42.getLendsName();
        boolean boolean51 = jSDocInfo42.isImplicitCast();
        boolean boolean52 = jSDocInfo42.isExpose();
        boolean boolean53 = jSDocInfo42.isNoShadow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test17218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17218");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder6.markName("hi!", staticSourceFile10, (int) (short) 0, (int) (short) 100);
        boolean boolean14 = jSDocInfoBuilder6.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder6.recordExpose();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node19.addChildrenToFront(node23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = jSDocInfoBuilder6.build(node23);
        java.lang.String str26 = jSDocInfo25.getMeaning();
        boolean boolean27 = jSDocInfo25.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getExtendedInterfaces();
        boolean boolean29 = jSDocInfo25.isImplicitCast();
        node3.setJSDocInfo(jSDocInfo25);
        boolean boolean31 = node3.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node32 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSDocInfo25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test17219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17219");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isInc();
        boolean boolean10 = node3.isEmpty();
        node3.setOptionalArg(true);
        int int13 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node14 = node3.getLastChild();
        node3.putIntProp(176180, (int) (short) -1);
        boolean boolean18 = node3.hasMoreThanOneChild();
        boolean boolean19 = node3.isAssignAdd();
        node3.setLineno(49);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test17220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17220");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getLendsName();
        boolean boolean30 = jSDocInfo20.isNoTypeCheck();
        jSDocInfo20.setDeprecated(true);
        boolean boolean33 = jSDocInfo20.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test17221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17221");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder6.markName("hi!", staticSourceFile10, (int) (short) 0, (int) (short) 100);
        boolean boolean14 = jSDocInfoBuilder6.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder6.recordExpose();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node19.addChildrenToFront(node23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = jSDocInfoBuilder6.build(node23);
        java.lang.String str26 = jSDocInfo25.getMeaning();
        boolean boolean27 = jSDocInfo25.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getExtendedInterfaces();
        java.lang.String str29 = jSDocInfo25.getDescription();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo25.getSuppressions();
        boolean boolean31 = jSDocInfoBuilder1.recordSuppressions(strSet30);
        boolean boolean33 = jSDocInfoBuilder1.addAuthor("NUMBER 0.0");
        boolean boolean35 = jSDocInfoBuilder1.hasParameter("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        boolean boolean36 = jSDocInfoBuilder1.shouldParseDocumentation();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj42 = node40.getProp(43);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int47 = node46.getSourceOffset();
        com.google.javascript.rhino.Node node48 = node40.useSourceInfoIfMissingFromForTree(node46);
        int int49 = node40.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = node40.getJSDocInfo();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean55 = node54.isVar();
        node54.putBooleanProp(30, false);
        boolean boolean59 = node54.isSwitch();
        boolean boolean60 = node54.isUnscopedQualifiedName();
        boolean boolean61 = node54.hasChildren();
        node54.setCharno(52);
        com.google.javascript.rhino.Node node64 = node40.clonePropsFrom(node54);
        node64.putIntProp(42, 46);
        node64.setVarArgs(false);
        boolean boolean70 = node64.isCatch();
        boolean boolean71 = node64.isIn();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = new com.google.javascript.rhino.JSTypeExpression(node64, "STRING  43\n    NUMBER 0.0 43\n        STRING  43\n");
        boolean boolean74 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression73);
        boolean boolean76 = jSDocInfoBuilder1.recordDescription("NUMBER 10.0 43");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSDocInfo25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test17222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17222");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '4');
        node1.setVarArgs(false);
        com.google.javascript.rhino.Node node5 = node1.getChildAtIndex(0);
        boolean boolean6 = node1.isSetterDef();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        node9.setStaticSourceFile(staticSourceFile10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node9.children();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(3, node9, 18, 46);
        boolean boolean16 = node9.isWhile();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildrenToFront(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test17223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17223");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo42.getImplementedInterfaces();
        boolean boolean49 = jSDocInfo42.isDeprecated();
        java.lang.String str50 = jSDocInfo42.getFileOverview();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo42.getParameterNames();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test17224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17224");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        boolean boolean10 = strSet6.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator63 = strList60.spliterator();
        boolean boolean64 = strList30.equals((java.lang.Object) strList60);
        boolean boolean65 = strSet6.addAll((java.util.Collection<java.lang.String>) strList60);
        boolean boolean66 = strList60.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator67 = strList60.spliterator();
        boolean boolean68 = strList60.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = strList60.remove(0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSpliterator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test17225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17225");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        jSDocInfoBuilder1.markAnnotation("STRING  43", 39, 47);
        boolean boolean25 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean26 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.isInterfaceRecorded();
        boolean boolean30 = jSDocInfoBuilder28.isPopulatedWithFileOverview();
        boolean boolean31 = jSDocInfoBuilder28.isPopulated();
        boolean boolean32 = jSDocInfoBuilder28.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordNoTypeCheck();
        boolean boolean36 = jSDocInfoBuilder34.isInterfaceRecorded();
        jSDocInfoBuilder34.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean41 = jSDocInfoBuilder34.isPopulated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.recordJavaDispatch();
        boolean boolean45 = jSDocInfoBuilder43.recordNoCompile();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        boolean boolean54 = node50.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node50, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray59 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray60 = (java.util.ArrayList<java.lang.String>[]) arrayListArray59;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray59);
        boolean boolean62 = jSTypeExpression56.equals((java.lang.Object) arrayListArray59);
        boolean boolean63 = jSDocInfoBuilder43.recordParameter("", jSTypeExpression56);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression56);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList65 = com.google.common.collect.ImmutableList.of(jSTypeExpression56);
        boolean boolean67 = jSDocInfoBuilder34.recordThrowDescription(jSTypeExpression56, "");
        boolean boolean68 = jSDocInfoBuilder28.recordImplementedInterface(jSTypeExpression56);
        boolean boolean70 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression56, "NUMBER 0.0 43\n    STRING  43\n");
        boolean boolean71 = jSDocInfoBuilder1.recordDeprecated();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(arrayListArray59);
        org.junit.Assert.assertNotNull(strListArray60);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression64);
        org.junit.Assert.assertNotNull(jSTypeExpressionList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test17226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17226");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setSourceEncodedPositionForTree((int) (byte) -1);
        boolean boolean14 = node10.isGetterDef();
        boolean boolean15 = node10.isScript();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.Node node37 = node25.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node39 = node37.cloneTree();
        boolean boolean40 = node39.isObjectLit();
        boolean boolean41 = node39.isFunction();
        com.google.javascript.rhino.Node node42 = node10.copyInformationFrom(node39);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj48 = node46.getProp(43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        com.google.javascript.rhino.Node node54 = node46.useSourceInfoIfMissingFromForTree(node52);
        int int55 = node46.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = node46.getJSDocInfo();
        boolean boolean57 = node46.isIn();
        boolean boolean58 = node46.isHook();
        com.google.javascript.rhino.Node node59 = node46.removeChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = node46.getJSDocInfo();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj66 = node64.getProp(43);
        boolean boolean67 = node64.isCall();
        int int68 = node64.getSourcePosition();
        java.lang.String str72 = node64.toString(false, true, false);
        boolean boolean73 = node64.isExprResult();
        boolean boolean74 = node64.isEmpty();
        boolean boolean75 = node64.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node76 = node46.useSourceInfoFromForTree(node64);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) (byte) 100, 0, 37);
        boolean boolean81 = node80.isNull();
        int int82 = node46.getIndexOfChild(node80);
        java.lang.String str83 = node46.toStringTree();
        com.google.javascript.rhino.Node node84 = node10.srcrefTree(node46);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(jSDocInfo60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 176180 + "'", int68 == 176180);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING " + "'", str72, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "STRING  43\n" + "'", str83, "STRING  43\n");
        org.junit.Assert.assertNotNull(node84);
    }

    @Test
    public void test17227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17227");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) ' ', 3, 2);
        boolean boolean4 = node3.hasOneChild();
        boolean boolean5 = node3.isVoid();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.new FileLevelJsDocBuilder();
        boolean boolean7 = node3.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test17228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17228");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean23 = jSDocInfo20.isConstant();
        boolean boolean24 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        boolean boolean37 = node28.isDelProp();
        jSDocInfo20.setAssociatedNode(node28);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int43 = node42.getSourceOffset();
        double double44 = node42.getDouble();
        boolean boolean45 = node42.isFalse();
        com.google.javascript.rhino.Node node46 = node28.useSourceInfoFrom(node42);
        java.lang.String str47 = node46.getSourceFileName();
        com.google.javascript.rhino.Node node48 = node46.getLastChild();
        boolean boolean49 = node46.isGetProp();
        boolean boolean50 = node46.isIf();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test17229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17229");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        java.lang.String str24 = jSDocInfo20.getDescriptionForParameter("NUMBER 0.0 43");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo20.getParameterNames();
        boolean boolean27 = jSDocInfo20.hasType();
        java.lang.String str28 = jSDocInfo20.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test17230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17230");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordHiddenness();
        java.util.Set<java.lang.String> strSet9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordSuppressions(strSet9);
        boolean boolean11 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nLE\n\n\nTree2:\nNUMBER 0.0 43\n    STRING  43\n\n\nSubtree1: LE\n\n\nSubtree2: NUMBER 0.0 43\n    STRING  43\n", 53, (int) (short) -1, 42, 167974);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test17231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17231");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isGetterDef();
        node3.putBooleanProp(41, false);
        boolean boolean11 = node3.isHook();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType17 = node15.getJSType();
        boolean boolean18 = node15.isWith();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition19 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean20 = typePosition19.hasBrackets();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean25 = node24.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray31 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        node29.setDirectives((java.util.Set<java.lang.String>) strSet32);
        java.lang.Object obj36 = node29.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node37 = node24.copyInformationFrom(node29);
        typePosition19.setItem(node37);
        int int39 = typePosition19.getStartLine();
        com.google.javascript.rhino.Node node40 = typePosition19.getItem();
        node40.removeProp(39);
        boolean boolean43 = node15.isEquivalentToTyped(node40);
        boolean boolean44 = node15.isFor();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj50 = node48.getProp(43);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int55 = node54.getSourceOffset();
        com.google.javascript.rhino.Node node56 = node48.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node57 = node54.cloneNode();
        node57.setType(0);
        int int60 = node57.getCharno();
        boolean boolean61 = node57.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node62 = node15.srcrefTree(node57);
        int int63 = node57.getType();
        com.google.javascript.rhino.Node node64 = node3.copyInformationFrom(node57);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNull(jSType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test17232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17232");
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = com.google.common.collect.ImmutableList.of("STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "", "STRING ", "STRING ", "hi!");
        java.lang.String str10 = strList9.toString();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        jSDocInfoBuilder12.markName("hi!", staticSourceFile16, (int) (short) 0, (int) (short) 100);
        boolean boolean20 = jSDocInfoBuilder12.recordNoTypeCheck();
        boolean boolean21 = jSDocInfoBuilder12.recordExpose();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node25.addChildrenToFront(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = jSDocInfoBuilder12.build(node29);
        java.lang.String str32 = jSDocInfo31.getMeaning();
        boolean boolean33 = jSDocInfo31.isExport();
        boolean boolean35 = jSDocInfo31.hasDescriptionForParameter("STRING ");
        boolean boolean36 = jSDocInfo31.isNoCompile();
        boolean boolean37 = jSDocInfo31.hasReturnType();
        boolean boolean39 = jSDocInfo31.hasParameter("STRING ");
        boolean boolean40 = strList9.equals((java.lang.Object) jSDocInfo31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = strList9.remove((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]" + "'", str10, "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSDocInfo31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test17233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17233");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo14.getEnumParameterType();
        boolean boolean20 = jSDocInfo14.isDeprecated();
        com.google.javascript.rhino.Node node21 = jSDocInfo14.getAssociatedNode();
        boolean boolean22 = node21.isThis();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test17234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17234");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) -1);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("JSDocInfo", 10, 0);
        com.google.javascript.rhino.Node node6 = node1.useSourceInfoIfMissingFrom(node5);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getLineno();
        node1.addChildToBack(node10);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
    }

    @Test
    public void test17235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17235");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        int int11 = strList8.size();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray15 = strList8.toArray(strArray14);
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = com.google.common.collect.ImmutableList.copyOf(strArray15);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder18.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        jSDocInfoBuilder18.markName("hi!", staticSourceFile22, (int) (short) 0, (int) (short) 100);
        boolean boolean26 = jSDocInfoBuilder18.recordNoTypeCheck();
        boolean boolean27 = jSDocInfoBuilder18.recordExpose();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node31.addChildrenToFront(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = jSDocInfoBuilder18.build(node35);
        java.lang.String str38 = jSDocInfo37.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getTypedefType();
        java.lang.String str40 = jSDocInfo37.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList41 = jSDocInfo37.getImplementedInterfaces();
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = jSDocInfo37.getTemplateTypeNames();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node45 = node44.cloneTree();
        com.google.javascript.rhino.Node node46 = node45.cloneNode();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj53 = node51.getProp(43);
        boolean boolean54 = node51.isCall();
        boolean boolean55 = node51.isQuotedString();
        boolean boolean56 = node51.isObjectLit();
        boolean boolean57 = node51.isOr();
        boolean boolean58 = node51.isNull();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int63 = node62.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType64 = node62.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder65 = node62.getJsDocBuilderForNode();
        node62.putBooleanProp(30, false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder69 = node62.getJsDocBuilderForNode();
        java.lang.String str70 = node51.checkTreeEquals(node62);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) '#', node62);
        com.google.javascript.rhino.Node node72 = node46.useSourceInfoIfMissingFromForTree(node71);
        int int73 = strList42.indexOf((java.lang.Object) node72);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = strList16.addAll((java.util.Collection<java.lang.String>) strList42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSDocInfo37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(jSTypeExpressionList41);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(jSType64);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder65);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str70, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test17236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17236");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        java.lang.Object[] objArray54 = strList49.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator55 = strList49.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = strList49.remove(53);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strSpliterator55);
    }

    @Test
    public void test17237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17237");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean24 = jSDocInfo20.hasThisType();
        java.lang.String str25 = jSDocInfo20.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = jSDocInfo20.getVisibility();
        boolean boolean28 = jSDocInfo20.hasDescriptionForParameter("NUMBER 53.0 42\n");
        boolean boolean29 = jSDocInfo20.hasEnumParameterType();
        java.lang.String str30 = jSDocInfo20.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "JSDocInfo" + "'", str30, "JSDocInfo");
    }

    @Test
    public void test17238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17238");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        jSDocInfo20.addSuppression("STRING ");
        boolean boolean28 = jSDocInfo20.isExport();
        jSDocInfo20.setLicense("");
        boolean boolean31 = jSDocInfo20.isHidden();
        java.lang.Class<?> wildcardClass32 = jSDocInfo20.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test17239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17239");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean16 = node15.isVar();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node21 = node15.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node22 = node3.copyInformationFromForTree(node21);
        int int23 = node21.getLength();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean40 = node39.isVar();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node45 = node39.copyInformationFromForTree(node44);
        com.google.javascript.rhino.Node node46 = node27.copyInformationFromForTree(node45);
        com.google.javascript.rhino.Node node47 = node21.useSourceInfoFromForTree(node27);
        node21.setOptionalArg(false);
        boolean boolean50 = node21.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test17240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17240");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        boolean boolean27 = jSDocInfo20.hasEnumParameterType();
        boolean boolean28 = jSDocInfo20.isNoShadow();
        boolean boolean29 = jSDocInfo20.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test17241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17241");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        com.google.javascript.rhino.Node node17 = node12.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node12.children();
        boolean boolean19 = node12.isLabelName();
        java.lang.Object obj21 = node12.getProp(48);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        boolean boolean27 = node25.isSwitch();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node32.addChildrenToFront(node36);
        boolean boolean38 = node32.isGetterDef();
        boolean boolean39 = node32.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj45 = node43.getProp(43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int50 = node49.getSourceOffset();
        com.google.javascript.rhino.Node node51 = node43.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet58);
        com.google.javascript.rhino.Node node61 = node49.useSourceInfoIfMissingFromForTree(node55);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(32, node32, node49);
        boolean boolean63 = node62.isExprResult();
        boolean boolean64 = node62.isFunction();
        com.google.javascript.rhino.Node node65 = node25.srcrefTree(node62);
        boolean boolean66 = node25.isDebugger();
        boolean boolean67 = node25.isFalse();
        boolean boolean68 = node25.isLocalResultCall();
        boolean boolean69 = node25.isContinue();
        node25.putBooleanProp(50, false);
        node12.addChildrenToFront(node25);
        java.lang.String str74 = node12.getSourceFileName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = new com.google.javascript.rhino.JSTypeExpression(node12, "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str74);
    }

    @Test
    public void test17242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17242");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        boolean boolean41 = strList30.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor42 = strList30.listIterator();
        java.lang.String str43 = strList30.toString();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition44 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str45 = stringPosition44.getItem();
        java.lang.String str46 = stringPosition44.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition47 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str48 = stringPosition47.getItem();
        java.lang.String str49 = stringPosition47.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition50 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str51 = stringPosition50.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition52 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str53 = stringPosition52.getItem();
        java.lang.String str54 = stringPosition52.getItem();
        int int55 = stringPosition52.getPositionOnStartLine();
        int int56 = stringPosition52.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition58 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition59 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str60 = stringPosition59.getItem();
        stringPosition59.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition63 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str64 = stringPosition63.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition65 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str66 = stringPosition65.getItem();
        java.lang.String str67 = stringPosition65.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition68 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str69 = stringPosition68.getItem();
        java.lang.String str70 = stringPosition68.getItem();
        int int71 = stringPosition68.getPositionOnStartLine();
        int int72 = stringPosition68.getStartLine();
        int int73 = stringPosition68.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList74 = com.google.common.collect.ImmutableList.of(stringPosition44, stringPosition47, stringPosition50, stringPosition52, stringPosition57, stringPosition58, stringPosition59, stringPosition63, stringPosition65, stringPosition68);
        java.lang.String str75 = stringPosition68.getItem();
        stringPosition68.setItem("JSDocInfo");
        int int78 = stringPosition68.getPositionOnEndLine();
        java.lang.String str79 = stringPosition68.getItem();
        java.lang.String str80 = stringPosition68.getItem();
        int int81 = stringPosition68.getStartLine();
        int int82 = strList30.indexOf((java.lang.Object) stringPosition68);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str43, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(stringPositionList74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "JSDocInfo" + "'", str79, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "JSDocInfo" + "'", str80, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test17243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17243");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        boolean boolean11 = node8.isCall();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node8, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder15 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray17 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray18 = (java.util.ArrayList<java.lang.String>[]) arrayListArray17;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = strListBuilder15.add((java.util.ArrayList<java.lang.String>[]) arrayListArray17);
        boolean boolean20 = jSTypeExpression14.equals((java.lang.Object) arrayListArray17);
        boolean boolean21 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression14);
        boolean boolean22 = jSTypeExpression14.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression14);
        com.google.javascript.rhino.Node node24 = jSTypeExpression14.getRoot();
        boolean boolean25 = node24.isInstanceOf();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable26 = node24.getAncestors();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strListBuilder15);
        org.junit.Assert.assertNotNull(arrayListArray17);
        org.junit.Assert.assertNotNull(strListArray18);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(ancestorIterable26);
    }

    @Test
    public void test17244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17244");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        int int45 = node4.getSourcePosition();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isIf();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(49, node58, 0, 100);
        com.google.javascript.rhino.Node node63 = node58.detachFromParent();
        boolean boolean64 = node63.isFalse();
        com.google.javascript.rhino.Node node65 = node4.useSourceInfoIfMissingFrom(node63);
        boolean boolean66 = node4.isInstanceOf();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        boolean boolean76 = node70.isInc();
        boolean boolean77 = node70.isEmpty();
        int int79 = node70.getIntProp(49);
        java.util.Set<java.lang.String> strSet80 = node70.getDirectives();
        com.google.javascript.rhino.Node node81 = node4.useSourceInfoFrom(node70);
        boolean boolean82 = node81.isGetProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 176129 + "'", int45 == 176129);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(strSet80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test17245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17245");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) '4', 1);
    }

    @Test
    public void test17246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17246");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        boolean boolean6 = jSDocInfoBuilder1.recordReturnDescription("STRING ");
        boolean boolean7 = jSDocInfoBuilder1.recordExterns();
        boolean boolean8 = jSDocInfoBuilder1.recordExport();
        boolean boolean9 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test17247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17247");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean9 = jSDocInfoBuilder1.recordNoSideEffects();
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int20 = strList18.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int31 = strList29.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList50 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList18, (java.lang.Iterable<java.lang.String>) strList29, (java.lang.Iterable<java.lang.String>) strList40, (java.lang.Iterable<java.lang.String>) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int61 = strList59.indexOf((java.lang.Object) 'a');
        int int62 = strList59.size();
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray66 = strList59.toArray(strArray65);
        java.lang.String[] strArray67 = strList18.toArray(strArray65);
        boolean boolean68 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList18);
        com.google.common.collect.ImmutableList<java.lang.String> strList69 = strList18.reverse();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean74 = node73.isOptionalArg();
        com.google.javascript.rhino.Node node75 = node73.getNext();
        boolean boolean76 = node73.isThrow();
        boolean boolean77 = node73.isFor();
        boolean boolean78 = node73.isNE();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node83 = node82.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = node82.getJSDocInfo();
        com.google.javascript.rhino.Node node85 = node73.useSourceInfoIfMissingFrom(node82);
        boolean boolean86 = strList69.equals((java.lang.Object) node73);
        node73.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strIterableList50);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNull(jSDocInfo84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test17248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17248");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.InputId inputId22 = null;
        node15.setInputId(inputId22);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        int int36 = node27.getSourceOffset();
        boolean boolean37 = node27.isParamList();
        node15.addChildToFront(node27);
        int int39 = node15.getLength();
        boolean boolean40 = node15.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test17249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17249");
        com.google.javascript.rhino.Node[] nodeArray8 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(42, nodeArray8, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray8);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(36, nodeArray8, 40, 4);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(176180, nodeArray8, (int) (byte) 10, 49);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(53, nodeArray8);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(38, nodeArray8);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(221199, nodeArray8);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray8);
        org.junit.Assert.assertNotNull(nodeArray8);
    }

    @Test
    public void test17250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17250");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node18.getParent();
        boolean boolean23 = node22.isAssignAdd();
        boolean boolean24 = node22.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = null;
        node22.setStaticSourceFile(staticSourceFile25);
        boolean boolean27 = node22.isRegExp();
        node22.removeProp((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test17251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17251");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getReturnType();
        boolean boolean28 = jSDocInfo20.isNoTypeCheck();
        boolean boolean29 = jSDocInfo20.isIdGenerator();
        boolean boolean30 = jSDocInfo20.isIdGenerator();
        java.lang.String str31 = jSDocInfo20.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test17252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17252");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition3.getPositionOnStartLine();
        int int32 = stringPosition3.getStartLine();
        int int33 = stringPosition3.getStartLine();
        int int34 = stringPosition3.getPositionOnStartLine();
        int int35 = stringPosition3.getStartLine();
        int int36 = stringPosition3.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition3.setPositionInformation(16, 16, 0, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 16?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test17253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17253");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean7 = node6.isNull();
        boolean boolean8 = node6.isSyntheticBlock();
        namePosition0.setItem(node6);
        int int10 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(0, "[]");
        namePosition0.setItem(node13);
        com.google.javascript.rhino.Node node15 = namePosition0.getItem();
        boolean boolean16 = node15.isNoSideEffectsCall();
        boolean boolean17 = node15.isBlock();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test17254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17254");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        node3.setSourceEncodedPosition(45);
        node3.putIntProp(4095, 36);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean20 = node19.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.Node node42 = node30.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean43 = node36.isThrow();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(35, node19, node36);
        int int45 = node19.getSourcePosition();
        boolean boolean46 = node19.isCase();
        com.google.javascript.rhino.Node node47 = node3.useSourceInfoFrom(node19);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 176180 + "'", int45 == 176180);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
    }

    @Test
    public void test17255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17255");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", 48, 38);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean10 = typePosition9.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList11 = com.google.common.collect.ImmutableList.of(typePosition4, typePosition5, typePosition6, typePosition7, typePosition8, typePosition9);
        int int12 = typePosition6.getEndLine();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean17 = node16.isNull();
        boolean boolean18 = node16.isSyntheticBlock();
        boolean boolean19 = node16.hasMoreThanOneChild();
        typePosition6.setItem(node16);
        int int21 = typePosition6.getStartLine();
        com.google.javascript.rhino.Node node22 = typePosition6.getItem();
        int int23 = typePosition6.getStartLine();
        boolean boolean24 = typePosition6.hasBrackets();
        int int25 = typePosition6.getStartLine();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        com.google.javascript.rhino.Node node36 = node29.getChildAtIndex(0);
        com.google.javascript.rhino.Node node37 = node29.removeChildren();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node37.siblings();
        typePosition6.setItem(node37);
        com.google.javascript.rhino.Node node40 = node3.useSourceInfoFromForTree(node37);
        int int41 = node3.getType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(typePositionList11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 40 + "'", int41 == 40);
    }

    @Test
    public void test17256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17256");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean5 = jSDocInfoBuilder1.hasParameter("OR  54\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = null;
        boolean boolean9 = jSDocInfoBuilder7.recordTypedef(jSTypeExpression8);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordNoTypeCheck();
        boolean boolean13 = jSDocInfoBuilder11.isInterfaceRecorded();
        jSDocInfoBuilder11.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean18 = jSDocInfoBuilder11.recordIdGenerator();
        boolean boolean19 = jSDocInfoBuilder11.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder21.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder35 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray37 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray38 = (java.util.ArrayList<java.lang.String>[]) arrayListArray37;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = strListBuilder35.add((java.util.ArrayList<java.lang.String>[]) arrayListArray37);
        boolean boolean40 = jSTypeExpression34.equals((java.lang.Object) arrayListArray37);
        boolean boolean41 = jSDocInfoBuilder21.recordDefineType(jSTypeExpression34);
        boolean boolean42 = jSDocInfoBuilder11.recordThisType(jSTypeExpression34);
        boolean boolean43 = jSDocInfoBuilder7.recordThisType(jSTypeExpression34);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression34);
        boolean boolean45 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression34);
        boolean boolean46 = jSDocInfoBuilder1.isPopulated();
        boolean boolean47 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean48 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strListBuilder35);
        org.junit.Assert.assertNotNull(arrayListArray37);
        org.junit.Assert.assertNotNull(strListArray38);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test17257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17257");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean9 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile11, 0, 0);
        boolean boolean16 = jSDocInfoBuilder1.hasParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean18 = jSDocInfoBuilder1.recordBlockDescription("NUMBER 18.0");
        boolean boolean19 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test17258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17258");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isConstant();
        jSDocInfo42.setLicense("STRING \n");
        java.lang.String str50 = jSDocInfo42.getDescriptionForParameter("NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test17259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17259");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(4, nodeArray6, (int) (short) 1, 47);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(221199, nodeArray6, 38, (int) 'a');
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(26, nodeArray6);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(51, nodeArray6, 52, 221199);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder22.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        jSDocInfoBuilder22.markName("hi!", staticSourceFile26, (int) (short) 0, (int) (short) 100);
        boolean boolean30 = jSDocInfoBuilder22.recordNoTypeCheck();
        boolean boolean31 = jSDocInfoBuilder22.recordExpose();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node35.addChildrenToFront(node39);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = jSDocInfoBuilder22.build(node39);
        boolean boolean42 = jSDocInfo41.isExport();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean47 = node46.isOptionalArg();
        com.google.javascript.rhino.Node node48 = node46.getNext();
        jSDocInfo41.setAssociatedNode(node48);
        java.lang.String str50 = jSDocInfo41.getLendsName();
        boolean boolean51 = jSDocInfo41.isNoTypeCheck();
        boolean boolean52 = jSDocInfo41.isNoSideEffects();
        java.lang.String str53 = jSDocInfo41.getLendsName();
        boolean boolean54 = jSDocInfo41.hasType();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo41.getSuppressions();
        node20.setDirectives(strSet55);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSet55);
    }

    @Test
    public void test17260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17260");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        boolean boolean27 = node24.isCall();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node24, "STRING ");
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        jSDocInfoBuilder33.markName("hi!", staticSourceFile37, (int) (short) 0, (int) (short) 100);
        boolean boolean41 = jSDocInfoBuilder33.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder33.recordExpose();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.addChildrenToFront(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = jSDocInfoBuilder33.build(node50);
        boolean boolean53 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node54 = node50.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = jSDocInfoBuilder1.build(node54);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility56 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean57 = jSDocInfoBuilder1.recordVisibility(visibility56);
        boolean boolean59 = jSDocInfoBuilder1.recordBlockDescription("NUMBER 0.0");
        boolean boolean61 = jSDocInfoBuilder1.recordMeaning("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean62 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + visibility56 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility56.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test17261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17261");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        double double24 = node21.getDouble();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node21.siblings();
        boolean boolean26 = node21.isIn();
        boolean boolean27 = node21.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test17262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17262");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean9 = typePosition8.hasBrackets();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        typePosition8.setItem(node26);
        int int28 = typePosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean35 = typePosition34.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList36 = com.google.common.collect.ImmutableList.of(typePosition29, typePosition30, typePosition31, typePosition32, typePosition33, typePosition34);
        int int37 = typePosition31.getEndLine();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean42 = node41.isNull();
        boolean boolean43 = node41.isSyntheticBlock();
        boolean boolean44 = node41.hasMoreThanOneChild();
        typePosition31.setItem(node41);
        boolean boolean46 = typePosition31.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition4, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition8, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition31);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj53 = node51.getProp(43);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int58 = node57.getSourceOffset();
        com.google.javascript.rhino.Node node59 = node51.useSourceInfoIfMissingFromForTree(node57);
        com.google.javascript.rhino.Node node60 = node51.removeFirstChild();
        boolean boolean61 = node51.isFor();
        boolean boolean62 = node51.isNumber();
        typePosition31.setItem(node51);
        com.google.javascript.rhino.Node node64 = typePosition31.getItem();
        int int65 = typePosition31.getEndLine();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(typePositionList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test17263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17263");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = strList19.asList();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder56.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        jSDocInfoBuilder56.markName("hi!", staticSourceFile60, (int) (short) 0, (int) (short) 100);
        boolean boolean64 = jSDocInfoBuilder56.recordNoTypeCheck();
        boolean boolean65 = jSDocInfoBuilder56.recordExpose();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node69.addChildrenToFront(node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = jSDocInfoBuilder56.build(node73);
        boolean boolean76 = jSDocInfo75.isExport();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean81 = node80.isOptionalArg();
        com.google.javascript.rhino.Node node82 = node80.getNext();
        jSDocInfo75.setAssociatedNode(node82);
        java.lang.String str84 = jSDocInfo75.getMeaning();
        boolean boolean85 = jSDocInfo75.isNoSideEffects();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection86 = jSDocInfo75.getMarkers();
        boolean boolean87 = strList54.contains((java.lang.Object) jSDocInfo75);
        java.util.Collection<java.lang.String> strCollection88 = jSDocInfo75.getReferences();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSDocInfo75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(markerCollection86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(strCollection88);
    }

    @Test
    public void test17264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17264");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        node3.setWasEmptyNode(true);
        boolean boolean10 = node3.isSyntheticBlock();
        boolean boolean11 = node3.isThrow();
        com.google.javascript.rhino.Node node13 = node3.getAncestor(35);
        boolean boolean14 = node3.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test17265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17265");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        boolean boolean5 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node17.getStaticSourceFile();
        boolean boolean20 = node17.isDo();
        jSDocInfoBuilder1.markTypeNode(node17, 52, 37, (int) (byte) 10, 167974, false);
        boolean boolean27 = node17.isLabel();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test17266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17266");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        boolean boolean7 = jSDocInfoBuilder1.hasParameter("STRING  43");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.isInterfaceRecorded();
        boolean boolean12 = jSDocInfoBuilder9.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.isInterfaceRecorded();
        boolean boolean17 = jSDocInfoBuilder14.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        boolean boolean24 = node21.isCall();
        boolean boolean25 = node21.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = new com.google.javascript.rhino.JSTypeExpression(node21, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder28 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray30 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray31 = (java.util.ArrayList<java.lang.String>[]) arrayListArray30;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder32 = strListBuilder28.add((java.util.ArrayList<java.lang.String>[]) arrayListArray30);
        boolean boolean33 = jSTypeExpression27.equals((java.lang.Object) arrayListArray30);
        boolean boolean34 = jSDocInfoBuilder14.recordDefineType(jSTypeExpression27);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition35 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int36 = namePosition35.getEndLine();
        int int37 = namePosition35.getStartLine();
        com.google.javascript.rhino.Node node38 = namePosition35.getItem();
        boolean boolean39 = jSTypeExpression27.equals((java.lang.Object) node38);
        boolean boolean40 = jSDocInfoBuilder9.recordTypedef(jSTypeExpression27);
        boolean boolean41 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression27);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = null;
        boolean boolean45 = jSDocInfoBuilder43.recordTypedef(jSTypeExpression44);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordNoTypeCheck();
        boolean boolean49 = jSDocInfoBuilder47.isInterfaceRecorded();
        jSDocInfoBuilder47.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean54 = jSDocInfoBuilder47.recordIdGenerator();
        boolean boolean55 = jSDocInfoBuilder47.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder57.isInterfaceRecorded();
        boolean boolean60 = jSDocInfoBuilder57.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj66 = node64.getProp(43);
        boolean boolean67 = node64.isCall();
        boolean boolean68 = node64.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = new com.google.javascript.rhino.JSTypeExpression(node64, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder71 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray73 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray74 = (java.util.ArrayList<java.lang.String>[]) arrayListArray73;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder75 = strListBuilder71.add((java.util.ArrayList<java.lang.String>[]) arrayListArray73);
        boolean boolean76 = jSTypeExpression70.equals((java.lang.Object) arrayListArray73);
        boolean boolean77 = jSDocInfoBuilder57.recordDefineType(jSTypeExpression70);
        boolean boolean78 = jSDocInfoBuilder47.recordThisType(jSTypeExpression70);
        boolean boolean79 = jSDocInfoBuilder43.recordThisType(jSTypeExpression70);
        boolean boolean80 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression70);
        com.google.javascript.rhino.Node node81 = jSTypeExpression70.getRoot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strListBuilder28);
        org.junit.Assert.assertNotNull(arrayListArray30);
        org.junit.Assert.assertNotNull(strListArray31);
        org.junit.Assert.assertNotNull(strListBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strListBuilder71);
        org.junit.Assert.assertNotNull(arrayListArray73);
        org.junit.Assert.assertNotNull(strListArray74);
        org.junit.Assert.assertNotNull(strListBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(node81);
    }

    @Test
    public void test17267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17267");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NEW  43 [opt_arg: 1]");
        boolean boolean2 = node1.isLocalResultCall();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test17268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17268");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.isNoTypeCheck();
        java.lang.String str50 = jSDocInfo42.getReturnDescription();
        java.lang.String str51 = jSDocInfo42.getOriginalCommentString();
        boolean boolean52 = jSDocInfo42.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = jSDocInfo42.getTemplateTypeNames();
        int int54 = jSDocInfo42.getImplementedInterfaceCount();
        java.lang.String str55 = jSDocInfo42.getFileOverview();
        java.lang.String str56 = jSDocInfo42.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = jSDocInfo42.getParameterType("STRING  43 [directives: [Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n]]\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNull(jSTypeExpression58);
    }

    @Test
    public void test17269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17269");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition6.getStartLine();
        int int32 = stringPosition6.getPositionOnStartLine();
        int int33 = stringPosition6.getPositionOnEndLine();
        stringPosition6.setItem("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test17270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17270");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder19.recordParameter("hi!", jSTypeExpression22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean25 = jSDocInfoBuilder19.recordVisibility(visibility24);
        jSDocInfo14.setVisibility(visibility24);
        java.lang.String str28 = jSDocInfo14.getDescriptionForParameter("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo14.getBaseType();
        java.lang.String str30 = jSDocInfo14.getSourceName();
        boolean boolean31 = jSDocInfo14.isNoTypeCheck();
        boolean boolean33 = jSDocInfo14.hasDescriptionForParameter("Node tree inequality:\nTree1:\nSTRING STRING  43 [synthetic: 1] 35\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING STRING  43 [synthetic: 1] 35\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test17271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17271");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isFromExterns();
        boolean boolean6 = node3.isFunction();
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        boolean boolean8 = node7.isFor();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean17 = node16.isOptionalArg();
        boolean boolean18 = node16.isSwitch();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node23.addChildrenToFront(node27);
        boolean boolean29 = node23.isGetterDef();
        boolean boolean30 = node23.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet49);
        com.google.javascript.rhino.Node node52 = node40.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(32, node23, node40);
        boolean boolean54 = node53.isExprResult();
        boolean boolean55 = node53.isFunction();
        com.google.javascript.rhino.Node node56 = node16.srcrefTree(node53);
        com.google.javascript.rhino.Node node57 = node12.srcrefTree(node53);
        com.google.javascript.rhino.Node node58 = node7.useSourceInfoFrom(node57);
        boolean boolean59 = node58.isHook();
        boolean boolean60 = node58.isDelProp();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj66 = node64.getProp(43);
        boolean boolean67 = node64.isCall();
        boolean boolean68 = node64.isGetterDef();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable69 = node64.getAncestors();
        node64.setWasEmptyNode(true);
        node64.setSourceEncodedPositionForTree(46);
        com.google.javascript.rhino.Node node74 = node58.useSourceInfoFromForTree(node64);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder75 = node58.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(ancestorIterable69);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder75);
    }

    @Test
    public void test17272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17272");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        int int21 = strSet16.size();
        java.lang.Object[] objArray22 = strSet16.toArray();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean27 = node26.isNull();
        java.lang.String str28 = node26.getQualifiedName();
        boolean boolean29 = node26.isSyntheticBlock();
        boolean boolean30 = strSet16.contains((java.lang.Object) node26);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder32.markName("hi!", staticSourceFile36, (int) (short) 0, (int) (short) 100);
        boolean boolean40 = jSDocInfoBuilder32.recordNoTypeCheck();
        boolean boolean41 = jSDocInfoBuilder32.recordExpose();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node45.addChildrenToFront(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = jSDocInfoBuilder32.build(node49);
        boolean boolean52 = jSDocInfo51.isExport();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean57 = node56.isOptionalArg();
        com.google.javascript.rhino.Node node58 = node56.getNext();
        jSDocInfo51.setAssociatedNode(node58);
        java.lang.String str60 = jSDocInfo51.getLendsName();
        boolean boolean61 = jSDocInfo51.isNoTypeCheck();
        java.util.Set<java.lang.String> strSet62 = jSDocInfo51.getSuppressions();
        boolean boolean63 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet62);
        com.google.common.collect.ImmutableList<java.lang.String> strList73 = com.google.common.collect.ImmutableList.of("STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "[, hi!, , , hi!, , hi!, ]", "STRING ", "", "STRING ", "STRING ", "hi!");
        java.lang.String str74 = strList73.toString();
        java.util.stream.Stream<java.lang.String> strStream75 = strList73.stream();
        boolean boolean76 = strSet16.containsAll((java.util.Collection<java.lang.String>) strList73);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]" + "'", str74, "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test17273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17273");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean13 = node12.isIf();
        boolean boolean14 = node12.isAnd();
        boolean boolean15 = node12.isVar();
        node12.setType((int) (byte) -1);
        node12.setSourceEncodedPositionForTree((int) '#');
        boolean boolean20 = node12.isNumber();
        boolean boolean21 = node12.hasOneChild();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) 'a', node12);
        boolean boolean23 = node12.isOr();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test17274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17274");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        node1.putIntProp(0, 0);
        boolean boolean7 = node1.isVoid();
        com.google.javascript.rhino.Node node8 = node1.getNext();
        boolean boolean9 = node1.isTrue();
        com.google.javascript.rhino.Node node10 = node1.getNext();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test17275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17275");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        boolean boolean36 = node33.getBooleanProp(43);
        boolean boolean37 = node33.isIn();
        boolean boolean38 = node33.hasMoreThanOneChild();
        node33.setQuotedString();
        boolean boolean40 = node33.hasOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test17276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17276");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile11, (int) (short) 100, 8);
        boolean boolean16 = jSDocInfoBuilder1.recordFileOverview("NUMBER 0.0 43");
        boolean boolean18 = jSDocInfoBuilder1.addAuthor("NUMBER 43.0\n");
        boolean boolean19 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test17277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17277");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        com.google.javascript.rhino.Node node8 = node4.cloneNode();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(40, node8, 45, 30);
        node8.setSourceFileForTesting("Node tree inequality:\nTree1:\nSTRING STRING  43 [synthetic: 1] 35\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING STRING  43 [synthetic: 1] 35\n\n\nSubtree2: STRING  43\n");
        node8.putIntProp(47, (int) (byte) 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
    }

    @Test
    public void test17278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17278");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        int int21 = strSet16.size();
        boolean boolean23 = strSet16.add("");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition24 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int25 = namePosition24.getEndLine();
        int int26 = namePosition24.getStartLine();
        int int27 = namePosition24.getPositionOnEndLine();
        int int28 = namePosition24.getEndLine();
        int int29 = namePosition24.getStartLine();
        com.google.javascript.rhino.Node node30 = namePosition24.getItem();
        int int31 = namePosition24.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean33 = typePosition32.hasBrackets();
        int int34 = typePosition32.getEndLine();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int39 = node38.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType40 = node38.getJSType();
        boolean boolean41 = node38.isWith();
        typePosition32.setItem(node38);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj48 = node46.getProp(43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        com.google.javascript.rhino.Node node54 = node46.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet61);
        com.google.javascript.rhino.Node node64 = node52.useSourceInfoIfMissingFromForTree(node58);
        boolean boolean65 = node58.isThrow();
        boolean boolean66 = node58.isNot();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean71 = node70.isVar();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node76 = node70.copyInformationFromForTree(node75);
        java.lang.String str77 = node58.checkTreeEquals(node76);
        com.google.javascript.rhino.Node node78 = null;
        com.google.javascript.rhino.Node node79 = node58.getChildBefore(node78);
        boolean boolean80 = node58.isVarArgs();
        boolean boolean81 = node58.isIn();
        com.google.javascript.rhino.Node node83 = node58.getAncestor(46);
        com.google.javascript.rhino.Node node84 = node38.srcrefTree(node58);
        namePosition24.setItem(node58);
        boolean boolean86 = strSet16.contains((java.lang.Object) node58);
        int int87 = strSet16.size();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str77, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
    }

    @Test
    public void test17279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17279");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str24 = jSDocInfo20.getDescription();
        boolean boolean25 = jSDocInfo20.isExport();
        boolean boolean26 = jSDocInfo20.isIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.recordNoTypeCheck();
        boolean boolean30 = jSDocInfoBuilder28.isInterfaceRecorded();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        int int37 = node34.getType();
        boolean boolean38 = node34.isGetterDef();
        node34.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = jSDocInfoBuilder28.build(node34);
        boolean boolean42 = jSDocInfo41.isNoSideEffects();
        boolean boolean43 = jSDocInfo41.hasTypedefType();
        boolean boolean44 = jSDocInfo41.isConsistentIdGenerator();
        boolean boolean45 = jSDocInfo41.isNoAlias();
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = jSDocInfo41.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean49 = jSDocInfoBuilder48.recordJavaDispatch();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node54.addChildrenToFront(node58);
        boolean boolean60 = node54.isGetterDef();
        boolean boolean61 = node54.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj67 = node65.getProp(43);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int72 = node71.getSourceOffset();
        com.google.javascript.rhino.Node node73 = node65.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        node77.setDirectives((java.util.Set<java.lang.String>) strSet80);
        com.google.javascript.rhino.Node node83 = node71.useSourceInfoIfMissingFromForTree(node77);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(32, node54, node71);
        boolean boolean85 = node84.isExprResult();
        boolean boolean86 = node84.isFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = jSDocInfoBuilder48.build(node84);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility88 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility88);
        jSDocInfo41.setVisibility(visibility88);
        jSDocInfo20.setVisibility(visibility88);
        boolean boolean92 = jSDocInfo20.hasFileOverview();
        boolean boolean93 = jSDocInfo20.isDeprecated();
        boolean boolean94 = jSDocInfo20.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression95 = jSDocInfo20.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(jSDocInfo87);
        org.junit.Assert.assertTrue("'" + visibility88 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility88.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(jSTypeExpression95);
    }

    @Test
    public void test17280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17280");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean26 = jSDocInfoBuilder23.addAuthor("");
        boolean boolean27 = jSDocInfoBuilder23.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.isInterfaceRecorded();
        boolean boolean31 = jSDocInfoBuilder29.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder33.isInterfaceRecorded();
        boolean boolean36 = jSDocInfoBuilder33.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj42 = node40.getProp(43);
        boolean boolean43 = node40.isCall();
        boolean boolean44 = node40.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = new com.google.javascript.rhino.JSTypeExpression(node40, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder47 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray49 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray50 = (java.util.ArrayList<java.lang.String>[]) arrayListArray49;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder51 = strListBuilder47.add((java.util.ArrayList<java.lang.String>[]) arrayListArray49);
        boolean boolean52 = jSTypeExpression46.equals((java.lang.Object) arrayListArray49);
        boolean boolean53 = jSDocInfoBuilder33.recordDefineType(jSTypeExpression46);
        com.google.javascript.rhino.Node node54 = jSTypeExpression46.getRoot();
        boolean boolean56 = jSDocInfoBuilder29.recordThrowDescription(jSTypeExpression46, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.isInterfaceRecorded();
        boolean boolean61 = jSDocInfoBuilder58.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj67 = node65.getProp(43);
        boolean boolean68 = node65.isCall();
        boolean boolean69 = node65.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = new com.google.javascript.rhino.JSTypeExpression(node65, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder72 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray74 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray75 = (java.util.ArrayList<java.lang.String>[]) arrayListArray74;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder76 = strListBuilder72.add((java.util.ArrayList<java.lang.String>[]) arrayListArray74);
        boolean boolean77 = jSTypeExpression71.equals((java.lang.Object) arrayListArray74);
        boolean boolean78 = jSDocInfoBuilder58.recordDefineType(jSTypeExpression71);
        boolean boolean79 = jSDocInfoBuilder29.recordEnumParameterType(jSTypeExpression71);
        boolean boolean80 = jSTypeExpression71.isOptionalArg();
        boolean boolean81 = jSTypeExpression71.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression71);
        boolean boolean83 = jSDocInfoBuilder23.recordReturnType(jSTypeExpression82);
        boolean boolean84 = jSDocInfoBuilder1.recordParameter("NUMBER 0.0 43", jSTypeExpression82);
        com.google.javascript.rhino.Node node85 = jSTypeExpression82.getRoot();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strListBuilder47);
        org.junit.Assert.assertNotNull(arrayListArray49);
        org.junit.Assert.assertNotNull(strListArray50);
        org.junit.Assert.assertNotNull(strListBuilder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strListBuilder72);
        org.junit.Assert.assertNotNull(arrayListArray74);
        org.junit.Assert.assertNotNull(strListArray75);
        org.junit.Assert.assertNotNull(strListBuilder76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(node85);
    }

    @Test
    public void test17281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17281");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo20.getBaseType();
        boolean boolean32 = jSDocInfo20.hasEnumParameterType();
        boolean boolean33 = jSDocInfo20.isConstructor();
        java.lang.String str34 = jSDocInfo20.getFileOverview();
        jSDocInfo20.addSuppression("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 49.0\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 49.0\n");
        boolean boolean37 = jSDocInfo20.isDefine();
        boolean boolean38 = jSDocInfo20.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test17282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17282");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isInc();
        boolean boolean10 = node3.isEmpty();
        node3.setOptionalArg(true);
        int int13 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node14 = node3.getLastChild();
        boolean boolean15 = node3.isBreak();
        boolean boolean16 = node3.isNumber();
        boolean boolean17 = node3.isFunction();
        com.google.javascript.rhino.Node[] nodeArray23 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(42, nodeArray23, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray23);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(36, nodeArray23, 40, 4);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(49, nodeArray23);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(50, nodeArray23, 47, 0);
        boolean boolean35 = node34.isVoid();
        node3.addChildToFront(node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node40.addChildrenToFront(node44);
        boolean boolean46 = node40.isInc();
        boolean boolean47 = node40.isHook();
        com.google.javascript.rhino.Node node48 = node40.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node49 = node3.removeChildAfter(node48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeArray23);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
    }

    @Test
    public void test17283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17283");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isLocalResultCall();
        boolean boolean10 = node3.isObjectLit();
        boolean boolean11 = node3.isOr();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test17284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17284");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordJavaDispatch();
        jSDocInfoBuilder12.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordJavaDispatch();
        boolean boolean23 = jSDocInfoBuilder21.recordNoCompile();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder35 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray37 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray38 = (java.util.ArrayList<java.lang.String>[]) arrayListArray37;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = strListBuilder35.add((java.util.ArrayList<java.lang.String>[]) arrayListArray37);
        boolean boolean40 = jSTypeExpression34.equals((java.lang.Object) arrayListArray37);
        boolean boolean41 = jSDocInfoBuilder21.recordParameter("", jSTypeExpression34);
        boolean boolean42 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression34);
        boolean boolean43 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression34);
        boolean boolean45 = jSDocInfoBuilder1.hasParameter("[, hi!, , , hi!, , hi!, ]");
        boolean boolean47 = jSDocInfoBuilder1.recordVersion("GETELEM");
        jSDocInfoBuilder1.markAnnotation("Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n", 26, 38);
        boolean boolean53 = jSDocInfoBuilder1.recordBlockDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean55 = jSDocInfoBuilder1.addReference("NUMBER 0.0 43 [opt_arg: 1]");
        boolean boolean57 = jSDocInfoBuilder1.recordMeaning("NUMBER 0.0 43");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strListBuilder35);
        org.junit.Assert.assertNotNull(arrayListArray37);
        org.junit.Assert.assertNotNull(strListArray38);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test17285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17285");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList81 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList49, (java.lang.Iterable<java.lang.String>) strList60, (java.lang.Iterable<java.lang.String>) strList71, (java.lang.Iterable<java.lang.String>) strList80);
        boolean boolean82 = strList30.containsAll((java.util.Collection<java.lang.String>) strList80);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition83 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition84 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition85 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition86 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition87 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition88 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean89 = typePosition88.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList90 = com.google.common.collect.ImmutableList.of(typePosition83, typePosition84, typePosition85, typePosition86, typePosition87, typePosition88);
        int int91 = strList30.lastIndexOf((java.lang.Object) typePosition88);
        int int92 = strList30.size();
        java.util.stream.Stream<java.lang.String> strStream93 = strList30.stream();
        boolean boolean94 = strList30.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList95 = strList30.reverse();
        // The following exception was thrown during execution in test generation
        try {
            strList95.add((int) (byte) 0, "FALSE 43");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strIterableList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(typePositionList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertNotNull(strStream93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(strList95);
    }

    @Test
    public void test17286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17286");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getVersion();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean36 = node34.getBooleanProp(51);
        boolean boolean37 = strSet32.contains((java.lang.Object) 51);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = null;
        boolean boolean41 = jSDocInfoBuilder39.recordThrowType(jSTypeExpression40);
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int52 = strList50.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList81 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList82 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList50, (java.lang.Iterable<java.lang.String>) strList61, (java.lang.Iterable<java.lang.String>) strList72, (java.lang.Iterable<java.lang.String>) strList81);
        boolean boolean83 = jSDocInfoBuilder39.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        com.google.common.collect.ImmutableList<java.lang.String> strList84 = strList50.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList85 = strList84.asList();
        boolean boolean86 = strSet32.containsAll((java.util.Collection<java.lang.String>) strList85);
        strSet32.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strIterableList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test17287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17287");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder1.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        int int22 = node18.getSourcePosition();
        java.lang.String str26 = node18.toString(false, true, false);
        boolean boolean27 = node18.isDo();
        boolean boolean28 = node18.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.isInterfaceRecorded();
        boolean boolean33 = jSDocInfoBuilder31.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.isInterfaceRecorded();
        boolean boolean38 = jSDocInfoBuilder35.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        boolean boolean45 = node42.isCall();
        boolean boolean46 = node42.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node42, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder49 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray51 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray52 = (java.util.ArrayList<java.lang.String>[]) arrayListArray51;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = strListBuilder49.add((java.util.ArrayList<java.lang.String>[]) arrayListArray51);
        boolean boolean54 = jSTypeExpression48.equals((java.lang.Object) arrayListArray51);
        boolean boolean55 = jSDocInfoBuilder35.recordDefineType(jSTypeExpression48);
        com.google.javascript.rhino.Node node56 = jSTypeExpression48.getRoot();
        boolean boolean58 = jSDocInfoBuilder31.recordThrowDescription(jSTypeExpression48, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.isInterfaceRecorded();
        boolean boolean63 = jSDocInfoBuilder60.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj69 = node67.getProp(43);
        boolean boolean70 = node67.isCall();
        boolean boolean71 = node67.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = new com.google.javascript.rhino.JSTypeExpression(node67, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder74 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray76 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray77 = (java.util.ArrayList<java.lang.String>[]) arrayListArray76;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder78 = strListBuilder74.add((java.util.ArrayList<java.lang.String>[]) arrayListArray76);
        boolean boolean79 = jSTypeExpression73.equals((java.lang.Object) arrayListArray76);
        boolean boolean80 = jSDocInfoBuilder60.recordDefineType(jSTypeExpression73);
        boolean boolean81 = jSDocInfoBuilder31.recordEnumParameterType(jSTypeExpression73);
        boolean boolean82 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression73);
        boolean boolean83 = jSDocInfoBuilder1.recordInterface();
        boolean boolean85 = jSDocInfoBuilder1.recordLends("FALSE 10\n    NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 176180 + "'", int22 == 176180);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING " + "'", str26, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strListBuilder49);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(strListArray52);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strListBuilder74);
        org.junit.Assert.assertNotNull(arrayListArray76);
        org.junit.Assert.assertNotNull(strListArray77);
        org.junit.Assert.assertNotNull(strListBuilder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test17288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17288");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node3 = namePosition0.getItem();
        int int4 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.javascript.rhino.Node node49 = node37.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int61 = node60.getSourceOffset();
        com.google.javascript.rhino.Node node62 = node54.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean63 = node62.isAssignAdd();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean68 = node67.isVar();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) ' ', node21, node49, node62, node67, 1, 100);
        node67.setWasEmptyNode(true);
        boolean boolean74 = node67.isQuotedString();
        boolean boolean76 = node67.getBooleanProp((int) (byte) 0);
        boolean boolean77 = node67.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node78 = node67.getLastSibling();
        namePosition0.setItem(node78);
        com.google.javascript.rhino.jstype.JSType jSType80 = node78.getJSType();
        node78.setString("FALSE 43");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(jSType80);
    }

    @Test
    public void test17289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17289");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", 0, 41);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray9 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        node7.setDirectives((java.util.Set<java.lang.String>) strSet10);
        java.lang.Object[] objArray13 = strSet10.toArray();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        boolean boolean24 = strSet10.retainAll((java.util.Collection<java.lang.String>) strSet20);
        java.lang.Object[] objArray25 = strSet10.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder27.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder27.markName("hi!", staticSourceFile31, (int) (short) 0, (int) (short) 100);
        boolean boolean35 = jSDocInfoBuilder27.recordNoTypeCheck();
        boolean boolean36 = jSDocInfoBuilder27.recordExpose();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node40.addChildrenToFront(node44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = jSDocInfoBuilder27.build(node44);
        java.lang.String str47 = jSDocInfo46.getMeaning();
        boolean boolean48 = jSDocInfo46.isExport();
        boolean boolean49 = strSet10.equals((java.lang.Object) jSDocInfo46);
        boolean boolean50 = jSDocInfo46.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo46.getType();
        boolean boolean52 = jSDocInfo46.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean56 = jSDocInfoBuilder54.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile58 = null;
        jSDocInfoBuilder54.markName("hi!", staticSourceFile58, (int) (short) 0, (int) (short) 100);
        boolean boolean62 = jSDocInfoBuilder54.recordNoTypeCheck();
        boolean boolean63 = jSDocInfoBuilder54.recordExpose();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node67.addChildrenToFront(node71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = jSDocInfoBuilder54.build(node71);
        boolean boolean74 = jSDocInfo73.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo73.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo73.setVisibility(visibility76);
        jSDocInfo46.setVisibility(visibility76);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo46.getThisType();
        java.util.Set<java.lang.String> strSet80 = jSDocInfo46.getModifies();
        java.util.Collection<java.lang.String> strCollection81 = jSDocInfo46.getAuthors();
        node3.setJSDocInfo(jSDocInfo46);
        jSDocInfo46.setDeprecated(false);
        boolean boolean85 = jSDocInfo46.isNoTypeCheck();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSDocInfo46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(jSDocInfo73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + visibility76 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility76.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNull(strCollection81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test17290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17290");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isString();
        int int14 = node3.getCharno();
        com.google.javascript.rhino.Node[] nodeArray19 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(42, nodeArray19, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(39, nodeArray19, (int) '4', 32);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(176129, nodeArray19);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(35, nodeArray19);
        boolean boolean28 = node3.hasChild(node27);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean33 = node32.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet40);
        java.lang.Object obj44 = node37.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node45 = node32.copyInformationFrom(node37);
        boolean boolean46 = node32.isOr();
        int int48 = node32.getIntProp(53);
        com.google.javascript.rhino.Node node49 = node32.cloneNode();
        boolean boolean50 = node49.wasEmptyNode();
        node49.removeProp(36);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean57 = node56.isNull();
        boolean boolean58 = node56.isSyntheticBlock();
        com.google.javascript.rhino.Node node59 = node56.removeChildren();
        com.google.javascript.rhino.InputId inputId60 = null;
        node56.setInputId(inputId60);
        boolean boolean62 = node56.isThis();
        boolean boolean63 = node49.hasChild(node56);
        boolean boolean64 = node49.isString();
        boolean boolean65 = node3.isEquivalentTo(node49);
        com.google.javascript.rhino.Node[] nodeArray72 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(42, nodeArray72, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(49, nodeArray72, 53, 43);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(176180, nodeArray72, 41, 38);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray72);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(26, nodeArray72);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((-1), nodeArray72, 147494, 38);
        boolean boolean87 = node86.isDefaultCase();
        boolean boolean88 = node49.isEquivalentTo(node86);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(nodeArray19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(nodeArray72);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test17291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17291");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", (int) (byte) -1, 31, 49, 12);
        boolean boolean12 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n", staticSourceFile14, (int) (short) 1, 45);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean40 = node39.isContinue();
        boolean boolean41 = node39.isVoid();
        node39.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node47.addChildrenToFront(node51);
        com.google.javascript.rhino.Node node54 = node47.getChildAtIndex(0);
        java.lang.String str55 = node54.toString();
        node54.setSourceEncodedPositionForTree((int) (byte) -1);
        node54.setOptionalArg(false);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj65 = node63.getProp(43);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int70 = node69.getSourceOffset();
        com.google.javascript.rhino.Node node71 = node63.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean76 = node75.isVar();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node81 = node75.copyInformationFromForTree(node80);
        com.google.javascript.rhino.Node node82 = node63.copyInformationFromForTree(node81);
        boolean boolean83 = node54.isEquivalentToTyped(node63);
        boolean boolean84 = node63.isNew();
        java.lang.String str85 = node63.getString();
        node39.addChildToFront(node63);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = new com.google.javascript.rhino.JSTypeExpression(node39, "NUMBER 0.0 [directives: []]");
        boolean boolean89 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression88);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "STRING  43" + "'", str55, "STRING  43");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test17292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17292");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("JSDocInfo");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        java.lang.Object[] objArray33 = strSet30.toArray();
        boolean boolean34 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet30);
        java.lang.Object[] objArray35 = strSet20.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder37.markName("hi!", staticSourceFile41, (int) (short) 0, (int) (short) 100);
        boolean boolean45 = jSDocInfoBuilder37.recordNoTypeCheck();
        boolean boolean46 = jSDocInfoBuilder37.recordExpose();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node50.addChildrenToFront(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = jSDocInfoBuilder37.build(node54);
        java.lang.String str57 = jSDocInfo56.getMeaning();
        boolean boolean58 = jSDocInfo56.isExport();
        boolean boolean59 = strSet20.equals((java.lang.Object) jSDocInfo56);
        boolean boolean61 = strSet20.add("JSDocInfo");
        java.util.Spliterator<java.lang.String> strSpliterator62 = strSet20.spliterator();
        boolean boolean63 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder65.recordJavaDispatch();
        boolean boolean67 = jSDocInfoBuilder65.recordNoCompile();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        boolean boolean75 = node72.isCall();
        boolean boolean76 = node72.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node72, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder79 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray81 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray82 = (java.util.ArrayList<java.lang.String>[]) arrayListArray81;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder83 = strListBuilder79.add((java.util.ArrayList<java.lang.String>[]) arrayListArray81);
        boolean boolean84 = jSTypeExpression78.equals((java.lang.Object) arrayListArray81);
        boolean boolean85 = jSDocInfoBuilder65.recordParameter("", jSTypeExpression78);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression78);
        boolean boolean87 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression78);
        boolean boolean88 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean90 = jSDocInfoBuilder1.recordDeprecationReason("NUMBER 0.0 43 [directives: []]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strListBuilder79);
        org.junit.Assert.assertNotNull(arrayListArray81);
        org.junit.Assert.assertNotNull(strListArray82);
        org.junit.Assert.assertNotNull(strListBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test17293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17293");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(42, nodeArray5, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(49, nodeArray5, 53, 43);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(176180, nodeArray5, 41, 38);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray5);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(37, nodeArray5, 43, 16);
        boolean boolean19 = node18.isThis();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node18.new FileLevelJsDocBuilder();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = node18.getExistingIntProp((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test17294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17294");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node3.hasChildren();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(15);
        com.google.javascript.rhino.Node node9 = node3.useSourceInfoIfMissingFrom(node8);
        boolean boolean10 = node8.isGetProp();
        int int11 = node8.getLength();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node8.siblings();
        boolean boolean13 = node8.isGetProp();
        boolean boolean14 = node8.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test17295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17295");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        boolean boolean6 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test17296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17296");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node18.isComma();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFromForTree(node18);
        boolean boolean22 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node23 = node21.getLastSibling();
        node23.removeProp((int) (byte) 1);
        boolean boolean26 = node23.isFor();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test17297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17297");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = strList50.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList50.spliterator();
        int int55 = strList50.size();
        int int56 = strList50.size();
        java.lang.String str58 = strList50.get((int) (byte) 1);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor59 = strList50.iterator();
        java.lang.Object[] objArray60 = strList50.toArray();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test17298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17298");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) ' ');
        java.lang.Appendable appendable2 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test17299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17299");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isParamList();
        boolean boolean7 = node3.isParamList();
        com.google.javascript.rhino.Node node8 = node3.cloneNode();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        double double14 = node12.getDouble();
        boolean boolean15 = node12.isInc();
        node3.addChildToFront(node12);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node20.addChildrenToFront(node24);
        boolean boolean26 = node20.isInc();
        boolean boolean27 = node20.isEmpty();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj42 = node40.getProp(43);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int47 = node46.getSourceOffset();
        com.google.javascript.rhino.Node node48 = node40.useSourceInfoIfMissingFromForTree(node46);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet55);
        com.google.javascript.rhino.Node node58 = node46.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean59 = node58.isContinue();
        boolean boolean60 = node58.isOnlyModifiesThisCall();
        boolean boolean61 = node58.isDefaultCase();
        boolean boolean62 = node31.hasChild(node58);
        node20.addChildrenToFront(node31);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean68 = node67.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet75);
        java.lang.Object obj79 = node72.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node80 = node67.copyInformationFrom(node72);
        boolean boolean81 = node67.isOr();
        int int83 = node67.getIntProp(53);
        com.google.javascript.rhino.Node node84 = node67.cloneNode();
        boolean boolean85 = node84.wasEmptyNode();
        boolean boolean86 = node31.isEquivalentToTyped(node84);
        java.lang.String str87 = node3.checkTreeEquals(node84);
        int int88 = node84.getLineno();
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newString("THROW", (int) (short) 0, 38);
        node84.addChildrenToFront(node92);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n" + "'", str87, "Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 43 + "'", int88 == 43);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test17300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17300");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test17301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17301");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo20.isImplicitCast();
        boolean boolean25 = jSDocInfo20.hasEnumParameterType();
        java.lang.String str26 = jSDocInfo20.getOriginalCommentString();
        boolean boolean27 = jSDocInfo20.hasReturnType();
        jSDocInfo20.setDeprecated(true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test17302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17302");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 10, "STRING  43");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 43);
        com.google.javascript.rhino.Node node5 = node2.useSourceInfoIfMissingFromForTree(node4);
        boolean boolean6 = node4.isReturn();
        com.google.javascript.rhino.InputId inputId7 = node4.getInputId();
        node4.setSourceEncodedPosition(36);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(inputId7);
    }

    @Test
    public void test17303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17303");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        boolean boolean24 = jSDocInfo20.hasReturnType();
        java.lang.String str25 = jSDocInfo20.getBlockDescription();
        boolean boolean26 = jSDocInfo20.isExport();
        boolean boolean27 = jSDocInfo20.isJavaDispatch();
        int int28 = jSDocInfo20.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test17304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17304");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        com.google.javascript.rhino.Node node10 = node7.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = node10.hasMoreThanOneChild();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test17305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17305");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile3 = node2.getStaticSourceFile();
        boolean boolean4 = node2.isNot();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean9 = node8.isNull();
        node8.putIntProp(1, (int) (byte) 0);
        boolean boolean13 = node8.isIf();
        node8.setVarArgs(false);
        com.google.javascript.rhino.Node node16 = node2.useSourceInfoFrom(node8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = node16.toString(false, true, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(staticSourceFile3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test17306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17306");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        node3.setWasEmptyNode(true);
        boolean boolean10 = node3.isDelProp();
        com.google.javascript.rhino.jstype.JSType jSType11 = node3.getJSType();
        boolean boolean12 = node3.isNull();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node3.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator14 = nodeIterable13.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(nodeSpliterator14);
    }

    @Test
    public void test17307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17307");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 12.0 0 [jsdoc_info: JSDocInfo]\n");
        boolean boolean2 = node1.isFromExterns();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test17308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17308");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression2);
        boolean boolean4 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean5 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test17309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17309");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(167974, "REGEXP Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n", 49, 47);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test17310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17310");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray0 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder> fileLevelJsDocBuilderList1 = com.google.common.collect.ImmutableList.of(fileLevelJsDocBuilderArray0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray2 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray3 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder> fileLevelJsDocBuilderList4 = com.google.common.collect.ImmutableList.of(fileLevelJsDocBuilderArray3);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder[]> fileLevelJsDocBuilderArrayList5 = com.google.common.collect.ImmutableList.of(fileLevelJsDocBuilderArray0, fileLevelJsDocBuilderArray2, fileLevelJsDocBuilderArray3);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder> fileLevelJsDocBuilderList6 = com.google.common.collect.ImmutableList.of(fileLevelJsDocBuilderArray2);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderList1);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray2);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray3);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderList4);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArrayList5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderList6);
    }

    @Test
    public void test17311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17311");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        boolean boolean23 = jSDocInfo20.isConstant();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo20.getBaseType();
        boolean boolean26 = jSDocInfo20.isNoSideEffects();
        boolean boolean28 = jSDocInfo20.hasParameterType("GETELEM  43\n");
        jSDocInfo20.setDeprecated(false);
        boolean boolean31 = jSDocInfo20.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test17312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17312");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean23 = jSDocInfo20.isIdGenerator();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        boolean boolean25 = jSDocInfo20.isNoShadow();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        com.google.javascript.rhino.Node node36 = node29.getChildAtIndex(0);
        java.lang.String str37 = node36.toString();
        node36.setSourceEncodedPositionForTree((int) (byte) -1);
        node36.setOptionalArg(false);
        jSDocInfo20.setAssociatedNode(node36);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node47.addChildrenToFront(node51);
        boolean boolean53 = node47.isGetterDef();
        boolean boolean54 = node47.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj60 = node58.getProp(43);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int65 = node64.getSourceOffset();
        com.google.javascript.rhino.Node node66 = node58.useSourceInfoIfMissingFromForTree(node64);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        node70.setDirectives((java.util.Set<java.lang.String>) strSet73);
        com.google.javascript.rhino.Node node76 = node64.useSourceInfoIfMissingFromForTree(node70);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(32, node47, node64);
        boolean boolean78 = node77.isExprResult();
        node36.addChildrenToFront(node77);
        node36.putIntProp(52, (int) '#');
        boolean boolean83 = node36.isLabel();
        boolean boolean84 = node36.isWhile();
        boolean boolean85 = node36.isLabel();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "STRING  43" + "'", str37, "STRING  43");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test17313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17313");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        boolean boolean35 = jSDocInfoBuilder15.recordDefineType(jSTypeExpression28);
        boolean boolean36 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression28);
        boolean boolean37 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean38 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean40 = jSDocInfoBuilder1.recordLends("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        boolean boolean41 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean42 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test17314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17314");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        jSDocInfo20.setLicense("hi!");
        boolean boolean33 = jSDocInfo20.hasThisType();
        boolean boolean34 = jSDocInfo20.isNoTypeCheck();
        java.lang.String str35 = jSDocInfo20.toString();
        boolean boolean36 = jSDocInfo20.isHidden();
        boolean boolean38 = jSDocInfo20.hasParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        boolean boolean39 = jSDocInfo20.hasType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection40 = jSDocInfo20.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "JSDocInfo" + "'", str35, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(nodeCollection40);
    }

    @Test
    public void test17315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17315");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        double double5 = node3.getDouble();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj13 = node11.getProp(43);
        boolean boolean14 = node11.isCall();
        int int15 = node11.getSourcePosition();
        java.lang.String str19 = node11.toString(false, true, false);
        boolean boolean20 = node11.isNot();
        boolean boolean21 = node11.isDelProp();
        boolean boolean22 = node11.isIf();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder24.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        jSDocInfoBuilder24.markName("hi!", staticSourceFile28, (int) (short) 0, (int) (short) 100);
        boolean boolean32 = jSDocInfoBuilder24.recordNoTypeCheck();
        boolean boolean33 = jSDocInfoBuilder24.recordExpose();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node37.addChildrenToFront(node41);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = jSDocInfoBuilder24.build(node41);
        boolean boolean44 = node41.isOptionalArg();
        com.google.javascript.rhino.Node node45 = node41.getParent();
        node11.addChildrenToBack(node45);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        boolean boolean54 = node50.isEmpty();
        boolean boolean55 = node50.isInstanceOf();
        com.google.javascript.rhino.Node node56 = node45.srcref(node50);
        com.google.javascript.rhino.Node node57 = node3.srcref(node45);
        boolean boolean58 = node57.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176180 + "'", int15 == 176180);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING " + "'", str19, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSDocInfo43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test17316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17316");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet56);
        java.lang.Object[] objArray59 = strSet56.toArray();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node63.setDirectives((java.util.Set<java.lang.String>) strSet66);
        java.lang.Object[] objArray69 = strSet66.toArray();
        boolean boolean70 = strSet56.retainAll((java.util.Collection<java.lang.String>) strSet66);
        java.lang.Object[] objArray71 = strSet56.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator72 = strSet56.spliterator();
        boolean boolean73 = strList49.contains((java.lang.Object) strSpliterator72);
        java.util.Iterator<java.lang.String> strItor74 = strList49.iterator();
        boolean boolean75 = strList30.equals((java.lang.Object) strList49);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor76 = strList30.iterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList77 = strList30.asList();
        java.util.Iterator<java.lang.String> strItor78 = strList77.iterator();
        java.lang.Object[] objArray79 = strList77.toArray();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(strSpliterator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strItor74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strItor76);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strItor78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test17317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17317");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node10.addChildrenToFront(node14);
        boolean boolean16 = node10.isGetterDef();
        boolean boolean17 = node10.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node10, node27);
        boolean boolean41 = node40.isExprResult();
        boolean boolean42 = node40.isFunction();
        com.google.javascript.rhino.Node node43 = node3.srcrefTree(node40);
        boolean boolean44 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node3.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSDocInfo45);
    }

    @Test
    public void test17318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17318");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getTypedefType();
        boolean boolean29 = jSDocInfo20.isExpose();
        java.lang.String str30 = jSDocInfo20.getSourceName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo20.getThrownTypes();
        java.lang.String str32 = jSDocInfo20.getLendsName();
        jSDocInfo20.addSuppression("[, [STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!], Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n, Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n, OR  54\n, hi!, Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n, [STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!], Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n, [], TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertNull(str32);
    }

    @Test
    public void test17319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17319");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = strList50.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList50.spliterator();
        int int55 = strList50.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder57.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = null;
        boolean boolean61 = jSDocInfoBuilder57.recordParameter("", jSTypeExpression60);
        boolean boolean62 = jSDocInfoBuilder57.isJavaDispatch();
        boolean boolean63 = jSDocInfoBuilder57.recordNoSideEffects();
        boolean boolean64 = jSDocInfoBuilder57.recordPreserveTry();
        boolean boolean65 = jSDocInfoBuilder57.recordNoCompile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = null;
        jSDocInfoBuilder57.markName("hi!", staticSourceFile67, (int) (short) 100, 8);
        int int71 = strList50.lastIndexOf((java.lang.Object) staticSourceFile67);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj78 = node76.getProp(43);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int83 = node82.getSourceOffset();
        com.google.javascript.rhino.Node node84 = node76.useSourceInfoIfMissingFromForTree(node82);
        boolean boolean85 = node84.isIf();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(49, node84, 0, 100);
        com.google.javascript.rhino.Node node89 = node84.detachFromParent();
        boolean boolean90 = node89.isFalse();
        node89.putIntProp(31, 29);
        int int94 = node89.getSideEffectFlags();
        boolean boolean95 = strList50.equals((java.lang.Object) node89);
        com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray96 = new com.google.javascript.rhino.JSDocInfo.TypePosition[] {};
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo.TypePosition[] typePositionArray97 = strList50.toArray(typePositionArray96);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(typePositionArray96);
    }

    @Test
    public void test17320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17320");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getExtendedInterfaces();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isVar();
        node28.putBooleanProp(30, false);
        boolean boolean33 = node28.isSwitch();
        boolean boolean34 = node28.isIn();
        boolean boolean35 = node28.isFromExterns();
        com.google.javascript.rhino.Node node36 = node28.cloneNode();
        jSDocInfo20.setAssociatedNode(node36);
        java.util.Collection<java.lang.String> strCollection38 = jSDocInfo20.getAuthors();
        java.lang.String str39 = jSDocInfo20.getDescription();
        boolean boolean40 = jSDocInfo20.hasEnumParameterType();
        boolean boolean41 = jSDocInfo20.hasType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(strCollection38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test17321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17321");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        node3.detachChildren();
        boolean boolean6 = node3.isAnd();
        boolean boolean7 = node3.isSwitch();
        boolean boolean8 = node3.isExprResult();
        boolean boolean9 = node3.isNumber();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 41);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node15.isQuotedString();
        boolean boolean20 = node15.isObjectLit();
        boolean boolean21 = node15.isOr();
        boolean boolean22 = node15.isHook();
        com.google.javascript.rhino.Node node23 = node11.srcrefTree(node15);
        com.google.javascript.rhino.Node node24 = node3.clonePropsFrom(node11);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
    }

    @Test
    public void test17322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17322");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        boolean boolean3 = node1.isDebugger();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test17323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17323");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder19.recordParameter("hi!", jSTypeExpression22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean25 = jSDocInfoBuilder19.recordVisibility(visibility24);
        jSDocInfo14.setVisibility(visibility24);
        boolean boolean27 = jSDocInfo14.isExport();
        java.lang.String str28 = jSDocInfo14.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test17324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17324");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("STRING  43 [jsdoc_info: JSDocInfo]\n", 24, (int) (short) 10);
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(31, node4);
        node4.setLength(47);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test17325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17325");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 35);
        int int2 = node1.getCharno();
        java.lang.String str3 = node1.getSourceFileName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node7.addChildrenToFront(node11);
        node11.setQuotedString();
        java.lang.String str14 = node11.getSourceFileName();
        boolean boolean15 = node1.isEquivalentToTyped(node11);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test17326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17326");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        jSDocInfoBuilder1.markAnnotation("STRING  43", 39, 47);
        boolean boolean25 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean26 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean27 = jSDocInfoBuilder1.isPopulated();
        boolean boolean28 = jSDocInfoBuilder1.recordNoCompile();
        jSDocInfoBuilder1.markText("", 54, 45055, 26, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test17327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17327");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        jSDocInfoBuilder1.markName("[]", 49, (int) ' ');
        boolean boolean14 = jSDocInfoBuilder1.recordExterns();
        boolean boolean15 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean17 = jSDocInfoBuilder1.recordVersion("GETELEM  43\n");
        boolean boolean18 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17328");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        node18.setQuotedString();
        boolean boolean21 = node18.isHook();
        int int22 = node18.getType();
        com.google.javascript.rhino.Node node23 = node3.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node23.getJSDocInfo();
        com.google.javascript.rhino.Node node25 = node23.getParent();
        boolean boolean26 = node23.isIn();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable27 = node23.getAncestors();
        boolean boolean28 = node23.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 40 + "'", int22 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(ancestorIterable27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17329");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getAuthors();
        boolean boolean30 = jSDocInfo20.isConstructor();
        boolean boolean31 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo20.getThisType();
        boolean boolean33 = jSDocInfo20.isNoTypeCheck();
        boolean boolean34 = jSDocInfo20.isImplicitCast();
        int int35 = jSDocInfo20.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test17330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17330");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        boolean boolean27 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.isExpose();
        java.lang.String str29 = jSDocInfo20.getSourceName();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = jSDocInfo20.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo20.getImplementedInterfaces();
        boolean boolean32 = jSDocInfo20.hasReturnType();
        boolean boolean33 = jSDocInfo20.hasBaseType();
        java.lang.String str34 = jSDocInfo20.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test17331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17331");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder13.isInterfaceRecorded();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        int int22 = node19.getType();
        boolean boolean23 = node19.isGetterDef();
        node19.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = jSDocInfoBuilder13.build(node19);
        boolean boolean27 = jSDocInfo26.isNoSideEffects();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo26.setAssociatedNode(node29);
        boolean boolean31 = node29.isInc();
        boolean boolean32 = strList8.contains((java.lang.Object) node29);
        java.util.Iterator<java.lang.String> strItor33 = strList8.iterator();
        int int34 = strList8.size();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 40 + "'", int22 == 40);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
    }

    @Test
    public void test17332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17332");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean58 = node57.isNull();
        boolean boolean59 = node57.isSyntheticBlock();
        com.google.javascript.rhino.Node node60 = node57.removeChildren();
        com.google.javascript.rhino.InputId inputId61 = null;
        node57.setInputId(inputId61);
        boolean boolean63 = strList19.equals((java.lang.Object) node57);
        boolean boolean64 = node57.isParamList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = node57.getJSDocInfo();
        boolean boolean66 = node57.isLabel();
        com.google.javascript.rhino.InputId inputId67 = null;
        node57.setInputId(inputId67);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(jSDocInfo65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test17333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17333");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node7.setJSType(jSType10);
        java.lang.String str12 = node7.getString();
        boolean boolean13 = node7.isWith();
        java.util.Set<java.lang.String> strSet14 = node7.getDirectives();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean20 = node19.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.Node node42 = node30.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean43 = node36.isThrow();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(35, node19, node36);
        node44.setLength(31);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean51 = node50.isNull();
        boolean boolean52 = node50.isFromExterns();
        boolean boolean53 = node50.isFunction();
        com.google.javascript.rhino.Node node54 = node50.cloneTree();
        boolean boolean55 = node54.isFor();
        com.google.javascript.rhino.Node node56 = node44.srcrefTree(node54);
        node56.setLength(15);
        boolean boolean59 = node7.hasChild(node56);
        boolean boolean60 = node56.isParamList();
        boolean boolean61 = node56.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test17334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17334");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node10.addChildrenToFront(node14);
        boolean boolean16 = node10.isGetterDef();
        boolean boolean17 = node10.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node10, node27);
        boolean boolean41 = node40.isExprResult();
        boolean boolean42 = node40.isFunction();
        com.google.javascript.rhino.Node node43 = node3.srcrefTree(node40);
        boolean boolean44 = node3.isDebugger();
        boolean boolean45 = node3.isHook();
        boolean boolean46 = node3.isReturn();
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test17335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17335");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        boolean boolean30 = jSDocInfo20.containsDeclaration();
        boolean boolean31 = jSDocInfo20.isConstructor();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = jSDocInfo20.getThrownTypes();
        boolean boolean33 = jSDocInfo20.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test17336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17336");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream11 = strList8.stream();
        boolean boolean12 = strList8.isEmpty();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder14.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        jSDocInfoBuilder14.markName("hi!", staticSourceFile18, (int) (short) 0, (int) (short) 100);
        boolean boolean22 = jSDocInfoBuilder14.recordNoTypeCheck();
        boolean boolean23 = jSDocInfoBuilder14.recordExpose();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node27.addChildrenToFront(node31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = jSDocInfoBuilder14.build(node31);
        boolean boolean34 = jSDocInfo33.isConstructor();
        int int35 = jSDocInfo33.getExtendedInterfacesCount();
        boolean boolean36 = jSDocInfo33.isIdGenerator();
        java.lang.String str37 = jSDocInfo33.getFileOverview();
        boolean boolean38 = jSDocInfo33.isNoShadow();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node42.addChildrenToFront(node46);
        com.google.javascript.rhino.Node node49 = node42.getChildAtIndex(0);
        java.lang.String str50 = node49.toString();
        node49.setSourceEncodedPositionForTree((int) (byte) -1);
        node49.setOptionalArg(false);
        jSDocInfo33.setAssociatedNode(node49);
        boolean boolean56 = node49.isAdd();
        int int57 = strList8.lastIndexOf((java.lang.Object) node49);
        java.util.List<java.lang.String> strList60 = strList8.subList((int) (short) 1, 7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList63 = strList8.subList(167974, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (167974) must not be greater than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "STRING  43" + "'", str50, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(strList60);
    }

    @Test
    public void test17337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17337");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        node4.removeProp(10);
        node4.setVarArgs(true);
        int int50 = node4.getIntProp(45);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        boolean boolean57 = node54.isCall();
        int int58 = node54.getSourcePosition();
        java.lang.String str62 = node54.toString(false, true, false);
        boolean boolean63 = node54.isNot();
        boolean boolean64 = node54.isDelProp();
        boolean boolean65 = node54.isTrue();
        boolean boolean66 = node54.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType67 = node54.getJSType();
        node54.setString("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean70 = node54.isDo();
        boolean boolean71 = node54.isDo();
        int int72 = node4.getIndexOfChild(node54);
        java.lang.String str73 = node54.getQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 176180 + "'", int58 == 176180);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "STRING " + "'", str62, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNull(str73);
    }

    @Test
    public void test17338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17338");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        boolean boolean30 = jSDocInfo20.containsDeclaration();
        boolean boolean31 = jSDocInfo20.isDefine();
        boolean boolean32 = jSDocInfo20.isIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo20.getThrownTypes();
        java.lang.String str35 = jSDocInfo20.getDescriptionForParameter("");
        boolean boolean36 = jSDocInfo20.isNoSideEffects();
        boolean boolean37 = jSDocInfo20.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test17339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17339");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(true);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder28.recordNoTypeCheck();
        jSDocInfoBuilder28.recordOriginalCommentString("");
        boolean boolean32 = jSDocInfoBuilder28.isJavaDispatch();
        boolean boolean33 = jSDocInfoBuilder28.isPopulatedWithFileOverview();
        boolean boolean34 = jSDocInfoBuilder28.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = null;
        boolean boolean40 = jSDocInfoBuilder36.recordParameter("", jSTypeExpression39);
        boolean boolean41 = jSDocInfoBuilder36.recordExterns();
        boolean boolean42 = jSDocInfoBuilder36.recordPreserveTry();
        boolean boolean43 = jSDocInfoBuilder36.recordNoCompile();
        boolean boolean45 = jSDocInfoBuilder36.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = null;
        boolean boolean47 = jSDocInfoBuilder36.recordType(jSTypeExpression46);
        boolean boolean48 = jSDocInfoBuilder36.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder50.isInterfaceRecorded();
        boolean boolean53 = jSDocInfoBuilder50.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj59 = node57.getProp(43);
        boolean boolean60 = node57.isCall();
        boolean boolean61 = node57.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = new com.google.javascript.rhino.JSTypeExpression(node57, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder64 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray66 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray67 = (java.util.ArrayList<java.lang.String>[]) arrayListArray66;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder68 = strListBuilder64.add((java.util.ArrayList<java.lang.String>[]) arrayListArray66);
        boolean boolean69 = jSTypeExpression63.equals((java.lang.Object) arrayListArray66);
        boolean boolean70 = jSDocInfoBuilder50.recordDefineType(jSTypeExpression63);
        boolean boolean71 = jSDocInfoBuilder36.recordBaseType(jSTypeExpression63);
        boolean boolean72 = jSDocInfoBuilder28.recordBaseType(jSTypeExpression63);
        boolean boolean73 = jSDocInfoBuilder25.recordEnumParameterType(jSTypeExpression63);
        boolean boolean74 = jSTypeExpression63.isOptionalArg();
        boolean boolean75 = jSDocInfoBuilder23.recordThrowType(jSTypeExpression63);
        boolean boolean76 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression63);
        boolean boolean77 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strListBuilder64);
        org.junit.Assert.assertNotNull(arrayListArray66);
        org.junit.Assert.assertNotNull(strListArray67);
        org.junit.Assert.assertNotNull(strListBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test17340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17340");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean11 = jSDocInfoBuilder1.recordMeaning("hi!");
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = com.google.common.collect.ImmutableList.of("STRING  43 [var_args_name: 1]\n", "[, hi!, , , hi!, , hi!, ]", "OR  54\n", "GETELEM");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder18.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        jSDocInfoBuilder18.markName("hi!", staticSourceFile22, (int) (short) 0, (int) (short) 100);
        boolean boolean26 = jSDocInfoBuilder18.recordNoTypeCheck();
        boolean boolean27 = jSDocInfoBuilder18.recordExpose();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node31.addChildrenToFront(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = jSDocInfoBuilder18.build(node35);
        boolean boolean38 = jSDocInfo37.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo37.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility40 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo37.setVisibility(visibility40);
        boolean boolean42 = jSDocInfo37.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo37.getImplementedInterfaces();
        java.lang.String str44 = jSDocInfo37.getVersion();
        java.lang.String str45 = jSDocInfo37.getDeprecationReason();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo37.getModifies();
        java.lang.Object[] objArray47 = strSet46.toArray();
        int int48 = strList16.indexOf((java.lang.Object) strSet46);
        boolean boolean49 = jSDocInfoBuilder1.recordModifies(strSet46);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nSTRING STRING  43 [synthetic: 1] 35\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING STRING  43 [synthetic: 1] 35\n\n\nSubtree2: STRING  43\n");
        boolean boolean52 = jSDocInfoBuilder1.recordHiddenness();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + visibility40 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility40.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test17341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17341");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        boolean boolean23 = node22.isContinue();
        boolean boolean24 = node22.isVoid();
        double double25 = node22.getDouble();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node22.siblings();
        boolean boolean27 = node22.isVar();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(51, node22);
        node28.setVarArgs(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test17342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17342");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream11 = strList8.stream();
        boolean boolean12 = strList8.isEmpty();
        boolean boolean13 = strList8.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int24 = strList22.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator25 = strList22.spliterator();
        boolean boolean26 = strList22.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean33 = typePosition32.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList34 = com.google.common.collect.ImmutableList.of(typePosition27, typePosition28, typePosition29, typePosition30, typePosition31, typePosition32);
        int int35 = strList22.indexOf((java.lang.Object) typePosition32);
        boolean boolean36 = strList8.containsAll((java.util.Collection<java.lang.String>) strList22);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = strList22.reverse();
        java.lang.String str39 = strList22.get(4);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int44 = node43.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType45 = node43.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder46 = node43.getJsDocBuilderForNode();
        boolean boolean47 = node43.isOr();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node51.addChildrenToFront(node55);
        com.google.javascript.rhino.Node node58 = node51.getChildAtIndex(0);
        boolean boolean59 = node51.isExprResult();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isNull();
        boolean boolean65 = node63.isThis();
        boolean boolean66 = node51.hasChild(node63);
        com.google.javascript.rhino.Node node67 = node43.useSourceInfoIfMissingFromForTree(node51);
        node67.setCharno(39);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        int int74 = node73.getSideEffectFlags();
        node73.setSourceEncodedPositionForTree(43);
        boolean boolean77 = node67.hasChild(node73);
        boolean boolean78 = node73.isReturn();
        boolean boolean79 = node73.isTry();
        int int80 = strList22.indexOf((java.lang.Object) node73);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor82 = strList22.listIterator(26);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (26) must not be greater than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(typePositionList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test17343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17343");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isWhile();
        com.google.javascript.rhino.Node node6 = node3.getLastSibling();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node10.addChildrenToFront(node14);
        boolean boolean16 = node10.isGetterDef();
        boolean boolean17 = node10.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean22 = node21.isOptionalArg();
        boolean boolean23 = node21.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        boolean boolean34 = node28.isGetterDef();
        boolean boolean35 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj41 = node39.getProp(43);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int46 = node45.getSourceOffset();
        com.google.javascript.rhino.Node node47 = node39.useSourceInfoIfMissingFromForTree(node45);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet54);
        com.google.javascript.rhino.Node node57 = node45.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node28, node45);
        boolean boolean59 = node58.isExprResult();
        boolean boolean60 = node58.isFunction();
        com.google.javascript.rhino.Node node61 = node21.srcrefTree(node58);
        boolean boolean62 = node21.isDebugger();
        boolean boolean63 = node21.isFalse();
        boolean boolean64 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node66 = node21.getAncestor(50);
        boolean boolean67 = node10.isEquivalentTo(node21);
        int int68 = node21.getChildCount();
        boolean boolean69 = node21.isFromExterns();
        int int70 = node21.getSourcePosition();
        com.google.javascript.rhino.Node node71 = node6.useSourceInfoIfMissingFrom(node21);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test17344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17344");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str25 = jSDocInfo20.getLendsName();
        boolean boolean27 = jSDocInfo20.hasParameter("");
        java.lang.String str28 = jSDocInfo20.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getParameterType("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        boolean boolean31 = jSDocInfo20.containsDeclaration();
        java.lang.String str32 = jSDocInfo20.getReturnDescription();
        boolean boolean33 = jSDocInfo20.isOverride();
        boolean boolean34 = jSDocInfo20.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo20.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
    }

    @Test
    public void test17345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17345");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        int int11 = strList8.size();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray15 = strList8.toArray(strArray14);
        com.google.common.collect.ImmutableList<java.lang.String> strList16 = com.google.common.collect.ImmutableList.of(strArray15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj22 = node20.getProp(43);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int27 = node26.getSourceOffset();
        com.google.javascript.rhino.Node node28 = node20.useSourceInfoIfMissingFromForTree(node26);
        int int29 = node20.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = node20.getJSDocInfo();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean35 = node34.isVar();
        node34.putBooleanProp(30, false);
        boolean boolean39 = node34.isSwitch();
        boolean boolean40 = node34.isUnscopedQualifiedName();
        boolean boolean41 = node34.hasChildren();
        node34.setCharno(52);
        com.google.javascript.rhino.Node node44 = node20.clonePropsFrom(node34);
        boolean boolean45 = node20.isQuotedString();
        boolean boolean46 = node20.isBlock();
        boolean boolean47 = node20.isTry();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean52 = node51.isOptionalArg();
        node51.setSourceEncodedPosition(12);
        boolean boolean55 = node51.isFromExterns();
        com.google.javascript.rhino.Node node56 = node20.useSourceInfoIfMissingFrom(node51);
        boolean boolean57 = node51.isFalse();
        boolean boolean58 = strList16.contains((java.lang.Object) node51);
        java.util.ListIterator<java.lang.String> strItor60 = strList16.listIterator((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = strList16.add("STRING  43 [synthetic: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNull(jSDocInfo30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strItor60);
    }

    @Test
    public void test17346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17346");
        java.lang.String[] strArray4 = new java.lang.String[] { "[, hi!, , , hi!, , hi!, ]", "", "[, hi!, , , hi!, , hi!, ]", "hi!" };
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = com.google.common.collect.ImmutableList.copyOf(strArray4);
        int int6 = strList5.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "hi!", "", "NUMBER 0.0 43", "", "[]", "hi!", "[]", "STRING ", "NUMBER 0.0 43");
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor18 = strList17.listIterator();
        boolean boolean19 = strList5.containsAll((java.util.Collection<java.lang.String>) strList17);
        int int20 = strList17.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = strList17.asList();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo42.getExtendedInterfaces();
        java.lang.String str46 = jSDocInfo42.getDescription();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo42.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream48 = strSet47.parallelStream();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean53 = node52.isNull();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet60);
        java.lang.Object[] objArray63 = strSet60.toArray();
        node52.setDirectives((java.util.Set<java.lang.String>) strSet60);
        boolean boolean65 = strSet47.containsAll((java.util.Collection<java.lang.String>) strSet60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder67.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        jSDocInfoBuilder67.markName("hi!", staticSourceFile71, (int) (short) 0, (int) (short) 100);
        boolean boolean75 = jSDocInfoBuilder67.recordNoTypeCheck();
        boolean boolean76 = jSDocInfoBuilder67.recordExpose();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node80.addChildrenToFront(node84);
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = jSDocInfoBuilder67.build(node84);
        boolean boolean87 = jSDocInfo86.isConstructor();
        java.util.Collection<java.lang.String> strCollection88 = jSDocInfo86.getAuthors();
        boolean boolean89 = strSet47.remove((java.lang.Object) strCollection88);
        boolean boolean90 = strList21.containsAll((java.util.Collection<java.lang.String>) strSet47);
        boolean boolean91 = strList21.isEmpty();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(jSDocInfo86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(strCollection88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test17347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17347");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean3 = node1.getBooleanProp(51);
        boolean boolean4 = node1.isName();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node8.addChildrenToFront(node12);
        node12.setQuotedString();
        com.google.javascript.rhino.Node node15 = node12.removeFirstChild();
        boolean boolean16 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = node1.copyInformationFrom(node12);
        boolean boolean18 = node1.isIf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test17348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17348");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        boolean boolean63 = strList19.containsAll((java.util.Collection<java.lang.String>) strList62);
        java.util.Iterator<java.lang.String> strItor64 = strList19.iterator();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int69 = node68.getSourceOffset();
        double double70 = node68.getDouble();
        boolean boolean71 = node68.isInc();
        int int72 = strList19.indexOf((java.lang.Object) node68);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable73 = node68.siblings();
        int int74 = node68.getSourcePosition();
        com.google.javascript.rhino.InputId inputId75 = null;
        node68.setInputId(inputId75);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj82 = node80.getProp(43);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int87 = node86.getSourceOffset();
        com.google.javascript.rhino.Node node88 = node80.useSourceInfoIfMissingFromForTree(node86);
        boolean boolean89 = node88.isIf();
        boolean boolean90 = node88.isAnd();
        node88.detachChildren();
        boolean boolean92 = node88.isStringKey();
        boolean boolean94 = node88.getBooleanProp(44);
        boolean boolean95 = node88.hasOneChild();
        com.google.javascript.rhino.Node node96 = node68.copyInformationFrom(node88);
        node88.setLineno((int) ' ');
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 176129 + "'", int74 == 176129);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test17349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17349");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        boolean boolean12 = node10.isExprResult();
        boolean boolean13 = node10.isCall();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        double double19 = node17.getDouble();
        boolean boolean20 = node17.isInc();
        boolean boolean21 = node17.isSetterDef();
        node17.setOptionalArg(false);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder25.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        jSDocInfoBuilder25.markName("hi!", staticSourceFile29, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder25.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        boolean boolean45 = node42.isCall();
        int int46 = node42.getSourcePosition();
        java.lang.String str50 = node42.toString(false, true, false);
        boolean boolean51 = node42.isDo();
        boolean boolean52 = node42.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = jSDocInfoBuilder25.build(node42);
        com.google.javascript.rhino.InputId inputId54 = node42.getInputId();
        node17.addChildrenToBack(node42);
        com.google.javascript.rhino.Node node56 = node10.useSourceInfoIfMissingFrom(node17);
        boolean boolean57 = node17.isContinue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 176180 + "'", int46 == 176180);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "STRING " + "'", str50, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSDocInfo53);
        org.junit.Assert.assertNull(inputId54);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test17350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17350");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        boolean boolean11 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean12 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17351");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isOverride();
        boolean boolean19 = jSDocInfo14.isExport();
        java.lang.String str20 = jSDocInfo14.getLicense();
        boolean boolean21 = jSDocInfo14.hasType();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = jSDocInfo14.getTemplateTypeNames();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node26.addChildrenToFront(node30);
        node30.setQuotedString();
        com.google.javascript.rhino.Node node33 = node30.removeFirstChild();
        int int35 = node30.getIntProp((int) 'a');
        node30.setCharno(47);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj43 = node41.getProp(43);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int48 = node47.getSourceOffset();
        com.google.javascript.rhino.Node node49 = node41.useSourceInfoIfMissingFromForTree(node47);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean54 = node53.isVar();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node59 = node53.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node60 = node41.copyInformationFromForTree(node59);
        boolean boolean61 = node30.hasChild(node60);
        com.google.javascript.rhino.Node node62 = node60.cloneNode();
        boolean boolean63 = strList22.equals((java.lang.Object) node62);
        java.lang.Object[] objArray64 = strList22.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = strList22.reverse();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator66 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList65.replaceAll(strUnaryOperator66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(strList65);
    }

    @Test
    public void test17352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17352");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        java.lang.String str5 = node4.toStringTree();
        java.lang.String str6 = node4.getSourceFileName();
        boolean boolean7 = node4.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR  54\n" + "'", str5, "OR  54\n");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test17353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17353");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator10 = strSet6.spliterator();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean33 = node32.isContinue();
        node32.setSourceEncodedPosition(45);
        boolean boolean36 = strSet6.remove((java.lang.Object) node32);
        boolean boolean37 = node32.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(strSpliterator10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test17354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17354");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        boolean boolean26 = jSDocInfo20.isNoAlias();
        boolean boolean27 = jSDocInfo20.isNoSideEffects();
        boolean boolean28 = jSDocInfo20.isHidden();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo20.getParameterNames();
        java.lang.String str30 = jSDocInfo20.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test17355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17355");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        node4.removeProp(10);
        node4.setVarArgs(true);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int59 = node58.getSourceOffset();
        com.google.javascript.rhino.Node node60 = node52.useSourceInfoIfMissingFromForTree(node58);
        boolean boolean61 = node60.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node60.getStaticSourceFile();
        boolean boolean63 = node60.isDo();
        com.google.javascript.rhino.Node node64 = node4.useSourceInfoFrom(node60);
        com.google.javascript.rhino.InputId inputId65 = node64.getInputId();
        boolean boolean66 = node64.isContinue();
        boolean boolean67 = node64.isGetterDef();
        boolean boolean68 = node64.hasChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder69 = node64.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder69.append("Node tree inequality:\nTree1:\nSTRING  43 [directives: []]\n\n\nTree2:\nTHIS\n\n\nSubtree1: STRING  43 [directives: []]\n\n\nSubtree2: THIS\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(inputId65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test17356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17356");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        boolean boolean11 = node3.isDefaultCase();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node15.addChildrenToFront(node19);
        node19.setQuotedString();
        com.google.javascript.rhino.Node node22 = node19.removeFirstChild();
        int int24 = node19.getIntProp((int) 'a');
        node19.setCharno(47);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int37 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node38 = node30.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean43 = node42.isVar();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node48 = node42.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node49 = node30.copyInformationFromForTree(node48);
        boolean boolean50 = node19.hasChild(node49);
        boolean boolean51 = node49.isDec();
        node49.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node54 = node3.srcrefTree(node49);
        java.util.Set<java.lang.String> strSet55 = node49.getDirectives();
        com.google.javascript.rhino.Node node56 = node49.getLastSibling();
        int int57 = node49.getChildCount();
        boolean boolean58 = node49.isNew();
        boolean boolean59 = node49.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(strSet55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test17357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17357");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int43 = strList41.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList62 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList52, (java.lang.Iterable<java.lang.String>) strList61);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int73 = strList71.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator74 = strList71.spliterator();
        boolean boolean75 = strList41.equals((java.lang.Object) strList71);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean80 = node79.isVar();
        boolean boolean81 = strList71.contains((java.lang.Object) node79);
        boolean boolean82 = node79.isThis();
        int int83 = node21.getIndexOfChild(node79);
        node21.putBooleanProp(39, true);
        boolean boolean87 = node21.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strIterableList62);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test17358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17358");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "Node tree inequality:\nTree1:\nLE 51\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: LE 51\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean3 = node2.isFor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test17359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17359");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        boolean boolean45 = node44.isObjectLit();
        node44.setLength(4095);
        boolean boolean48 = node44.wasEmptyNode();
        boolean boolean49 = node44.isNot();
        com.google.javascript.rhino.Node node50 = node44.removeChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test17360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17360");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = jSDocInfo42.getTemplateTypeNames();
        java.util.ListIterator<java.lang.String> strItor51 = strList50.listIterator();
        java.util.stream.Stream<java.lang.String> strStream52 = strList50.parallelStream();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(strStream52);
    }

    @Test
    public void test17361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17361");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isSyntheticBlock();
        boolean boolean15 = node12.hasMoreThanOneChild();
        typePosition2.setItem(node12);
        com.google.javascript.rhino.Node node17 = node12.getParent();
        boolean boolean18 = node12.isLabelName();
        com.google.javascript.rhino.Node node19 = node12.getLastSibling();
        int int20 = node12.getSourceOffset();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable21 = node12.getAncestors();
        boolean boolean22 = node12.isString();
        node12.setLineno((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test17362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17362");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(53, "hi!", (int) (short) -1, (int) (short) 10);
        com.google.javascript.rhino.Node node7 = node6.getLastSibling();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean12 = node11.isVar();
        node11.putBooleanProp(30, false);
        boolean boolean16 = node11.isSwitch();
        boolean boolean17 = node11.isIn();
        node11.setSourceEncodedPosition(45);
        boolean boolean20 = node11.isAssign();
        int int21 = node11.getSourceOffset();
        int int22 = node11.getLineno();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean27 = node26.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node28 = node26.cloneNode();
        boolean boolean29 = node28.isGetElem();
        node28.addSuppression("");
        int int32 = node28.getType();
        boolean boolean33 = node28.isInc();
        boolean boolean34 = node28.isNE();
        boolean boolean35 = node28.isName();
        boolean boolean36 = node28.isRegExp();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 1, node6, node11, node28);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(4, node37, 4, 43);
        boolean boolean41 = node37.isWith();
        boolean boolean42 = node37.isLabelName();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 40 + "'", int32 == 40);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test17363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17363");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("");
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str26 = strList25.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = strList25.reverse();
        int int28 = strList25.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        jSDocInfoBuilder30.markName("hi!", staticSourceFile34, (int) (short) 0, (int) (short) 100);
        boolean boolean38 = jSDocInfoBuilder30.recordNoTypeCheck();
        boolean boolean39 = jSDocInfoBuilder30.recordExpose();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node43.addChildrenToFront(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = jSDocInfoBuilder30.build(node47);
        boolean boolean50 = jSDocInfo49.isExport();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean55 = node54.isOptionalArg();
        com.google.javascript.rhino.Node node56 = node54.getNext();
        jSDocInfo49.setAssociatedNode(node56);
        jSDocInfo49.setLicense("STRING ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo49.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean62 = jSDocInfo49.hasEnumParameterType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility63 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo49.setVisibility(visibility63);
        boolean boolean65 = strList25.equals((java.lang.Object) jSDocInfo49);
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = strList25.reverse();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(16, "STRING  43 [var_args_name: 1]\n");
        com.google.javascript.rhino.Node node70 = node69.getFirstChild();
        boolean boolean71 = strList66.contains((java.lang.Object) node69);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "[]" + "'", str26, "[]");
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNull(jSTypeExpression61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + visibility63 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility63.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test17364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17364");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        double double24 = node21.getDouble();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node21.siblings();
        boolean boolean26 = node21.isVar();
        boolean boolean27 = node21.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder29.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        jSDocInfoBuilder29.markName("hi!", staticSourceFile33, (int) (short) 0, (int) (short) 100);
        boolean boolean37 = jSDocInfoBuilder29.recordNoTypeCheck();
        boolean boolean38 = jSDocInfoBuilder29.recordExpose();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node42.addChildrenToFront(node46);
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = jSDocInfoBuilder29.build(node46);
        boolean boolean49 = node46.isOptionalArg();
        com.google.javascript.rhino.Node node50 = node46.getParent();
        boolean boolean51 = node50.isAssignAdd();
        boolean boolean52 = node50.isSyntheticBlock();
        boolean boolean53 = node50.isOnlyModifiesThisCall();
        node50.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node56 = node21.srcrefTree(node50);
        boolean boolean57 = node56.isFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = node56.getJSDocInfo();
        boolean boolean59 = node56.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(jSDocInfo58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test17365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17365");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int19 = node18.getSourceOffset();
        com.google.javascript.rhino.Node node20 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isOnlyModifiesThisCall();
        boolean boolean33 = node30.isDefaultCase();
        boolean boolean34 = node3.hasChild(node30);
        int int35 = node3.getSourceOffset();
        boolean boolean36 = node3.isNew();
        boolean boolean37 = node3.isOnlyModifiesThisCall();
        boolean boolean38 = node3.isVoid();
        com.google.javascript.rhino.Node node39 = node3.cloneTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test17366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17366");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        node21.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node26 = node21.cloneNode();
        java.util.Set<java.lang.String> strSet27 = node26.getDirectives();
        boolean boolean28 = node26.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17367");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(52, (int) (byte) 10, 53);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable4 = node3.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor5 = ancestorIterable4.iterator();
        org.junit.Assert.assertNotNull(ancestorIterable4);
        org.junit.Assert.assertNotNull(nodeItor5);
    }

    @Test
    public void test17368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17368");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder10.recordNoCompile();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        boolean boolean20 = node17.isCall();
        boolean boolean21 = node17.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node17, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder24 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray26 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray27 = (java.util.ArrayList<java.lang.String>[]) arrayListArray26;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder28 = strListBuilder24.add((java.util.ArrayList<java.lang.String>[]) arrayListArray26);
        boolean boolean29 = jSTypeExpression23.equals((java.lang.Object) arrayListArray26);
        boolean boolean30 = jSDocInfoBuilder10.recordParameter("", jSTypeExpression23);
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression23);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder33.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder33.recordParameter("hi!", jSTypeExpression36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder39.isInterfaceRecorded();
        boolean boolean41 = jSDocInfoBuilder39.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.isInterfaceRecorded();
        boolean boolean46 = jSDocInfoBuilder43.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        boolean boolean54 = node50.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node50, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray59 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray60 = (java.util.ArrayList<java.lang.String>[]) arrayListArray59;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray59);
        boolean boolean62 = jSTypeExpression56.equals((java.lang.Object) arrayListArray59);
        boolean boolean63 = jSDocInfoBuilder43.recordDefineType(jSTypeExpression56);
        com.google.javascript.rhino.Node node64 = jSTypeExpression56.getRoot();
        boolean boolean66 = jSDocInfoBuilder39.recordThrowDescription(jSTypeExpression56, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.isInterfaceRecorded();
        boolean boolean71 = jSDocInfoBuilder68.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj77 = node75.getProp(43);
        boolean boolean78 = node75.isCall();
        boolean boolean79 = node75.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = new com.google.javascript.rhino.JSTypeExpression(node75, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder82 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray84 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray85 = (java.util.ArrayList<java.lang.String>[]) arrayListArray84;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder86 = strListBuilder82.add((java.util.ArrayList<java.lang.String>[]) arrayListArray84);
        boolean boolean87 = jSTypeExpression81.equals((java.lang.Object) arrayListArray84);
        boolean boolean88 = jSDocInfoBuilder68.recordDefineType(jSTypeExpression81);
        boolean boolean89 = jSDocInfoBuilder39.recordEnumParameterType(jSTypeExpression81);
        boolean boolean90 = jSTypeExpression81.isOptionalArg();
        boolean boolean91 = jSDocInfoBuilder33.recordEnumParameterType(jSTypeExpression81);
        boolean boolean92 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression81);
        boolean boolean94 = jSDocInfoBuilder1.recordBlockDescription("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean95 = jSDocInfoBuilder1.recordExport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strListBuilder24);
        org.junit.Assert.assertNotNull(arrayListArray26);
        org.junit.Assert.assertNotNull(strListArray27);
        org.junit.Assert.assertNotNull(strListBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(arrayListArray59);
        org.junit.Assert.assertNotNull(strListArray60);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strListBuilder82);
        org.junit.Assert.assertNotNull(arrayListArray84);
        org.junit.Assert.assertNotNull(strListArray85);
        org.junit.Assert.assertNotNull(strListBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test17369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17369");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node3.hasChildren();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj12 = node10.getProp(43);
        boolean boolean13 = node10.isCall();
        boolean boolean14 = node10.isEmpty();
        boolean boolean15 = node10.isCatch();
        node3.addChildToBack(node10);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj22 = node20.getProp(43);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int27 = node26.getSourceOffset();
        com.google.javascript.rhino.Node node28 = node20.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray34 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node32.setDirectives((java.util.Set<java.lang.String>) strSet35);
        com.google.javascript.rhino.Node node38 = node26.useSourceInfoIfMissingFromForTree(node32);
        boolean boolean39 = node32.isThrow();
        boolean boolean40 = node32.isNot();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node45 = node32.useSourceInfoFromForTree(node44);
        boolean boolean46 = node45.isCatch();
        node10.addChildrenToBack(node45);
        com.google.javascript.rhino.InputId inputId48 = null;
        node10.setInputId(inputId48);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test17370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17370");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        node4.putBooleanProp(30, false);
        boolean boolean9 = node4.isSwitch();
        boolean boolean10 = node4.isIn();
        node4.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) 'a', node4);
        com.google.javascript.rhino.Node node14 = node13.getFirstChild();
        boolean boolean15 = node13.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test17371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17371");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        boolean boolean34 = strSet6.retainAll((java.util.Collection<java.lang.String>) strList31);
        int int35 = strList31.size();
        java.util.stream.Stream<java.lang.String> strStream36 = strList31.stream();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(strStream36);
    }

    @Test
    public void test17372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17372");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = strList49.reverse();
        java.lang.String str56 = strList54.get(0);
        java.util.Spliterator<java.lang.String> strSpliterator57 = strList54.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            strList54.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSpliterator57);
    }

    @Test
    public void test17373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17373");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.containsDeclaration();
        jSDocInfo14.setDeprecated(true);
        com.google.common.collect.ImmutableList<java.lang.String> strList21 = jSDocInfo14.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = strList21.asList();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder24.recordThrowType(jSTypeExpression25);
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int37 = strList35.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList46 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int48 = strList46.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList57 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList67 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList35, (java.lang.Iterable<java.lang.String>) strList46, (java.lang.Iterable<java.lang.String>) strList57, (java.lang.Iterable<java.lang.String>) strList66);
        boolean boolean68 = jSDocInfoBuilder24.recordTemplateTypeNames((java.util.List<java.lang.String>) strList35);
        com.google.common.collect.ImmutableList<java.lang.String> strList69 = strList35.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = strList69.asList();
        java.lang.Object[] objArray71 = strList69.toArray();
        boolean boolean72 = strList21.containsAll((java.util.Collection<java.lang.String>) strList69);
        boolean boolean73 = strList21.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            strList21.add((int) (short) 100, "Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: STRING \n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strIterableList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test17374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17374");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        int int67 = node57.getSideEffectFlags();
        boolean boolean68 = node57.isDelProp();
        node57.setCharno(0);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node57, "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj78 = node76.getProp(43);
        boolean boolean79 = node76.isCall();
        boolean boolean80 = node76.isEmpty();
        boolean boolean81 = node76.isCatch();
        com.google.javascript.rhino.Node node82 = node57.clonePropsFrom(node76);
        node76.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
    }

    @Test
    public void test17375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17375");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        int int20 = typePosition0.getStartLine();
        boolean boolean21 = typePosition0.hasBrackets();
        int int22 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test17376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17376");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        int int23 = strList20.size();
        boolean boolean24 = strList8.containsAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        node32.setQuotedString();
        boolean boolean35 = node32.isHook();
        boolean boolean36 = strList20.equals((java.lang.Object) node32);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = strList20.reverse();
        boolean boolean38 = strList20.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = strList20.set((int) (byte) 10, "STRING \n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test17377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17377");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isNoCompile();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.hasParameter("STRING ");
        int int29 = jSDocInfo20.getParameterCount();
        boolean boolean30 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = jSDocInfo20.getVisibility();
        boolean boolean32 = jSDocInfo20.shouldPreserveTry();
        java.lang.String str33 = jSDocInfo20.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo20.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo20.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNull(jSTypeExpression35);
    }

    @Test
    public void test17378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17378");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node11.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node11);
        typePosition1.setItem(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean33 = node32.isAssignAdd();
        boolean boolean34 = node32.isFromExterns();
        com.google.javascript.rhino.Node node35 = node19.copyInformationFromForTree(node32);
        node19.setCharno((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(39, node19);
        boolean boolean39 = node38.isThis();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test17379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17379");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean24 = jSDocInfo20.isNoSideEffects();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection25 = jSDocInfo20.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int36 = strList34.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int47 = strList45.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList66 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList34, (java.lang.Iterable<java.lang.String>) strList45, (java.lang.Iterable<java.lang.String>) strList56, (java.lang.Iterable<java.lang.String>) strList65);
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int77 = strList75.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator78 = strList75.spliterator();
        boolean boolean79 = strList45.equals((java.lang.Object) strList75);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean84 = node83.isNull();
        boolean boolean85 = node83.isSyntheticBlock();
        com.google.javascript.rhino.Node node86 = node83.removeChildren();
        com.google.javascript.rhino.InputId inputId87 = null;
        node83.setInputId(inputId87);
        boolean boolean89 = strList45.equals((java.lang.Object) node83);
        boolean boolean90 = node83.isParamList();
        jSDocInfo20.setAssociatedNode(node83);
        boolean boolean92 = jSDocInfo20.isExport();
        boolean boolean93 = jSDocInfo20.isIdGenerator();
        boolean boolean94 = jSDocInfo20.isConstructor();
        java.lang.String str95 = jSDocInfo20.getOriginalCommentString();
        boolean boolean96 = jSDocInfo20.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeCollection25);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strIterableList66);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test17380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17380");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        node3.setSourceEncodedPosition(12);
        node3.setSourceEncodedPositionForTree(26);
        boolean boolean9 = node3.isGetProp();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean13 = typePosition12.hasBrackets();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet25);
        java.lang.Object obj29 = node22.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node30 = node17.copyInformationFrom(node22);
        typePosition12.setItem(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj37 = node35.getProp(43);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int42 = node41.getSourceOffset();
        com.google.javascript.rhino.Node node43 = node35.useSourceInfoIfMissingFromForTree(node41);
        boolean boolean44 = node43.isAssignAdd();
        boolean boolean45 = node43.isFromExterns();
        com.google.javascript.rhino.Node node46 = node30.copyInformationFromForTree(node43);
        boolean boolean47 = node30.isDelProp();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int52 = node51.getSourceOffset();
        boolean boolean53 = node51.isFor();
        java.lang.Object obj55 = node51.getProp(49);
        java.util.Set<java.lang.String> strSet56 = node51.getDirectives();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.recordNoTypeCheck();
        boolean boolean60 = jSDocInfoBuilder58.isInterfaceRecorded();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj66 = node64.getProp(43);
        int int67 = node64.getType();
        boolean boolean68 = node64.isGetterDef();
        node64.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = jSDocInfoBuilder58.build(node64);
        boolean boolean72 = jSDocInfo71.isNoSideEffects();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo71.setAssociatedNode(node74);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(49, node30, node51, node74, (int) (short) 0, 36);
        boolean boolean79 = node78.isDefaultCase();
        boolean boolean80 = node78.isDelProp();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(100, node78, 16, 24);
        boolean boolean84 = node3.isEquivalentTo(node83);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 40 + "'", int67 == 40);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSDocInfo71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test17381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17381");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        boolean boolean23 = jSDocInfo20.isDeprecated();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getImplementedInterfaces();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getReturnType();
        boolean boolean28 = jSDocInfo20.hasParameterType("STRING  43");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17382");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean42 = strList19.isEmpty();
        java.lang.String[] strArray49 = new java.lang.String[] { "NUMBER 53.0 42\n", "STRING  43 [synthetic: 1]", "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "[, [STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!], Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n, Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n, OR  54\n, hi!, Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n, [STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!], Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n, [], TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n]" };
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.copyOf(strArray49);
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of(strArray49);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor53 = strList51.listIterator(2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = strList19.addAll(0, (java.util.Collection<java.lang.String>) strList51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strItor53);
    }

    @Test
    public void test17383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17383");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node7.setJSType(jSType10);
        java.lang.String str12 = node7.getString();
        boolean boolean13 = node7.isWith();
        java.util.Set<java.lang.String> strSet14 = node7.getDirectives();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean26 = node25.isIf();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int37 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node38 = node30.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean39 = node38.isAssignAdd();
        boolean boolean40 = node38.isEmpty();
        node38.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean47 = node46.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet54);
        java.lang.Object obj58 = node51.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node59 = node46.copyInformationFrom(node51);
        boolean boolean60 = node46.isOr();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(1, node19, node25, node38, node46, 176180, 1);
        boolean boolean64 = node63.isIf();
        boolean boolean65 = node63.isCatch();
        boolean boolean66 = node63.isNew();
        boolean boolean67 = node63.isReturn();
        boolean boolean68 = node7.hasChild(node63);
        boolean boolean69 = node7.isNew();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test17384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17384");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        java.lang.String str23 = jSDocInfo20.getMeaning();
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo20.getReferences();
        boolean boolean25 = jSDocInfo20.isConstructor();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        boolean boolean27 = jSDocInfo20.isNoAlias();
        boolean boolean28 = jSDocInfo20.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strCollection24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test17385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17385");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  43 [jsdoc_info: JSDocInfo]\n", (int) (byte) 10, 5);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test17386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17386");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean7 = jSDocInfoBuilder1.recordVisibility(visibility6);
        boolean boolean8 = jSDocInfoBuilder1.shouldParseDocumentation();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.isInterfaceRecorded();
        boolean boolean13 = jSDocInfoBuilder10.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        boolean boolean35 = jSDocInfoBuilder15.recordDefineType(jSTypeExpression28);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition36 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int37 = namePosition36.getEndLine();
        int int38 = namePosition36.getStartLine();
        com.google.javascript.rhino.Node node39 = namePosition36.getItem();
        boolean boolean40 = jSTypeExpression28.equals((java.lang.Object) node39);
        boolean boolean41 = jSDocInfoBuilder10.recordTypedef(jSTypeExpression28);
        boolean boolean42 = jSDocInfoBuilder10.recordIdGenerator();
        jSDocInfoBuilder10.recordOriginalCommentString("STRING  43 [var_args_name: 1]\n");
        boolean boolean46 = jSDocInfoBuilder10.recordDeprecationReason("[]");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean49 = jSDocInfoBuilder48.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder51 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = null;
        boolean boolean53 = jSDocInfoBuilder51.recordTypedef(jSTypeExpression52);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder55 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean56 = jSDocInfoBuilder55.recordNoTypeCheck();
        boolean boolean57 = jSDocInfoBuilder55.isInterfaceRecorded();
        jSDocInfoBuilder55.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean62 = jSDocInfoBuilder55.recordIdGenerator();
        boolean boolean63 = jSDocInfoBuilder55.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder65.isInterfaceRecorded();
        boolean boolean68 = jSDocInfoBuilder65.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        boolean boolean75 = node72.isCall();
        boolean boolean76 = node72.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node72, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder79 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray81 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray82 = (java.util.ArrayList<java.lang.String>[]) arrayListArray81;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder83 = strListBuilder79.add((java.util.ArrayList<java.lang.String>[]) arrayListArray81);
        boolean boolean84 = jSTypeExpression78.equals((java.lang.Object) arrayListArray81);
        boolean boolean85 = jSDocInfoBuilder65.recordDefineType(jSTypeExpression78);
        boolean boolean86 = jSDocInfoBuilder55.recordThisType(jSTypeExpression78);
        boolean boolean87 = jSDocInfoBuilder51.recordThisType(jSTypeExpression78);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression78);
        boolean boolean89 = jSDocInfoBuilder48.recordTypedef(jSTypeExpression88);
        boolean boolean90 = jSDocInfoBuilder10.recordBaseType(jSTypeExpression88);
        boolean boolean91 = jSDocInfoBuilder1.recordType(jSTypeExpression88);
        boolean boolean92 = jSTypeExpression88.isOptionalArg();
        java.lang.Class<?> wildcardClass93 = jSTypeExpression88.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strListBuilder79);
        org.junit.Assert.assertNotNull(arrayListArray81);
        org.junit.Assert.assertNotNull(strListArray82);
        org.junit.Assert.assertNotNull(strListBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test17387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17387");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        int int32 = node23.getSourceOffset();
        typePosition0.setItem(node23);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj49 = node47.getProp(43);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int54 = node53.getSourceOffset();
        com.google.javascript.rhino.Node node55 = node47.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node59.setDirectives((java.util.Set<java.lang.String>) strSet62);
        com.google.javascript.rhino.Node node65 = node53.useSourceInfoIfMissingFromForTree(node59);
        boolean boolean66 = node65.isContinue();
        boolean boolean67 = node65.isOnlyModifiesThisCall();
        boolean boolean68 = node65.isDefaultCase();
        boolean boolean69 = node38.hasChild(node65);
        int int70 = node38.getSourceOffset();
        boolean boolean71 = node38.isNew();
        boolean boolean72 = node38.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(44, node38, 54, (int) (byte) 0);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder76 = node38.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node77 = node23.copyInformationFromForTree(node38);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder76);
        org.junit.Assert.assertNotNull(node77);
    }

    @Test
    public void test17388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17388");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test17389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17389");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordOverride();
        boolean boolean6 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("STRING  43");
        boolean boolean11 = jSDocInfoBuilder1.recordFileOverview("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean12 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean13 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean14 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean15 = jSDocInfoBuilder1.recordNoShadow();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test17390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17390");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("");
        boolean boolean25 = jSDocInfo20.isImplicitCast();
        boolean boolean26 = jSDocInfo20.hasType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection27 = jSDocInfo20.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        int int35 = node32.getType();
        boolean boolean36 = node32.isGetterDef();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node39 = node38.removeChildren();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node38.getAncestors();
        com.google.javascript.rhino.Node node41 = node32.srcref(node38);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean46 = node45.isOptionalArg();
        boolean boolean47 = node45.isSwitch();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node52.addChildrenToFront(node56);
        boolean boolean58 = node52.isGetterDef();
        boolean boolean59 = node52.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj65 = node63.getProp(43);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int70 = node69.getSourceOffset();
        com.google.javascript.rhino.Node node71 = node63.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray77 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet78 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet78, strArray77);
        node75.setDirectives((java.util.Set<java.lang.String>) strSet78);
        com.google.javascript.rhino.Node node81 = node69.useSourceInfoIfMissingFromForTree(node75);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(32, node52, node69);
        boolean boolean83 = node82.isExprResult();
        boolean boolean84 = node82.isFunction();
        com.google.javascript.rhino.Node node85 = node45.srcrefTree(node82);
        com.google.javascript.rhino.Node node86 = node32.copyInformationFrom(node45);
        node86.setLineno((int) (byte) 0);
        boolean boolean89 = node86.isQualifiedName();
        jSDocInfo20.setAssociatedNode(node86);
        java.util.Collection<java.lang.String> strCollection91 = jSDocInfo20.getReferences();
        java.lang.String str92 = jSDocInfo20.getMeaning();
        java.lang.String str93 = jSDocInfo20.getVersion();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList94 = jSDocInfo20.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeCollection27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(ancestorIterable40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(strCollection91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(jSTypeExpressionList94);
    }

    @Test
    public void test17391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17391");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("hi!");
        int int4 = node2.getIntProp(44);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean9 = node8.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = node8.cloneNode();
        boolean boolean11 = node10.isGetElem();
        node10.addSuppression("");
        boolean boolean14 = node10.isInstanceOf();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int25 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node26 = node18.useSourceInfoIfMissingFromForTree(node24);
        node18.setIsSyntheticBlock(false);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node18.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean35 = node34.isNoSideEffectsCall();
        boolean boolean36 = node34.isWith();
        boolean boolean37 = node34.isInstanceOf();
        com.google.javascript.rhino.Node node38 = node18.srcrefTree(node34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node2, node10, node38);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = new com.google.javascript.rhino.JSTypeExpression(node38, "NUMBER 12.0\n");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int47 = node46.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType48 = node46.getJSType();
        boolean boolean49 = node46.isWith();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node54.addChildrenToFront(node58);
        boolean boolean60 = node54.isGetterDef();
        boolean boolean61 = node54.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj67 = node65.getProp(43);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int72 = node71.getSourceOffset();
        com.google.javascript.rhino.Node node73 = node65.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        node77.setDirectives((java.util.Set<java.lang.String>) strSet80);
        com.google.javascript.rhino.Node node83 = node71.useSourceInfoIfMissingFromForTree(node77);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(32, node54, node71);
        boolean boolean85 = node84.isExprResult();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (byte) 0, node46, node84);
        node46.removeProp(10);
        node46.setVarArgs(true);
        int int92 = node46.getIntProp(35);
        com.google.javascript.rhino.Node node93 = null;
        // The following exception was thrown during execution in test generation
        try {
            node38.replaceChild(node46, node93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test17392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17392");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder14 = node3.new FileLevelJsDocBuilder();
        boolean boolean15 = node3.isNew();
        boolean boolean16 = node3.isScript();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean21 = node20.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object obj32 = node25.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node25);
        boolean boolean34 = node20.isOr();
        int int36 = node20.getIntProp(53);
        com.google.javascript.rhino.Node node37 = node20.cloneNode();
        node20.removeProp(16);
        boolean boolean40 = node20.isDo();
        com.google.javascript.rhino.Node node41 = node3.useSourceInfoIfMissingFrom(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = node41.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(jSDocInfo42);
    }

    @Test
    public void test17393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17393");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
    }

    @Test
    public void test17394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17394");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder1.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        int int22 = node18.getSourcePosition();
        java.lang.String str26 = node18.toString(false, true, false);
        boolean boolean27 = node18.isDo();
        boolean boolean28 = node18.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.InputId inputId30 = node18.getInputId();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(50, "ERROR  43\n");
        boolean boolean34 = node18.isEquivalentTo(node33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj40 = node38.getProp(43);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int45 = node44.getSourceOffset();
        com.google.javascript.rhino.Node node46 = node38.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean47 = node46.isIf();
        boolean boolean48 = node46.isAnd();
        node46.setVarArgs(false);
        boolean boolean51 = node46.isFor();
        boolean boolean53 = node46.getBooleanProp((int) (short) 100);
        com.google.javascript.rhino.Node node54 = node33.clonePropsFrom(node46);
        int int55 = node54.getLineno();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 176180 + "'", int22 == 176180);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING " + "'", str26, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSDocInfo29);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test17395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17395");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean2 = node1.isScript();
        boolean boolean3 = node1.isAssignAdd();
        node1.setLineno(37);
        // The following exception was thrown during execution in test generation
        try {
            node1.setString("STRING  43 [source_file: [, hi!, , , hi!, , hi!, ]]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 12.0 37 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test17396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17396");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str27 = jSDocInfo20.getVersion();
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        java.lang.String str29 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility30 = jSDocInfo20.getVisibility();
        boolean boolean31 = jSDocInfo20.isConstructor();
        java.lang.String str32 = jSDocInfo20.toString();
        int int33 = jSDocInfo20.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + visibility30 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility30.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JSDocInfo" + "'", str32, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test17397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17397");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("OR  54\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo20.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.stream.Stream<java.lang.String> strStream39 = strList38.stream();
        boolean boolean40 = strList29.containsAll((java.util.Collection<java.lang.String>) strList38);
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = strList38.asList();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder43.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        jSDocInfoBuilder43.markName("hi!", staticSourceFile47, (int) (short) 0, (int) (short) 100);
        boolean boolean51 = jSDocInfoBuilder43.recordNoTypeCheck();
        boolean boolean52 = jSDocInfoBuilder43.recordExpose();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node56.addChildrenToFront(node60);
        com.google.javascript.rhino.JSDocInfo jSDocInfo62 = jSDocInfoBuilder43.build(node60);
        boolean boolean63 = jSDocInfo62.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression64 = jSDocInfo62.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility65 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo62.setVisibility(visibility65);
        boolean boolean67 = jSDocInfo62.hasBaseType();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node71.addChildrenToFront(node75);
        boolean boolean77 = node71.isGetterDef();
        boolean boolean78 = node71.hasMoreThanOneChild();
        jSDocInfo62.setAssociatedNode(node71);
        java.lang.Object obj81 = node71.getProp((int) (short) -1);
        boolean boolean82 = node71.isSetterDef();
        boolean boolean83 = node71.isSetterDef();
        node71.addSuppression("NUMBER 12.0 43\n");
        boolean boolean86 = strList38.contains((java.lang.Object) node71);
        boolean boolean87 = strList38.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSDocInfo62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(jSTypeExpression64);
        org.junit.Assert.assertTrue("'" + visibility65 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility65.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test17398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17398");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        node5.setDirectives((java.util.Set<java.lang.String>) strSet8);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean33 = node32.isContinue();
        boolean boolean34 = node32.isOnlyModifiesThisCall();
        boolean boolean35 = node32.isDefaultCase();
        boolean boolean36 = node5.hasChild(node32);
        java.lang.String str40 = node5.toString(false, true, true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node5.siblings();
        node5.setOptionalArg(false);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean48 = node47.isVar();
        node47.putBooleanProp(30, false);
        boolean boolean52 = node47.isSwitch();
        boolean boolean53 = node47.isIn();
        boolean boolean54 = node47.isFromExterns();
        boolean boolean55 = node47.isNot();
        boolean boolean56 = node47.isNumber();
        int int57 = node47.getSideEffectFlags();
        com.google.javascript.rhino.Node[] nodeArray63 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(42, nodeArray63, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(49, nodeArray63, 53, 43);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(176180, nodeArray63, 41, 38);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray63);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(26, nodeArray63);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean79 = node78.isVar();
        node78.putBooleanProp(30, false);
        boolean boolean83 = node78.isSwitch();
        boolean boolean84 = node78.isIn();
        boolean boolean85 = node78.isIn();
        boolean boolean86 = node78.isOr();
        com.google.javascript.rhino.Node node87 = node78.getLastSibling();
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node(46, node5, node47, node74, node78);
        boolean boolean89 = node88.isInstanceOf();
        boolean boolean90 = node88.isAssign();
        boolean boolean91 = node88.isVarArgs();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(221199, node88);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "NUMBER 0.0 [directives: []]" + "'", str40, "NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(nodeArray63);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test17399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17399");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 1);
        com.google.javascript.rhino.Node node2 = node1.getFirstChild();
        boolean boolean3 = node1.isDebugger();
        boolean boolean4 = node1.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test17400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17400");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordJavaDispatch();
        jSDocInfoBuilder12.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordJavaDispatch();
        boolean boolean23 = jSDocInfoBuilder21.recordNoCompile();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder35 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray37 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray38 = (java.util.ArrayList<java.lang.String>[]) arrayListArray37;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = strListBuilder35.add((java.util.ArrayList<java.lang.String>[]) arrayListArray37);
        boolean boolean40 = jSTypeExpression34.equals((java.lang.Object) arrayListArray37);
        boolean boolean41 = jSDocInfoBuilder21.recordParameter("", jSTypeExpression34);
        boolean boolean42 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression34);
        boolean boolean43 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression34);
        boolean boolean44 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean45 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strListBuilder35);
        org.junit.Assert.assertNotNull(arrayListArray37);
        org.junit.Assert.assertNotNull(strListArray38);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test17401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17401");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        node4.putBooleanProp(23, true);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int19 = node18.getSourceOffset();
        com.google.javascript.rhino.Node node20 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node21 = node18.cloneNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node21.siblings();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean26 = node24.getBooleanProp(51);
        boolean boolean27 = node24.wasEmptyNode();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.javascript.rhino.Node node49 = node37.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean50 = node49.isContinue();
        boolean boolean51 = node49.isVoid();
        double double52 = node49.getDouble();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node49.siblings();
        boolean boolean54 = node49.isVar();
        boolean boolean55 = node49.isWhile();
        java.lang.String str56 = node49.toStringTree();
        boolean boolean57 = node49.isQualifiedName();
        com.google.javascript.rhino.Node node58 = node24.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = new com.google.javascript.rhino.JSTypeExpression(node49, "hi!");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(54, node4, node21, node49);
        boolean boolean62 = node61.isTry();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NUMBER 0.0 43\n" + "'", str56, "NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test17402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17402");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node12 = node9.cloneNode();
        node9.setSourceFileForTesting("[]");
        boolean boolean15 = node9.isFor();
        boolean boolean16 = node9.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = node9.getJSType();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        int int24 = node21.getType();
        boolean boolean25 = node21.isGetterDef();
        node21.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node21.isEquivalentToTyped(node31);
        node9.addChildrenToBack(node31);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSType17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 40 + "'", int24 == 40);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test17403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17403");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj15 = node13.getProp(43);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int20 = node19.getSourceOffset();
        com.google.javascript.rhino.Node node21 = node13.useSourceInfoIfMissingFromForTree(node19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean32 = node31.isContinue();
        boolean boolean33 = node31.isOnlyModifiesThisCall();
        boolean boolean34 = node31.isDefaultCase();
        boolean boolean35 = node4.hasChild(node31);
        java.lang.String str39 = node4.toString(false, true, true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node4.siblings();
        node4.setOptionalArg(false);
        com.google.javascript.rhino.InputId inputId43 = node4.getInputId();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(47, node4, 41, 45);
        node4.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node49 = node4.detachFromParent();
        boolean boolean50 = node49.isVarArgs();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 0.0 [directives: []]" + "'", str39, "NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNull(inputId43);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test17404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17404");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        boolean boolean67 = node44.isHook();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder69 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean70 = jSDocInfoBuilder69.recordNoTypeCheck();
        boolean boolean71 = jSDocInfoBuilder69.isInterfaceRecorded();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj77 = node75.getProp(43);
        int int78 = node75.getType();
        boolean boolean79 = node75.isGetterDef();
        node75.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = jSDocInfoBuilder69.build(node75);
        boolean boolean83 = jSDocInfo82.isNoSideEffects();
        boolean boolean84 = jSDocInfo82.hasTypedefType();
        boolean boolean85 = jSDocInfo82.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node86 = jSDocInfo82.getAssociatedNode();
        com.google.javascript.rhino.Node node87 = node44.copyInformationFromForTree(node86);
        node86.setOptionalArg(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 40 + "'", int78 == 40);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(jSDocInfo82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test17405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17405");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        int int67 = node57.getSideEffectFlags();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj73 = node71.getProp(43);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int78 = node77.getSourceOffset();
        com.google.javascript.rhino.Node node79 = node71.useSourceInfoIfMissingFromForTree(node77);
        boolean boolean80 = node79.isAssignAdd();
        boolean boolean81 = node57.isEquivalentTo(node79);
        boolean boolean82 = node79.isDelProp();
        node79.setLineno((int) (short) 10);
        boolean boolean85 = node79.hasMoreThanOneChild();
        boolean boolean86 = node79.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test17406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17406");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 12.0\n");
        node1.putIntProp((int) (byte) 100, 51);
        java.lang.Appendable appendable5 = null;
        // The following exception was thrown during execution in test generation
        try {
            node1.appendStringTree(appendable5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: unexpect prop id 100");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test17407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17407");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node10.addChildrenToFront(node14);
        boolean boolean16 = node10.isGetterDef();
        boolean boolean17 = node10.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node10, node27);
        boolean boolean41 = node40.isExprResult();
        boolean boolean42 = node40.isFunction();
        com.google.javascript.rhino.Node node43 = node3.srcrefTree(node40);
        java.lang.Object obj45 = node3.getProp((int) (byte) -1);
        boolean boolean46 = node3.isStringKey();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean51 = node50.isNull();
        node50.putIntProp(1, (int) (byte) 0);
        boolean boolean55 = node50.isIf();
        com.google.javascript.rhino.Node node56 = node3.useSourceInfoFromForTree(node50);
        boolean boolean57 = node56.isDo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = new com.google.javascript.rhino.JSTypeExpression(node56, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        com.google.javascript.rhino.InputId inputId60 = null;
        node56.setInputId(inputId60);
        com.google.javascript.rhino.Node node62 = node56.cloneTree();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 4);
        int int65 = node64.getLineno();
        boolean boolean66 = node64.hasOneChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node67 = node56.removeChildAfter(node64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test17408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17408");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isAssignAdd();
        boolean boolean13 = node11.isEmpty();
        node11.setSourceEncodedPosition(40);
        boolean boolean16 = node11.isNull();
        boolean boolean17 = node11.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test17409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17409");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '#');
        boolean boolean2 = node1.isFalse();
        boolean boolean3 = node1.isDelProp();
        com.google.javascript.rhino.Node node4 = node1.getLastSibling();
        boolean boolean5 = node1.isGetElem();
        node1.setVarArgs(true);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean12 = node11.isVar();
        node11.putBooleanProp(30, false);
        boolean boolean16 = node11.isSwitch();
        boolean boolean17 = node11.isUnscopedQualifiedName();
        boolean boolean18 = node11.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        node11.setStaticSourceFile(staticSourceFile19);
        boolean boolean21 = node11.isGetElem();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        node25.detachChildren();
        com.google.javascript.rhino.Node node28 = node11.useSourceInfoFromForTree(node25);
        boolean boolean29 = node25.isNumber();
        boolean boolean30 = node25.isFalse();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node25.children();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 52, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = new com.google.javascript.rhino.JSTypeExpression(node35, "NUMBER 0.0 43 [directives: []]\n");
        java.lang.String str38 = node25.checkTreeEquals(node35);
        boolean boolean39 = node35.hasChildren();
        node1.addChildToBack(node35);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 35);
        int int44 = node43.getCharno();
        boolean boolean45 = node43.hasChildren();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(15, node43, 44, 0);
        int int49 = node43.getChildCount();
        com.google.javascript.rhino.Node node50 = node35.clonePropsFrom(node43);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nNUMBER 10.0 52\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: NUMBER 10.0 52\n" + "'", str38, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nNUMBER 10.0 52\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: NUMBER 10.0 52\n");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test17410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17410");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(42);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags5.clearAllFlags();
        sideEffectFlags5.clearAllFlags();
        sideEffectFlags5.clearAllFlags();
        sideEffectFlags5.setReturnsTainted();
        int int10 = sideEffectFlags5.valueOf();
        sideEffectFlags5.setMutatesGlobalState();
        sideEffectFlags5.setReturnsTainted();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags14 = new com.google.javascript.rhino.Node.SideEffectFlags(42);
        sideEffectFlags14.setAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags17 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags17.clearAllFlags();
        sideEffectFlags17.clearAllFlags();
        sideEffectFlags17.clearAllFlags();
        int int21 = sideEffectFlags17.valueOf();
        sideEffectFlags17.clearAllFlags();
        sideEffectFlags17.clearAllFlags();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList24 = com.google.common.collect.ImmutableList.of(sideEffectFlags14, sideEffectFlags17);
        sideEffectFlags17.setThrows();
        sideEffectFlags17.setMutatesGlobalState();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList27 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags5, sideEffectFlags17);
        sideEffectFlags17.setThrows();
        int int29 = sideEffectFlags17.valueOf();
        sideEffectFlags17.setThrows();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 31 + "'", int21 == 31);
        org.junit.Assert.assertNotNull(sideEffectFlagsList24);
        org.junit.Assert.assertNotNull(sideEffectFlagsList27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
    }

    @Test
    public void test17411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17411");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        int int20 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node21 = typePosition0.getItem();
        boolean boolean22 = node21.isDefaultCase();
        boolean boolean23 = node21.isQualifiedName();
        boolean boolean24 = node21.isIn();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("TYPEOF");
        node26.setType(0);
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean30 = node26.isTrue();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test17412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17412");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isString();
        boolean boolean14 = node3.isInc();
        boolean boolean15 = node3.isEmpty();
        boolean boolean16 = node3.isGetElem();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder18.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        jSDocInfoBuilder18.markName("hi!", staticSourceFile22, (int) (short) 0, (int) (short) 100);
        boolean boolean26 = jSDocInfoBuilder18.recordNoTypeCheck();
        boolean boolean27 = jSDocInfoBuilder18.recordExpose();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node31.addChildrenToFront(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = jSDocInfoBuilder18.build(node35);
        java.lang.String str38 = jSDocInfo37.getMeaning();
        boolean boolean39 = jSDocInfo37.isExport();
        int int40 = jSDocInfo37.getParameterCount();
        boolean boolean41 = jSDocInfo37.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo37.getTypedefType();
        node3.setJSDocInfo(jSDocInfo37);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile44 = null;
        node3.setStaticSourceFile(staticSourceFile44);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition47 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition50 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition51 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean52 = typePosition51.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList53 = com.google.common.collect.ImmutableList.of(typePosition46, typePosition47, typePosition48, typePosition49, typePosition50, typePosition51);
        int int54 = typePosition47.getEndLine();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        java.lang.String str60 = node59.toStringTree();
        java.lang.String str61 = node59.getSourceFileName();
        typePosition47.setItem(node59);
        node59.setQuotedString();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node67.addChildrenToFront(node71);
        com.google.javascript.rhino.Node node74 = node67.getChildAtIndex(0);
        boolean boolean75 = node67.isExprResult();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean80 = node79.isNull();
        boolean boolean81 = node79.isThis();
        boolean boolean82 = node67.hasChild(node79);
        node79.putBooleanProp(38, true);
        node79.setType((int) ' ');
        com.google.javascript.rhino.Node node88 = node59.useSourceInfoIfMissingFrom(node79);
        node3.addChildToFront(node88);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSDocInfo37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(typePositionList53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "OR  54\n" + "'", str60, "OR  54\n");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test17413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17413");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        boolean boolean6 = node3.isWith();
        boolean boolean7 = node3.isAdd();
        boolean boolean8 = node3.isNE();
        java.lang.String str9 = node3.toString();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean14 = node13.isNull();
        boolean boolean15 = node13.isSyntheticBlock();
        com.google.javascript.rhino.Node node16 = node13.removeChildren();
        com.google.javascript.rhino.InputId inputId17 = null;
        node13.setInputId(inputId17);
        int int19 = node13.getType();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType25 = node23.getJSType();
        boolean boolean26 = node23.isWith();
        boolean boolean27 = node23.isAdd();
        com.google.javascript.rhino.Node node28 = node13.useSourceInfoFrom(node23);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        jSDocInfoBuilder30.markName("hi!", staticSourceFile34, (int) (short) 0, (int) (short) 100);
        boolean boolean38 = jSDocInfoBuilder30.recordNoTypeCheck();
        boolean boolean39 = jSDocInfoBuilder30.recordExpose();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node43.addChildrenToFront(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = jSDocInfoBuilder30.build(node47);
        java.lang.String str50 = jSDocInfo49.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = jSDocInfo49.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = jSDocInfo49.getTemplateTypeNames();
        boolean boolean53 = jSDocInfo49.hasThisType();
        java.lang.String str54 = jSDocInfo49.getBlockDescription();
        boolean boolean55 = jSDocInfo49.isNoCompile();
        boolean boolean56 = jSDocInfo49.isHidden();
        boolean boolean57 = jSDocInfo49.isOverride();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node61.addChildrenToFront(node65);
        node65.setQuotedString();
        boolean boolean68 = node65.isHook();
        int int69 = node65.getType();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj75 = node73.getProp(43);
        int int76 = node73.getType();
        boolean boolean77 = node73.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node78 = node65.useSourceInfoIfMissingFromForTree(node73);
        boolean boolean79 = node73.isQuotedString();
        boolean boolean80 = node73.isIf();
        jSDocInfo49.setAssociatedNode(node73);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo49.getBaseType();
        java.lang.String str83 = jSDocInfo49.getDescription();
        node28.setJSDocInfo(jSDocInfo49);
        boolean boolean85 = node28.isTry();
        com.google.javascript.rhino.Node node86 = node3.copyInformationFromForTree(node28);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "NUMBER 0.0 43" + "'", str9, "NUMBER 0.0 43");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 39 + "'", int19 == 39);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(jSTypeExpression51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 40 + "'", int69 == 40);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 40 + "'", int76 == 40);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
    }

    @Test
    public void test17414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17414");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", (int) (byte) -1, 31, 49, 12);
        boolean boolean12 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean13 = jSDocInfoBuilder1.recordExterns();
        boolean boolean14 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test17415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17415");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        java.lang.String str2 = node1.toStringTree();
        com.google.javascript.rhino.Node node3 = node1.cloneTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NUMBER 12.0\n" + "'", str2, "NUMBER 12.0\n");
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test17416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17416");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.isPopulated();
        boolean boolean9 = jSDocInfoBuilder1.recordExpose();
        boolean boolean10 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean11 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test17417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17417");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition8.getEndLine();
        int int32 = stringPosition8.getPositionOnStartLine();
        stringPosition8.setItem("NUMBER 0.0 43");
        int int35 = stringPosition8.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test17418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17418");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.setIsSyntheticBlock(true);
        boolean boolean6 = node3.isReturn();
        boolean boolean7 = node3.isCatch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj13 = node11.getProp(43);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        com.google.javascript.rhino.Node node19 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean24 = node23.isVar();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node29 = node23.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node30 = node11.copyInformationFromForTree(node29);
        boolean boolean31 = node30.isScript();
        com.google.javascript.rhino.Node node32 = node3.srcrefTree(node30);
        int int33 = node32.getType();
        int int34 = node32.getSourcePosition();
        com.google.javascript.rhino.Node node35 = node32.getParent();
        com.google.javascript.rhino.InputId inputId36 = node32.getInputId();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        node32.setQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 40 + "'", int33 == 40);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNull(inputId36);
    }

    @Test
    public void test17419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17419");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordJavaDispatch();
        boolean boolean13 = jSDocInfoBuilder11.recordNoCompile();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordParameter("", jSTypeExpression24);
        boolean boolean32 = jSTypeExpression24.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression24);
        boolean boolean34 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression33);
        jSDocInfoBuilder1.markText("STRING  36", 16, 50, (int) ' ', 4);
        boolean boolean42 = jSDocInfoBuilder1.recordReturnDescription("LSH 44");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test17420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17420");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node10 = node4.copyInformationFromForTree(node9);
        com.google.javascript.rhino.Node node11 = node4.cloneTree();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(0, node4);
        java.lang.String str13 = node12.getQualifiedName();
        boolean boolean14 = node12.isIn();
        int int15 = node12.getCharno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test17421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17421");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        com.google.javascript.rhino.Node node49 = node4.detachFromParent();
        boolean boolean50 = node4.isStringKey();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test17422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17422");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("GETELEM\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test17423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17423");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int2 = namePosition1.getEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isVar();
        node6.putBooleanProp(30, false);
        boolean boolean11 = node6.isSwitch();
        boolean boolean12 = node6.isUnscopedQualifiedName();
        boolean boolean13 = node6.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node6.setStaticSourceFile(staticSourceFile14);
        boolean boolean16 = node6.isGetElem();
        namePosition1.setItem(node6);
        namePosition1.setPositionInformation(36, 15, 41, (int) (byte) -1);
        int int23 = namePosition1.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition24 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node25 = namePosition24.getItem();
        int int26 = namePosition24.getStartLine();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean31 = node30.isNull();
        boolean boolean32 = node30.isSyntheticBlock();
        namePosition24.setItem(node30);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition34 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int35 = namePosition34.getEndLine();
        int int36 = namePosition34.getStartLine();
        int int37 = namePosition34.getPositionOnEndLine();
        int int38 = namePosition34.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int40 = namePosition39.getEndLine();
        int int41 = namePosition39.getStartLine();
        com.google.javascript.rhino.Node node42 = namePosition39.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition43 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node44 = namePosition43.getItem();
        int int45 = namePosition43.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList46 = com.google.common.collect.ImmutableList.of(namePosition39, namePosition43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition47 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int48 = namePosition47.getEndLine();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean53 = node52.isVar();
        node52.putBooleanProp(30, false);
        boolean boolean57 = node52.isSwitch();
        boolean boolean58 = node52.isUnscopedQualifiedName();
        boolean boolean59 = node52.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        node52.setStaticSourceFile(staticSourceFile60);
        boolean boolean62 = node52.isGetElem();
        namePosition47.setItem(node52);
        namePosition47.setPositionInformation(36, 15, 41, (int) (byte) -1);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition69 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int70 = namePosition69.getEndLine();
        int int71 = namePosition69.getStartLine();
        int int72 = namePosition69.getPositionOnEndLine();
        int int73 = namePosition69.getEndLine();
        int int74 = namePosition69.getStartLine();
        com.google.javascript.rhino.Node node75 = namePosition69.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition76 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int77 = namePosition76.getEndLine();
        int int78 = namePosition76.getStartLine();
        com.google.javascript.rhino.Node node79 = namePosition76.getItem();
        namePosition76.setPositionInformation(37, (int) '4', (int) '4', 47);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition85 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int86 = namePosition85.getEndLine();
        int int87 = namePosition85.getStartLine();
        int int88 = namePosition85.getPositionOnEndLine();
        int int89 = namePosition85.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList90 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition24, namePosition34, namePosition39, namePosition47, namePosition69, namePosition76, namePosition85);
        int int91 = namePosition34.getPositionOnStartLine();
        // The following exception was thrown during execution in test generation
        try {
            namePosition34.setPositionInformation(1, (int) (short) -1, (int) (short) 0, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 1?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36 + "'", int23 == 36);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(namePositionList46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(namePositionList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test17424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17424");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(18);
        boolean boolean2 = node1.isReturn();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test17425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17425");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node18.getParent();
        com.google.javascript.rhino.InputId inputId23 = null;
        node18.setInputId(inputId23);
        boolean boolean25 = node18.isNull();
        boolean boolean26 = node18.isParamList();
        boolean boolean27 = node18.isCall();
        node18.setVarArgs(false);
        boolean boolean30 = node18.isVar();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean33 = typePosition32.hasBrackets();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean38 = node37.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet45);
        java.lang.Object obj49 = node42.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node42);
        typePosition32.setItem(node50);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj57 = node55.getProp(43);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int62 = node61.getSourceOffset();
        com.google.javascript.rhino.Node node63 = node55.useSourceInfoIfMissingFromForTree(node61);
        boolean boolean64 = node63.isAssignAdd();
        boolean boolean65 = node63.isFromExterns();
        com.google.javascript.rhino.Node node66 = node50.copyInformationFromForTree(node63);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node63.getStaticSourceFile();
        boolean boolean68 = node63.hasOneChild();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node73 = node72.getNext();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(100, node63, node72, 26, 16);
        com.google.javascript.rhino.Node node77 = node18.clonePropsFrom(node76);
        boolean boolean78 = node18.isTrue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(staticSourceFile67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test17426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17426");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node5 = node3.getNext();
        boolean boolean6 = node3.isThrow();
        boolean boolean7 = node3.isFor();
        boolean boolean8 = node3.isNE();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node3.getJSDocInfo();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition11 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition12 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition15 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean17 = typePosition16.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList18 = com.google.common.collect.ImmutableList.of(typePosition11, typePosition12, typePosition13, typePosition14, typePosition15, typePosition16);
        int int19 = typePosition13.getEndLine();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean24 = node23.isNull();
        boolean boolean25 = node23.isSyntheticBlock();
        boolean boolean26 = node23.hasMoreThanOneChild();
        typePosition13.setItem(node23);
        com.google.javascript.rhino.Node node28 = node23.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node23.children();
        boolean boolean30 = node23.isVar();
        boolean boolean31 = node23.isGetterDef();
        node23.addSuppression("NUMBER 0.0 43");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean38 = node37.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet45);
        java.lang.Object obj49 = node42.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node50 = node37.copyInformationFrom(node42);
        boolean boolean51 = node37.isOr();
        int int53 = node37.getIntProp(53);
        com.google.javascript.rhino.Node node54 = node37.cloneNode();
        boolean boolean55 = node54.wasEmptyNode();
        node54.removeProp(36);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean62 = node61.isNull();
        boolean boolean63 = node61.isSyntheticBlock();
        com.google.javascript.rhino.Node node64 = node61.removeChildren();
        com.google.javascript.rhino.InputId inputId65 = null;
        node61.setInputId(inputId65);
        boolean boolean67 = node61.isThis();
        boolean boolean68 = node54.hasChild(node61);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node72.setIsSyntheticBlock(true);
        boolean boolean75 = node72.isReturn();
        boolean boolean76 = node72.isReturn();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 1, node23, node61, node72);
        node72.detachChildren();
        boolean boolean79 = node3.isEquivalentTo(node72);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(typePositionList18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test17427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17427");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        int int9 = node5.getType();
        boolean boolean10 = node5.isInc();
        boolean boolean11 = node5.isNE();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.Node node42 = node30.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean43 = node42.isContinue();
        boolean boolean44 = node42.isOnlyModifiesThisCall();
        boolean boolean45 = node42.isDefaultCase();
        boolean boolean46 = node15.hasChild(node42);
        java.lang.String str50 = node15.toString(false, true, true);
        com.google.javascript.rhino.Node node51 = node5.copyInformationFrom(node15);
        java.lang.String str52 = node5.getString();
        boolean boolean53 = node5.isNew();
        node5.setLength((int) (short) -1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "NUMBER 0.0 [directives: []]" + "'", str50, "NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test17428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17428");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean14 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean15 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean16 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test17429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17429");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        com.google.javascript.rhino.Node node35 = null;
        com.google.javascript.rhino.Node node36 = node15.getChildBefore(node35);
        boolean boolean37 = node15.isVarArgs();
        boolean boolean38 = node15.isIn();
        java.lang.Object obj40 = node15.getProp(41);
        com.google.javascript.rhino.Node node41 = node15.cloneTree();
        boolean boolean42 = node15.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test17430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17430");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean13 = jSDocInfoBuilder1.recordDescription("JSDocInfo");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        java.lang.Object[] objArray33 = strSet30.toArray();
        boolean boolean34 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet30);
        java.lang.Object[] objArray35 = strSet20.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder37.markName("hi!", staticSourceFile41, (int) (short) 0, (int) (short) 100);
        boolean boolean45 = jSDocInfoBuilder37.recordNoTypeCheck();
        boolean boolean46 = jSDocInfoBuilder37.recordExpose();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node50.addChildrenToFront(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = jSDocInfoBuilder37.build(node54);
        java.lang.String str57 = jSDocInfo56.getMeaning();
        boolean boolean58 = jSDocInfo56.isExport();
        boolean boolean59 = strSet20.equals((java.lang.Object) jSDocInfo56);
        boolean boolean61 = strSet20.add("JSDocInfo");
        java.util.Spliterator<java.lang.String> strSpliterator62 = strSet20.spliterator();
        boolean boolean63 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder65.recordJavaDispatch();
        boolean boolean67 = jSDocInfoBuilder65.recordNoCompile();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        boolean boolean75 = node72.isCall();
        boolean boolean76 = node72.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node72, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder79 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray81 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray82 = (java.util.ArrayList<java.lang.String>[]) arrayListArray81;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder83 = strListBuilder79.add((java.util.ArrayList<java.lang.String>[]) arrayListArray81);
        boolean boolean84 = jSTypeExpression78.equals((java.lang.Object) arrayListArray81);
        boolean boolean85 = jSDocInfoBuilder65.recordParameter("", jSTypeExpression78);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression78);
        boolean boolean87 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression78);
        com.google.javascript.rhino.Node node88 = jSTypeExpression78.getRoot();
        java.lang.Appendable appendable89 = null;
        // The following exception was thrown during execution in test generation
        try {
            node88.appendStringTree(appendable89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strListBuilder79);
        org.junit.Assert.assertNotNull(arrayListArray81);
        org.junit.Assert.assertNotNull(strListArray82);
        org.junit.Assert.assertNotNull(strListBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test17431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17431");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        boolean boolean8 = jSDocInfoBuilder5.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        boolean boolean16 = node12.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node12, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray22 = (java.util.ArrayList<java.lang.String>[]) arrayListArray21;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder23 = strListBuilder19.add((java.util.ArrayList<java.lang.String>[]) arrayListArray21);
        boolean boolean24 = jSTypeExpression18.equals((java.lang.Object) arrayListArray21);
        boolean boolean25 = jSDocInfoBuilder5.recordDefineType(jSTypeExpression18);
        com.google.javascript.rhino.Node node26 = jSTypeExpression18.getRoot();
        boolean boolean28 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression18, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean29 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean31 = jSDocInfoBuilder1.recordLends("hi!");
        boolean boolean32 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean33 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean34 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean36 = jSDocInfoBuilder1.recordFileOverview("NUMBER 0.0 43");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 39);
        node38.setType(38);
        boolean boolean41 = node38.isOr();
        jSDocInfoBuilder1.markTypeNode(node38, 8, 39, 49, 45, true);
        com.google.javascript.rhino.Node node48 = node38.cloneTree();
        node38.removeProp(51);
        boolean boolean51 = node38.isGetterDef();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(strListArray22);
        org.junit.Assert.assertNotNull(strListBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test17432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17432");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (byte) 0, 15, (int) (short) 100);
        boolean boolean4 = node3.isRegExp();
        boolean boolean5 = node3.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test17433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17433");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean24 = jSDocInfo20.isNoSideEffects();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection25 = jSDocInfo20.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int36 = strList34.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int47 = strList45.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList65 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList66 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList34, (java.lang.Iterable<java.lang.String>) strList45, (java.lang.Iterable<java.lang.String>) strList56, (java.lang.Iterable<java.lang.String>) strList65);
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int77 = strList75.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator78 = strList75.spliterator();
        boolean boolean79 = strList45.equals((java.lang.Object) strList75);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean84 = node83.isNull();
        boolean boolean85 = node83.isSyntheticBlock();
        com.google.javascript.rhino.Node node86 = node83.removeChildren();
        com.google.javascript.rhino.InputId inputId87 = null;
        node83.setInputId(inputId87);
        boolean boolean89 = strList45.equals((java.lang.Object) node83);
        boolean boolean90 = node83.isParamList();
        jSDocInfo20.setAssociatedNode(node83);
        boolean boolean92 = jSDocInfo20.isExport();
        com.google.common.collect.ImmutableList<java.lang.String> strList93 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression95 = jSDocInfo20.getParameterType("NUMBER 0.0 43 [directives: []]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeCollection25);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strIterableList66);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNull(jSTypeExpression95);
    }

    @Test
    public void test17434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17434");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder6.markName("hi!", staticSourceFile10, (int) (short) 0, (int) (short) 100);
        boolean boolean14 = jSDocInfoBuilder6.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder6.recordExpose();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node19.addChildrenToFront(node23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = jSDocInfoBuilder6.build(node23);
        java.lang.String str26 = jSDocInfo25.getMeaning();
        boolean boolean27 = jSDocInfo25.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getExtendedInterfaces();
        boolean boolean29 = jSDocInfo25.isImplicitCast();
        node3.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder32.markName("hi!", staticSourceFile36, (int) (short) 0, (int) (short) 100);
        boolean boolean40 = jSDocInfoBuilder32.recordNoTypeCheck();
        boolean boolean41 = jSDocInfoBuilder32.recordExpose();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node45.addChildrenToFront(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = jSDocInfoBuilder32.build(node49);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj57 = node55.getProp(43);
        boolean boolean58 = node55.isCall();
        boolean boolean59 = node55.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = new com.google.javascript.rhino.JSTypeExpression(node55, "STRING ");
        boolean boolean62 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression61);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder64 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder64.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        jSDocInfoBuilder64.markName("hi!", staticSourceFile68, (int) (short) 0, (int) (short) 100);
        boolean boolean72 = jSDocInfoBuilder64.recordNoTypeCheck();
        boolean boolean73 = jSDocInfoBuilder64.recordExpose();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node77.addChildrenToFront(node81);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = jSDocInfoBuilder64.build(node81);
        boolean boolean84 = node81.isOptionalArg();
        com.google.javascript.rhino.Node node85 = node81.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = jSDocInfoBuilder32.build(node85);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean88 = jSDocInfoBuilder32.recordVisibility(visibility87);
        jSDocInfo25.setVisibility(visibility87);
        boolean boolean90 = jSDocInfo25.isConstructor();
        java.util.Set<java.lang.String> strSet91 = jSDocInfo25.getParameterNames();
        java.lang.String str93 = jSDocInfo25.getDescriptionForParameter("ERROR\n    NUMBER 40.0\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSDocInfo25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSDocInfo51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNotNull(jSDocInfo86);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test17435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17435");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node16.addChildrenToFront(node20);
        boolean boolean22 = node20.isLabelName();
        node20.setType((int) (byte) -1);
        int int25 = node3.getIndexOfChild(node20);
        com.google.javascript.rhino.Node node26 = node20.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node26.setLength((-2147483596));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test17436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17436");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int31 = strList29.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int42 = strList40.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList61 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList29, (java.lang.Iterable<java.lang.String>) strList40, (java.lang.Iterable<java.lang.String>) strList51, (java.lang.Iterable<java.lang.String>) strList60);
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int72 = strList70.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator73 = strList70.spliterator();
        boolean boolean74 = strList40.equals((java.lang.Object) strList70);
        com.google.common.collect.ImmutableList<java.lang.String> strList75 = strList40.asList();
        boolean boolean76 = strSet6.addAll((java.util.Collection<java.lang.String>) strList75);
        java.lang.Object[] objArray77 = strSet6.toArray();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(strIterableList61);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[, hi!]");
    }

    @Test
    public void test17437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17437");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        int int11 = strList8.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = strList8.asList();
        java.util.Iterator<java.lang.String> strItor13 = strList8.iterator();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoIfMissingFromForTree(node23);
        int int26 = node17.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node17.getJSDocInfo();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isVar();
        node31.putBooleanProp(30, false);
        boolean boolean36 = node31.isSwitch();
        boolean boolean37 = node31.isUnscopedQualifiedName();
        boolean boolean38 = node31.hasChildren();
        node31.setCharno(52);
        com.google.javascript.rhino.Node node41 = node17.clonePropsFrom(node31);
        boolean boolean43 = node41.getBooleanProp(8);
        boolean boolean44 = node41.isRegExp();
        boolean boolean45 = node41.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node41.children();
        boolean boolean47 = strList8.contains((java.lang.Object) nodeIterable46);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder50.recordNoTypeCheck();
        jSDocInfoBuilder50.recordOriginalCommentString("");
        boolean boolean54 = jSDocInfoBuilder50.isJavaDispatch();
        boolean boolean55 = jSDocInfoBuilder50.isPopulatedWithFileOverview();
        boolean boolean56 = jSDocInfoBuilder50.isDescriptionRecorded();
        boolean boolean58 = jSDocInfoBuilder50.recordVersion("Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean62 = jSDocInfoBuilder60.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = null;
        jSDocInfoBuilder60.markName("hi!", staticSourceFile64, (int) (short) 0, (int) (short) 100);
        boolean boolean68 = jSDocInfoBuilder60.recordNoTypeCheck();
        boolean boolean69 = jSDocInfoBuilder60.recordExpose();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node73.addChildrenToFront(node77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = jSDocInfoBuilder60.build(node77);
        java.lang.String str80 = jSDocInfo79.getMeaning();
        boolean boolean81 = jSDocInfo79.hasType();
        boolean boolean82 = jSDocInfo79.isConsistentIdGenerator();
        java.lang.String str83 = jSDocInfo79.getReturnDescription();
        int int84 = jSDocInfo79.getImplementedInterfaceCount();
        int int85 = jSDocInfo79.getParameterCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList86 = jSDocInfo79.getTemplateTypeNames();
        boolean boolean87 = jSDocInfoBuilder50.recordTemplateTypeNames((java.util.List<java.lang.String>) strList86);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor88 = strList86.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = strList8.addAll(54, (java.util.Collection<java.lang.String>) strList86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(jSDocInfo79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(strItor88);
    }

    @Test
    public void test17438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17438");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node11.getStaticSourceFile();
        boolean boolean14 = node11.isExprResult();
        boolean boolean15 = node11.isObjectLit();
        com.google.javascript.rhino.Node node17 = node11.getAncestor(23);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test17439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17439");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder37.markName("hi!", staticSourceFile41, (int) (short) 0, (int) (short) 100);
        boolean boolean45 = jSDocInfoBuilder37.recordNoTypeCheck();
        boolean boolean46 = jSDocInfoBuilder37.recordExpose();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node50.addChildrenToFront(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = jSDocInfoBuilder37.build(node54);
        java.lang.String str57 = jSDocInfo56.getMeaning();
        boolean boolean58 = jSDocInfo56.isExport();
        int int59 = jSDocInfo56.getParameterCount();
        boolean boolean60 = jSDocInfo56.isHidden();
        boolean boolean61 = jSDocInfo56.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet62 = jSDocInfo56.getModifies();
        java.util.Set<java.lang.String> strSet63 = jSDocInfo56.getModifies();
        node34.setDirectives(strSet63);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(40, "hi!");
        java.lang.String str68 = node67.getSourceFileName();
        node67.putBooleanProp(30, false);
        boolean boolean72 = strSet63.contains((java.lang.Object) node67);
        java.lang.String str73 = node67.toStringTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "STRING hi!\n" + "'", str73, "STRING hi!\n");
    }

    @Test
    public void test17440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17440");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getVersion();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo20.getSuppressions();
        boolean boolean33 = jSDocInfo20.hasType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test17441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17441");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.Iterator<java.lang.String> strItor9 = strList8.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder11.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        jSDocInfoBuilder11.markName("hi!", staticSourceFile15, (int) (short) 0, (int) (short) 100);
        boolean boolean19 = jSDocInfoBuilder11.recordNoTypeCheck();
        boolean boolean20 = jSDocInfoBuilder11.recordExpose();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node24.addChildrenToFront(node28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = jSDocInfoBuilder11.build(node28);
        java.lang.String str31 = jSDocInfo30.getMeaning();
        boolean boolean32 = jSDocInfo30.isExport();
        boolean boolean33 = jSDocInfo30.isConstant();
        boolean boolean34 = strList8.equals((java.lang.Object) boolean33);
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = strList8.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = strList8.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor37 = strList8.iterator();
        java.lang.Object[] objArray38 = strList8.toArray();
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = strList8.reverse();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSDocInfo30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test17442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17442");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        com.google.javascript.rhino.Node node35 = null;
        com.google.javascript.rhino.Node node36 = node15.getChildBefore(node35);
        boolean boolean37 = node15.isVarArgs();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        node45.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node45.setJSType(jSType48);
        java.lang.String str50 = node45.getString();
        boolean boolean51 = node45.isName();
        int int52 = node45.getLength();
        com.google.javascript.rhino.Node node53 = node15.copyInformationFrom(node45);
        node45.addSuppression("NUMBER 0.0 43");
        // The following exception was thrown during execution in test generation
        try {
            node45.setSideEffectFlags(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test17443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17443");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        boolean boolean10 = strSet6.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator63 = strList60.spliterator();
        boolean boolean64 = strList30.equals((java.lang.Object) strList60);
        boolean boolean65 = strSet6.addAll((java.util.Collection<java.lang.String>) strList60);
        boolean boolean66 = strList60.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator67 = strList60.spliterator();
        boolean boolean68 = strList60.isEmpty();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet75);
        java.lang.Object[] objArray78 = strSet75.toArray();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        node82.setDirectives((java.util.Set<java.lang.String>) strSet85);
        java.lang.Object[] objArray88 = strSet85.toArray();
        boolean boolean89 = strSet75.retainAll((java.util.Collection<java.lang.String>) strSet85);
        int int90 = strSet85.size();
        boolean boolean92 = strSet85.add("");
        int int93 = strSet85.size();
        strSet85.clear();
        java.util.Iterator<java.lang.String> strItor95 = strSet85.iterator();
        java.util.Iterator<java.lang.String> strItor96 = strSet85.iterator();
        boolean boolean97 = strList60.containsAll((java.util.Collection<java.lang.String>) strSet85);
        boolean boolean98 = strList60.isEmpty();
        java.lang.Object[] objArray99 = strList60.toArray();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSpliterator67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(strItor95);
        org.junit.Assert.assertNotNull(strItor96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(objArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray99), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray99), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test17444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17444");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo20.getTemplateTypeNames();
        java.util.Iterator<java.lang.String> strItor25 = strList24.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = strList24.remove(47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strItor25);
    }

    @Test
    public void test17445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17445");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        com.google.javascript.rhino.Node node10 = node3.getChildAtIndex(0);
        java.lang.String str11 = node10.toString();
        node10.setSourceEncodedPositionForTree((int) (byte) -1);
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isVar();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node37 = node31.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node38 = node19.copyInformationFromForTree(node37);
        boolean boolean39 = node10.isEquivalentToTyped(node19);
        boolean boolean40 = node19.isVoid();
        boolean boolean41 = node19.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  43" + "'", str11, "STRING  43");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test17446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17446");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        boolean boolean49 = node4.isExprResult();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean54 = node53.isOptionalArg();
        boolean boolean55 = node53.isNull();
        com.google.javascript.rhino.Node node56 = node4.srcrefTree(node53);
        com.google.javascript.rhino.Node node57 = node4.detachFromParent();
        int int58 = node4.getCharno();
        int int59 = node4.getSourcePosition();
        java.lang.String str60 = node4.getQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 176180 + "'", int59 == 176180);
        org.junit.Assert.assertNull(str60);
    }

    @Test
    public void test17447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17447");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test17448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17448");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean25 = jSDocInfo20.isConstant();
        java.util.Collection<java.lang.String> strCollection26 = jSDocInfo20.getReferences();
        java.lang.String str27 = jSDocInfo20.getLicense();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = jSDocInfo20.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(strCollection26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + visibility28 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility28.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test17449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17449");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        int int67 = node57.getSideEffectFlags();
        boolean boolean68 = node57.isDelProp();
        java.lang.String str72 = node57.toString(false, false, false);
        boolean boolean73 = node57.isIn();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node78.addChildrenToFront(node82);
        com.google.javascript.rhino.Node node85 = node78.getChildAtIndex(0);
        com.google.javascript.rhino.Node node86 = node85.getNext();
        node57.putProp(51, (java.lang.Object) node85);
        boolean boolean88 = node57.isInc();
        node57.putIntProp(176129, 39);
        node57.setSourceEncodedPositionForTree(48);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING " + "'", str72, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test17450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17450");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node10.addChildrenToFront(node14);
        boolean boolean16 = node10.isGetterDef();
        boolean boolean17 = node10.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node10, node27);
        boolean boolean41 = node40.isExprResult();
        boolean boolean42 = node40.isFunction();
        com.google.javascript.rhino.Node node43 = node3.srcrefTree(node40);
        node40.addSuppression("NUMBER 0.0 [directives: []]");
        node40.setIsSyntheticBlock(false);
        boolean boolean48 = node40.isIf();
        boolean boolean49 = node40.isVoid();
        boolean boolean50 = node40.isThrow();
        int int51 = node40.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test17451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17451");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.isPopulated();
        boolean boolean9 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.recordJavaDispatch();
        jSDocInfoBuilder11.markText("hi!", 4095, 45, (int) (byte) -1, 53);
        boolean boolean20 = jSDocInfoBuilder11.addAuthor("STRING  43");
        boolean boolean21 = jSDocInfoBuilder11.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder23.recordParameter("", jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder23.recordExterns();
        boolean boolean29 = jSDocInfoBuilder23.recordPreserveTry();
        boolean boolean30 = jSDocInfoBuilder23.recordNoCompile();
        boolean boolean32 = jSDocInfoBuilder23.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = null;
        boolean boolean34 = jSDocInfoBuilder23.recordType(jSTypeExpression33);
        boolean boolean35 = jSDocInfoBuilder23.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean38 = jSDocInfoBuilder37.isInterfaceRecorded();
        boolean boolean40 = jSDocInfoBuilder37.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        boolean boolean47 = node44.isCall();
        boolean boolean48 = node44.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = new com.google.javascript.rhino.JSTypeExpression(node44, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder51 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray53 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray54 = (java.util.ArrayList<java.lang.String>[]) arrayListArray53;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder55 = strListBuilder51.add((java.util.ArrayList<java.lang.String>[]) arrayListArray53);
        boolean boolean56 = jSTypeExpression50.equals((java.lang.Object) arrayListArray53);
        boolean boolean57 = jSDocInfoBuilder37.recordDefineType(jSTypeExpression50);
        boolean boolean58 = jSDocInfoBuilder23.recordBaseType(jSTypeExpression50);
        com.google.javascript.rhino.Node node59 = jSTypeExpression50.getRoot();
        boolean boolean61 = jSDocInfoBuilder11.recordThrowDescription(jSTypeExpression50, "STRING  43\n    NUMBER 0.0 43\n        STRING  43\n");
        boolean boolean63 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression50, "Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean65 = jSDocInfoBuilder1.hasParameter("Node tree inequality:\nTree1:\nTYPEOF [jsdoc_info: JSDocInfo]\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nOR 0\n\n\nSubtree1: TYPEOF [jsdoc_info: JSDocInfo]\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: OR 0\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strListBuilder51);
        org.junit.Assert.assertNotNull(arrayListArray53);
        org.junit.Assert.assertNotNull(strListArray54);
        org.junit.Assert.assertNotNull(strListBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test17452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17452");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        boolean boolean10 = node3.isFromExterns();
        boolean boolean11 = node3.isSyntheticBlock();
        boolean boolean12 = node3.isQuotedString();
        boolean boolean13 = node3.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test17453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17453");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.isName();
        node3.setWasEmptyNode(false);
        boolean boolean13 = node3.isArrayLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoIfMissingFromForTree(node23);
        node17.setIsSyntheticBlock(true);
        boolean boolean28 = node17.isBlock();
        com.google.javascript.rhino.Node node29 = node3.clonePropsFrom(node17);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder31 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder31.isInterfaceRecorded();
        boolean boolean33 = jSDocInfoBuilder31.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.isInterfaceRecorded();
        boolean boolean38 = jSDocInfoBuilder35.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        boolean boolean45 = node42.isCall();
        boolean boolean46 = node42.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node42, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder49 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray51 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray52 = (java.util.ArrayList<java.lang.String>[]) arrayListArray51;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = strListBuilder49.add((java.util.ArrayList<java.lang.String>[]) arrayListArray51);
        boolean boolean54 = jSTypeExpression48.equals((java.lang.Object) arrayListArray51);
        boolean boolean55 = jSDocInfoBuilder35.recordDefineType(jSTypeExpression48);
        com.google.javascript.rhino.Node node56 = jSTypeExpression48.getRoot();
        boolean boolean58 = jSDocInfoBuilder31.recordThrowDescription(jSTypeExpression48, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.isInterfaceRecorded();
        boolean boolean63 = jSDocInfoBuilder60.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj69 = node67.getProp(43);
        boolean boolean70 = node67.isCall();
        boolean boolean71 = node67.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = new com.google.javascript.rhino.JSTypeExpression(node67, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder74 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray76 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray77 = (java.util.ArrayList<java.lang.String>[]) arrayListArray76;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder78 = strListBuilder74.add((java.util.ArrayList<java.lang.String>[]) arrayListArray76);
        boolean boolean79 = jSTypeExpression73.equals((java.lang.Object) arrayListArray76);
        boolean boolean80 = jSDocInfoBuilder60.recordDefineType(jSTypeExpression73);
        boolean boolean81 = jSDocInfoBuilder31.recordEnumParameterType(jSTypeExpression73);
        boolean boolean82 = jSTypeExpression73.isOptionalArg();
        boolean boolean83 = jSTypeExpression73.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression73);
        com.google.javascript.rhino.Node node85 = jSTypeExpression73.getRoot();
        com.google.javascript.rhino.Node node86 = node85.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node87 = node3.useSourceInfoFrom(node86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strListBuilder49);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(strListArray52);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strListBuilder74);
        org.junit.Assert.assertNotNull(arrayListArray76);
        org.junit.Assert.assertNotNull(strListArray77);
        org.junit.Assert.assertNotNull(strListBuilder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(node86);
    }

    @Test
    public void test17454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17454");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        boolean boolean6 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = node3.removeChildren();
        java.util.Set<java.lang.String> strSet8 = node3.getDirectives();
        boolean boolean9 = node3.hasChildren();
        boolean boolean10 = node3.isSetterDef();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder13.append("NULL JSDocInfo 97\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test17455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17455");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", (int) (byte) -1, 31, 49, 12);
        boolean boolean12 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean13 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean15 = jSDocInfoBuilder1.recordDescription("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean16 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean17 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test17456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17456");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean26 = jSDocInfo20.hasParameter("JSDocInfo");
        java.util.Set<java.lang.String> strSet27 = jSDocInfo20.getModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo20.getThrownTypes();
        boolean boolean29 = jSDocInfo20.hasType();
        java.lang.String str30 = jSDocInfo20.getOriginalCommentString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo20.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
    }

    @Test
    public void test17457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17457");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        strSet16.clear();
        boolean boolean22 = strSet16.isEmpty();
        int int23 = strSet16.size();
        boolean boolean24 = strSet16.isEmpty();
        boolean boolean26 = strSet16.add("NULL JSDocInfo 97");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test17458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17458");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        boolean boolean18 = jSDocInfo14.hasType();
        boolean boolean19 = jSDocInfo14.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo14.getParameterNames();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node26.addChildrenToFront(node30);
        boolean boolean32 = node26.isGetterDef();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node26.setJSType(jSType33);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(37, node26, 0, 0);
        int int38 = node37.getCharno();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int49 = node48.getSourceOffset();
        com.google.javascript.rhino.Node node50 = node42.useSourceInfoIfMissingFromForTree(node48);
        int int51 = node42.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = node42.getJSDocInfo();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean57 = node56.isVar();
        node56.putBooleanProp(30, false);
        boolean boolean61 = node56.isSwitch();
        boolean boolean62 = node56.isUnscopedQualifiedName();
        boolean boolean63 = node56.hasChildren();
        node56.setCharno(52);
        com.google.javascript.rhino.Node node66 = node42.clonePropsFrom(node56);
        boolean boolean67 = node42.isQuotedString();
        boolean boolean68 = node42.isBlock();
        boolean boolean69 = node42.isTry();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean74 = node73.isOptionalArg();
        node73.setSourceEncodedPosition(12);
        boolean boolean77 = node73.isFromExterns();
        com.google.javascript.rhino.Node node78 = node42.useSourceInfoIfMissingFrom(node73);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj84 = node82.getProp(43);
        boolean boolean85 = node82.isCall();
        int int86 = node82.getSourcePosition();
        java.lang.String str90 = node82.toString(false, true, false);
        boolean boolean91 = node82.isDo();
        boolean boolean92 = node82.isWith();
        boolean boolean93 = node82.isThrow();
        boolean boolean94 = node82.isIf();
        com.google.javascript.rhino.Node node95 = new com.google.javascript.rhino.Node(0, node37, node78, node82);
        boolean boolean96 = node95.isEmpty();
        boolean boolean97 = strSet20.equals((java.lang.Object) node95);
        // The following exception was thrown during execution in test generation
        try {
            strSet20.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(jSDocInfo52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(obj84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 176180 + "'", int86 == 176180);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "STRING " + "'", str90, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test17459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17459");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream11 = strList8.stream();
        boolean boolean12 = strList8.isEmpty();
        boolean boolean13 = strList8.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int24 = strList22.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator25 = strList22.spliterator();
        boolean boolean26 = strList22.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean33 = typePosition32.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList34 = com.google.common.collect.ImmutableList.of(typePosition27, typePosition28, typePosition29, typePosition30, typePosition31, typePosition32);
        int int35 = strList22.indexOf((java.lang.Object) typePosition32);
        boolean boolean36 = strList8.containsAll((java.util.Collection<java.lang.String>) strList22);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = strList22.reverse();
        java.lang.Object[] objArray38 = strList37.toArray();
        boolean boolean39 = strList37.isEmpty();
        java.lang.String str40 = strList37.toString();
        // The following exception was thrown during execution in test generation
        try {
            strList37.add((int) (byte) -1, "NUMBER 40.0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(typePositionList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[, hi!, , hi!, , , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[, hi!, , hi!, , , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "[, hi!, , hi!, , , hi!, ]" + "'", str40, "[, hi!, , hi!, , , hi!, ]");
    }

    @Test
    public void test17460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17460");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setAllFlags();
        boolean boolean8 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test17461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17461");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        boolean boolean10 = strSet6.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator63 = strList60.spliterator();
        boolean boolean64 = strList30.equals((java.lang.Object) strList60);
        boolean boolean65 = strSet6.addAll((java.util.Collection<java.lang.String>) strList60);
        boolean boolean66 = strList60.isEmpty();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = null;
        boolean boolean71 = jSDocInfoBuilder68.recordThisType(jSTypeExpression70);
        boolean boolean73 = jSDocInfoBuilder68.addReference("hi!");
        boolean boolean74 = jSDocInfoBuilder68.recordPreserveTry();
        boolean boolean76 = jSDocInfoBuilder68.recordMeaning("JSDocInfo");
        boolean boolean77 = jSDocInfoBuilder68.recordIdGenerator();
        boolean boolean78 = strList60.contains((java.lang.Object) boolean77);
        java.util.Iterator<java.lang.String> strItor79 = strList60.iterator();
        java.util.stream.Stream<java.lang.String> strStream80 = strList60.parallelStream();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor81 = strList60.listIterator();
        int int82 = strList60.size();
        boolean boolean83 = strList60.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strItor79);
        org.junit.Assert.assertNotNull(strStream80);
        org.junit.Assert.assertNotNull(strItor81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test17462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17462");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        stringPosition24.setItem("TYPEOF");
        int int33 = stringPosition24.getStartLine();
        java.lang.String str34 = stringPosition24.getItem();
        stringPosition24.setItem("GETELEM  43\n");
        int int37 = stringPosition24.getStartLine();
        int int38 = stringPosition24.getStartLine();
        stringPosition24.setItem("NUMBER 0.0 43\n    STRING  43\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "TYPEOF" + "'", str34, "TYPEOF");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test17463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17463");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", (int) (short) 10, 48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder10.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder10.markName("hi!", staticSourceFile14, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder10.recordEnumParameterType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder10.recordConstructor();
        boolean boolean21 = jSDocInfoBuilder10.recordNoTypeCheck();
        boolean boolean22 = jSDocInfoBuilder10.isConstructorRecorded();
        boolean boolean23 = jSDocInfoBuilder10.isDescriptionRecorded();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        boolean boolean35 = jSDocInfoBuilder10.recordParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder1.recordType(jSTypeExpression34);
        boolean boolean38 = jSDocInfoBuilder1.addReference("");
        boolean boolean39 = jSDocInfoBuilder1.recordExpose();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test17464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17464");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = marker66.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition72 = marker66.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition74 = marker66.getDescription();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(stringPosition71);
        org.junit.Assert.assertNull(stringPosition72);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNull(stringPosition74);
    }

    @Test
    public void test17465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17465");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        boolean boolean5 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean8 = jSDocInfoBuilder1.recordConstancy();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test17466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17466");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node15.siblings();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean40 = node39.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node41 = node39.cloneNode();
        boolean boolean42 = node41.isGetElem();
        node41.addSuppression("");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int49 = node48.getSourceOffset();
        boolean boolean50 = node48.isBreak();
        int int51 = node48.getSourcePosition();
        com.google.javascript.rhino.Node node52 = node41.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node node53 = node48.getFirstChild();
        boolean boolean54 = node48.isOnlyModifiesThisCall();
        int int55 = node15.getIndexOfChild(node48);
        boolean boolean56 = node15.isOnlyModifiesThisCall();
        node15.detachChildren();
        boolean boolean59 = node15.getBooleanProp((int) ' ');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 176129 + "'", int51 == 176129);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test17467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17467");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        jSDocInfoBuilder1.recordOriginalCommentString("STRING ");
        boolean boolean7 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean10 = jSDocInfoBuilder9.isPopulatedWithFileOverview();
        boolean boolean11 = jSDocInfoBuilder9.recordExpose();
        boolean boolean12 = jSDocInfoBuilder9.recordPreserveTry();
        boolean boolean13 = jSDocInfoBuilder9.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordJavaDispatch();
        boolean boolean17 = jSDocInfoBuilder15.recordNoCompile();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        boolean boolean35 = jSDocInfoBuilder15.recordParameter("", jSTypeExpression28);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean38 = jSDocInfoBuilder37.isInterfaceRecorded();
        boolean boolean40 = jSDocInfoBuilder37.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        boolean boolean47 = node44.isCall();
        boolean boolean48 = node44.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = new com.google.javascript.rhino.JSTypeExpression(node44, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder51 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray53 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray54 = (java.util.ArrayList<java.lang.String>[]) arrayListArray53;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder55 = strListBuilder51.add((java.util.ArrayList<java.lang.String>[]) arrayListArray53);
        boolean boolean56 = jSTypeExpression50.equals((java.lang.Object) arrayListArray53);
        boolean boolean57 = jSDocInfoBuilder37.recordDefineType(jSTypeExpression50);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition58 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int59 = namePosition58.getEndLine();
        int int60 = namePosition58.getStartLine();
        com.google.javascript.rhino.Node node61 = namePosition58.getItem();
        boolean boolean62 = jSTypeExpression50.equals((java.lang.Object) node61);
        boolean boolean63 = jSTypeExpression50.isOptionalArg();
        boolean boolean64 = jSDocInfoBuilder15.recordTypedef(jSTypeExpression50);
        boolean boolean65 = jSDocInfoBuilder9.recordTypedef(jSTypeExpression50);
        boolean boolean66 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression50);
        boolean boolean67 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean68 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strListBuilder51);
        org.junit.Assert.assertNotNull(arrayListArray53);
        org.junit.Assert.assertNotNull(strListArray54);
        org.junit.Assert.assertNotNull(strListBuilder55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test17468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17468");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean43 = strList19.equals((java.lang.Object) 52);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet50);
        java.lang.Object[] objArray53 = strSet50.toArray();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray59 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        node57.setDirectives((java.util.Set<java.lang.String>) strSet60);
        java.lang.Object[] objArray63 = strSet60.toArray();
        boolean boolean64 = strSet50.retainAll((java.util.Collection<java.lang.String>) strSet60);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray70 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        node68.setDirectives((java.util.Set<java.lang.String>) strSet71);
        boolean boolean74 = strSet60.containsAll((java.util.Collection<java.lang.String>) strSet71);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        boolean boolean79 = strList77.isEmpty();
        boolean boolean80 = strSet71.containsAll((java.util.Collection<java.lang.String>) strList77);
        boolean boolean81 = strList19.containsAll((java.util.Collection<java.lang.String>) strSet71);
        boolean boolean82 = strList19.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream83 = strList19.stream();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor84 = strList19.listIterator();
        java.lang.Object[] objArray85 = strList19.toArray();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strStream83);
        org.junit.Assert.assertNotNull(strItor84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test17469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17469");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean24 = jSDocInfo20.hasThisType();
        java.lang.String str25 = jSDocInfo20.getBlockDescription();
        boolean boolean26 = jSDocInfo20.isNoCompile();
        java.lang.String str27 = jSDocInfo20.getLicense();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test17470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17470");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.stream.Stream<java.lang.String> strStream9 = strList8.stream();
        java.util.ListIterator<java.lang.String> strItor10 = strList8.listIterator();
        java.lang.Object[] objArray11 = strList8.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder13.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        jSDocInfoBuilder13.markName("hi!", staticSourceFile17, (int) (short) 0, (int) (short) 100);
        boolean boolean21 = jSDocInfoBuilder13.recordNoTypeCheck();
        boolean boolean22 = jSDocInfoBuilder13.recordExpose();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node26.addChildrenToFront(node30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = jSDocInfoBuilder13.build(node30);
        boolean boolean33 = jSDocInfo32.isConstructor();
        int int34 = jSDocInfo32.getExtendedInterfacesCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = jSDocInfo32.getParameterType("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean37 = jSDocInfo32.containsDeclaration();
        boolean boolean38 = jSDocInfo32.isHidden();
        boolean boolean39 = strList8.equals((java.lang.Object) boolean38);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(jSTypeExpression36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test17471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17471");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node18.isComma();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFromForTree(node18);
        boolean boolean22 = node21.isAssignAdd();
        com.google.javascript.rhino.Node node23 = node21.getLastSibling();
        boolean boolean24 = node23.isNew();
        java.lang.Appendable appendable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            node23.appendStringTree(appendable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test17472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17472");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        java.lang.String str3 = stringPosition0.getItem();
        int int4 = stringPosition0.getPositionOnEndLine();
        java.lang.String str5 = stringPosition0.getItem();
        int int6 = stringPosition0.getPositionOnStartLine();
        int int7 = stringPosition0.getStartLine();
        stringPosition0.setPositionInformation(37, (int) (byte) 1, 52, (int) (short) 10);
        int int13 = stringPosition0.getPositionOnStartLine();
        int int14 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test17473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17473");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordMeaning("STRING  43");
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean11 = jSDocInfoBuilder1.recordMeaning("NUMBER 0.0");
        boolean boolean12 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean13 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test17474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17474");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        boolean boolean23 = jSDocInfo20.isConstant();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getBaseType();
        java.lang.String str28 = jSDocInfo20.getDescription();
        boolean boolean29 = jSDocInfo20.isIdGenerator();
        java.lang.String str30 = jSDocInfo20.getSourceName();
        boolean boolean31 = jSDocInfo20.isOverride();
        boolean boolean32 = jSDocInfo20.hasType();
        boolean boolean33 = jSDocInfo20.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test17475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17475");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        java.lang.String str70 = jSDocInfo69.getMeaning();
        boolean boolean71 = jSDocInfo69.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo69.getExtendedInterfaces();
        java.lang.String str73 = jSDocInfo69.getDescription();
        java.util.Set<java.lang.String> strSet74 = jSDocInfo69.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream75 = strSet74.parallelStream();
        node31.setDirectives(strSet74);
        boolean boolean77 = node31.isNumber();
        boolean boolean78 = node31.isQuotedString();
        boolean boolean79 = node31.isCase();
        boolean boolean80 = node31.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test17476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17476");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.util.Collection<java.lang.String> strCollection48 = jSDocInfo42.getReferences();
        boolean boolean49 = jSDocInfo42.isDefine();
        boolean boolean50 = jSDocInfo42.isNoAlias();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo42.getModifies();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(strCollection48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strSet51);
    }

    @Test
    public void test17477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17477");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        node3.setSourceEncodedPosition(12);
        int int7 = node3.getSideEffectFlags();
        boolean boolean8 = node3.isQualifiedName();
        int int10 = node3.getIntProp(11);
        boolean boolean11 = node3.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test17478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17478");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExterns();
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        jSDocInfoBuilder1.recordOriginalCommentString("TYPEOF");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordJavaDispatch();
        jSDocInfoBuilder15.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder24 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder24.recordJavaDispatch();
        boolean boolean26 = jSDocInfoBuilder24.recordNoCompile();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        boolean boolean34 = node31.isCall();
        boolean boolean35 = node31.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = new com.google.javascript.rhino.JSTypeExpression(node31, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder38 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray40 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray41 = (java.util.ArrayList<java.lang.String>[]) arrayListArray40;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder42 = strListBuilder38.add((java.util.ArrayList<java.lang.String>[]) arrayListArray40);
        boolean boolean43 = jSTypeExpression37.equals((java.lang.Object) arrayListArray40);
        boolean boolean44 = jSDocInfoBuilder24.recordParameter("", jSTypeExpression37);
        boolean boolean45 = jSDocInfoBuilder15.recordThrowType(jSTypeExpression37);
        boolean boolean46 = jSTypeExpression37.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression37);
        boolean boolean48 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression37);
        boolean boolean49 = jSDocInfoBuilder1.recordExpose();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strListBuilder38);
        org.junit.Assert.assertNotNull(arrayListArray40);
        org.junit.Assert.assertNotNull(strListArray41);
        org.junit.Assert.assertNotNull(strListBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test17479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17479");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("OR  54\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo20.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.stream.Stream<java.lang.String> strStream39 = strList38.stream();
        boolean boolean40 = strList29.containsAll((java.util.Collection<java.lang.String>) strList38);
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = strList38.asList();
        java.util.Iterator<java.lang.String> strItor42 = strList41.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strItor42);
    }

    @Test
    public void test17480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17480");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        boolean boolean24 = node21.isDec();
        com.google.javascript.rhino.Node node25 = node21.cloneNode();
        boolean boolean26 = node21.isWith();
        node21.putIntProp(49, (int) (byte) -1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test17481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17481");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition1 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int2 = namePosition1.getEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isVar();
        node6.putBooleanProp(30, false);
        boolean boolean11 = node6.isSwitch();
        boolean boolean12 = node6.isUnscopedQualifiedName();
        boolean boolean13 = node6.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node6.setStaticSourceFile(staticSourceFile14);
        boolean boolean16 = node6.isGetElem();
        namePosition1.setItem(node6);
        namePosition1.setPositionInformation(36, 15, 41, (int) (byte) -1);
        int int23 = namePosition1.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition24 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node25 = namePosition24.getItem();
        int int26 = namePosition24.getStartLine();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean31 = node30.isNull();
        boolean boolean32 = node30.isSyntheticBlock();
        namePosition24.setItem(node30);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition34 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int35 = namePosition34.getEndLine();
        int int36 = namePosition34.getStartLine();
        int int37 = namePosition34.getPositionOnEndLine();
        int int38 = namePosition34.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int40 = namePosition39.getEndLine();
        int int41 = namePosition39.getStartLine();
        com.google.javascript.rhino.Node node42 = namePosition39.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition43 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node44 = namePosition43.getItem();
        int int45 = namePosition43.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList46 = com.google.common.collect.ImmutableList.of(namePosition39, namePosition43);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition47 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int48 = namePosition47.getEndLine();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean53 = node52.isVar();
        node52.putBooleanProp(30, false);
        boolean boolean57 = node52.isSwitch();
        boolean boolean58 = node52.isUnscopedQualifiedName();
        boolean boolean59 = node52.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        node52.setStaticSourceFile(staticSourceFile60);
        boolean boolean62 = node52.isGetElem();
        namePosition47.setItem(node52);
        namePosition47.setPositionInformation(36, 15, 41, (int) (byte) -1);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition69 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int70 = namePosition69.getEndLine();
        int int71 = namePosition69.getStartLine();
        int int72 = namePosition69.getPositionOnEndLine();
        int int73 = namePosition69.getEndLine();
        int int74 = namePosition69.getStartLine();
        com.google.javascript.rhino.Node node75 = namePosition69.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition76 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int77 = namePosition76.getEndLine();
        int int78 = namePosition76.getStartLine();
        com.google.javascript.rhino.Node node79 = namePosition76.getItem();
        namePosition76.setPositionInformation(37, (int) '4', (int) '4', 47);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition85 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int86 = namePosition85.getEndLine();
        int int87 = namePosition85.getStartLine();
        int int88 = namePosition85.getPositionOnEndLine();
        int int89 = namePosition85.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList90 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition1, namePosition24, namePosition34, namePosition39, namePosition47, namePosition69, namePosition76, namePosition85);
        com.google.javascript.rhino.Node node91 = namePosition1.getItem();
        int int92 = namePosition1.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36 + "'", int23 == 36);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(namePositionList46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(namePositionList90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test17482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17482");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test17483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17483");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        int int8 = node4.getSourcePosition();
        java.lang.String str12 = node4.toString(false, true, false);
        boolean boolean13 = node4.isExprResult();
        int int14 = node4.getSideEffectFlags();
        com.google.javascript.rhino.Node node15 = node4.removeChildren();
        boolean boolean16 = node4.isOr();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj22 = node20.getProp(43);
        boolean boolean23 = node20.isCall();
        int int24 = node20.getSourcePosition();
        java.lang.String str28 = node20.toString(false, true, false);
        boolean boolean29 = node20.isExprResult();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node20.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray36 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        node34.setDirectives((java.util.Set<java.lang.String>) strSet37);
        java.lang.Object[] objArray40 = strSet37.toArray();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet47);
        java.lang.Object[] objArray50 = strSet47.toArray();
        boolean boolean51 = strSet37.retainAll((java.util.Collection<java.lang.String>) strSet47);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet58);
        boolean boolean61 = strSet47.containsAll((java.util.Collection<java.lang.String>) strSet58);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet47);
        node20.setWasEmptyNode(true);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder66 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean67 = jSDocInfoBuilder66.isInterfaceRecorded();
        boolean boolean69 = jSDocInfoBuilder66.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj75 = node73.getProp(43);
        boolean boolean76 = node73.isCall();
        boolean boolean77 = node73.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = new com.google.javascript.rhino.JSTypeExpression(node73, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder80 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray82 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray83 = (java.util.ArrayList<java.lang.String>[]) arrayListArray82;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder84 = strListBuilder80.add((java.util.ArrayList<java.lang.String>[]) arrayListArray82);
        boolean boolean85 = jSTypeExpression79.equals((java.lang.Object) arrayListArray82);
        boolean boolean86 = jSDocInfoBuilder66.recordDefineType(jSTypeExpression79);
        boolean boolean87 = jSTypeExpression79.isVarArgs();
        com.google.javascript.rhino.Node node88 = jSTypeExpression79.getRoot();
        com.google.javascript.rhino.jstype.JSType jSType89 = node88.getJSType();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node20, node88, 4, 15);
        boolean boolean93 = node92.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 176180 + "'", int8 == 176180);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING " + "'", str12, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 176180 + "'", int24 == 176180);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "STRING " + "'", str28, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(obj75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strListBuilder80);
        org.junit.Assert.assertNotNull(arrayListArray82);
        org.junit.Assert.assertNotNull(strListArray83);
        org.junit.Assert.assertNotNull(strListBuilder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(jSType89);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test17484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17484");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        boolean boolean67 = node16.isThrow();
        double double68 = node16.getDouble();
        boolean boolean69 = node16.hasChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test17485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17485");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node23 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node17, node45, node58, node63, 1, 100);
        boolean boolean68 = node67.isFromExterns();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(53, node67, node80, node84);
        boolean boolean87 = node67.isNot();
        com.google.javascript.rhino.Node node88 = node67.detachFromParent();
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean93 = node92.isNoSideEffectsCall();
        boolean boolean94 = node92.isWith();
        boolean boolean95 = node67.isEquivalentTo(node92);
        node92.setLineno((int) (short) 1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test17486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17486");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '#');
        boolean boolean2 = node1.isFalse();
        boolean boolean3 = node1.isDelProp();
        com.google.javascript.rhino.Node node4 = node1.getLastSibling();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags6.setThrows();
        sideEffectFlags6.clearAllFlags();
        sideEffectFlags6.setAllFlags();
        sideEffectFlags6.clearAllFlags();
        sideEffectFlags6.setMutatesThis();
        sideEffectFlags6.setReturnsTainted();
        sideEffectFlags6.setReturnsTainted();
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got GETELEM");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test17487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17487");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str12 = stringPosition11.getItem();
        java.lang.String str13 = stringPosition11.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str15 = stringPosition14.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str17 = stringPosition16.getItem();
        java.lang.String str18 = stringPosition16.getItem();
        int int19 = stringPosition16.getPositionOnStartLine();
        int int20 = stringPosition16.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition22 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition23 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str24 = stringPosition23.getItem();
        stringPosition23.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition27 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str28 = stringPosition27.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition29 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str30 = stringPosition29.getItem();
        java.lang.String str31 = stringPosition29.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str33 = stringPosition32.getItem();
        java.lang.String str34 = stringPosition32.getItem();
        int int35 = stringPosition32.getPositionOnStartLine();
        int int36 = stringPosition32.getStartLine();
        int int37 = stringPosition32.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList38 = com.google.common.collect.ImmutableList.of(stringPosition8, stringPosition11, stringPosition14, stringPosition16, stringPosition21, stringPosition22, stringPosition23, stringPosition27, stringPosition29, stringPosition32);
        int int39 = stringPosition32.getPositionOnEndLine();
        int int40 = stringPosition32.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList41 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition32);
        int int42 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(stringPositionList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(stringPositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test17488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17488");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(38, 53, (int) (short) 1);
    }

    @Test
    public void test17489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17489");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(147494);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test17490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17490");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 46);
        boolean boolean2 = node1.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test17491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17491");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isAdd();
        boolean boolean5 = node3.isFalse();
        boolean boolean6 = node3.isCase();
        int int7 = node3.getType();
        boolean boolean8 = node3.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 40 + "'", int7 == 40);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test17492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17492");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder6.markName("hi!", staticSourceFile10, (int) (short) 0, (int) (short) 100);
        boolean boolean14 = jSDocInfoBuilder6.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder6.recordExpose();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node19.addChildrenToFront(node23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = jSDocInfoBuilder6.build(node23);
        java.lang.String str26 = jSDocInfo25.getMeaning();
        boolean boolean27 = jSDocInfo25.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo25.getExtendedInterfaces();
        boolean boolean29 = jSDocInfo25.isImplicitCast();
        node3.setJSDocInfo(jSDocInfo25);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder32.markName("hi!", staticSourceFile36, (int) (short) 0, (int) (short) 100);
        boolean boolean40 = jSDocInfoBuilder32.recordNoTypeCheck();
        boolean boolean41 = jSDocInfoBuilder32.recordExpose();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node45.addChildrenToFront(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = jSDocInfoBuilder32.build(node49);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj57 = node55.getProp(43);
        boolean boolean58 = node55.isCall();
        boolean boolean59 = node55.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = new com.google.javascript.rhino.JSTypeExpression(node55, "STRING ");
        boolean boolean62 = jSDocInfoBuilder32.recordThrowType(jSTypeExpression61);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder64 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder64.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        jSDocInfoBuilder64.markName("hi!", staticSourceFile68, (int) (short) 0, (int) (short) 100);
        boolean boolean72 = jSDocInfoBuilder64.recordNoTypeCheck();
        boolean boolean73 = jSDocInfoBuilder64.recordExpose();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node77.addChildrenToFront(node81);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = jSDocInfoBuilder64.build(node81);
        boolean boolean84 = node81.isOptionalArg();
        com.google.javascript.rhino.Node node85 = node81.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = jSDocInfoBuilder32.build(node85);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean88 = jSDocInfoBuilder32.recordVisibility(visibility87);
        jSDocInfo25.setVisibility(visibility87);
        boolean boolean90 = jSDocInfo25.isConstructor();
        int int91 = jSDocInfo25.getImplementedInterfaceCount();
        java.lang.String str92 = jSDocInfo25.getOriginalCommentString();
        java.lang.String str93 = jSDocInfo25.getMeaning();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSDocInfo25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSDocInfo51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertNotNull(jSDocInfo86);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test17493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17493");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        int int2 = typePosition0.getEndLine();
        int int3 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        com.google.javascript.rhino.Node node5 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test17494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17494");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile11, (int) (short) 100, 8);
        boolean boolean15 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean16 = jSDocInfoBuilder1.shouldParseDocumentation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test17495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17495");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        boolean boolean32 = jSDocInfo20.hasParameter("hi!");
        int int33 = jSDocInfo20.getParameterCount();
        boolean boolean34 = jSDocInfo20.hasReturnType();
        java.lang.String str35 = jSDocInfo20.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test17496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17496");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) 'a', 23, 18);
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        org.junit.Assert.assertNull(jSType4);
    }

    @Test
    public void test17497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17497");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordJavaDispatch();
        jSDocInfoBuilder12.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.recordJavaDispatch();
        boolean boolean23 = jSDocInfoBuilder21.recordNoCompile();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder35 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray37 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray38 = (java.util.ArrayList<java.lang.String>[]) arrayListArray37;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = strListBuilder35.add((java.util.ArrayList<java.lang.String>[]) arrayListArray37);
        boolean boolean40 = jSTypeExpression34.equals((java.lang.Object) arrayListArray37);
        boolean boolean41 = jSDocInfoBuilder21.recordParameter("", jSTypeExpression34);
        boolean boolean42 = jSDocInfoBuilder12.recordThrowType(jSTypeExpression34);
        boolean boolean43 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression34);
        boolean boolean44 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean47 = jSDocInfoBuilder1.recordParameterDescription("STRING ", "OR ");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strListBuilder35);
        org.junit.Assert.assertNotNull(arrayListArray37);
        org.junit.Assert.assertNotNull(strListArray38);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test17498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17498");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo42.getThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList76 = jSDocInfo42.getTemplateTypeNames();
        java.util.stream.Stream<java.lang.String> strStream77 = strList76.parallelStream();
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = strList76.asList();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean83 = node82.isVar();
        node82.putBooleanProp(30, false);
        boolean boolean87 = node82.isSwitch();
        boolean boolean88 = node82.isUnscopedQualifiedName();
        boolean boolean89 = node82.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile90 = null;
        node82.setStaticSourceFile(staticSourceFile90);
        boolean boolean92 = node82.isUnscopedQualifiedName();
        node82.setVarArgs(true);
        boolean boolean95 = strList78.equals((java.lang.Object) node82);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = strList78.add("STRING [, hi!, , , hi!, , hi!, ] 43 [quoted: 1]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strStream77);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test17499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17499");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        stringPosition0.setItem("");
        int int4 = stringPosition0.getPositionOnEndLine();
        java.lang.String str5 = stringPosition0.getItem();
        stringPosition0.setItem("NUMBER 43.0");
        int int8 = stringPosition0.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test17500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17500");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        boolean boolean11 = strSet7.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList52 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList20, (java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList51);
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator64 = strList61.spliterator();
        boolean boolean65 = strList31.equals((java.lang.Object) strList61);
        boolean boolean66 = strSet7.addAll((java.util.Collection<java.lang.String>) strList61);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean71 = node70.isIf();
        boolean boolean72 = strSet7.equals((java.lang.Object) node70);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, node70);
        boolean boolean74 = node73.isQualifiedName();
        boolean boolean75 = node73.isOr();
        boolean boolean76 = node73.isIn();
        node73.setType((int) (short) 100);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strIterableList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test07001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07001");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        node1.setSourceEncodedPositionForTree(4);
        boolean boolean4 = node1.isBlock();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj12 = node10.getProp(43);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int17 = node16.getSourceOffset();
        com.google.javascript.rhino.Node node18 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray24 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        node22.setDirectives((java.util.Set<java.lang.String>) strSet25);
        com.google.javascript.rhino.Node node28 = node16.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int39 = node38.getSourceOffset();
        com.google.javascript.rhino.Node node40 = node32.useSourceInfoIfMissingFromForTree(node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray46 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        node44.setDirectives((java.util.Set<java.lang.String>) strSet47);
        com.google.javascript.rhino.Node node50 = node38.useSourceInfoIfMissingFromForTree(node44);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj57 = node55.getProp(43);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int62 = node61.getSourceOffset();
        com.google.javascript.rhino.Node node63 = node55.useSourceInfoIfMissingFromForTree(node61);
        boolean boolean64 = node63.isAssignAdd();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean69 = node68.isVar();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) ' ', node22, node50, node63, node68, 1, 100);
        boolean boolean73 = node72.isFromExterns();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj79 = node77.getProp(43);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int84 = node83.getSourceOffset();
        com.google.javascript.rhino.Node node85 = node77.useSourceInfoIfMissingFromForTree(node83);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean90 = node89.isVar();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(53, node72, node85, node89);
        boolean boolean92 = node72.isNot();
        com.google.javascript.rhino.Node node93 = node72.detachFromParent();
        boolean boolean94 = node1.hasChild(node72);
        com.google.javascript.rhino.Node node95 = node1.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = node95.getBooleanProp(8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(node95);
    }

    @Test
    public void test07002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07002");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        boolean boolean5 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.addAuthor("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder1.markName("", staticSourceFile9, (int) ' ', (int) '#');
        boolean boolean14 = jSDocInfoBuilder1.recordReturnDescription("OR ");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07003");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        node3.setVarArgs(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07004");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean13 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean14 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean16 = jSDocInfoBuilder1.recordLends("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nNUMBER 10.0 52\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: NUMBER 10.0 52\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test07005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07005");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node18.isComma();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFromForTree(node18);
        boolean boolean22 = node18.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test07006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07006");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(47);
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test07007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07007");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        node29.setLength(31);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj37 = node35.getProp(43);
        boolean boolean38 = node35.isCall();
        int int39 = node35.getSourcePosition();
        java.lang.String str43 = node35.toString(false, true, false);
        boolean boolean44 = node35.isExprResult();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node35.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        node49.setDirectives((java.util.Set<java.lang.String>) strSet52);
        java.lang.Object[] objArray55 = strSet52.toArray();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node59.setDirectives((java.util.Set<java.lang.String>) strSet62);
        java.lang.Object[] objArray65 = strSet62.toArray();
        boolean boolean66 = strSet52.retainAll((java.util.Collection<java.lang.String>) strSet62);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        node70.setDirectives((java.util.Set<java.lang.String>) strSet73);
        boolean boolean76 = strSet62.containsAll((java.util.Collection<java.lang.String>) strSet73);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet62);
        node35.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean84 = node83.isVar();
        node83.putBooleanProp(30, false);
        boolean boolean88 = node83.isSwitch();
        boolean boolean89 = node83.isIn();
        boolean boolean90 = node83.isFromExterns();
        com.google.javascript.rhino.Node node91 = node83.cloneNode();
        com.google.javascript.rhino.Node node92 = node35.useSourceInfoIfMissingFrom(node83);
        int int93 = node35.getCharno();
        int int94 = node35.getType();
        node29.addChildToFront(node35);
        boolean boolean96 = node35.isFromExterns();
        com.google.javascript.rhino.Node node97 = node35.detachFromParent();
        com.google.javascript.rhino.Node node98 = node97.getNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 176180 + "'", int39 == 176180);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "STRING " + "'", str43, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 52 + "'", int93 == 52);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 40 + "'", int94 == 40);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNull(node98);
    }

    @Test
    public void test07008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07008");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.lang.Object[] objArray25 = strSet22.toArray();
        boolean boolean26 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        boolean boolean36 = strSet22.containsAll((java.util.Collection<java.lang.String>) strSet33);
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int47 = strList45.indexOf((java.lang.Object) 'a');
        int int48 = strList45.size();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray52 = strList45.toArray(strArray51);
        boolean boolean53 = strSet22.containsAll((java.util.Collection<java.lang.String>) strList45);
        boolean boolean54 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet22);
        com.google.common.collect.ImmutableList<java.lang.Object> objList55 = com.google.common.collect.ImmutableList.copyOf((java.util.Collection<java.lang.String>) strSet22);
        java.util.stream.Stream<java.lang.String> strStream56 = strSet22.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator57 = strSet22.spliterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNotNull(strStream56);
        org.junit.Assert.assertNotNull(strSpliterator57);
    }

    @Test
    public void test07009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07009");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo14.getParameterNames();
        boolean boolean19 = jSDocInfo14.hasReturnType();
        java.lang.String str20 = jSDocInfo14.getFileOverview();
        boolean boolean21 = jSDocInfo14.hasReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo14.getImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = jSDocInfo14.getVisibility();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test07010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07010");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node10.addChildrenToFront(node14);
        boolean boolean16 = node10.isGetterDef();
        boolean boolean17 = node10.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(32, node10, node27);
        boolean boolean41 = node40.isExprResult();
        boolean boolean42 = node40.isFunction();
        com.google.javascript.rhino.Node node43 = node3.srcrefTree(node40);
        boolean boolean44 = node3.isDebugger();
        boolean boolean45 = node3.isFunction();
        node3.setLineno(53);
        boolean boolean48 = node3.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test07011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07011");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(39, (int) (short) 0, (int) (byte) -1);
        boolean boolean4 = node3.isCase();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07012");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isLabelName();
        int int7 = node3.getIntProp((int) 'a');
        boolean boolean8 = node3.isUnscopedQualifiedName();
        boolean boolean9 = node3.isDo();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isVar();
        node13.putBooleanProp(30, false);
        boolean boolean18 = node13.isSwitch();
        boolean boolean19 = node13.isIn();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        java.lang.Object[] objArray39 = strSet36.toArray();
        boolean boolean40 = strSet26.retainAll((java.util.Collection<java.lang.String>) strSet36);
        strSet36.clear();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet48);
        java.lang.Object[] objArray51 = strSet48.toArray();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet58);
        java.lang.Object[] objArray61 = strSet58.toArray();
        boolean boolean62 = strSet48.retainAll((java.util.Collection<java.lang.String>) strSet58);
        boolean boolean63 = strSet36.removeAll((java.util.Collection<java.lang.String>) strSet48);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet48);
        int int65 = strSet48.size();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean70 = node69.isVar();
        node69.putBooleanProp(30, false);
        boolean boolean74 = node69.isSwitch();
        boolean boolean75 = node69.isUnscopedQualifiedName();
        boolean boolean76 = node69.hasChildren();
        boolean boolean77 = node69.isDefaultCase();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable78 = node69.children();
        boolean boolean79 = strSet48.equals((java.lang.Object) node69);
        com.google.javascript.rhino.Node node80 = node69.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node81 = node3.useSourceInfoIfMissingFromForTree(node80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(nodeIterable78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(node80);
    }

    @Test
    public void test07013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07013");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        boolean boolean30 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet26);
        strSet26.clear();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.Object[] objArray41 = strSet38.toArray();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet48);
        java.lang.Object[] objArray51 = strSet48.toArray();
        boolean boolean52 = strSet38.retainAll((java.util.Collection<java.lang.String>) strSet48);
        boolean boolean53 = strSet26.removeAll((java.util.Collection<java.lang.String>) strSet38);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet38);
        int int55 = strSet38.size();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder56 = new com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>>();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList57 = strListBuilder56.build();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        boolean boolean62 = strList60.isEmpty();
        java.util.Iterator<java.lang.String> strItor63 = strList60.iterator();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder64 = strListBuilder56.add(strList60);
        boolean boolean65 = strSet38.containsAll((java.util.Collection<java.lang.String>) strList60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder67 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder67.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile71 = null;
        jSDocInfoBuilder67.markName("hi!", staticSourceFile71, (int) (short) 0, (int) (short) 100);
        boolean boolean75 = jSDocInfoBuilder67.recordNoTypeCheck();
        boolean boolean76 = jSDocInfoBuilder67.recordExpose();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node80.addChildrenToFront(node84);
        com.google.javascript.rhino.JSDocInfo jSDocInfo86 = jSDocInfoBuilder67.build(node84);
        boolean boolean87 = jSDocInfo86.isConstructor();
        boolean boolean88 = jSDocInfo86.isDefine();
        java.util.Set<java.lang.String> strSet89 = jSDocInfo86.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression90 = jSDocInfo86.getEnumParameterType();
        java.util.Set<java.lang.String> strSet91 = jSDocInfo86.getModifies();
        boolean boolean92 = strSet38.addAll((java.util.Collection<java.lang.String>) strSet91);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(strListList57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strListBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(jSDocInfo86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNull(jSTypeExpression90);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07014");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node16.addChildrenToFront(node20);
        boolean boolean22 = node16.isGetterDef();
        boolean boolean23 = node16.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(32, node16, node33);
        boolean boolean47 = node46.isExprResult();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node46, "NUMBER 0.0");
        boolean boolean50 = jSDocInfoBuilder1.recordParameter("STRING  43", jSTypeExpression49);
        boolean boolean51 = jSTypeExpression49.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test07015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07015");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(49);
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07016");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        boolean boolean63 = strList19.containsAll((java.util.Collection<java.lang.String>) strList62);
        java.util.Iterator<java.lang.String> strItor64 = strList19.iterator();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int69 = node68.getSourceOffset();
        double double70 = node68.getDouble();
        boolean boolean71 = node68.isInc();
        int int72 = strList19.indexOf((java.lang.Object) node68);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable73 = node68.siblings();
        boolean boolean74 = node68.isThis();
        boolean boolean75 = node68.isObjectLit();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(nodeIterable73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test07017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07017");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        boolean boolean24 = node21.isDelProp();
        int int25 = node21.getType();
        boolean boolean26 = node21.isHook();
        node21.setSourceEncodedPositionForTree((int) (short) 10);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 39 + "'", int25 == 39);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07018");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isInterface();
        int int25 = jSDocInfo20.getExtendedInterfacesCount();
        int int26 = jSDocInfo20.getImplementedInterfaceCount();
        boolean boolean27 = jSDocInfo20.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = jSDocInfo20.getVisibility();
        boolean boolean30 = jSDocInfo20.hasParameter("");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + visibility28 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility28.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07019");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo42.getReturnType();
        boolean boolean50 = jSDocInfo42.hasBaseType();
        boolean boolean51 = jSDocInfo42.isNoCompile();
        boolean boolean52 = jSDocInfo42.isHidden();
        java.lang.String str53 = jSDocInfo42.getOriginalCommentString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test07020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07020");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean57 = strList50.equals((java.lang.Object) 43);
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = strList50.reverse();
        // The following exception was thrown during execution in test generation
        try {
            strList50.add(44, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strList58);
    }

    @Test
    public void test07021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07021");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(43, 10, 15);
    }

    @Test
    public void test07022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07022");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean23 = jSDocInfo20.isDefine();
        java.lang.String str24 = jSDocInfo20.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
    }

    @Test
    public void test07023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07023");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordMeaning("STRING  43");
        boolean boolean9 = jSDocInfoBuilder1.addAuthor("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean11 = jSDocInfoBuilder1.recordMeaning("NUMBER 0.0");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder13.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        jSDocInfoBuilder13.markName("hi!", staticSourceFile17, (int) (short) 0, (int) (short) 100);
        boolean boolean21 = jSDocInfoBuilder13.recordNoTypeCheck();
        boolean boolean22 = jSDocInfoBuilder13.recordExpose();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node26.addChildrenToFront(node30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = jSDocInfoBuilder13.build(node30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordNoTypeCheck();
        boolean boolean38 = jSDocInfoBuilder35.addAuthor("");
        boolean boolean39 = jSDocInfoBuilder35.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.isInterfaceRecorded();
        boolean boolean43 = jSDocInfoBuilder41.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder45.isInterfaceRecorded();
        boolean boolean48 = jSDocInfoBuilder45.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        boolean boolean55 = node52.isCall();
        boolean boolean56 = node52.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = new com.google.javascript.rhino.JSTypeExpression(node52, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder59 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray61 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray62 = (java.util.ArrayList<java.lang.String>[]) arrayListArray61;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder63 = strListBuilder59.add((java.util.ArrayList<java.lang.String>[]) arrayListArray61);
        boolean boolean64 = jSTypeExpression58.equals((java.lang.Object) arrayListArray61);
        boolean boolean65 = jSDocInfoBuilder45.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.Node node66 = jSTypeExpression58.getRoot();
        boolean boolean68 = jSDocInfoBuilder41.recordThrowDescription(jSTypeExpression58, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean71 = jSDocInfoBuilder70.isInterfaceRecorded();
        boolean boolean73 = jSDocInfoBuilder70.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj79 = node77.getProp(43);
        boolean boolean80 = node77.isCall();
        boolean boolean81 = node77.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = new com.google.javascript.rhino.JSTypeExpression(node77, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder84 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray86 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray87 = (java.util.ArrayList<java.lang.String>[]) arrayListArray86;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder88 = strListBuilder84.add((java.util.ArrayList<java.lang.String>[]) arrayListArray86);
        boolean boolean89 = jSTypeExpression83.equals((java.lang.Object) arrayListArray86);
        boolean boolean90 = jSDocInfoBuilder70.recordDefineType(jSTypeExpression83);
        boolean boolean91 = jSDocInfoBuilder41.recordEnumParameterType(jSTypeExpression83);
        boolean boolean92 = jSTypeExpression83.isOptionalArg();
        boolean boolean93 = jSTypeExpression83.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression94 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression83);
        boolean boolean95 = jSDocInfoBuilder35.recordReturnType(jSTypeExpression94);
        boolean boolean96 = jSDocInfoBuilder13.recordParameter("NUMBER 0.0 43", jSTypeExpression94);
        boolean boolean97 = jSTypeExpression94.isOptionalArg();
        boolean boolean98 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression94);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSDocInfo32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strListBuilder59);
        org.junit.Assert.assertNotNull(arrayListArray61);
        org.junit.Assert.assertNotNull(strListArray62);
        org.junit.Assert.assertNotNull(strListBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strListBuilder84);
        org.junit.Assert.assertNotNull(arrayListArray86);
        org.junit.Assert.assertNotNull(strListArray87);
        org.junit.Assert.assertNotNull(strListBuilder88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test07024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07024");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(30);
        sideEffectFlags1.setMutatesArguments();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07025");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        boolean boolean30 = jSDocInfo20.containsDeclaration();
        int int31 = jSDocInfo20.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test07026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07026");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.Iterator<java.lang.String> strItor9 = strList8.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder11.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        jSDocInfoBuilder11.markName("hi!", staticSourceFile15, (int) (short) 0, (int) (short) 100);
        boolean boolean19 = jSDocInfoBuilder11.recordNoTypeCheck();
        boolean boolean20 = jSDocInfoBuilder11.recordExpose();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node24.addChildrenToFront(node28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = jSDocInfoBuilder11.build(node28);
        java.lang.String str31 = jSDocInfo30.getMeaning();
        boolean boolean32 = jSDocInfo30.isExport();
        boolean boolean33 = jSDocInfo30.isConstant();
        boolean boolean34 = strList8.equals((java.lang.Object) boolean33);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.lang.Object[] objArray44 = strSet41.toArray();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet51);
        java.lang.Object[] objArray54 = strSet51.toArray();
        boolean boolean55 = strSet41.retainAll((java.util.Collection<java.lang.String>) strSet51);
        boolean boolean56 = strSet51.isEmpty();
        int int57 = strSet51.size();
        int int58 = strList8.indexOf((java.lang.Object) strSet51);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean62 = jSDocInfoBuilder60.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = null;
        jSDocInfoBuilder60.markName("hi!", staticSourceFile64, (int) (short) 0, (int) (short) 100);
        boolean boolean68 = jSDocInfoBuilder60.recordNoTypeCheck();
        boolean boolean69 = jSDocInfoBuilder60.recordExpose();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node73.addChildrenToFront(node77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = jSDocInfoBuilder60.build(node77);
        boolean boolean80 = jSDocInfo79.isExport();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isOptionalArg();
        com.google.javascript.rhino.Node node86 = node84.getNext();
        jSDocInfo79.setAssociatedNode(node86);
        boolean boolean88 = jSDocInfo79.isNoShadow();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection89 = jSDocInfo79.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList90 = jSDocInfo79.getExtendedInterfaces();
        boolean boolean91 = strList8.contains((java.lang.Object) jSTypeExpressionList90);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSDocInfo30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(jSDocInfo79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(nodeCollection89);
        org.junit.Assert.assertNotNull(jSTypeExpressionList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test07027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07027");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("hi!");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        node1.putIntProp(0, 0);
        boolean boolean7 = node1.isVoid();
        com.google.javascript.rhino.Node node8 = node1.getNext();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean13 = node12.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node14 = node12.cloneNode();
        boolean boolean15 = node14.isGetElem();
        node14.addSuppression("");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        boolean boolean23 = node21.isBreak();
        int int24 = node21.getSourcePosition();
        com.google.javascript.rhino.Node node25 = node14.useSourceInfoFrom(node21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = node21.getJSDocInfo();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node30.addChildrenToFront(node34);
        boolean boolean37 = node30.getBooleanProp(8);
        com.google.javascript.rhino.Node node38 = node21.clonePropsFrom(node30);
        boolean boolean39 = node30.isLocalResultCall();
        com.google.javascript.rhino.InputId inputId40 = null;
        node30.setInputId(inputId40);
        // The following exception was thrown during execution in test generation
        try {
            node1.removeChild(node30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 176129 + "'", int24 == 176129);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(jSDocInfo26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07028");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        boolean boolean21 = strSet16.isEmpty();
        int int22 = strSet16.size();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet16.spliterator();
        int int24 = strSet16.size();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordNoTypeCheck();
        boolean boolean28 = jSDocInfoBuilder26.isInterfaceRecorded();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        int int35 = node32.getType();
        boolean boolean36 = node32.isGetterDef();
        node32.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = jSDocInfoBuilder26.build(node32);
        boolean boolean40 = jSDocInfo39.isNoSideEffects();
        boolean boolean41 = jSDocInfo39.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList42 = jSDocInfo39.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo39.getParameterNames();
        boolean boolean44 = jSDocInfo39.hasReturnType();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo39.getModifies();
        boolean boolean46 = strSet16.addAll((java.util.Collection<java.lang.String>) strSet45);
        java.lang.Object[] objArray47 = strSet45.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean49 = strSet45.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(strSpliterator23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList42);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
    }

    @Test
    public void test07029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07029");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        java.lang.String str50 = jSDocInfo42.getLendsName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList51 = jSDocInfo42.getExtendedInterfaces();
        boolean boolean53 = jSDocInfo42.hasParameter("hi!");
        boolean boolean54 = jSDocInfo42.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo42.getTypedefType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(jSTypeExpressionList51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
    }

    @Test
    public void test07030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07030");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node23 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node17, node45, node58, node63, 1, 100);
        boolean boolean68 = node67.isFromExterns();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(53, node67, node80, node84);
        boolean boolean87 = node67.isNot();
        boolean boolean88 = node67.isQualifiedName();
        com.google.javascript.rhino.Node node89 = node67.detachFromParent();
        java.lang.Class<?> wildcardClass90 = node67.getClass();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test07031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07031");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "[]");
        boolean boolean3 = node2.isFunction();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable4 = node2.getAncestors();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder6.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder6.markName("hi!", staticSourceFile10, (int) (short) 0, (int) (short) 100);
        boolean boolean14 = jSDocInfoBuilder6.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder6.recordExpose();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node19.addChildrenToFront(node23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = jSDocInfoBuilder6.build(node23);
        boolean boolean26 = jSDocInfo25.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo25.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo25.setVisibility(visibility28);
        boolean boolean30 = jSDocInfo25.hasBaseType();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node34.addChildrenToFront(node38);
        boolean boolean40 = node34.isGetterDef();
        boolean boolean41 = node34.hasMoreThanOneChild();
        jSDocInfo25.setAssociatedNode(node34);
        java.lang.Object obj44 = node34.getProp((int) (short) -1);
        boolean boolean45 = node34.isContinue();
        node34.detachChildren();
        node34.setCharno(176129);
        com.google.javascript.rhino.Node node49 = node2.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node50 = node34.getFirstChild();
        boolean boolean51 = node34.isSetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ancestorIterable4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + visibility28 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility28.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test07032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07032");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        int int2 = namePosition0.getPositionOnStartLine();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test07033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07033");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        double double5 = node3.getDouble();
        boolean boolean6 = node3.isFor();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node3.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor8 = ancestorIterable7.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor9 = ancestorIterable7.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor10 = ancestorIterable7.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertNotNull(nodeItor8);
        org.junit.Assert.assertNotNull(nodeItor9);
        org.junit.Assert.assertNotNull(nodeItor10);
    }

    @Test
    public void test07034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07034");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        boolean boolean7 = jSDocInfoBuilder1.hasParameter("STRING  43");
        boolean boolean8 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean9 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean10 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        jSDocInfoBuilder12.markName("hi!", staticSourceFile16, (int) (short) 0, (int) (short) 100);
        boolean boolean20 = jSDocInfoBuilder12.recordNoTypeCheck();
        boolean boolean21 = jSDocInfoBuilder12.recordExpose();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node25.addChildrenToFront(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = jSDocInfoBuilder12.build(node29);
        boolean boolean32 = jSDocInfoBuilder12.shouldParseDocumentation();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean37 = node36.isVar();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node42 = node36.copyInformationFromForTree(node41);
        com.google.javascript.rhino.Node node43 = node36.cloneTree();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = new com.google.javascript.rhino.JSTypeExpression(node43, "STRING  43");
        boolean boolean46 = jSTypeExpression45.isVarArgs();
        boolean boolean47 = jSDocInfoBuilder12.recordBaseType(jSTypeExpression45);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = null;
        boolean boolean52 = jSDocInfoBuilder49.recordThisType(jSTypeExpression51);
        boolean boolean53 = jSDocInfoBuilder49.recordOverride();
        boolean boolean54 = jSDocInfoBuilder49.recordExpose();
        boolean boolean55 = jSDocInfoBuilder49.recordExport();
        boolean boolean56 = jSDocInfoBuilder49.recordNoTypeCheck();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean59 = jSDocInfoBuilder58.recordNoTypeCheck();
        jSDocInfoBuilder58.recordOriginalCommentString("");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean66 = node65.isVar();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node71 = node65.copyInformationFromForTree(node70);
        com.google.javascript.rhino.Node node72 = node65.cloneTree();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = new com.google.javascript.rhino.JSTypeExpression(node72, "STRING  43");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression74);
        boolean boolean76 = jSDocInfoBuilder58.recordReturnType(jSTypeExpression74);
        boolean boolean78 = jSDocInfoBuilder49.recordThrowDescription(jSTypeExpression74, "STRING  43");
        boolean boolean79 = jSDocInfoBuilder12.recordThisType(jSTypeExpression74);
        boolean boolean80 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression74);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test07035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07035");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        java.lang.String str15 = jSDocInfo14.getLendsName();
        boolean boolean16 = jSDocInfo14.hasReturnType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection17 = jSDocInfo14.getTypeNodes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(nodeCollection17);
    }

    @Test
    public void test07036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07036");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        boolean boolean21 = strSet16.isEmpty();
        int int22 = strSet16.size();
        int int23 = strSet16.size();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        java.lang.Object[] objArray33 = strSet30.toArray();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet40);
        java.lang.Object[] objArray43 = strSet40.toArray();
        boolean boolean44 = strSet30.retainAll((java.util.Collection<java.lang.String>) strSet40);
        java.lang.Object[] objArray45 = strSet30.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator46 = strSet30.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int57 = strList55.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int68 = strList66.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList77 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList86 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList87 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList55, (java.lang.Iterable<java.lang.String>) strList66, (java.lang.Iterable<java.lang.String>) strList77, (java.lang.Iterable<java.lang.String>) strList86);
        boolean boolean88 = strSet30.equals((java.lang.Object) strList86);
        java.util.Spliterator<java.lang.String> strSpliterator89 = strList86.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor90 = strList86.listIterator();
        java.util.Spliterator<java.lang.String> strSpliterator91 = strList86.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList92 = strList86.asList();
        boolean boolean93 = strSet16.addAll((java.util.Collection<java.lang.String>) strList86);
        com.google.common.collect.ImmutableList<java.lang.String> strList94 = strList86.asList();
        boolean boolean95 = strList94.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(strSpliterator46);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strIterableList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strSpliterator89);
        org.junit.Assert.assertNotNull(strItor90);
        org.junit.Assert.assertNotNull(strSpliterator91);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test07037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07037");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        boolean boolean47 = strSet6.contains((java.lang.Object) namePosition46);
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor57 = strList56.iterator();
        boolean boolean58 = strSet6.addAll((java.util.Collection<java.lang.String>) strList56);
        java.lang.String str59 = strList56.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = strList56.reverse();
        java.lang.String str61 = strList56.toString();
        // The following exception was thrown during execution in test generation
        try {
            strList56.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str59, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str61, "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test07038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07038");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isInterface();
        java.lang.String str25 = jSDocInfo20.getLicense();
        boolean boolean26 = jSDocInfo20.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07039");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasModifies();
        int int50 = jSDocInfo42.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet51 = jSDocInfo42.getParameterNames();
        boolean boolean52 = jSDocInfo42.isDeprecated();
        boolean boolean53 = jSDocInfo42.isNoSideEffects();
        java.lang.String str54 = jSDocInfo42.getFileOverview();
        boolean boolean55 = jSDocInfo42.hasBaseType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test07040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07040");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        boolean boolean3 = node2.isFor();
        boolean boolean4 = node2.isNull();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node2.children();
        boolean boolean6 = node2.isNew();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07041");
        com.google.common.collect.ImmutableList.Builder<java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[]> strBaseStreamArrayBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.util.stream.BaseStream<java.lang.String, java.util.stream.Stream<java.lang.String>>[]>();
    }

    @Test
    public void test07042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07042");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", 4095, 45, (int) (byte) -1, 53);
        boolean boolean10 = jSDocInfoBuilder1.addAuthor("STRING  43");
        boolean boolean11 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07043");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isNot();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder23 = node21.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node24 = node21.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test07044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07044");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        int int8 = node4.getSourcePosition();
        java.lang.String str12 = node4.toString(false, true, false);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj18 = node16.getProp(43);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int23 = node22.getSourceOffset();
        com.google.javascript.rhino.Node node24 = node16.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet31);
        com.google.javascript.rhino.Node node34 = node22.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean35 = node28.isThrow();
        boolean boolean36 = node28.isNot();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean41 = node40.isVar();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node46 = node40.copyInformationFromForTree(node45);
        java.lang.String str47 = node28.checkTreeEquals(node46);
        boolean boolean49 = node46.getBooleanProp(43);
        boolean boolean50 = node46.isIn();
        boolean boolean51 = node46.hasMoreThanOneChild();
        boolean boolean52 = node46.isLabelName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(18, node4, node46, 50, (int) (short) -1);
        node55.addSuppression("TYPEOF 43");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 176180 + "'", int8 == 176180);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING " + "'", str12, "STRING ");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str47, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test07045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07045");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean22 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test07046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07046");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isQuotedString();
        boolean boolean8 = node3.isObjectLit();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int19 = node18.getSourceOffset();
        com.google.javascript.rhino.Node node20 = node12.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean21 = node20.isAssignAdd();
        boolean boolean22 = node20.isEmpty();
        node20.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        boolean boolean31 = node29.isFor();
        boolean boolean32 = node29.isSwitch();
        int int33 = node29.getSourcePosition();
        com.google.javascript.rhino.Node node34 = node29.removeFirstChild();
        com.google.javascript.rhino.Node node35 = node3.useSourceInfoIfMissingFrom(node29);
        int int36 = node35.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 176129 + "'", int33 == 176129);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 43 + "'", int36 == 43);
    }

    @Test
    public void test07047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07047");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        boolean boolean22 = node5.isNumber();
        java.util.Set<java.lang.String> strSet23 = node5.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strSet23);
    }

    @Test
    public void test07048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07048");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        boolean boolean47 = jSDocInfo42.isNoTypeCheck();
        boolean boolean48 = jSDocInfo42.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList49 = jSDocInfo42.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet50 = jSDocInfo42.getSuppressions();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int61 = strList59.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int72 = strList70.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList81 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList90 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList91 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList59, (java.lang.Iterable<java.lang.String>) strList70, (java.lang.Iterable<java.lang.String>) strList81, (java.lang.Iterable<java.lang.String>) strList90);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor92 = strList90.iterator();
        java.lang.Object obj93 = null;
        int int94 = strList90.indexOf(obj93);
        int int95 = strList90.size();
        java.util.ListIterator<java.lang.String> strItor96 = strList90.listIterator();
        boolean boolean97 = strSet50.remove((java.lang.Object) strItor96);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList49);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strIterableList91);
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 8 + "'", int95 == 8);
        org.junit.Assert.assertNotNull(strItor96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test07049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07049");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        boolean boolean63 = strList19.containsAll((java.util.Collection<java.lang.String>) strList62);
        java.util.Iterator<java.lang.String> strItor64 = strList19.iterator();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int69 = node68.getSourceOffset();
        double double70 = node68.getDouble();
        boolean boolean71 = node68.isInc();
        int int72 = strList19.indexOf((java.lang.Object) node68);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder73 = node68.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder73.append("STRING  43\n");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test07050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07050");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getBlockDescription();
        boolean boolean32 = jSDocInfo20.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07051");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 40);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isVar();
        node6.putBooleanProp(30, false);
        boolean boolean11 = node6.isSwitch();
        boolean boolean12 = node6.isUnscopedQualifiedName();
        boolean boolean13 = node6.hasChildren();
        node6.setCharno(52);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray35 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        node33.setDirectives((java.util.Set<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node39 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj45 = node43.getProp(43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int50 = node49.getSourceOffset();
        com.google.javascript.rhino.Node node51 = node43.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray57 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        node55.setDirectives((java.util.Set<java.lang.String>) strSet58);
        com.google.javascript.rhino.Node node61 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj68 = node66.getProp(43);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int73 = node72.getSourceOffset();
        com.google.javascript.rhino.Node node74 = node66.useSourceInfoIfMissingFromForTree(node72);
        boolean boolean75 = node74.isAssignAdd();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean80 = node79.isVar();
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) ' ', node33, node61, node74, node79, 1, 100);
        boolean boolean84 = node61.isHook();
        node61.setSourceEncodedPositionForTree(12);
        boolean boolean87 = node61.isQualifiedName();
        node6.putProp((int) '4', (java.lang.Object) node61);
        boolean boolean89 = node6.isDec();
        node2.addChildrenToBack(node6);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test07052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07052");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression24);
        boolean boolean32 = jSDocInfoBuilder1.recordThisType(jSTypeExpression24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object[] objArray42 = strSet39.toArray();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet49);
        java.lang.Object[] objArray52 = strSet49.toArray();
        boolean boolean53 = strSet39.retainAll((java.util.Collection<java.lang.String>) strSet49);
        java.lang.Object[] objArray54 = strSet39.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder56.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        jSDocInfoBuilder56.markName("hi!", staticSourceFile60, (int) (short) 0, (int) (short) 100);
        boolean boolean64 = jSDocInfoBuilder56.recordNoTypeCheck();
        boolean boolean65 = jSDocInfoBuilder56.recordExpose();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node69.addChildrenToFront(node73);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = jSDocInfoBuilder56.build(node73);
        java.lang.String str76 = jSDocInfo75.getMeaning();
        boolean boolean77 = jSDocInfo75.isExport();
        boolean boolean78 = strSet39.equals((java.lang.Object) jSDocInfo75);
        java.util.stream.Stream<java.lang.String> strStream79 = strSet39.stream();
        boolean boolean80 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet39);
        boolean boolean82 = strSet39.contains((java.lang.Object) (-1));
        strSet39.clear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSDocInfo75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test07053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07053");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        com.google.javascript.rhino.InputId inputId37 = node34.getInputId();
        java.lang.String str38 = node34.toStringTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(inputId37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n" + "'", str38, "TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n");
    }

    @Test
    public void test07054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07054");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean58 = node57.isNull();
        boolean boolean59 = node57.isSyntheticBlock();
        com.google.javascript.rhino.Node node60 = node57.removeChildren();
        com.google.javascript.rhino.InputId inputId61 = null;
        node57.setInputId(inputId61);
        boolean boolean63 = strList19.equals((java.lang.Object) node57);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node57.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator65 = nodeIterable64.spliterator();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertNotNull(nodeSpliterator65);
    }

    @Test
    public void test07055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07055");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet9);
        java.lang.Object[] objArray12 = strSet9.toArray();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object[] objArray22 = strSet19.toArray();
        boolean boolean23 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet9.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder26.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder26.markName("hi!", staticSourceFile30, (int) (short) 0, (int) (short) 100);
        boolean boolean34 = jSDocInfoBuilder26.recordNoTypeCheck();
        boolean boolean35 = jSDocInfoBuilder26.recordExpose();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node39.addChildrenToFront(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = jSDocInfoBuilder26.build(node43);
        java.lang.String str46 = jSDocInfo45.getMeaning();
        boolean boolean47 = jSDocInfo45.isExport();
        boolean boolean48 = strSet9.equals((java.lang.Object) jSDocInfo45);
        boolean boolean49 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet9);
        int int50 = strSet9.size();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags52 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags52.clearAllFlags();
        sideEffectFlags52.clearSideEffectFlags();
        boolean boolean55 = strSet9.contains((java.lang.Object) sideEffectFlags52);
        sideEffectFlags52.setThrows();
        sideEffectFlags52.setAllFlags();
        sideEffectFlags52.setMutatesThis();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSDocInfo45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test07056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07056");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        node4.putBooleanProp(30, false);
        boolean boolean9 = node4.isSwitch();
        boolean boolean10 = node4.isIn();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet17);
        java.lang.Object[] objArray20 = strSet17.toArray();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        java.lang.Object[] objArray30 = strSet27.toArray();
        boolean boolean31 = strSet17.retainAll((java.util.Collection<java.lang.String>) strSet27);
        strSet27.clear();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object[] objArray42 = strSet39.toArray();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray48 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        node46.setDirectives((java.util.Set<java.lang.String>) strSet49);
        java.lang.Object[] objArray52 = strSet49.toArray();
        boolean boolean53 = strSet39.retainAll((java.util.Collection<java.lang.String>) strSet49);
        boolean boolean54 = strSet27.removeAll((java.util.Collection<java.lang.String>) strSet39);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet39);
        int int56 = strSet39.size();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = new com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>>();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList58 = strListBuilder57.build();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        boolean boolean63 = strList61.isEmpty();
        java.util.Iterator<java.lang.String> strItor64 = strList61.iterator();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder65 = strListBuilder57.add(strList61);
        boolean boolean66 = strSet39.containsAll((java.util.Collection<java.lang.String>) strList61);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder67 = strListBuilder0.add(strList61);
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList68 = strListBuilder0.build();
        org.junit.Assert.assertNotNull(strListBuilder0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(strListList58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(strListBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strListBuilder67);
        org.junit.Assert.assertNotNull(strListList68);
    }

    @Test
    public void test07057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07057");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isBreak();
        int int15 = node12.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node5.useSourceInfoFrom(node12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node12.getJSDocInfo();
        com.google.javascript.rhino.Node node18 = node12.cloneNode();
        boolean boolean19 = node12.isContinue();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node12.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor21 = ancestorIterable20.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176129 + "'", int15 == 176129);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertNotNull(nodeItor21);
    }

    @Test
    public void test07058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07058");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo20.getSuppressions();
        com.google.common.collect.ImmutableList<java.util.Set<java.lang.String>> strSetList24 = com.google.common.collect.ImmutableList.of(strSet23);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet23.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet23.spliterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strSetList24);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(strSpliterator26);
    }

    @Test
    public void test07059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07059");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        java.lang.String str5 = node4.toStringTree();
        java.lang.String str6 = node4.getSourceFileName();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj12 = node10.getProp(43);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int17 = node16.getSourceOffset();
        com.google.javascript.rhino.Node node18 = node10.useSourceInfoIfMissingFromForTree(node16);
        boolean boolean19 = node18.isAssignAdd();
        boolean boolean20 = node18.isEmpty();
        java.lang.Object obj22 = node18.getProp((int) '#');
        com.google.javascript.rhino.Node node23 = node4.srcref(node18);
        boolean boolean24 = node23.isDo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR  54\n" + "'", str5, "OR  54\n");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07060");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnStartLine();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node3 = typePosition0.getItem();
        int int4 = typePosition0.getPositionOnEndLine();
        int int5 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node6 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test07061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07061");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        node62.setWasEmptyNode(true);
        boolean boolean69 = node62.isQuotedString();
        boolean boolean70 = node62.isScript();
        node62.setSourceEncodedPositionForTree((int) (byte) 10);
        boolean boolean73 = node62.isLabel();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test07062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07062");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        boolean boolean26 = jSDocInfo20.isNoAlias();
        boolean boolean27 = jSDocInfo20.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection28 = jSDocInfo20.getReferences();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo20.getType();
        java.lang.String str30 = jSDocInfo20.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(strCollection28);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test07063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07063");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean42 = strList19.isEmpty();
        java.lang.Object[] objArray43 = strList19.toArray();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) ' ', 16, 51);
        int int48 = strList19.indexOf((java.lang.Object) node47);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = strList19.reverse();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node53.addChildrenToFront(node57);
        com.google.javascript.rhino.Node node60 = node53.getChildAtIndex(0);
        boolean boolean61 = node53.isExprResult();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean66 = node65.isNull();
        boolean boolean67 = node65.isThis();
        boolean boolean68 = node53.hasChild(node65);
        boolean boolean69 = node65.isDelProp();
        com.google.javascript.rhino.Node node70 = node65.getNext();
        boolean boolean71 = node65.isArrayLit();
        int int72 = strList19.lastIndexOf((java.lang.Object) node65);
        java.lang.Object[] objArray73 = strList19.toArray();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test07064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07064");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("hi!");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean11 = jSDocInfoBuilder1.recordVisibility(visibility10);
        boolean boolean12 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean14 = jSDocInfoBuilder1.addReference("");
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test07065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07065");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int19 = node18.getSourceOffset();
        com.google.javascript.rhino.Node node20 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isOnlyModifiesThisCall();
        boolean boolean33 = node30.isDefaultCase();
        boolean boolean34 = node3.hasChild(node30);
        int int35 = node3.getSourceOffset();
        boolean boolean36 = node3.isNew();
        boolean boolean37 = node3.isVar();
        boolean boolean38 = node3.isOnlyModifiesThisCall();
        node3.putIntProp(36, 4);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07066");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean54 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean56 = jSDocInfoBuilder1.recordDescription("Node tree inequality:\nTree1:\nSTRING  43 [directives: []]\n\n\nTree2:\nTHIS\n\n\nSubtree1: STRING  43 [directives: []]\n\n\nSubtree2: THIS\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test07067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07067");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean11 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder13.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = null;
        jSDocInfoBuilder13.markName("hi!", staticSourceFile17, (int) (short) 0, (int) (short) 100);
        boolean boolean21 = jSDocInfoBuilder13.recordNoTypeCheck();
        boolean boolean22 = jSDocInfoBuilder13.recordExpose();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node26.addChildrenToFront(node30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = jSDocInfoBuilder13.build(node30);
        java.lang.String str33 = jSDocInfo32.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = jSDocInfo32.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList35 = jSDocInfo32.getTemplateTypeNames();
        boolean boolean36 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList35);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder38.recordJavaDispatch();
        boolean boolean40 = jSDocInfoBuilder38.recordNoCompile();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj47 = node45.getProp(43);
        boolean boolean48 = node45.isCall();
        boolean boolean49 = node45.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = new com.google.javascript.rhino.JSTypeExpression(node45, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder52 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray54 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray55 = (java.util.ArrayList<java.lang.String>[]) arrayListArray54;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder56 = strListBuilder52.add((java.util.ArrayList<java.lang.String>[]) arrayListArray54);
        boolean boolean57 = jSTypeExpression51.equals((java.lang.Object) arrayListArray54);
        boolean boolean58 = jSDocInfoBuilder38.recordParameter("", jSTypeExpression51);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder60 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean61 = jSDocInfoBuilder60.isInterfaceRecorded();
        boolean boolean63 = jSDocInfoBuilder60.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj69 = node67.getProp(43);
        boolean boolean70 = node67.isCall();
        boolean boolean71 = node67.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = new com.google.javascript.rhino.JSTypeExpression(node67, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder74 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray76 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray77 = (java.util.ArrayList<java.lang.String>[]) arrayListArray76;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder78 = strListBuilder74.add((java.util.ArrayList<java.lang.String>[]) arrayListArray76);
        boolean boolean79 = jSTypeExpression73.equals((java.lang.Object) arrayListArray76);
        boolean boolean80 = jSDocInfoBuilder60.recordDefineType(jSTypeExpression73);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition81 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int82 = namePosition81.getEndLine();
        int int83 = namePosition81.getStartLine();
        com.google.javascript.rhino.Node node84 = namePosition81.getItem();
        boolean boolean85 = jSTypeExpression73.equals((java.lang.Object) node84);
        boolean boolean86 = jSTypeExpression73.isOptionalArg();
        boolean boolean87 = jSDocInfoBuilder38.recordTypedef(jSTypeExpression73);
        boolean boolean88 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression73);
        boolean boolean89 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean91 = jSDocInfoBuilder1.recordLends("STRING ");
        boolean boolean92 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSDocInfo32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(jSTypeExpression34);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strListBuilder52);
        org.junit.Assert.assertNotNull(arrayListArray54);
        org.junit.Assert.assertNotNull(strListArray55);
        org.junit.Assert.assertNotNull(strListBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strListBuilder74);
        org.junit.Assert.assertNotNull(arrayListArray76);
        org.junit.Assert.assertNotNull(strListArray77);
        org.junit.Assert.assertNotNull(strListBuilder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07068");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        node18.setQuotedString();
        boolean boolean21 = node18.isHook();
        int int22 = node18.getType();
        com.google.javascript.rhino.Node node23 = node3.useSourceInfoIfMissingFromForTree(node18);
        boolean boolean24 = node18.isThis();
        boolean boolean25 = node18.isVarArgs();
        boolean boolean26 = node18.isIn();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node31.setIsSyntheticBlock(true);
        boolean boolean34 = node31.isDefaultCase();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj40 = node38.getProp(43);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int45 = node44.getSourceOffset();
        com.google.javascript.rhino.Node node46 = node38.useSourceInfoIfMissingFromForTree(node44);
        com.google.javascript.rhino.Node node47 = node44.cloneNode();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean52 = node51.isNull();
        boolean boolean53 = node51.isFor();
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isVar();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node63 = node57.copyInformationFromForTree(node62);
        boolean boolean64 = node63.isVarArgs();
        boolean boolean65 = node63.isHook();
        boolean boolean66 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 0, node31, node44, node51, node63);
        node31.setSourceEncodedPosition(23);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 100, 43, (-1));
        boolean boolean74 = node73.isNot();
        boolean boolean75 = node73.isNot();
        com.google.javascript.rhino.Node node76 = node31.useSourceInfoFromForTree(node73);
        com.google.javascript.rhino.Node node77 = node18.srcref(node76);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 40 + "'", int22 == 40);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
    }

    @Test
    public void test07069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07069");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        boolean boolean5 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder8 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder8.recordNoTypeCheck();
        boolean boolean11 = jSDocInfoBuilder8.addAuthor("");
        boolean boolean12 = jSDocInfoBuilder8.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.isInterfaceRecorded();
        boolean boolean16 = jSDocInfoBuilder14.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.isInterfaceRecorded();
        boolean boolean21 = jSDocInfoBuilder18.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        boolean boolean28 = node25.isCall();
        boolean boolean29 = node25.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = new com.google.javascript.rhino.JSTypeExpression(node25, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder32 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray34 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray35 = (java.util.ArrayList<java.lang.String>[]) arrayListArray34;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder36 = strListBuilder32.add((java.util.ArrayList<java.lang.String>[]) arrayListArray34);
        boolean boolean37 = jSTypeExpression31.equals((java.lang.Object) arrayListArray34);
        boolean boolean38 = jSDocInfoBuilder18.recordDefineType(jSTypeExpression31);
        com.google.javascript.rhino.Node node39 = jSTypeExpression31.getRoot();
        boolean boolean41 = jSDocInfoBuilder14.recordThrowDescription(jSTypeExpression31, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.isInterfaceRecorded();
        boolean boolean46 = jSDocInfoBuilder43.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        boolean boolean54 = node50.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node50, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray59 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray60 = (java.util.ArrayList<java.lang.String>[]) arrayListArray59;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray59);
        boolean boolean62 = jSTypeExpression56.equals((java.lang.Object) arrayListArray59);
        boolean boolean63 = jSDocInfoBuilder43.recordDefineType(jSTypeExpression56);
        boolean boolean64 = jSDocInfoBuilder14.recordEnumParameterType(jSTypeExpression56);
        boolean boolean65 = jSTypeExpression56.isOptionalArg();
        boolean boolean66 = jSTypeExpression56.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression56);
        boolean boolean68 = jSDocInfoBuilder8.recordReturnType(jSTypeExpression67);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet75);
        java.lang.Object[] objArray78 = strSet75.toArray();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray84 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        node82.setDirectives((java.util.Set<java.lang.String>) strSet85);
        java.lang.Object[] objArray88 = strSet85.toArray();
        boolean boolean89 = strSet75.retainAll((java.util.Collection<java.lang.String>) strSet85);
        int int90 = strSet85.size();
        boolean boolean92 = strSet85.add("");
        boolean boolean93 = jSDocInfoBuilder8.recordSuppressions((java.util.Set<java.lang.String>) strSet85);
        boolean boolean94 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet85);
        boolean boolean95 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean97 = jSDocInfoBuilder1.recordDeprecationReason("STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strListBuilder32);
        org.junit.Assert.assertNotNull(arrayListArray34);
        org.junit.Assert.assertNotNull(strListArray35);
        org.junit.Assert.assertNotNull(strListBuilder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(arrayListArray59);
        org.junit.Assert.assertNotNull(strListArray60);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test07070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07070");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        java.lang.String str24 = jSDocInfo20.getOriginalCommentString();
        boolean boolean25 = jSDocInfo20.hasEnumParameterType();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07071");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList48 = jSDocInfo42.getExtendedInterfaces();
        boolean boolean49 = jSDocInfo42.isNoSideEffects();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNotNull(jSTypeExpressionList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test07072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07072");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.isInterfaceRecorded();
        boolean boolean28 = jSDocInfoBuilder25.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression38);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getEndLine();
        int int48 = namePosition46.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition46.getItem();
        boolean boolean50 = jSTypeExpression38.equals((java.lang.Object) node49);
        boolean boolean51 = jSDocInfoBuilder22.recordExtendedInterface(jSTypeExpression38);
        boolean boolean52 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression38);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean57 = jSDocInfoBuilder1.recordParameterDescription("STRING ", "hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.isInterfaceRecorded();
        boolean boolean62 = jSDocInfoBuilder59.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj68 = node66.getProp(43);
        boolean boolean69 = node66.isCall();
        boolean boolean70 = node66.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node66, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder73 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray75 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray76 = (java.util.ArrayList<java.lang.String>[]) arrayListArray75;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder77 = strListBuilder73.add((java.util.ArrayList<java.lang.String>[]) arrayListArray75);
        boolean boolean78 = jSTypeExpression72.equals((java.lang.Object) arrayListArray75);
        boolean boolean79 = jSDocInfoBuilder59.recordDefineType(jSTypeExpression72);
        boolean boolean80 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression72);
        boolean boolean81 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strListBuilder73);
        org.junit.Assert.assertNotNull(arrayListArray75);
        org.junit.Assert.assertNotNull(strListArray76);
        org.junit.Assert.assertNotNull(strListBuilder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test07073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07073");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        jSDocInfo20.setLicense("hi!");
        boolean boolean33 = jSDocInfo20.isOverride();
        boolean boolean34 = jSDocInfo20.isOverride();
        java.lang.String str35 = jSDocInfo20.getMeaning();
        java.util.Collection<java.lang.String> strCollection36 = jSDocInfo20.getAuthors();
        boolean boolean37 = jSDocInfo20.hasBaseType();
        java.lang.String str38 = jSDocInfo20.getBlockDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNull(strCollection36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test07074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07074");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        boolean boolean16 = node3.isEquivalentTo(node15);
        com.google.javascript.rhino.Node node17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node18 = node15.useSourceInfoFromForTree(node17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07075");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        boolean boolean11 = node8.isCall();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node8, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder15 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray17 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray18 = (java.util.ArrayList<java.lang.String>[]) arrayListArray17;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = strListBuilder15.add((java.util.ArrayList<java.lang.String>[]) arrayListArray17);
        boolean boolean20 = jSTypeExpression14.equals((java.lang.Object) arrayListArray17);
        boolean boolean21 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.isInterfaceRecorded();
        boolean boolean26 = jSDocInfoBuilder23.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        boolean boolean33 = node30.isCall();
        boolean boolean34 = node30.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node30, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder37 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray39 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray40 = (java.util.ArrayList<java.lang.String>[]) arrayListArray39;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder41 = strListBuilder37.add((java.util.ArrayList<java.lang.String>[]) arrayListArray39);
        boolean boolean42 = jSTypeExpression36.equals((java.lang.Object) arrayListArray39);
        boolean boolean43 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression36);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition44 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int45 = namePosition44.getEndLine();
        int int46 = namePosition44.getStartLine();
        com.google.javascript.rhino.Node node47 = namePosition44.getItem();
        boolean boolean48 = jSTypeExpression36.equals((java.lang.Object) node47);
        boolean boolean49 = jSTypeExpression36.isOptionalArg();
        boolean boolean50 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression36);
        boolean boolean51 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean52 = jSDocInfoBuilder1.recordInterface();
        boolean boolean53 = jSDocInfoBuilder1.recordJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strListBuilder15);
        org.junit.Assert.assertNotNull(arrayListArray17);
        org.junit.Assert.assertNotNull(strListArray18);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strListBuilder37);
        org.junit.Assert.assertNotNull(arrayListArray39);
        org.junit.Assert.assertNotNull(strListArray40);
        org.junit.Assert.assertNotNull(strListBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07076");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = null;
        boolean boolean9 = jSDocInfoBuilder5.recordParameter("", jSTypeExpression8);
        boolean boolean10 = jSDocInfoBuilder5.recordExterns();
        boolean boolean11 = jSDocInfoBuilder5.recordPreserveTry();
        boolean boolean12 = jSDocInfoBuilder5.recordNoCompile();
        boolean boolean14 = jSDocInfoBuilder5.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordJavaDispatch();
        jSDocInfoBuilder16.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordJavaDispatch();
        boolean boolean27 = jSDocInfoBuilder25.recordNoCompile();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordParameter("", jSTypeExpression38);
        boolean boolean46 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression38);
        boolean boolean47 = jSDocInfoBuilder5.recordBaseType(jSTypeExpression38);
        boolean boolean48 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression38);
        boolean boolean49 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean50 = jSDocInfoBuilder1.recordInterface();
        boolean boolean52 = jSDocInfoBuilder1.recordVersion("STRING  43 [empty_block: 1]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test07077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07077");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray12 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        node10.setDirectives((java.util.Set<java.lang.String>) strSet13);
        java.lang.Object obj17 = node10.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node5.copyInformationFrom(node10);
        typePosition0.setItem(node18);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        boolean boolean32 = node31.isAssignAdd();
        boolean boolean33 = node31.isFromExterns();
        com.google.javascript.rhino.Node node34 = node18.copyInformationFromForTree(node31);
        node34.setWasEmptyNode(false);
        boolean boolean37 = node34.isArrayLit();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test07078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07078");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(42);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test07079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07079");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isOverride();
        boolean boolean19 = jSDocInfo14.isExport();
        java.lang.String str20 = jSDocInfo14.getLicense();
        boolean boolean21 = jSDocInfo14.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo14.getThisType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
    }

    @Test
    public void test07080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07080");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        int int52 = strList49.size();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray56 = strList49.toArray(strArray55);
        java.lang.String[] strArray57 = strList8.toArray(strArray55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int68 = node67.getSourceOffset();
        com.google.javascript.rhino.Node node69 = node61.useSourceInfoIfMissingFromForTree(node67);
        int int70 = node61.getSourceOffset();
        com.google.javascript.rhino.Node node72 = node61.getAncestor(8);
        boolean boolean73 = strList8.contains((java.lang.Object) 8);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean78 = node77.isOptionalArg();
        com.google.javascript.rhino.Node node79 = node77.getNext();
        boolean boolean80 = node77.isThrow();
        boolean boolean81 = node77.isFor();
        boolean boolean82 = node77.isNE();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node87 = node86.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node86.getJSDocInfo();
        com.google.javascript.rhino.Node node89 = node77.useSourceInfoIfMissingFrom(node86);
        int int90 = strList8.indexOf((java.lang.Object) node89);
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node((int) '4');
        boolean boolean93 = strList8.equals((java.lang.Object) node92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = strList8.remove(54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test07081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07081");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(4, "NULL JSDocInfo 97");
        boolean boolean3 = node2.isOptionalArg();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test07082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07082");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.recordDeprecationReason("NUMBER 0.0 43");
        boolean boolean7 = jSDocInfoBuilder1.recordExport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test07083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07083");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        java.lang.String str23 = jSDocInfo20.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test07084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07084");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean23 = jSDocInfo20.hasEnumParameterType();
        java.lang.String str24 = jSDocInfo20.getReturnDescription();
        boolean boolean26 = jSDocInfo20.hasParameter("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = jSDocInfo20.getTemplateTypeNames();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.String> strList30 = strList27.subList((int) (short) -1, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test07085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07085");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        java.lang.String str25 = jSDocInfo20.getBlockDescription();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        java.lang.String str27 = jSDocInfo20.getBlockDescription();
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        boolean boolean29 = jSDocInfo20.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
    }

    @Test
    public void test07086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07086");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 38 + "'", int2 == 38);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test07087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07087");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(49, nodeArray6, 53, 43);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(176180, nodeArray6, 41, 38);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray6);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(37, nodeArray6, 43, 16);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(50, nodeArray6);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        int int33 = node24.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node24.getJSDocInfo();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean39 = node38.isVar();
        node38.putBooleanProp(30, false);
        boolean boolean43 = node38.isSwitch();
        boolean boolean44 = node38.isUnscopedQualifiedName();
        boolean boolean45 = node38.hasChildren();
        node38.setCharno(52);
        com.google.javascript.rhino.Node node48 = node24.clonePropsFrom(node38);
        boolean boolean49 = node24.isQuotedString();
        boolean boolean50 = node24.isBlock();
        boolean boolean51 = node20.isEquivalentToTyped(node24);
        node20.removeProp((int) (short) 1);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test07088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07088");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        java.lang.String str8 = node3.toString();
        boolean boolean9 = node3.isBreak();
        boolean boolean10 = node3.isComma();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags12 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags12.setThrows();
        sideEffectFlags12.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  43" + "'", str8, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07089");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) '#');
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj8 = node6.getProp(43);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        com.google.javascript.rhino.Node node14 = node6.useSourceInfoIfMissingFromForTree(node12);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        com.google.javascript.rhino.Node node24 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int35 = node34.getSourceOffset();
        com.google.javascript.rhino.Node node36 = node28.useSourceInfoIfMissingFromForTree(node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray42 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42);
        node40.setDirectives((java.util.Set<java.lang.String>) strSet43);
        com.google.javascript.rhino.Node node46 = node34.useSourceInfoIfMissingFromForTree(node40);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj53 = node51.getProp(43);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int58 = node57.getSourceOffset();
        com.google.javascript.rhino.Node node59 = node51.useSourceInfoIfMissingFromForTree(node57);
        boolean boolean60 = node59.isAssignAdd();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean65 = node64.isVar();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) ' ', node18, node46, node59, node64, 1, 100);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node72.addChildrenToFront(node76);
        node76.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        node76.setJSType(jSType79);
        com.google.javascript.rhino.Node node81 = node68.useSourceInfoIfMissingFromForTree(node76);
        boolean boolean82 = node68.isLocalResultCall();
        boolean boolean83 = node68.isFunction();
        com.google.javascript.rhino.Node node84 = node1.copyInformationFromForTree(node68);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable85 = node68.siblings();
        boolean boolean86 = node68.isAnd();
        boolean boolean87 = node68.isAnd();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(nodeIterable85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test07090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07090");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder20.recordJavaDispatch();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node26.addChildrenToFront(node30);
        boolean boolean32 = node26.isGetterDef();
        boolean boolean33 = node26.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj39 = node37.getProp(43);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int44 = node43.getSourceOffset();
        com.google.javascript.rhino.Node node45 = node37.useSourceInfoIfMissingFromForTree(node43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray51 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        node49.setDirectives((java.util.Set<java.lang.String>) strSet52);
        com.google.javascript.rhino.Node node55 = node43.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(32, node26, node43);
        boolean boolean57 = node56.isExprResult();
        boolean boolean58 = node56.isFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = jSDocInfoBuilder20.build(node56);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo59.setVisibility(visibility60);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder63 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean64 = jSDocInfoBuilder63.recordNoTypeCheck();
        boolean boolean65 = jSDocInfoBuilder63.isInterfaceRecorded();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj71 = node69.getProp(43);
        int int72 = node69.getType();
        boolean boolean73 = node69.isGetterDef();
        node69.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = jSDocInfoBuilder63.build(node69);
        boolean boolean77 = jSDocInfo76.isNoSideEffects();
        boolean boolean78 = jSDocInfo76.hasTypedefType();
        boolean boolean79 = jSDocInfo76.isConsistentIdGenerator();
        boolean boolean80 = jSDocInfo76.containsDeclaration();
        boolean boolean81 = jSDocInfo76.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility82 = jSDocInfo76.getVisibility();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Visibility> visibilityList83 = com.google.common.collect.ImmutableList.of(visibility18, visibility60, visibility82);
        jSDocInfo14.setVisibility(visibility60);
        boolean boolean85 = jSDocInfo14.isExpose();
        java.util.Collection<java.lang.String> strCollection86 = jSDocInfo14.getReferences();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSDocInfo59);
        org.junit.Assert.assertTrue("'" + visibility60 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility60.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 40 + "'", int72 == 40);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSDocInfo76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + visibility82 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility82.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(visibilityList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(strCollection86);
    }

    @Test
    public void test07091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07091");
        java.lang.String[] strArray4 = new java.lang.String[] { "[, hi!, , , hi!, , hi!, ]", "", "[, hi!, , , hi!, , hi!, ]", "hi!" };
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = com.google.common.collect.ImmutableList.copyOf(strArray4);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder6 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray8 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray9 = (java.util.ArrayList<java.lang.String>[]) arrayListArray8;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder10 = strListBuilder6.add((java.util.ArrayList<java.lang.String>[]) arrayListArray8);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        boolean boolean17 = node14.isCall();
        boolean boolean18 = node14.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = new com.google.javascript.rhino.JSTypeExpression(node14, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder21 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray23 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray24 = (java.util.ArrayList<java.lang.String>[]) arrayListArray23;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = strListBuilder21.add((java.util.ArrayList<java.lang.String>[]) arrayListArray23);
        boolean boolean26 = jSTypeExpression20.equals((java.lang.Object) arrayListArray23);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder27 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        boolean boolean34 = node31.isCall();
        boolean boolean35 = node31.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = new com.google.javascript.rhino.JSTypeExpression(node31, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder38 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray40 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray41 = (java.util.ArrayList<java.lang.String>[]) arrayListArray40;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder42 = strListBuilder38.add((java.util.ArrayList<java.lang.String>[]) arrayListArray40);
        boolean boolean43 = jSTypeExpression37.equals((java.lang.Object) arrayListArray40);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder44 = strListBuilder27.add((java.util.ArrayList<java.lang.String>[]) arrayListArray40);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder45 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        boolean boolean52 = node49.isCall();
        boolean boolean53 = node49.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = new com.google.javascript.rhino.JSTypeExpression(node49, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder56 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray58 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray59 = (java.util.ArrayList<java.lang.String>[]) arrayListArray58;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder60 = strListBuilder56.add((java.util.ArrayList<java.lang.String>[]) arrayListArray58);
        boolean boolean61 = jSTypeExpression55.equals((java.lang.Object) arrayListArray58);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder62 = strListBuilder45.add((java.util.ArrayList<java.lang.String>[]) arrayListArray58);
        com.google.common.collect.ImmutableList<java.util.ArrayList[]> arrayListArrayList63 = com.google.common.collect.ImmutableList.of(arrayListArray8, arrayListArray23, arrayListArray40, arrayListArray58);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean67 = jSDocInfoBuilder65.recordVersion("");
        com.google.javascript.rhino.JSDocInfoBuilder[] jSDocInfoBuilderArray68 = new com.google.javascript.rhino.JSDocInfoBuilder[] { jSDocInfoBuilder65 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList69 = com.google.common.collect.ImmutableList.copyOf(jSDocInfoBuilderArray68);
        com.google.common.collect.ImmutableList<java.lang.Object[]> objArrayList70 = com.google.common.collect.ImmutableList.of((java.lang.Object[]) strArray4, (java.lang.Object[]) arrayListArray8, (java.lang.Object[]) jSDocInfoBuilderArray68);
        java.lang.String[] strArray74 = new java.lang.String[] { "TYPEOF", "NUMBER 0.0 43 [directives: []]\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" };
        com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>[]> strComparableArrayList75 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>[]) strArray4, (java.lang.Comparable<java.lang.String>[]) strArray74);
        com.google.common.collect.ImmutableList<java.lang.String> strList76 = com.google.common.collect.ImmutableList.copyOf(strArray4);
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor77 = strList76.listIterator();
        boolean boolean78 = strList76.isEmpty();
        java.util.Collection<java.lang.String> strCollection79 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = strList76.containsAll(strCollection79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strListBuilder6);
        org.junit.Assert.assertNotNull(arrayListArray8);
        org.junit.Assert.assertNotNull(strListArray9);
        org.junit.Assert.assertNotNull(strListBuilder10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strListBuilder21);
        org.junit.Assert.assertNotNull(arrayListArray23);
        org.junit.Assert.assertNotNull(strListArray24);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strListBuilder38);
        org.junit.Assert.assertNotNull(arrayListArray40);
        org.junit.Assert.assertNotNull(strListArray41);
        org.junit.Assert.assertNotNull(strListBuilder42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strListBuilder44);
        org.junit.Assert.assertNotNull(strListBuilder45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strListBuilder56);
        org.junit.Assert.assertNotNull(arrayListArray58);
        org.junit.Assert.assertNotNull(strListArray59);
        org.junit.Assert.assertNotNull(strListBuilder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strListBuilder62);
        org.junit.Assert.assertNotNull(arrayListArrayList63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderArray68);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList69);
        org.junit.Assert.assertNotNull(objArrayList70);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strComparableArrayList75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strItor77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test07092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07092");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        int int2 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean9 = typePosition8.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList10 = com.google.common.collect.ImmutableList.of(typePosition3, typePosition4, typePosition5, typePosition6, typePosition7, typePosition8);
        int int11 = typePosition5.getEndLine();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean16 = node15.isNull();
        boolean boolean17 = node15.isSyntheticBlock();
        boolean boolean18 = node15.hasMoreThanOneChild();
        typePosition5.setItem(node15);
        com.google.javascript.rhino.Node node20 = node15.getParent();
        boolean boolean21 = node15.isLabelName();
        com.google.javascript.rhino.Node node22 = node15.getLastSibling();
        int int23 = node15.getSourceOffset();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable24 = node15.getAncestors();
        boolean boolean25 = node15.isCatch();
        namePosition0.setItem(node15);
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(typePositionList10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(ancestorIterable24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test07093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07093");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean30 = jSDocInfo20.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07094");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        boolean boolean6 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node7 = node3.removeChildren();
        java.util.Set<java.lang.String> strSet8 = node3.getDirectives();
        boolean boolean9 = node3.isQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder10 = node3.new FileLevelJsDocBuilder();
        boolean boolean11 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean17 = node16.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        java.lang.Object obj28 = node21.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node29 = node16.copyInformationFrom(node21);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean34 = node33.isNull();
        boolean boolean35 = node33.isSyntheticBlock();
        com.google.javascript.rhino.Node node36 = node33.removeChildren();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean41 = node40.isDebugger();
        com.google.javascript.rhino.Node node42 = node40.getFirstChild();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj48 = node46.getProp(43);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        com.google.javascript.rhino.Node node54 = node46.useSourceInfoIfMissingFromForTree(node52);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(38, node21, node33, node40, node46);
        int int56 = node40.getType();
        com.google.javascript.rhino.Node node57 = node3.useSourceInfoIfMissingFrom(node40);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 39 + "'", int56 == 39);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test07095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07095");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        node3.setSourceEncodedPosition(45);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        boolean boolean20 = node17.isCall();
        int int21 = node17.getSourcePosition();
        int int22 = node17.getSourcePosition();
        com.google.javascript.rhino.Node node23 = node17.removeChildren();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("hi!");
        boolean boolean26 = node25.isNumber();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean33 = typePosition32.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList34 = com.google.common.collect.ImmutableList.of(typePosition27, typePosition28, typePosition29, typePosition30, typePosition31, typePosition32);
        int int35 = typePosition29.getEndLine();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean40 = node39.isNull();
        boolean boolean41 = node39.isSyntheticBlock();
        boolean boolean42 = node39.hasMoreThanOneChild();
        typePosition29.setItem(node39);
        com.google.javascript.rhino.Node node44 = node39.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable45 = node39.children();
        boolean boolean46 = node39.isVar();
        boolean boolean47 = node39.isBreak();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean52 = node51.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node53 = node51.cloneNode();
        boolean boolean54 = node53.isGetElem();
        node53.addSuppression("");
        int int57 = node53.getType();
        boolean boolean58 = node53.isInc();
        boolean boolean59 = node53.isNE();
        com.google.javascript.rhino.InputId inputId60 = null;
        node53.setInputId(inputId60);
        boolean boolean62 = node53.isOr();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(0, node17, node25, node39, node53);
        node3.putProp(51, (java.lang.Object) node53);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 176180 + "'", int21 == 176180);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 176180 + "'", int22 == 176180);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(typePositionList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(nodeIterable45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 40 + "'", int57 == 40);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test07096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07096");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(16, 53, (int) (short) 100);
        com.google.common.collect.ImmutableList<java.lang.Object> objList4 = com.google.common.collect.ImmutableList.of((java.lang.Object) 53);
        org.junit.Assert.assertNotNull(objList4);
    }

    @Test
    public void test07097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07097");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        com.google.javascript.rhino.Node node31 = node4.getAncestor(32);
        node4.setSourceEncodedPositionForTree(44);
        java.lang.Class<?> wildcardClass34 = node4.getClass();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test07098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07098");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isDelProp();
        boolean boolean14 = node3.isIf();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder16.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        jSDocInfoBuilder16.markName("hi!", staticSourceFile20, (int) (short) 0, (int) (short) 100);
        boolean boolean24 = jSDocInfoBuilder16.recordNoTypeCheck();
        boolean boolean25 = jSDocInfoBuilder16.recordExpose();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = jSDocInfoBuilder16.build(node33);
        boolean boolean36 = node33.isOptionalArg();
        com.google.javascript.rhino.Node node37 = node33.getParent();
        node3.addChildrenToBack(node37);
        node3.addSuppression("JSDocInfo");
        boolean boolean41 = node3.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test07099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07099");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        boolean boolean27 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.isExpose();
        java.lang.String str29 = jSDocInfo20.getSourceName();
        java.lang.String str30 = jSDocInfo20.getDescription();
        java.lang.String str31 = jSDocInfo20.getReturnDescription();
        boolean boolean32 = jSDocInfo20.hasTypedefType();
        boolean boolean33 = jSDocInfo20.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07100");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo20.getTemplateTypeNames();
        java.lang.String str25 = jSDocInfo20.getLendsName();
        boolean boolean27 = jSDocInfo20.hasParameter("");
        java.lang.String str28 = jSDocInfo20.getOriginalCommentString();
        boolean boolean29 = jSDocInfo20.isExport();
        boolean boolean31 = jSDocInfo20.hasDescriptionForParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 49.0\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 49.0\n");
        boolean boolean32 = jSDocInfo20.isInterface();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07101");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", (int) (byte) -1, 31, 49, 12);
        boolean boolean12 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean13 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder1.recordReturnType(jSTypeExpression14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder17 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean18 = jSDocInfoBuilder17.isInterfaceRecorded();
        boolean boolean19 = jSDocInfoBuilder17.isPopulatedWithFileOverview();
        boolean boolean20 = jSDocInfoBuilder17.recordOverride();
        jSDocInfoBuilder17.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", (int) (short) 10, 48);
        com.google.common.collect.ImmutableList<java.lang.Object> objList25 = com.google.common.collect.ImmutableList.of((java.lang.Object) jSDocInfoBuilder1, (java.lang.Object) (short) 10);
        boolean boolean26 = jSDocInfoBuilder1.recordDeprecated();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test07102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07102");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        int int52 = strList49.size();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray56 = strList49.toArray(strArray55);
        java.lang.String[] strArray57 = strList8.toArray(strArray55);
        // The following exception was thrown during execution in test generation
        try {
            strList8.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
    }

    @Test
    public void test07103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07103");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        node3.setSourceEncodedPosition(12);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj12 = node10.getProp(43);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int17 = node16.getSourceOffset();
        com.google.javascript.rhino.Node node18 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean23 = node22.isVar();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node28 = node22.copyInformationFromForTree(node27);
        com.google.javascript.rhino.Node node29 = node10.copyInformationFromForTree(node28);
        boolean boolean30 = node29.isTrue();
        boolean boolean31 = node29.isFromExterns();
        node3.addChildToFront(node29);
        boolean boolean33 = node3.isIf();
        boolean boolean34 = node3.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test07104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07104");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        java.lang.String str25 = jSDocInfo20.getBlockDescription();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getThisType();
        com.google.javascript.rhino.Node node28 = jSDocInfo20.getAssociatedNode();
        java.lang.String str29 = jSDocInfo20.getDescription();
        java.lang.String str30 = jSDocInfo20.getSourceName();
        java.lang.String str31 = jSDocInfo20.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test07105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07105");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node23 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node17, node45, node58, node63, 1, 100);
        boolean boolean68 = node67.isFromExterns();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(53, node67, node80, node84);
        boolean boolean87 = node86.isInstanceOf();
        int int89 = node86.getIntProp((int) (byte) 100);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test07106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07106");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo14.setAssociatedNode(node17);
        boolean boolean19 = node17.isInc();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder20 = node17.getJsDocBuilderForNode();
        fileLevelJsDocBuilder20.append("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder20);
    }

    @Test
    public void test07107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07107");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        boolean boolean6 = jSDocInfoBuilder1.recordReturnDescription("STRING ");
        boolean boolean7 = jSDocInfoBuilder1.recordExterns();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        boolean boolean10 = jSDocInfoBuilder1.recordNoShadow();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet17);
        java.lang.Object[] objArray20 = strSet17.toArray();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        java.lang.Object[] objArray30 = strSet27.toArray();
        boolean boolean31 = strSet17.retainAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean32 = strSet27.isEmpty();
        int int33 = strSet27.size();
        java.lang.Object[] objArray34 = strSet27.toArray();
        boolean boolean35 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean40 = node39.isVar();
        node39.putBooleanProp(30, false);
        boolean boolean44 = node39.isSwitch();
        boolean boolean45 = node39.isUnscopedQualifiedName();
        boolean boolean46 = node39.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node39.setStaticSourceFile(staticSourceFile47);
        boolean boolean49 = node39.isCase();
        com.google.javascript.rhino.Node node50 = node39.cloneNode();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder52 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean54 = jSDocInfoBuilder52.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = null;
        jSDocInfoBuilder52.markName("hi!", staticSourceFile56, (int) (short) 0, (int) (short) 100);
        boolean boolean60 = jSDocInfoBuilder52.recordNoTypeCheck();
        boolean boolean61 = jSDocInfoBuilder52.recordExpose();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node65.addChildrenToFront(node69);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = jSDocInfoBuilder52.build(node69);
        boolean boolean72 = node69.isOptionalArg();
        com.google.javascript.rhino.Node node73 = node69.getParent();
        com.google.javascript.rhino.InputId inputId74 = null;
        node69.setInputId(inputId74);
        boolean boolean76 = node69.isNull();
        com.google.javascript.rhino.Node node77 = null;
        int int78 = node69.getIndexOfChild(node77);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int83 = node82.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType84 = node82.getJSType();
        boolean boolean85 = node82.isArrayLit();
        node69.addChildToBack(node82);
        boolean boolean87 = node82.isGetElem();
        boolean boolean88 = node82.isCase();
        node82.setWasEmptyNode(false);
        int int91 = node50.getIndexOfChild(node82);
        boolean boolean92 = strSet27.equals((java.lang.Object) node50);
        java.lang.String str96 = node50.toString(false, false, true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(jSDocInfo71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNull(jSType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "STRING " + "'", str96, "STRING ");
    }

    @Test
    public void test07108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07108");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        boolean boolean23 = node16.isThrow();
        boolean boolean24 = node16.isNot();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node29 = node16.useSourceInfoFromForTree(node28);
        boolean boolean30 = node29.isQuotedString();
        boolean boolean31 = node29.isNE();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(1, node29);
        boolean boolean33 = node29.isOptionalArg();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07109");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        boolean boolean10 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean11 = jSDocInfoBuilder1.isInterfaceRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07110");
        java.lang.String[] strArray4 = new java.lang.String[] { "[, hi!, , , hi!, , hi!, ]", "", "[, hi!, , , hi!, , hi!, ]", "hi!" };
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = com.google.common.collect.ImmutableList.copyOf(strArray4);
        int int6 = strList5.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "hi!", "", "NUMBER 0.0 43", "", "[]", "hi!", "[]", "STRING ", "NUMBER 0.0 43");
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor18 = strList17.listIterator();
        boolean boolean19 = strList5.containsAll((java.util.Collection<java.lang.String>) strList17);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder21.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = null;
        jSDocInfoBuilder21.markName("hi!", staticSourceFile25, (int) (short) 0, (int) (short) 100);
        boolean boolean29 = jSDocInfoBuilder21.recordNoTypeCheck();
        boolean boolean30 = jSDocInfoBuilder21.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int41 = strList39.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int52 = strList50.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList71 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList39, (java.lang.Iterable<java.lang.String>) strList50, (java.lang.Iterable<java.lang.String>) strList61, (java.lang.Iterable<java.lang.String>) strList70);
        boolean boolean72 = jSDocInfoBuilder21.recordTemplateTypeNames((java.util.List<java.lang.String>) strList70);
        java.lang.Object[] objArray73 = strList70.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = strList17.addAll((java.util.Collection<java.lang.String>) strList70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertNotNull(strIterableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test07111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07111");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        boolean boolean27 = node24.isCall();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node24, "STRING ");
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression30);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        jSDocInfoBuilder33.markName("hi!", staticSourceFile37, (int) (short) 0, (int) (short) 100);
        boolean boolean41 = jSDocInfoBuilder33.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder33.recordExpose();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.addChildrenToFront(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = jSDocInfoBuilder33.build(node50);
        boolean boolean53 = node50.isOptionalArg();
        com.google.javascript.rhino.Node node54 = node50.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = jSDocInfoBuilder1.build(node54);
        boolean boolean56 = jSDocInfo55.isDeprecated();
        boolean boolean57 = jSDocInfo55.isHidden();
        boolean boolean59 = jSDocInfo55.hasDescriptionForParameter("FALSE 43");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSDocInfo52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test07112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07112");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        int int5 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 31 + "'", int5 == 31);
    }

    @Test
    public void test07113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07113");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node9 = node3.copyInformationFromForTree(node8);
        boolean boolean10 = node9.hasMoreThanOneChild();
        boolean boolean11 = node9.hasChildren();
        boolean boolean12 = node9.isThrow();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07114");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray1, 42, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07115");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node7.setJSType(jSType10);
        java.lang.String str12 = node7.getString();
        boolean boolean13 = node7.isName();
        int int14 = node7.getLength();
        boolean boolean15 = node7.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07116");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        int int13 = node4.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node4.getJSDocInfo();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean19 = node18.isVar();
        node18.putBooleanProp(30, false);
        boolean boolean23 = node18.isSwitch();
        boolean boolean24 = node18.isUnscopedQualifiedName();
        boolean boolean25 = node18.hasChildren();
        node18.setCharno(52);
        com.google.javascript.rhino.Node node28 = node4.clonePropsFrom(node18);
        node28.putIntProp(42, 46);
        node28.setVarArgs(false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node28.siblings();
        boolean boolean35 = node28.isAssignAdd();
        boolean boolean36 = node28.isNot();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(23, node28);
        boolean boolean38 = node37.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07117");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 10, "STRING  43");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 43);
        com.google.javascript.rhino.Node node5 = node2.useSourceInfoIfMissingFromForTree(node4);
        boolean boolean6 = node5.isDefaultCase();
        boolean boolean7 = node5.isCatch();
        java.lang.Object obj9 = node5.getProp(37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = obj9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test07118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07118");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        boolean boolean30 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet26);
        strSet26.clear();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.Object[] objArray41 = strSet38.toArray();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet48);
        java.lang.Object[] objArray51 = strSet48.toArray();
        boolean boolean52 = strSet38.retainAll((java.util.Collection<java.lang.String>) strSet48);
        boolean boolean53 = strSet26.removeAll((java.util.Collection<java.lang.String>) strSet38);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet38);
        int int55 = strSet38.size();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder56 = new com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>>();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList57 = strListBuilder56.build();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        boolean boolean62 = strList60.isEmpty();
        java.util.Iterator<java.lang.String> strItor63 = strList60.iterator();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder64 = strListBuilder56.add(strList60);
        boolean boolean65 = strSet38.containsAll((java.util.Collection<java.lang.String>) strList60);
        boolean boolean66 = strList60.isEmpty();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.recordNoTypeCheck();
        boolean boolean70 = jSDocInfoBuilder68.isInterfaceRecorded();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj76 = node74.getProp(43);
        int int77 = node74.getType();
        boolean boolean78 = node74.isGetterDef();
        node74.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = jSDocInfoBuilder68.build(node74);
        boolean boolean82 = jSDocInfo81.isNoSideEffects();
        boolean boolean83 = jSDocInfo81.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList84 = jSDocInfo81.getExtendedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList85 = jSDocInfo81.getExtendedInterfaces();
        int int86 = strList60.lastIndexOf((java.lang.Object) jSDocInfo81);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(strListList57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strListBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 40 + "'", int77 == 40);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSDocInfo81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList84);
        org.junit.Assert.assertNotNull(jSTypeExpressionList85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test07119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07119");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition3 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int4 = namePosition3.getEndLine();
        int int5 = namePosition3.getStartLine();
        int int6 = namePosition3.getPositionOnEndLine();
        int int7 = namePosition3.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition8 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int9 = namePosition8.getEndLine();
        int int10 = namePosition8.getStartLine();
        com.google.javascript.rhino.Node node11 = namePosition8.getItem();
        int int12 = namePosition8.getStartLine();
        int int13 = namePosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition14 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int15 = namePosition14.getEndLine();
        int int16 = namePosition14.getStartLine();
        com.google.javascript.rhino.Node node17 = namePosition14.getItem();
        int int18 = namePosition14.getStartLine();
        int int19 = namePosition14.getStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList20 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition3, namePosition8, namePosition14);
        int int21 = namePosition3.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = null;
        boolean boolean27 = jSDocInfoBuilder23.recordParameter("", jSTypeExpression26);
        boolean boolean28 = jSDocInfoBuilder23.recordExport();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        int int36 = node32.getSourcePosition();
        java.lang.String str40 = node32.toString(false, true, false);
        boolean boolean41 = node32.isDo();
        boolean boolean42 = node32.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = jSDocInfoBuilder23.build(node32);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression44 = jSDocInfo43.getReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList45 = jSDocInfo43.getExtendedInterfaces();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean47 = typePosition46.hasBrackets();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean52 = node51.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray58 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        node56.setDirectives((java.util.Set<java.lang.String>) strSet59);
        java.lang.Object obj63 = node56.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node64 = node51.copyInformationFrom(node56);
        typePosition46.setItem(node64);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj71 = node69.getProp(43);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int76 = node75.getSourceOffset();
        com.google.javascript.rhino.Node node77 = node69.useSourceInfoIfMissingFromForTree(node75);
        boolean boolean78 = node77.isAssignAdd();
        boolean boolean79 = node77.isFromExterns();
        com.google.javascript.rhino.Node node80 = node64.copyInformationFromForTree(node77);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile81 = node77.getStaticSourceFile();
        jSDocInfo43.setAssociatedNode(node77);
        namePosition3.setItem(node77);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(namePositionList20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 176180 + "'", int36 == 176180);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "STRING " + "'", str40, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSDocInfo43);
        org.junit.Assert.assertNull(jSTypeExpression44);
        org.junit.Assert.assertNotNull(jSTypeExpressionList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(staticSourceFile81);
    }

    @Test
    public void test07120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07120");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str27 = jSDocInfo20.getVersion();
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        java.lang.String str29 = jSDocInfo20.getMeaning();
        int int30 = jSDocInfo20.getParameterCount();
        boolean boolean31 = jSDocInfo20.hasEnumParameterType();
        jSDocInfo20.addSuppression("STRING  [length: 53]\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07121");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isVar();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node12 = node6.copyInformationFromForTree(node11);
        boolean boolean13 = node12.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node12);
        boolean boolean15 = jSDocInfoBuilder1.recordExport();
        boolean boolean16 = jSDocInfoBuilder1.recordExport();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean19 = jSDocInfoBuilder18.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder18.recordParameter("", jSTypeExpression21);
        boolean boolean23 = jSDocInfoBuilder18.recordExterns();
        boolean boolean24 = jSDocInfoBuilder18.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder26.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder26.markName("hi!", staticSourceFile30, (int) (short) 0, (int) (short) 100);
        boolean boolean34 = jSDocInfoBuilder26.recordNoTypeCheck();
        boolean boolean35 = jSDocInfoBuilder26.recordExpose();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node39.addChildrenToFront(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = jSDocInfoBuilder26.build(node43);
        java.lang.String str46 = jSDocInfo45.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo45.getTypedefType();
        java.lang.String str48 = jSDocInfo45.getLicense();
        boolean boolean49 = jSDocInfo45.isExport();
        boolean boolean50 = jSDocInfo45.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = jSDocInfo45.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean53 = jSDocInfo45.isNoCompile();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility54 = jSDocInfo45.getVisibility();
        boolean boolean55 = jSDocInfoBuilder18.recordVisibility(visibility54);
        boolean boolean56 = jSDocInfoBuilder1.recordVisibility(visibility54);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSDocInfo45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSTypeExpression52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + visibility54 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility54.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test07122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07122");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        boolean boolean5 = node3.isSwitch();
        boolean boolean6 = node3.isOr();
        boolean boolean7 = node3.isQuotedString();
        boolean boolean8 = node3.isFromExterns();
        boolean boolean9 = node3.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07123");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 41);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        boolean boolean8 = node5.isCall();
        boolean boolean9 = node5.isQuotedString();
        boolean boolean10 = node5.isObjectLit();
        boolean boolean11 = node5.isOr();
        boolean boolean12 = node5.isHook();
        com.google.javascript.rhino.Node node13 = node1.srcrefTree(node5);
        boolean boolean14 = node13.isGetProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07124");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isString();
        boolean boolean14 = node3.isInc();
        boolean boolean15 = node3.isEmpty();
        boolean boolean16 = node3.isGetElem();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder18 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder18.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        jSDocInfoBuilder18.markName("hi!", staticSourceFile22, (int) (short) 0, (int) (short) 100);
        boolean boolean26 = jSDocInfoBuilder18.recordNoTypeCheck();
        boolean boolean27 = jSDocInfoBuilder18.recordExpose();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node31.addChildrenToFront(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = jSDocInfoBuilder18.build(node35);
        java.lang.String str38 = jSDocInfo37.getMeaning();
        boolean boolean39 = jSDocInfo37.isExport();
        int int40 = jSDocInfo37.getParameterCount();
        boolean boolean41 = jSDocInfo37.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression42 = jSDocInfo37.getTypedefType();
        node3.setJSDocInfo(jSDocInfo37);
        boolean boolean44 = node3.isExprResult();
        com.google.javascript.rhino.Node node45 = node3.removeChildren();
        boolean boolean46 = node3.isScript();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder47 = node3.getJsDocBuilderForNode();
        fileLevelJsDocBuilder47.append("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSDocInfo37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(jSTypeExpression42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder47);
    }

    @Test
    public void test07125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07125");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExterns();
        boolean boolean11 = jSDocInfoBuilder1.recordConstructor();
        jSDocInfoBuilder1.recordOriginalCommentString("TYPEOF");
        boolean boolean14 = jSDocInfoBuilder1.isJavaDispatch();
        jSDocInfoBuilder1.recordOriginalCommentString("OR  54\n");
        boolean boolean17 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean18 = jSDocInfoBuilder1.recordNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test07126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07126");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        boolean boolean24 = node21.isDec();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.Node node26 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node27 = node25.useSourceInfoFrom(node26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test07127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07127");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        jSDocInfoBuilder1.markAnnotation("STRING  43", 39, 47);
        boolean boolean25 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean26 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean27 = jSDocInfoBuilder1.recordPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test07128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07128");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        boolean boolean10 = node7.isHook();
        int int11 = node7.getType();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        int int18 = node15.getType();
        boolean boolean19 = node15.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node20 = node7.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.Node node33 = node25.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet40);
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj49 = node47.getProp(43);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int54 = node53.getSourceOffset();
        com.google.javascript.rhino.Node node55 = node47.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray61 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        node59.setDirectives((java.util.Set<java.lang.String>) strSet62);
        com.google.javascript.rhino.Node node65 = node53.useSourceInfoIfMissingFromForTree(node59);
        boolean boolean66 = node65.isContinue();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj72 = node70.getProp(43);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int77 = node76.getSourceOffset();
        com.google.javascript.rhino.Node node78 = node70.useSourceInfoIfMissingFromForTree(node76);
        boolean boolean79 = node78.isAssignAdd();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean84 = node83.isVar();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) ' ', node37, node65, node78, node83, 1, 100);
        node83.setWasEmptyNode(true);
        boolean boolean90 = node83.isQuotedString();
        boolean boolean92 = node83.getBooleanProp((int) (byte) 0);
        com.google.javascript.rhino.Node node93 = node83.getFirstChild();
        node83.removeProp(15);
        boolean boolean96 = node83.isThrow();
        com.google.javascript.rhino.Node node97 = node15.useSourceInfoIfMissingFromForTree(node83);
        com.google.javascript.rhino.Node node98 = node83.getLastSibling();
        boolean boolean99 = node98.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test07129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07129");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        int int30 = node4.getSourcePosition();
        boolean boolean31 = node4.isComma();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node4.getJsDocBuilderForNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = node4.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 176180 + "'", int30 == 176180);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertNull(staticSourceFile33);
    }

    @Test
    public void test07130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07130");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition6.getStartLine();
        java.lang.String str32 = stringPosition6.getItem();
        int int33 = stringPosition6.getPositionOnEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test07131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07131");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        boolean boolean4 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean6 = jSDocInfoBuilder1.recordLends("[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test07132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07132");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int15 = node14.getSourceOffset();
        com.google.javascript.rhino.Node node16 = node8.useSourceInfoIfMissingFromForTree(node14);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray22 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet23);
        com.google.javascript.rhino.Node node26 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int37 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node38 = node30.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.javascript.rhino.Node node48 = node36.useSourceInfoIfMissingFromForTree(node42);
        boolean boolean49 = node48.isContinue();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int60 = node59.getSourceOffset();
        com.google.javascript.rhino.Node node61 = node53.useSourceInfoIfMissingFromForTree(node59);
        boolean boolean62 = node61.isAssignAdd();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean67 = node66.isVar();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) ' ', node20, node48, node61, node66, 1, 100);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node74.addChildrenToFront(node78);
        node78.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType81 = null;
        node78.setJSType(jSType81);
        com.google.javascript.rhino.Node node83 = node70.useSourceInfoIfMissingFromForTree(node78);
        java.lang.String str84 = node3.checkTreeEquals(node70);
        node3.addSuppression("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble((double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  43 [jsdoc_info: JSDocInfo] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n" + "'", str84, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
    }

    @Test
    public void test07133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07133");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        boolean boolean49 = node10.isVar();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 35);
        com.google.javascript.rhino.Node node52 = node10.useSourceInfoFromForTree(node51);
        node10.setType(40);
        boolean boolean55 = node10.isAssign();
        node10.putBooleanProp(24, true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test07134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07134");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", (int) (short) 10, 48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder10.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder10.markName("hi!", staticSourceFile14, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder10.recordEnumParameterType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder10.recordConstructor();
        boolean boolean21 = jSDocInfoBuilder10.recordNoTypeCheck();
        boolean boolean22 = jSDocInfoBuilder10.isConstructorRecorded();
        boolean boolean23 = jSDocInfoBuilder10.isDescriptionRecorded();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        boolean boolean35 = jSDocInfoBuilder10.recordParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder1.recordType(jSTypeExpression34);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder38.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder41 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean42 = jSDocInfoBuilder41.isInterfaceRecorded();
        boolean boolean44 = jSDocInfoBuilder41.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj50 = node48.getProp(43);
        boolean boolean51 = node48.isCall();
        boolean boolean52 = node48.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = new com.google.javascript.rhino.JSTypeExpression(node48, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder55 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray57 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray58 = (java.util.ArrayList<java.lang.String>[]) arrayListArray57;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder59 = strListBuilder55.add((java.util.ArrayList<java.lang.String>[]) arrayListArray57);
        boolean boolean60 = jSTypeExpression54.equals((java.lang.Object) arrayListArray57);
        boolean boolean61 = jSDocInfoBuilder41.recordDefineType(jSTypeExpression54);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition62 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int63 = namePosition62.getEndLine();
        int int64 = namePosition62.getStartLine();
        com.google.javascript.rhino.Node node65 = namePosition62.getItem();
        boolean boolean66 = jSTypeExpression54.equals((java.lang.Object) node65);
        boolean boolean67 = jSDocInfoBuilder38.recordExtendedInterface(jSTypeExpression54);
        boolean boolean68 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression54);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder70 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean72 = jSDocInfoBuilder70.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        jSDocInfoBuilder70.markName("hi!", staticSourceFile74, (int) (short) 0, (int) (short) 100);
        boolean boolean78 = jSDocInfoBuilder70.recordNoTypeCheck();
        boolean boolean79 = jSDocInfoBuilder70.recordExterns();
        boolean boolean80 = jSDocInfoBuilder70.recordConstructor();
        boolean boolean81 = jSDocInfoBuilder70.recordNoCompile();
        boolean boolean82 = jSTypeExpression54.equals((java.lang.Object) jSDocInfoBuilder70);
        com.google.javascript.rhino.Node node83 = jSTypeExpression54.getRoot();
        int int84 = node83.getLength();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strListBuilder55);
        org.junit.Assert.assertNotNull(arrayListArray57);
        org.junit.Assert.assertNotNull(strListArray58);
        org.junit.Assert.assertNotNull(strListBuilder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test07135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07135");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        int int6 = node3.getType();
        boolean boolean7 = node3.isName();
        com.google.javascript.rhino.jstype.JSType jSType8 = node3.getJSType();
        com.google.javascript.rhino.Node node9 = node3.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node9.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 40 + "'", int6 == 40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
    }

    @Test
    public void test07136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07136");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node23 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node17, node45, node58, node63, 1, 100);
        boolean boolean68 = node67.isFromExterns();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(53, node67, node80, node84);
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = node86.getJSDocInfo();
        com.google.javascript.rhino.Node node88 = node86.removeFirstChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSDocInfo87);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test07137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07137");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression2);
        boolean boolean4 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        boolean boolean6 = jSDocInfoBuilder1.isPopulated();
        boolean boolean7 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test07138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07138");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test07139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07139");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        node45.setQuotedString();
        boolean boolean48 = node45.isHook();
        int int49 = node45.getType();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        int int56 = node53.getType();
        boolean boolean57 = node53.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node58 = node45.useSourceInfoIfMissingFromForTree(node53);
        boolean boolean59 = node34.hasChild(node58);
        boolean boolean60 = node58.isRegExp();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean65 = node64.isVar();
        node64.setSourceEncodedPositionForTree(1);
        int int69 = node64.getIntProp(176180);
        com.google.javascript.rhino.Node node70 = node58.copyInformationFromForTree(node64);
        boolean boolean71 = node70.isSwitch();
        node70.removeProp(100);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TYPEOF" + "'", str37, "TYPEOF");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test07140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07140");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 10, "STRING  43");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 43);
        com.google.javascript.rhino.Node node5 = node2.useSourceInfoIfMissingFromForTree(node4);
        boolean boolean6 = node4.isFor();
        java.lang.String str7 = node4.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "NUMBER 43.0" + "'", str7, "NUMBER 43.0");
    }

    @Test
    public void test07141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07141");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean55 = jSDocInfoBuilder1.hasParameter("hi!");
        boolean boolean56 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean58 = jSDocInfoBuilder1.recordDeprecationReason("ERROR  43\n");
        boolean boolean59 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean61 = jSDocInfoBuilder1.recordFileOverview("STRING  43 [quoted: 1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test07142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07142");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 39);
        node1.setType(38);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node1.siblings();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeIterable4);
    }

    @Test
    public void test07143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07143");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isBreak();
        int int15 = node12.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node5.useSourceInfoFrom(node12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node12.getJSDocInfo();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node21.addChildrenToFront(node25);
        boolean boolean28 = node21.getBooleanProp(8);
        com.google.javascript.rhino.Node node29 = node12.clonePropsFrom(node21);
        boolean boolean30 = node29.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176129 + "'", int15 == 176129);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07144");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        boolean boolean11 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordNoTypeCheck();
        jSDocInfoBuilder13.recordOriginalCommentString("");
        boolean boolean17 = jSDocInfoBuilder13.isJavaDispatch();
        boolean boolean18 = jSDocInfoBuilder13.isPopulatedWithFileOverview();
        boolean boolean19 = jSDocInfoBuilder13.recordInterface();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder21 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder21.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = null;
        boolean boolean25 = jSDocInfoBuilder21.recordParameter("", jSTypeExpression24);
        boolean boolean26 = jSDocInfoBuilder21.recordExterns();
        boolean boolean27 = jSDocInfoBuilder21.recordPreserveTry();
        boolean boolean28 = jSDocInfoBuilder21.recordNoCompile();
        boolean boolean30 = jSDocInfoBuilder21.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = null;
        boolean boolean32 = jSDocInfoBuilder21.recordType(jSTypeExpression31);
        boolean boolean33 = jSDocInfoBuilder21.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.isInterfaceRecorded();
        boolean boolean38 = jSDocInfoBuilder35.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        boolean boolean45 = node42.isCall();
        boolean boolean46 = node42.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node42, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder49 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray51 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray52 = (java.util.ArrayList<java.lang.String>[]) arrayListArray51;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = strListBuilder49.add((java.util.ArrayList<java.lang.String>[]) arrayListArray51);
        boolean boolean54 = jSTypeExpression48.equals((java.lang.Object) arrayListArray51);
        boolean boolean55 = jSDocInfoBuilder35.recordDefineType(jSTypeExpression48);
        boolean boolean56 = jSDocInfoBuilder21.recordBaseType(jSTypeExpression48);
        boolean boolean57 = jSDocInfoBuilder13.recordBaseType(jSTypeExpression48);
        boolean boolean58 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression48);
        java.lang.Class<?> wildcardClass59 = jSDocInfoBuilder1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strListBuilder49);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(strListArray52);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test07145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07145");
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(strListList0);
    }

    @Test
    public void test07146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07146");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.lang.Object[] objArray25 = strSet22.toArray();
        boolean boolean26 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet22);
        strSet22.clear();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        java.lang.Object[] objArray37 = strSet34.toArray();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray43 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        node41.setDirectives((java.util.Set<java.lang.String>) strSet44);
        java.lang.Object[] objArray47 = strSet44.toArray();
        boolean boolean48 = strSet34.retainAll((java.util.Collection<java.lang.String>) strSet44);
        boolean boolean49 = strSet22.removeAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean50 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet22);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder52 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean53 = jSDocInfoBuilder52.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = null;
        boolean boolean55 = jSDocInfoBuilder52.recordThisType(jSTypeExpression54);
        boolean boolean57 = jSDocInfoBuilder52.addReference("hi!");
        boolean boolean58 = jSDocInfoBuilder52.shouldParseDocumentation();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray64 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        node62.setDirectives((java.util.Set<java.lang.String>) strSet65);
        java.lang.Object[] objArray68 = strSet65.toArray();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray74 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        node72.setDirectives((java.util.Set<java.lang.String>) strSet75);
        java.lang.Object[] objArray78 = strSet75.toArray();
        boolean boolean79 = strSet65.retainAll((java.util.Collection<java.lang.String>) strSet75);
        java.lang.Object[] objArray80 = strSet65.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator81 = strSet65.spliterator();
        boolean boolean83 = strSet65.add("STRING ");
        boolean boolean84 = jSDocInfoBuilder52.recordSuppressions((java.util.Set<java.lang.String>) strSet65);
        java.util.Spliterator<java.lang.String> strSpliterator85 = strSet65.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet65.spliterator();
        boolean boolean87 = strSet22.retainAll((java.util.Collection<java.lang.String>) strSet65);
        java.lang.String[] strArray89 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList90 = new java.util.ArrayList<java.lang.String>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList90, strArray89);
        boolean boolean92 = strList90.isEmpty();
        int int93 = strList90.size();
        java.lang.Object[] objArray94 = strList90.toArray();
        boolean boolean95 = strSet65.addAll((java.util.Collection<java.lang.String>) strList90);
        java.lang.Class<?> wildcardClass96 = strList90.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertNotNull(strSpliterator81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strSpliterator85);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[hi!]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test07147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07147");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        boolean boolean23 = node16.isThrow();
        boolean boolean24 = node16.isNot();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean29 = node28.isVar();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node34 = node28.copyInformationFromForTree(node33);
        java.lang.String str35 = node16.checkTreeEquals(node34);
        node34.setString("hi!");
        boolean boolean38 = node34.isArrayLit();
        int int39 = node34.getSourcePosition();
        int int40 = node34.getCharno();
        boolean boolean41 = node34.isInc();
        boolean boolean42 = node34.isQualifiedName();
        boolean boolean43 = node34.isNE();
        boolean boolean44 = node34.isQualifiedName();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((-1), node34);
        boolean boolean46 = node34.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str35, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07148");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isLabel();
        node21.removeProp(41);
        node21.setVarArgs(false);
        boolean boolean27 = node21.isDebugger();
        java.lang.String str31 = node21.toString(false, true, false);
        boolean boolean32 = node21.isParamList();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "NUMBER 0.0" + "'", str31, "NUMBER 0.0");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07149");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker72 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker72.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker74 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition75 = marker74.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition76 = marker74.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition77 = marker74.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker78 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition79 = marker78.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker80 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition81 = marker80.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition82 = marker80.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition83 = marker80.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker84 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition85 = marker84.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition86 = marker84.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition87 = marker84.getName();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList88 = com.google.common.collect.ImmutableList.of(marker66, marker72, marker74, marker78, marker80, marker84);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition89 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition90 = marker66.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition91 = marker66.getNameNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(stringPosition71);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNull(typePosition75);
        org.junit.Assert.assertNull(typePosition76);
        org.junit.Assert.assertNull(stringPosition77);
        org.junit.Assert.assertNull(typePosition79);
        org.junit.Assert.assertNull(typePosition81);
        org.junit.Assert.assertNull(stringPosition82);
        org.junit.Assert.assertNull(typePosition83);
        org.junit.Assert.assertNull(typePosition85);
        org.junit.Assert.assertNull(typePosition86);
        org.junit.Assert.assertNull(stringPosition87);
        org.junit.Assert.assertNotNull(markerList88);
        org.junit.Assert.assertNull(nodeSourcePosition89);
        org.junit.Assert.assertNull(stringPosition90);
        org.junit.Assert.assertNull(nodeSourcePosition91);
    }

    @Test
    public void test07150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07150");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList24 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(40, "hi!");
        java.lang.String str28 = node27.getSourceFileName();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = strList24.remove((java.lang.Object) node27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test07151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07151");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        boolean boolean37 = node34.isDec();
        boolean boolean38 = node34.isLabelName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node34.setStaticSourceFile(staticSourceFile39);
        boolean boolean41 = node34.isInc();
        com.google.javascript.rhino.Node node42 = node34.getFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test07152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07152");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isBreak();
        int int15 = node12.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node5.useSourceInfoFrom(node12);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean21 = node20.isNull();
        boolean boolean22 = node20.isLabelName();
        com.google.javascript.rhino.Node node23 = node12.useSourceInfoFrom(node20);
        boolean boolean24 = node23.isLocalResultCall();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        node23.addSuppression("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        boolean boolean29 = node23.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176129 + "'", int15 == 176129);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07153");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        boolean boolean9 = node5.isInstanceOf();
        boolean boolean10 = node5.isNew();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean27 = node26.isVar();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node32 = node26.copyInformationFromForTree(node31);
        com.google.javascript.rhino.Node node33 = node14.copyInformationFromForTree(node32);
        boolean boolean34 = node33.isTrue();
        boolean boolean35 = node33.isFromExterns();
        com.google.javascript.rhino.Node node36 = node5.copyInformationFrom(node33);
        boolean boolean37 = node36.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test07154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07154");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        int int8 = typePosition2.getEndLine();
        int int9 = typePosition2.getStartLine();
        com.google.javascript.rhino.Node node10 = typePosition2.getItem();
        int int11 = typePosition2.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition13 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean14 = typePosition13.hasBrackets();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean19 = node18.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object obj30 = node23.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node31 = node18.copyInformationFrom(node23);
        typePosition13.setItem(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj38 = node36.getProp(43);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int43 = node42.getSourceOffset();
        com.google.javascript.rhino.Node node44 = node36.useSourceInfoIfMissingFromForTree(node42);
        boolean boolean45 = node44.isAssignAdd();
        boolean boolean46 = node44.isFromExterns();
        com.google.javascript.rhino.Node node47 = node31.copyInformationFromForTree(node44);
        boolean boolean48 = node31.isDelProp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        boolean boolean54 = node52.isFor();
        java.lang.Object obj56 = node52.getProp(49);
        java.util.Set<java.lang.String> strSet57 = node52.getDirectives();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.recordNoTypeCheck();
        boolean boolean61 = jSDocInfoBuilder59.isInterfaceRecorded();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj67 = node65.getProp(43);
        int int68 = node65.getType();
        boolean boolean69 = node65.isGetterDef();
        node65.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = jSDocInfoBuilder59.build(node65);
        boolean boolean73 = jSDocInfo72.isNoSideEffects();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo72.setAssociatedNode(node75);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(49, node31, node52, node75, (int) (short) 0, 36);
        java.lang.Object obj81 = node52.getProp(43);
        typePosition2.setItem(node52);
        int int83 = typePosition2.getPositionOnStartLine();
        typePosition2.setPositionInformation((int) (byte) 1, (-1), 43, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 40 + "'", int68 == 40);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSDocInfo72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(obj81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test07155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07155");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        boolean boolean5 = node3.isNull();
        boolean boolean6 = node3.isNull();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj13 = node11.getProp(43);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int18 = node17.getSourceOffset();
        com.google.javascript.rhino.Node node19 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        com.google.javascript.rhino.Node node29 = node17.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj35 = node33.getProp(43);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int40 = node39.getSourceOffset();
        com.google.javascript.rhino.Node node41 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet48);
        com.google.javascript.rhino.Node node51 = node39.useSourceInfoIfMissingFromForTree(node45);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj58 = node56.getProp(43);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int63 = node62.getSourceOffset();
        com.google.javascript.rhino.Node node64 = node56.useSourceInfoIfMissingFromForTree(node62);
        boolean boolean65 = node64.isAssignAdd();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean70 = node69.isVar();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) ' ', node23, node51, node64, node69, 1, 100);
        com.google.javascript.rhino.Node node74 = node3.srcrefTree(node23);
        boolean boolean75 = node74.isAnd();
        int int76 = node74.getLength();
        com.google.javascript.rhino.Node node77 = node74.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test07156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07156");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        int int23 = strList20.size();
        boolean boolean24 = strList8.containsAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        node32.setQuotedString();
        boolean boolean35 = node32.isHook();
        boolean boolean36 = strList20.equals((java.lang.Object) node32);
        int int37 = strList20.size();
        int int38 = strList20.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = strList20.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
    }

    @Test
    public void test07157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07157");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean8 = node7.isOptionalArg();
        boolean boolean9 = node7.isSwitch();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node14.isGetterDef();
        boolean boolean21 = node14.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.Node node33 = node25.useSourceInfoIfMissingFromForTree(node31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray39 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        node37.setDirectives((java.util.Set<java.lang.String>) strSet40);
        com.google.javascript.rhino.Node node43 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(32, node14, node31);
        boolean boolean45 = node44.isExprResult();
        boolean boolean46 = node44.isFunction();
        com.google.javascript.rhino.Node node47 = node7.srcrefTree(node44);
        com.google.javascript.rhino.Node node48 = node3.srcrefTree(node44);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node54.addChildrenToFront(node58);
        boolean boolean60 = node54.isGetterDef();
        boolean boolean61 = node54.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj67 = node65.getProp(43);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int72 = node71.getSourceOffset();
        com.google.javascript.rhino.Node node73 = node65.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray79 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        node77.setDirectives((java.util.Set<java.lang.String>) strSet80);
        com.google.javascript.rhino.Node node83 = node71.useSourceInfoIfMissingFromForTree(node77);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(32, node54, node71);
        boolean boolean85 = node84.isExprResult();
        boolean boolean86 = node84.isFunction();
        boolean boolean87 = node84.isDec();
        boolean boolean88 = node84.isLabelName();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = null;
        node84.setStaticSourceFile(staticSourceFile89);
        boolean boolean91 = node84.isInc();
        node3.putProp(0, (java.lang.Object) boolean91);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test07158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07158");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node10 = node4.copyInformationFromForTree(node9);
        boolean boolean11 = node10.isVarArgs();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder34 = node33.getJsDocBuilderForNode();
        boolean boolean35 = node33.isAnd();
        node10.addChildToBack(node33);
        com.google.javascript.rhino.Node node37 = node33.getLastSibling();
        boolean boolean38 = node33.isContinue();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int49 = node48.getSourceOffset();
        com.google.javascript.rhino.Node node50 = node42.useSourceInfoIfMissingFromForTree(node48);
        boolean boolean51 = node50.isIf();
        boolean boolean52 = node50.isAnd();
        node50.detachChildren();
        boolean boolean54 = node50.isStringKey();
        boolean boolean56 = node50.getBooleanProp(44);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) '4', node33, node50, 167974, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test07159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07159");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor41 = strList39.iterator();
        java.lang.Object obj42 = null;
        int int43 = strList39.indexOf(obj42);
        int int44 = strList39.size();
        java.util.Spliterator<java.lang.String> strSpliterator45 = strList39.spliterator();
        java.lang.Object[] objArray46 = strList39.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = strList39.set((int) (byte) -1, "NUMBER 10.0 50");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test07160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07160");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isIf();
        boolean boolean13 = node11.isAnd();
        boolean boolean14 = node11.isVar();
        boolean boolean15 = node11.isTypeOf();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean21 = node20.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object obj32 = node25.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node33 = node20.copyInformationFrom(node25);
        int int34 = node20.getSourcePosition();
        boolean boolean35 = node20.isParamList();
        // The following exception was thrown during execution in test generation
        try {
            node11.addChildrenAfter(node16, node20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 176129 + "'", int34 == 176129);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07161");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.setIsSyntheticBlock(true);
        boolean boolean6 = node3.isReturn();
        boolean boolean7 = node3.isCatch();
        boolean boolean8 = node3.isStringKey();
        boolean boolean9 = node3.isBlock();
        boolean boolean10 = node3.isScript();
        java.lang.Appendable appendable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07162");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node6.addChildrenToFront(node10);
        boolean boolean12 = node6.isGetterDef();
        boolean boolean13 = node6.isEmpty();
        typePosition0.setItem(node6);
        int int15 = typePosition0.getPositionOnStartLine();
        int int16 = typePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test07163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07163");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean6 = jSDocInfoBuilder1.recordInterface();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int17 = strList15.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator18 = strList15.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList27 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int29 = strList27.indexOf((java.lang.Object) 'a');
        int int30 = strList27.size();
        boolean boolean31 = strList15.containsAll((java.util.Collection<java.lang.String>) strList27);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node35.addChildrenToFront(node39);
        node39.setQuotedString();
        boolean boolean42 = node39.isHook();
        boolean boolean43 = strList27.equals((java.lang.Object) node39);
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = strList27.reverse();
        boolean boolean45 = strList44.isEmpty();
        boolean boolean46 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet54);
        boolean boolean58 = strSet54.contains((java.lang.Object) 10.0d);
        boolean boolean59 = strSet54.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean60 = strList44.addAll(40, (java.util.Collection<java.lang.String>) strSet54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator18);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test07164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07164");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean11 = node4.getBooleanProp(8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        boolean boolean34 = node33.isContinue();
        boolean boolean35 = node33.isVoid();
        double double36 = node33.getDouble();
        java.lang.String str37 = node4.checkTreeEquals(node33);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable38 = node4.children();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 53, 42, 4);
        boolean boolean43 = node42.isFunction();
        com.google.javascript.rhino.Node node44 = node42.cloneTree();
        java.lang.String str45 = node42.getQualifiedName();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 35);
        node47.setSourceFileForTesting("TYPEOF");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node47.siblings();
        boolean boolean51 = node47.isInstanceOf();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(32, node4, node42, node47, 52, 42);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder56.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = null;
        boolean boolean59 = jSDocInfoBuilder56.recordThisType(jSTypeExpression58);
        boolean boolean60 = jSDocInfoBuilder56.recordExport();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString((int) ' ', "");
        boolean boolean64 = node63.isNew();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = jSDocInfoBuilder56.build(node63);
        node4.addChildrenToFront(node63);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str37, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(nodeIterable38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSDocInfo65);
    }

    @Test
    public void test07165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07165");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isExport();
        java.lang.String str23 = jSDocInfo20.getSourceName();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordNoTypeCheck();
        boolean boolean28 = jSDocInfoBuilder26.isInterfaceRecorded();
        jSDocInfoBuilder26.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean34 = jSDocInfoBuilder26.recordMeaning("hi!");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility35 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean36 = jSDocInfoBuilder26.recordVisibility(visibility35);
        jSDocInfo20.setVisibility(visibility35);
        boolean boolean38 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean39 = jSDocInfo20.isInterface();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList40 = jSDocInfo20.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + visibility35 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility35.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList40);
    }

    @Test
    public void test07166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07166");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getReturnType();
        boolean boolean28 = jSDocInfo20.isNoTypeCheck();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo20.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(jSTypeExpression30);
    }

    @Test
    public void test07167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07167");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        boolean boolean10 = node3.isIn();
        boolean boolean11 = node3.isOr();
        com.google.javascript.rhino.Node node12 = node3.getLastSibling();
        boolean boolean13 = node12.isOr();
        boolean boolean14 = node12.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07168");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node5 = node3.getNext();
        boolean boolean6 = node3.isThrow();
        boolean boolean7 = node3.isFor();
        boolean boolean8 = node3.isNE();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node13 = node12.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node12.getJSDocInfo();
        com.google.javascript.rhino.Node node15 = node3.useSourceInfoIfMissingFrom(node12);
        boolean boolean16 = node15.isLabel();
        boolean boolean17 = node15.isAnd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07169");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.setReturnsTainted();
        int int3 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 38 + "'", int3 == 38);
    }

    @Test
    public void test07170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07170");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node61.setDirectives((java.util.Set<java.lang.String>) strSet64);
        com.google.javascript.rhino.Node node67 = node55.useSourceInfoIfMissingFromForTree(node61);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        boolean boolean81 = node80.isAssignAdd();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean86 = node85.isVar();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) ' ', node39, node67, node80, node85, 1, 100);
        jSDocInfo20.setAssociatedNode(node89);
        boolean boolean91 = node89.isTrue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test07171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07171");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        boolean boolean11 = node8.isCall();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node8, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder15 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray17 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray18 = (java.util.ArrayList<java.lang.String>[]) arrayListArray17;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = strListBuilder15.add((java.util.ArrayList<java.lang.String>[]) arrayListArray17);
        boolean boolean20 = jSTypeExpression14.equals((java.lang.Object) arrayListArray17);
        boolean boolean21 = jSDocInfoBuilder1.recordDefineType(jSTypeExpression14);
        com.google.javascript.rhino.Node node22 = jSTypeExpression14.getRoot();
        boolean boolean23 = node22.isLabel();
        boolean boolean24 = node22.isIf();
        boolean boolean25 = node22.isThrow();
        boolean boolean26 = node22.isDebugger();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strListBuilder15);
        org.junit.Assert.assertNotNull(arrayListArray17);
        org.junit.Assert.assertNotNull(strListArray18);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07172");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        boolean boolean42 = strList39.contains((java.lang.Object) (short) -1);
        com.google.javascript.rhino.JSDocInfo.Marker marker43 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = marker43.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition45 = marker43.getAnnotation();
        boolean boolean46 = strList39.equals((java.lang.Object) marker43);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition47 = marker43.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition48 = marker43.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition49 = marker43.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition50 = marker43.getName();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(typePosition44);
        org.junit.Assert.assertNull(stringPosition45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(nodeSourcePosition47);
        org.junit.Assert.assertNull(stringPosition48);
        org.junit.Assert.assertNull(typePosition49);
        org.junit.Assert.assertNull(stringPosition50);
    }

    @Test
    public void test07173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07173");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node23 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node17, node45, node58, node63, 1, 100);
        boolean boolean68 = node67.isFromExterns();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean85 = node84.isVar();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(53, node67, node80, node84);
        boolean boolean87 = node80.isNull();
        boolean boolean88 = node80.isLabelName();
        boolean boolean89 = node80.isFor();
        com.google.javascript.rhino.InputId inputId90 = node80.getInputId();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(inputId90);
    }

    @Test
    public void test07174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07174");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        int int21 = strSet16.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int43 = strList41.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList62 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList52, (java.lang.Iterable<java.lang.String>) strList61);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int73 = strList71.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator74 = strList71.spliterator();
        boolean boolean75 = strList41.equals((java.lang.Object) strList71);
        boolean boolean76 = strSet16.contains((java.lang.Object) strList71);
        int int77 = strList71.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = strList71.asList();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder80 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean81 = jSDocInfoBuilder80.recordNoTypeCheck();
        boolean boolean82 = jSDocInfoBuilder80.isInterfaceRecorded();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj88 = node86.getProp(43);
        int int89 = node86.getType();
        boolean boolean90 = node86.isGetterDef();
        node86.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = jSDocInfoBuilder80.build(node86);
        boolean boolean94 = jSDocInfo93.isHidden();
        java.lang.String str95 = jSDocInfo93.getDescription();
        boolean boolean96 = jSDocInfo93.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList97 = jSDocInfo93.getThrownTypes();
        boolean boolean98 = strList78.equals((java.lang.Object) jSDocInfo93);
        boolean boolean99 = jSDocInfo93.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strIterableList62);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 8 + "'", int77 == 8);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 40 + "'", int89 == 40);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(jSDocInfo93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test07175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07175");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean10 = node9.isVar();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node15 = node9.copyInformationFromForTree(node14);
        boolean boolean16 = node15.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = jSDocInfoBuilder1.build(node15);
        boolean boolean18 = jSDocInfoBuilder1.recordOverride();
        boolean boolean19 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean20 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean22 = jSDocInfoBuilder1.addReference("STRING  43 [source_file: [, hi!, , , hi!, , hi!, ]]\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSDocInfo17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test07176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07176");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = node3.getLastSibling();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node9.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(jSDocInfo10);
    }

    @Test
    public void test07177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07177");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 53.0 42\n", 4095, 4095);
        boolean boolean4 = node3.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07178");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        boolean boolean30 = node29.isString();
        boolean boolean31 = node29.isName();
        node29.detachChildren();
        boolean boolean33 = node29.isArrayLit();
        boolean boolean34 = node29.isOr();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test07179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07179");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean12 = node11.isSyntheticBlock();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int17 = node16.getSourceOffset();
        double double18 = node16.getDouble();
        boolean boolean19 = node16.isFor();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node16.getAncestors();
        com.google.javascript.rhino.Node node21 = node11.clonePropsFrom(node16);
        boolean boolean22 = node21.isIn();
        boolean boolean23 = node21.isBlock();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder25.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile29 = null;
        jSDocInfoBuilder25.markName("hi!", staticSourceFile29, (int) (short) 0, (int) (short) 100);
        boolean boolean33 = jSDocInfoBuilder25.recordNoTypeCheck();
        boolean boolean34 = jSDocInfoBuilder25.recordExpose();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node38.addChildrenToFront(node42);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = jSDocInfoBuilder25.build(node42);
        boolean boolean45 = jSDocInfo44.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression46 = jSDocInfo44.getTypedefType();
        java.util.Collection<java.lang.String> strCollection47 = jSDocInfo44.getAuthors();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility48 = jSDocInfo44.getVisibility();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo44.getParameterNames();
        node21.setDirectives(strSet49);
        java.util.Iterator<java.lang.String> strItor51 = strSet49.iterator();
        java.util.stream.Stream<java.lang.String> strStream52 = strSet49.parallelStream();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSDocInfo44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSTypeExpression46);
        org.junit.Assert.assertNull(strCollection47);
        org.junit.Assert.assertTrue("'" + visibility48 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility48.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(strStream52);
    }

    @Test
    public void test07180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07180");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = null;
        boolean boolean9 = jSDocInfoBuilder5.recordParameter("", jSTypeExpression8);
        boolean boolean10 = jSDocInfoBuilder5.recordExterns();
        boolean boolean11 = jSDocInfoBuilder5.recordPreserveTry();
        boolean boolean12 = jSDocInfoBuilder5.recordNoCompile();
        boolean boolean14 = jSDocInfoBuilder5.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordJavaDispatch();
        jSDocInfoBuilder16.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordJavaDispatch();
        boolean boolean27 = jSDocInfoBuilder25.recordNoCompile();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordParameter("", jSTypeExpression38);
        boolean boolean46 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression38);
        boolean boolean47 = jSDocInfoBuilder5.recordBaseType(jSTypeExpression38);
        boolean boolean48 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression38);
        boolean boolean49 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean51 = jSDocInfoBuilder1.recordDescription("");
        boolean boolean52 = jSDocInfoBuilder1.recordOverride();
        boolean boolean53 = jSDocInfoBuilder1.isInterfaceRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07181");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 0, "NUMBER 18.0");
        node2.putIntProp(15, 42);
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test07182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07182");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean9 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean11 = jSDocInfoBuilder1.addReference("hi!");
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList52 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList20, (java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList51);
        boolean boolean53 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList42);
        boolean boolean54 = strList42.isEmpty();
        java.util.Iterator<java.lang.String> strItor55 = strList42.iterator();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags57 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags57.clearAllFlags();
        sideEffectFlags57.clearAllFlags();
        sideEffectFlags57.clearAllFlags();
        int int61 = sideEffectFlags57.valueOf();
        sideEffectFlags57.clearAllFlags();
        boolean boolean63 = sideEffectFlags57.areAllFlagsSet();
        sideEffectFlags57.setThrows();
        int int65 = strList42.lastIndexOf((java.lang.Object) sideEffectFlags57);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strIterableList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 31 + "'", int61 == 31);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test07183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07183");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        node45.setQuotedString();
        boolean boolean48 = node45.isHook();
        int int49 = node45.getType();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        int int56 = node53.getType();
        boolean boolean57 = node53.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node58 = node45.useSourceInfoIfMissingFromForTree(node53);
        boolean boolean59 = node34.hasChild(node58);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = new com.google.javascript.rhino.JSTypeExpression(node34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        node34.setLineno((int) ' ');
        boolean boolean64 = node34.isVarArgs();
        boolean boolean65 = node34.isNew();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TYPEOF" + "'", str37, "TYPEOF");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test07184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07184");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", 4095, 45, (int) (byte) -1, 53);
        boolean boolean10 = jSDocInfoBuilder1.addAuthor("STRING  43");
        boolean boolean11 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean12 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.recordJavaDispatch();
        jSDocInfoBuilder14.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.recordJavaDispatch();
        boolean boolean25 = jSDocInfoBuilder23.recordNoCompile();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        boolean boolean33 = node30.isCall();
        boolean boolean34 = node30.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node30, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder37 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray39 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray40 = (java.util.ArrayList<java.lang.String>[]) arrayListArray39;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder41 = strListBuilder37.add((java.util.ArrayList<java.lang.String>[]) arrayListArray39);
        boolean boolean42 = jSTypeExpression36.equals((java.lang.Object) arrayListArray39);
        boolean boolean43 = jSDocInfoBuilder23.recordParameter("", jSTypeExpression36);
        boolean boolean44 = jSDocInfoBuilder14.recordThrowType(jSTypeExpression36);
        boolean boolean45 = jSTypeExpression36.isVarArgs();
        boolean boolean46 = jSTypeExpression36.isOptionalArg();
        boolean boolean47 = jSTypeExpression36.isVarArgs();
        boolean boolean48 = jSDocInfoBuilder1.recordType(jSTypeExpression36);
        com.google.javascript.rhino.Node node49 = jSTypeExpression36.getRoot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strListBuilder37);
        org.junit.Assert.assertNotNull(arrayListArray39);
        org.junit.Assert.assertNotNull(strListArray40);
        org.junit.Assert.assertNotNull(strListBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test07185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07185");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        node4.removeProp(10);
        node4.setVarArgs(true);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int59 = node58.getSourceOffset();
        com.google.javascript.rhino.Node node60 = node52.useSourceInfoIfMissingFromForTree(node58);
        boolean boolean61 = node60.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node60.getStaticSourceFile();
        boolean boolean63 = node60.isDo();
        com.google.javascript.rhino.Node node64 = node4.useSourceInfoFrom(node60);
        com.google.javascript.rhino.InputId inputId65 = node64.getInputId();
        com.google.javascript.rhino.Node node66 = node64.detachFromParent();
        node66.putBooleanProp((int) (short) 10, false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(inputId65);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test07186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07186");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordMeaning("JSDocInfo");
        boolean boolean10 = jSDocInfoBuilder1.recordIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.isInterfaceRecorded();
        boolean boolean15 = jSDocInfoBuilder12.recordBlockDescription("hi!");
        boolean boolean17 = jSDocInfoBuilder12.recordReturnDescription("STRING ");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        jSDocInfoBuilder19.markName("hi!", staticSourceFile23, (int) (short) 0, (int) (short) 100);
        boolean boolean27 = jSDocInfoBuilder19.recordNoTypeCheck();
        boolean boolean28 = jSDocInfoBuilder19.recordExpose();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node32.addChildrenToFront(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = jSDocInfoBuilder19.build(node36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.isInterfaceRecorded();
        boolean boolean46 = jSDocInfoBuilder43.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        boolean boolean54 = node50.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node50, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray59 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray60 = (java.util.ArrayList<java.lang.String>[]) arrayListArray59;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray59);
        boolean boolean62 = jSTypeExpression56.equals((java.lang.Object) arrayListArray59);
        boolean boolean63 = jSDocInfoBuilder43.recordDefineType(jSTypeExpression56);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition64 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int65 = namePosition64.getEndLine();
        int int66 = namePosition64.getStartLine();
        com.google.javascript.rhino.Node node67 = namePosition64.getItem();
        boolean boolean68 = jSTypeExpression56.equals((java.lang.Object) node67);
        boolean boolean69 = jSDocInfoBuilder40.recordExtendedInterface(jSTypeExpression56);
        boolean boolean70 = jSDocInfoBuilder19.recordExtendedInterface(jSTypeExpression56);
        boolean boolean72 = jSDocInfoBuilder12.recordThrowDescription(jSTypeExpression56, "hi!");
        boolean boolean73 = jSTypeExpression56.isOptionalArg();
        boolean boolean74 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression56);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression56);
        boolean boolean76 = jSTypeExpression75.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(arrayListArray59);
        org.junit.Assert.assertNotNull(strListArray60);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test07187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07187");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable67 = node62.getAncestors();
        boolean boolean68 = node62.isNumber();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 16, 26, 0);
        boolean boolean73 = node62.isEquivalentTo(node72);
        com.google.javascript.rhino.jstype.JSType jSType74 = node72.getJSType();
        com.google.javascript.rhino.Node node75 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node76 = node72.removeChildAfter(node75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ancestorIterable67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSType74);
    }

    @Test
    public void test07188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07188");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean43 = strList19.equals((java.lang.Object) 52);
        java.util.stream.Stream<java.lang.String> strStream44 = strList19.stream();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet51);
        java.lang.Object[] objArray54 = strSet51.toArray();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet61);
        java.lang.Object[] objArray64 = strSet61.toArray();
        boolean boolean65 = strSet51.retainAll((java.util.Collection<java.lang.String>) strSet61);
        strSet61.clear();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        node70.setDirectives((java.util.Set<java.lang.String>) strSet73);
        java.lang.Object[] objArray76 = strSet73.toArray();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        node80.setDirectives((java.util.Set<java.lang.String>) strSet83);
        java.lang.Object[] objArray86 = strSet83.toArray();
        boolean boolean87 = strSet73.retainAll((java.util.Collection<java.lang.String>) strSet83);
        boolean boolean88 = strSet61.removeAll((java.util.Collection<java.lang.String>) strSet73);
        boolean boolean90 = strSet61.add("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean91 = strList19.containsAll((java.util.Collection<java.lang.String>) strSet61);
        com.google.common.collect.ImmutableList<java.lang.String> strList92 = strList19.asList();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags94 = new com.google.javascript.rhino.Node.SideEffectFlags((int) (byte) -1);
        sideEffectFlags94.setAllFlags();
        sideEffectFlags94.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = strList92.remove((java.lang.Object) sideEffectFlags94);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strList92);
    }

    @Test
    public void test07189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07189");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean10 = node3.getBooleanProp(8);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        boolean boolean33 = node32.isContinue();
        boolean boolean34 = node32.isVoid();
        double double35 = node32.getDouble();
        java.lang.String str36 = node3.checkTreeEquals(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node32.getJSDocInfo();
        boolean boolean38 = node32.isBreak();
        java.lang.String str39 = node32.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str36, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test07190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07190");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        node3.setIsSyntheticBlock(true);
        boolean boolean14 = node3.isDo();
        int int15 = node3.getSourcePosition();
        int int16 = node3.getChildCount();
        node3.putIntProp(167974, 36);
        boolean boolean20 = node3.isTrue();
        boolean boolean21 = node3.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176129 + "'", int15 == 176129);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07191");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) -1, 0, 1);
        boolean boolean4 = node3.isArrayLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07192");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = null;
        boolean boolean9 = jSDocInfoBuilder5.recordParameter("", jSTypeExpression8);
        boolean boolean10 = jSDocInfoBuilder5.recordExterns();
        boolean boolean11 = jSDocInfoBuilder5.recordPreserveTry();
        boolean boolean12 = jSDocInfoBuilder5.recordNoCompile();
        boolean boolean14 = jSDocInfoBuilder5.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordJavaDispatch();
        jSDocInfoBuilder16.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.recordJavaDispatch();
        boolean boolean27 = jSDocInfoBuilder25.recordNoCompile();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordParameter("", jSTypeExpression38);
        boolean boolean46 = jSDocInfoBuilder16.recordThrowType(jSTypeExpression38);
        boolean boolean47 = jSDocInfoBuilder5.recordBaseType(jSTypeExpression38);
        boolean boolean48 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression38);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean51 = jSDocInfoBuilder50.isInterfaceRecorded();
        boolean boolean53 = jSDocInfoBuilder50.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj59 = node57.getProp(43);
        boolean boolean60 = node57.isCall();
        boolean boolean61 = node57.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression63 = new com.google.javascript.rhino.JSTypeExpression(node57, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder64 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray66 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray67 = (java.util.ArrayList<java.lang.String>[]) arrayListArray66;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder68 = strListBuilder64.add((java.util.ArrayList<java.lang.String>[]) arrayListArray66);
        boolean boolean69 = jSTypeExpression63.equals((java.lang.Object) arrayListArray66);
        boolean boolean70 = jSDocInfoBuilder50.recordDefineType(jSTypeExpression63);
        boolean boolean71 = jSTypeExpression63.isVarArgs();
        boolean boolean72 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression63);
        boolean boolean73 = jSDocInfoBuilder1.recordExpose();
        boolean boolean74 = jSDocInfoBuilder1.recordExterns();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strListBuilder64);
        org.junit.Assert.assertNotNull(arrayListArray66);
        org.junit.Assert.assertNotNull(strListArray67);
        org.junit.Assert.assertNotNull(strListBuilder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test07193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07193");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo14.setAssociatedNode(node17);
        boolean boolean19 = node17.isInc();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordJavaDispatch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        boolean boolean34 = node28.isGetterDef();
        boolean boolean35 = node28.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj41 = node39.getProp(43);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int46 = node45.getSourceOffset();
        com.google.javascript.rhino.Node node47 = node39.useSourceInfoIfMissingFromForTree(node45);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray53 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        node51.setDirectives((java.util.Set<java.lang.String>) strSet54);
        com.google.javascript.rhino.Node node57 = node45.useSourceInfoIfMissingFromForTree(node51);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(32, node28, node45);
        boolean boolean59 = node58.isExprResult();
        boolean boolean60 = node58.isFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = jSDocInfoBuilder22.build(node58);
        node17.putProp(4095, (java.lang.Object) jSDocInfoBuilder22);
        boolean boolean63 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean64 = jSDocInfoBuilder22.recordHiddenness();
        boolean boolean66 = jSDocInfoBuilder22.recordDescription("THROW");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSDocInfo61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test07194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07194");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isFromExterns();
        boolean boolean6 = node3.isFunction();
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        java.lang.String str8 = node3.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test07195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07195");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        boolean boolean8 = node4.isEmpty();
        boolean boolean9 = node4.isCatch();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean12 = node11.isScript();
        node11.putIntProp(0, 32);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(31, node4, node11, 2, 29);
        com.google.javascript.rhino.Node node19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = node18.isEquivalentToTyped(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07196");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        boolean boolean11 = strSet7.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList52 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList20, (java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList51);
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator64 = strList61.spliterator();
        boolean boolean65 = strList31.equals((java.lang.Object) strList61);
        boolean boolean66 = strSet7.addAll((java.util.Collection<java.lang.String>) strList61);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean71 = node70.isIf();
        boolean boolean72 = strSet7.equals((java.lang.Object) node70);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) -1, node70);
        int int74 = node73.getSourcePosition();
        boolean boolean75 = node73.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node76 = node73.getParent();
        boolean boolean77 = node73.isIf();
        com.google.javascript.rhino.InputId inputId78 = null;
        node73.setInputId(inputId78);
        boolean boolean80 = node73.isCatch();
        boolean boolean81 = node73.isSetterDef();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 1);
        com.google.javascript.rhino.Node node84 = node83.getFirstChild();
        boolean boolean85 = node83.isDebugger();
        boolean boolean86 = node73.isEquivalentToTyped(node83);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strIterableList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test07197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07197");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        node74.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        node74.setJSType(jSType77);
        com.google.javascript.rhino.Node node79 = node66.useSourceInfoIfMissingFromForTree(node74);
        java.lang.String str83 = node66.toString(true, false, true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "TYPEOF 43" + "'", str83, "TYPEOF 43");
    }

    @Test
    public void test07198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07198");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo20.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        int int26 = jSDocInfo20.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test07199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07199");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getVersion();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo20.getSuppressions();
        strSet32.clear();
        java.util.Spliterator<java.lang.String> strSpliterator34 = strSet32.spliterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strSpliterator34);
    }

    @Test
    public void test07200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07200");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean6 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = null;
        jSDocInfoBuilder1.markName("[, hi!, , , hi!, , hi!, ]", staticSourceFile8, (int) 'a', (int) (short) -1);
        boolean boolean12 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07201");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isDefine();
        boolean boolean23 = jSDocInfo20.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo20.getExtendedInterfaces();
        jSDocInfo20.addSuppression("STRING  43");
        int int27 = jSDocInfo20.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test07202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07202");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile3 = node2.getStaticSourceFile();
        boolean boolean4 = node2.isGetProp();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node8.addChildrenToFront(node12);
        boolean boolean15 = node8.getBooleanProp(8);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.Node node37 = node25.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean38 = node37.isContinue();
        boolean boolean39 = node37.isVoid();
        double double40 = node37.getDouble();
        java.lang.String str41 = node8.checkTreeEquals(node37);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node8.children();
        java.util.Set<java.lang.String> strSet43 = node8.getDirectives();
        node2.addChildToBack(node8);
        boolean boolean45 = node8.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(staticSourceFile3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str41, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test07203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07203");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        boolean boolean35 = jSDocInfoBuilder15.recordDefineType(jSTypeExpression28);
        boolean boolean36 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression28);
        boolean boolean37 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean38 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.isInterfaceRecorded();
        boolean boolean43 = jSDocInfoBuilder40.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean46 = jSDocInfoBuilder45.isInterfaceRecorded();
        boolean boolean48 = jSDocInfoBuilder45.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        boolean boolean55 = node52.isCall();
        boolean boolean56 = node52.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression58 = new com.google.javascript.rhino.JSTypeExpression(node52, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder59 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray61 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray62 = (java.util.ArrayList<java.lang.String>[]) arrayListArray61;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder63 = strListBuilder59.add((java.util.ArrayList<java.lang.String>[]) arrayListArray61);
        boolean boolean64 = jSTypeExpression58.equals((java.lang.Object) arrayListArray61);
        boolean boolean65 = jSDocInfoBuilder45.recordDefineType(jSTypeExpression58);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int67 = namePosition66.getEndLine();
        int int68 = namePosition66.getStartLine();
        com.google.javascript.rhino.Node node69 = namePosition66.getItem();
        boolean boolean70 = jSTypeExpression58.equals((java.lang.Object) node69);
        boolean boolean71 = jSDocInfoBuilder40.recordTypedef(jSTypeExpression58);
        boolean boolean72 = jSDocInfoBuilder1.recordThisType(jSTypeExpression58);
        boolean boolean73 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean75 = jSDocInfoBuilder1.addAuthor("NUMBER 0.0");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strListBuilder59);
        org.junit.Assert.assertNotNull(arrayListArray61);
        org.junit.Assert.assertNotNull(strListArray62);
        org.junit.Assert.assertNotNull(strListBuilder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test07204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07204");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(42, nodeArray5, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(49, nodeArray5, 53, 43);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(176180, nodeArray5, 41, 38);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray5);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(26, nodeArray5);
        int int17 = node16.getCharno();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test07205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07205");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("hi!", jSTypeExpression4);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean7 = jSDocInfoBuilder1.recordVisibility(visibility6);
        boolean boolean8 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder10.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder10.markName("hi!", staticSourceFile14, (int) (short) 0, (int) (short) 100);
        boolean boolean18 = jSDocInfoBuilder10.recordNoTypeCheck();
        boolean boolean19 = jSDocInfoBuilder10.recordExpose();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node23.addChildrenToFront(node27);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = jSDocInfoBuilder10.build(node27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj35 = node33.getProp(43);
        boolean boolean36 = node33.isCall();
        boolean boolean37 = node33.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = new com.google.javascript.rhino.JSTypeExpression(node33, "STRING ");
        boolean boolean40 = jSDocInfoBuilder10.recordThrowType(jSTypeExpression39);
        boolean boolean43 = jSDocInfoBuilder10.recordParameterDescription("STRING ", "NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder45 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder45.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = null;
        jSDocInfoBuilder45.markName("hi!", staticSourceFile49, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = null;
        boolean boolean54 = jSDocInfoBuilder45.recordEnumParameterType(jSTypeExpression53);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean57 = jSDocInfoBuilder56.recordJavaDispatch();
        jSDocInfoBuilder56.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder65.recordJavaDispatch();
        boolean boolean67 = jSDocInfoBuilder65.recordNoCompile();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        boolean boolean75 = node72.isCall();
        boolean boolean76 = node72.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = new com.google.javascript.rhino.JSTypeExpression(node72, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder79 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray81 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray82 = (java.util.ArrayList<java.lang.String>[]) arrayListArray81;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder83 = strListBuilder79.add((java.util.ArrayList<java.lang.String>[]) arrayListArray81);
        boolean boolean84 = jSTypeExpression78.equals((java.lang.Object) arrayListArray81);
        boolean boolean85 = jSDocInfoBuilder65.recordParameter("", jSTypeExpression78);
        boolean boolean86 = jSDocInfoBuilder56.recordThrowType(jSTypeExpression78);
        boolean boolean87 = jSTypeExpression78.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression78);
        boolean boolean89 = jSDocInfoBuilder45.recordEnumParameterType(jSTypeExpression78);
        boolean boolean91 = jSDocInfoBuilder10.recordThrowDescription(jSTypeExpression78, "JSDocInfo");
        boolean boolean92 = jSDocInfoBuilder1.recordThisType(jSTypeExpression78);
        boolean boolean93 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + visibility6 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility6.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSDocInfo29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strListBuilder79);
        org.junit.Assert.assertNotNull(arrayListArray81);
        org.junit.Assert.assertNotNull(strListArray82);
        org.junit.Assert.assertNotNull(strListBuilder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test07206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07206");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        boolean boolean12 = node4.isBlock();
        boolean boolean13 = node4.isSetterDef();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isIn();
        node17.setSourceEncodedPosition(45);
        boolean boolean26 = node17.isAssign();
        int int27 = node17.getSourceOffset();
        int int28 = node17.getLineno();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(39, node4, node17, 2, 15);
        boolean boolean32 = node4.isGetProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07207");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        com.google.common.collect.ImmutableList<java.lang.String> strList23 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean24 = jSDocInfo20.hasType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(markerCollection25);
    }

    @Test
    public void test07208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07208");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean57 = strList50.equals((java.lang.Object) 43);
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = strList50.reverse();
        java.lang.String str59 = strList58.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "[, hi!, , hi!, , , hi!, ]" + "'", str59, "[, hi!, , hi!, , , hi!, ]");
    }

    @Test
    public void test07209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07209");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean58 = node57.isVar();
        boolean boolean59 = strList49.contains((java.lang.Object) node57);
        int int60 = strList49.size();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor62 = strList49.listIterator(4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList65 = strList49.subList((-1), 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(strItor62);
    }

    @Test
    public void test07210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07210");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isExprResult();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        java.lang.Object[] objArray33 = strSet30.toArray();
        boolean boolean34 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        boolean boolean44 = strSet30.containsAll((java.util.Collection<java.lang.String>) strSet41);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet30);
        node3.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean52 = node51.isVar();
        node51.putBooleanProp(30, false);
        boolean boolean56 = node51.isSwitch();
        boolean boolean57 = node51.isIn();
        boolean boolean58 = node51.isFromExterns();
        com.google.javascript.rhino.Node node59 = node51.cloneNode();
        com.google.javascript.rhino.Node node60 = node3.useSourceInfoIfMissingFrom(node51);
        node60.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test07211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07211");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        int int23 = node14.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node14.getJSDocInfo();
        boolean boolean25 = node14.isIn();
        node3.addChildrenToFront(node14);
        boolean boolean27 = node14.isAnd();
        com.google.javascript.rhino.jstype.JSType jSType28 = node14.getJSType();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node32.addChildrenToFront(node36);
        node36.setQuotedString();
        com.google.javascript.rhino.Node node39 = node36.removeFirstChild();
        boolean boolean40 = node36.isQuotedString();
        com.google.javascript.rhino.Node node41 = node14.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean42 = node14.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test07212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07212");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo20.getVisibility();
        jSDocInfo20.setDeprecated(false);
        boolean boolean27 = jSDocInfo20.hasType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07213");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node3.siblings();
        node3.setDouble((double) 10);
        int int12 = node3.getSourcePosition();
        boolean boolean13 = node3.isScript();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        node3.setStaticSourceFile(staticSourceFile14);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 176129 + "'", int12 == 176129);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07214");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  43 [synthetic: 1]", 8, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double4 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING STRING  43 [synthetic: 1] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test07215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07215");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj27 = node25.getProp(43);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int32 = node31.getSourceOffset();
        com.google.javascript.rhino.Node node33 = node25.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean34 = node33.isAssignAdd();
        boolean boolean35 = node33.isEmpty();
        java.lang.Object obj37 = node33.getProp((int) '#');
        com.google.javascript.rhino.Node node38 = node5.useSourceInfoIfMissingFrom(node33);
        boolean boolean39 = node38.isDelProp();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable40 = node38.getAncestors();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(ancestorIterable40);
    }

    @Test
    public void test07216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07216");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isNoShadow();
        boolean boolean24 = jSDocInfo20.isInterface();
        boolean boolean25 = jSDocInfo20.isNoCompile();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo20.getModifies();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder28 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder28.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = null;
        jSDocInfoBuilder28.markName("hi!", staticSourceFile32, (int) (short) 0, (int) (short) 100);
        boolean boolean36 = jSDocInfoBuilder28.recordNoTypeCheck();
        boolean boolean37 = jSDocInfoBuilder28.recordExpose();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = jSDocInfoBuilder28.build(node45);
        boolean boolean48 = jSDocInfo47.isExport();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean53 = node52.isOptionalArg();
        com.google.javascript.rhino.Node node54 = node52.getNext();
        jSDocInfo47.setAssociatedNode(node54);
        java.lang.String str56 = jSDocInfo47.getLendsName();
        boolean boolean57 = jSDocInfo47.isNoTypeCheck();
        boolean boolean58 = jSDocInfo47.isNoSideEffects();
        java.lang.String str59 = jSDocInfo47.getLendsName();
        boolean boolean60 = jSDocInfo47.hasType();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo47.getSuppressions();
        boolean boolean62 = strSet26.containsAll((java.util.Collection<java.lang.String>) strSet61);
        java.util.stream.Stream<java.lang.String> strStream63 = strSet61.stream();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strStream63);
    }

    @Test
    public void test07217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07217");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isUnscopedQualifiedName();
        node3.setVarArgs(true);
        boolean boolean16 = node3.isOr();
        boolean boolean17 = node3.isAssign();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07218");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        java.lang.String[] strArray67 = new java.lang.String[] { "STRING  43", "STRING " };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        boolean boolean70 = strSet6.removeAll((java.util.Collection<java.lang.String>) strList68);
        java.util.stream.Stream<java.lang.String> strStream71 = strSet6.parallelStream();
        java.util.Iterator<java.lang.String> strItor72 = strSet6.iterator();
        boolean boolean73 = strSet6.isEmpty();
        java.util.Iterator<java.lang.String> strItor74 = strSet6.iterator();
        strSet6.clear();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strItor74);
    }

    @Test
    public void test07219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07219");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean6 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean8 = jSDocInfoBuilder1.recordFileOverview("NUMBER 0.0 [var_args_name: 1]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test07220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07220");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable67 = node66.children();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable67);
    }

    @Test
    public void test07221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07221");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isNoShadow();
        boolean boolean24 = jSDocInfo20.isInterface();
        boolean boolean25 = jSDocInfo20.hasType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        java.lang.String str27 = jSDocInfo20.getSourceName();
        boolean boolean29 = jSDocInfo20.hasParameterType("NUMBER 53.0 42\n");
        boolean boolean31 = jSDocInfo20.hasParameter("THROW");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07222");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean7 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean8 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test07223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07223");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        java.lang.String str31 = jSDocInfo20.toString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean33 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean34 = jSDocInfo20.isExpose();
        boolean boolean35 = jSDocInfo20.hasModifies();
        boolean boolean36 = jSDocInfo20.isNoShadow();
        boolean boolean37 = jSDocInfo20.isConstant();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "JSDocInfo" + "'", str31, "JSDocInfo");
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test07224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07224");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        jSDocInfoBuilder1.markName("STRING  43 [jsdoc_info: JSDocInfo]\n", staticSourceFile6, 0, (int) (short) 100);
        boolean boolean10 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07225");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray0 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray1 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray2 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray0, fileLevelJsDocBuilderArray1 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray3 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray4 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray5 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray3, fileLevelJsDocBuilderArray4 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray6 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray7 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray8 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray6, fileLevelJsDocBuilderArray7 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray9 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray10 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray11 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray9, fileLevelJsDocBuilderArray10 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray12 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray13 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray14 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray12, fileLevelJsDocBuilderArray13 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray15 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray16 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray17 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray15, fileLevelJsDocBuilderArray16 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][][] fileLevelJsDocBuilderArray18 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][][] { fileLevelJsDocBuilderArray2, fileLevelJsDocBuilderArray5, fileLevelJsDocBuilderArray8, fileLevelJsDocBuilderArray11, fileLevelJsDocBuilderArray14, fileLevelJsDocBuilderArray17 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray19 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray20 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray21 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray19, fileLevelJsDocBuilderArray20 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray22 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray23 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray24 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray22, fileLevelJsDocBuilderArray23 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray25 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray26 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray27 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray25, fileLevelJsDocBuilderArray26 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray28 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray29 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray30 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray28, fileLevelJsDocBuilderArray29 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray31 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray32 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray33 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray31, fileLevelJsDocBuilderArray32 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray34 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] fileLevelJsDocBuilderArray35 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[] {};
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] fileLevelJsDocBuilderArray36 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][] { fileLevelJsDocBuilderArray34, fileLevelJsDocBuilderArray35 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][][] fileLevelJsDocBuilderArray37 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][][] { fileLevelJsDocBuilderArray21, fileLevelJsDocBuilderArray24, fileLevelJsDocBuilderArray27, fileLevelJsDocBuilderArray30, fileLevelJsDocBuilderArray33, fileLevelJsDocBuilderArray36 };
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][][][] fileLevelJsDocBuilderArray38 = new com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][][][] { fileLevelJsDocBuilderArray18, fileLevelJsDocBuilderArray37 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][][]> fileLevelJsDocBuilderArrayList39 = com.google.common.collect.ImmutableList.copyOf(fileLevelJsDocBuilderArray38);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray1);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray2);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray3);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray4);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray6);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray7);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray8);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray9);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray10);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray11);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray12);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray13);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray14);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray15);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray16);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray17);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray19);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray20);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray21);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray22);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray23);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray24);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray25);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray26);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray27);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray28);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray29);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray30);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray32);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray33);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray34);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray35);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray36);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray37);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArray38);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArrayList39);
    }

    @Test
    public void test07226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07226");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 1.0f);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test07227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07227");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean43 = strList19.equals((java.lang.Object) 52);
        java.util.stream.Stream<java.lang.String> strStream44 = strList19.stream();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet51);
        java.lang.Object[] objArray54 = strSet51.toArray();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray60 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        node58.setDirectives((java.util.Set<java.lang.String>) strSet61);
        java.lang.Object[] objArray64 = strSet61.toArray();
        boolean boolean65 = strSet51.retainAll((java.util.Collection<java.lang.String>) strSet61);
        strSet61.clear();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray72 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        node70.setDirectives((java.util.Set<java.lang.String>) strSet73);
        java.lang.Object[] objArray76 = strSet73.toArray();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray82 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        node80.setDirectives((java.util.Set<java.lang.String>) strSet83);
        java.lang.Object[] objArray86 = strSet83.toArray();
        boolean boolean87 = strSet73.retainAll((java.util.Collection<java.lang.String>) strSet83);
        boolean boolean88 = strSet61.removeAll((java.util.Collection<java.lang.String>) strSet73);
        boolean boolean90 = strSet61.add("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean91 = strList19.containsAll((java.util.Collection<java.lang.String>) strSet61);
        java.lang.Object obj92 = null;
        boolean boolean93 = strList19.equals(obj92);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test07228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07228");
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        int int23 = strList20.size();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray27 = strList20.toArray(strArray26);
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("[, hi!, , , hi!, , hi!, ]", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "STRING ", "NUMBER 12.0\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "NUMBER 0.0 43 [directives: []]\n", "NUMBER 0.0", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "hi!", "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", strArray26);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        jSDocInfoBuilder30.markName("hi!", staticSourceFile34, (int) (short) 0, (int) (short) 100);
        boolean boolean38 = jSDocInfoBuilder30.recordNoTypeCheck();
        boolean boolean39 = jSDocInfoBuilder30.recordExpose();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node43.addChildrenToFront(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = jSDocInfoBuilder30.build(node47);
        boolean boolean50 = strList28.contains((java.lang.Object) node47);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int55 = node54.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType56 = node54.getJSType();
        boolean boolean57 = node54.isWith();
        boolean boolean58 = node54.wasEmptyNode();
        com.google.javascript.rhino.Node node59 = node47.useSourceInfoIfMissingFromForTree(node54);
        boolean boolean60 = node59.hasOneChild();
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test07229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07229");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        boolean boolean8 = node4.isDebugger();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean13 = node12.isNull();
        boolean boolean14 = node12.isLabelName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object[] objArray24 = strSet21.toArray();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet31);
        java.lang.Object[] objArray34 = strSet31.toArray();
        boolean boolean35 = strSet21.retainAll((java.util.Collection<java.lang.String>) strSet31);
        java.lang.Object[] objArray36 = strSet21.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder38.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile42 = null;
        jSDocInfoBuilder38.markName("hi!", staticSourceFile42, (int) (short) 0, (int) (short) 100);
        boolean boolean46 = jSDocInfoBuilder38.recordNoTypeCheck();
        boolean boolean47 = jSDocInfoBuilder38.recordExpose();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node51.addChildrenToFront(node55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = jSDocInfoBuilder38.build(node55);
        java.lang.String str58 = jSDocInfo57.getMeaning();
        boolean boolean59 = jSDocInfo57.isExport();
        boolean boolean60 = strSet21.equals((java.lang.Object) jSDocInfo57);
        boolean boolean61 = jSDocInfo57.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = jSDocInfo57.getType();
        boolean boolean63 = jSDocInfo57.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder65 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean67 = jSDocInfoBuilder65.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile69 = null;
        jSDocInfoBuilder65.markName("hi!", staticSourceFile69, (int) (short) 0, (int) (short) 100);
        boolean boolean73 = jSDocInfoBuilder65.recordNoTypeCheck();
        boolean boolean74 = jSDocInfoBuilder65.recordExpose();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node78.addChildrenToFront(node82);
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = jSDocInfoBuilder65.build(node82);
        boolean boolean85 = jSDocInfo84.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression86 = jSDocInfo84.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo84.setVisibility(visibility87);
        jSDocInfo57.setVisibility(visibility87);
        boolean boolean90 = jSDocInfo57.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newNumber((double) 0);
        jSDocInfo57.setAssociatedNode(node92);
        com.google.javascript.rhino.Node node96 = new com.google.javascript.rhino.Node(32, node4, node12, node92, 29, 46);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile97 = node4.getStaticSourceFile();
        boolean boolean98 = node4.isParamList();
        boolean boolean99 = node4.isNew();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSDocInfo57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSTypeExpression62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(jSDocInfo84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSTypeExpression86);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNull(staticSourceFile97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test07230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07230");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = null;
        boolean boolean3 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression2);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.recordNoTypeCheck();
        boolean boolean7 = jSDocInfoBuilder5.isInterfaceRecorded();
        jSDocInfoBuilder5.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean12 = jSDocInfoBuilder5.recordIdGenerator();
        boolean boolean13 = jSDocInfoBuilder5.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        boolean boolean35 = jSDocInfoBuilder15.recordDefineType(jSTypeExpression28);
        boolean boolean36 = jSDocInfoBuilder5.recordThisType(jSTypeExpression28);
        boolean boolean37 = jSDocInfoBuilder1.recordThisType(jSTypeExpression28);
        boolean boolean38 = jSDocInfoBuilder1.recordInterface();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet45);
        java.lang.Object[] objArray48 = strSet45.toArray();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet55);
        java.lang.Object[] objArray58 = strSet55.toArray();
        boolean boolean59 = strSet45.retainAll((java.util.Collection<java.lang.String>) strSet55);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray65 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        node63.setDirectives((java.util.Set<java.lang.String>) strSet66);
        boolean boolean69 = strSet55.containsAll((java.util.Collection<java.lang.String>) strSet66);
        boolean boolean71 = strSet55.add("");
        java.lang.Object[] objArray72 = strSet55.toArray();
        boolean boolean73 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet55);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test07231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07231");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        node62.setWasEmptyNode(true);
        java.lang.String str69 = node62.getString();
        node62.addSuppression("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        java.lang.String str72 = node62.getString();
        boolean boolean73 = node62.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test07232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07232");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo20.getType();
        int int24 = jSDocInfo20.getParameterCount();
        java.lang.String str25 = jSDocInfo20.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test07233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07233");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean7 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder9.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        jSDocInfoBuilder9.markName("hi!", staticSourceFile13, (int) (short) 0, (int) (short) 100);
        boolean boolean17 = jSDocInfoBuilder9.recordNoTypeCheck();
        boolean boolean18 = jSDocInfoBuilder9.recordExpose();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node22.addChildrenToFront(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = jSDocInfoBuilder9.build(node26);
        java.lang.String str29 = jSDocInfo28.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo28.getBaseType();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = jSDocInfo28.getTemplateTypeNames();
        java.lang.Object[] objArray32 = strList31.toArray();
        boolean boolean33 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList31);
        boolean boolean35 = jSDocInfoBuilder1.recordDescription("Node tree inequality:\nTree1:\nSTRING hi!\n\n\nTree2:\nSTRING NUMBER 0.0 43 43\n\n\nSubtree1: STRING hi!\n\n\nSubtree2: STRING NUMBER 0.0 43 43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSDocInfo28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test07234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07234");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean9 = typePosition8.hasBrackets();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        typePosition8.setItem(node26);
        int int28 = typePosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean35 = typePosition34.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList36 = com.google.common.collect.ImmutableList.of(typePosition29, typePosition30, typePosition31, typePosition32, typePosition33, typePosition34);
        int int37 = typePosition31.getEndLine();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean42 = node41.isNull();
        boolean boolean43 = node41.isSyntheticBlock();
        boolean boolean44 = node41.hasMoreThanOneChild();
        typePosition31.setItem(node41);
        boolean boolean46 = typePosition31.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition4, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition8, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition31);
        com.google.javascript.rhino.Node node48 = typePosition8.getItem();
        int int49 = typePosition8.getStartLine();
        com.google.javascript.rhino.Node node50 = typePosition8.getItem();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(typePositionList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(node50);
    }

    @Test
    public void test07235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07235");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(42, nodeArray3, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(39, nodeArray3, (int) '4', 32);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(50, nodeArray3, 32, 15);
        com.google.javascript.rhino.InputId inputId13 = node12.getInputId();
        int int14 = node12.getLineno();
        boolean boolean15 = node12.isDebugger();
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNull(inputId13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07236");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isExterns();
        boolean boolean26 = jSDocInfo20.isHidden();
        boolean boolean27 = jSDocInfo20.isNoAlias();
        boolean boolean29 = jSDocInfo20.hasParameter("TYPEOF");
        boolean boolean30 = jSDocInfo20.hasBaseType();
        int int31 = jSDocInfo20.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test07237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07237");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        boolean boolean23 = jSDocInfo20.isConsistentIdGenerator();
        java.lang.String str24 = jSDocInfo20.getReturnDescription();
        boolean boolean25 = jSDocInfo20.isDeprecated();
        boolean boolean26 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean27 = jSDocInfo20.isDeprecated();
        boolean boolean28 = jSDocInfo20.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test07238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07238");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        int int52 = strList49.size();
        java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray56 = strList49.toArray(strArray55);
        java.lang.String[] strArray57 = strList8.toArray(strArray55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int68 = node67.getSourceOffset();
        com.google.javascript.rhino.Node node69 = node61.useSourceInfoIfMissingFromForTree(node67);
        int int70 = node61.getSourceOffset();
        com.google.javascript.rhino.Node node72 = node61.getAncestor(8);
        boolean boolean73 = strList8.contains((java.lang.Object) 8);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean78 = node77.isOptionalArg();
        com.google.javascript.rhino.Node node79 = node77.getNext();
        boolean boolean80 = node77.isThrow();
        boolean boolean81 = node77.isFor();
        boolean boolean82 = node77.isNE();
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node87 = node86.getNext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = node86.getJSDocInfo();
        com.google.javascript.rhino.Node node89 = node77.useSourceInfoIfMissingFrom(node86);
        int int90 = strList8.indexOf((java.lang.Object) node89);
        boolean boolean91 = node89.isLabelName();
        // The following exception was thrown during execution in test generation
        try {
            int int93 = node89.getExistingIntProp(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 11");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertNull(jSDocInfo88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test07239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07239");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet9);
        java.lang.Object[] objArray12 = strSet9.toArray();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object[] objArray22 = strSet19.toArray();
        boolean boolean23 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet9.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder26.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder26.markName("hi!", staticSourceFile30, (int) (short) 0, (int) (short) 100);
        boolean boolean34 = jSDocInfoBuilder26.recordNoTypeCheck();
        boolean boolean35 = jSDocInfoBuilder26.recordExpose();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node39.addChildrenToFront(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = jSDocInfoBuilder26.build(node43);
        java.lang.String str46 = jSDocInfo45.getMeaning();
        boolean boolean47 = jSDocInfo45.isExport();
        boolean boolean48 = strSet9.equals((java.lang.Object) jSDocInfo45);
        boolean boolean49 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet9);
        int int50 = strSet9.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int61 = strList59.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList70 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int72 = strList70.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList81 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList90 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList91 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList59, (java.lang.Iterable<java.lang.String>) strList70, (java.lang.Iterable<java.lang.String>) strList81, (java.lang.Iterable<java.lang.String>) strList90);
        boolean boolean92 = strSet9.addAll((java.util.Collection<java.lang.String>) strList81);
        boolean boolean93 = strList81.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSDocInfo45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(strList70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strIterableList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test07240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07240");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "JSDocInfo");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile15, 45, 48);
        jSDocInfoBuilder1.markText("STRING  43 [source_file: NUMBER 0.0 [directives: []]]\n", (int) (byte) 0, 3, 37, 45055);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07241");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        java.lang.String str24 = jSDocInfo20.getLendsName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection25 = jSDocInfo20.getMarkers();
        boolean boolean26 = jSDocInfo20.hasReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean28 = jSDocInfo20.isNoSideEffects();
        boolean boolean30 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(markerCollection25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07242");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.getJsDocBuilderForNode();
        boolean boolean7 = node3.isOr();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node11.addChildrenToFront(node15);
        com.google.javascript.rhino.Node node18 = node11.getChildAtIndex(0);
        boolean boolean19 = node11.isExprResult();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean24 = node23.isNull();
        boolean boolean25 = node23.isThis();
        boolean boolean26 = node11.hasChild(node23);
        com.google.javascript.rhino.Node node27 = node3.useSourceInfoIfMissingFromForTree(node11);
        node27.setCharno(39);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        int int34 = node33.getSideEffectFlags();
        node33.setSourceEncodedPositionForTree(43);
        boolean boolean37 = node27.hasChild(node33);
        boolean boolean38 = node33.isReturn();
        boolean boolean39 = node33.isTry();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        boolean boolean47 = node44.isCall();
        boolean boolean48 = node44.isQuotedString();
        boolean boolean49 = node44.isObjectLit();
        boolean boolean50 = node44.isOr();
        boolean boolean51 = node44.isNull();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType57 = node55.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder58 = node55.getJsDocBuilderForNode();
        node55.putBooleanProp(30, false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node55.getJsDocBuilderForNode();
        java.lang.String str63 = node44.checkTreeEquals(node55);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) '#', node55);
        com.google.javascript.rhino.Node node65 = node64.removeFirstChild();
        com.google.javascript.rhino.Node node66 = node33.useSourceInfoIfMissingFrom(node64);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNull(jSType57);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder58);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str63, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test07243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07243");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo20.isImplicitCast();
        jSDocInfo20.addSuppression("hi!");
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo20.getAuthors();
        java.lang.String str28 = jSDocInfo20.getBlockDescription();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo20.getSuppressions();
        jSDocInfo20.setDeprecated(true);
        boolean boolean32 = jSDocInfo20.hasThisType();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo20.getParameterNames();
        java.util.Iterator<java.lang.String> strItor34 = strSet33.iterator();
        java.lang.Object[] objArray35 = strSet33.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strSet33.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(strItor34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
    }

    @Test
    public void test07244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07244");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        boolean boolean9 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean10 = jSDocInfoBuilder1.recordHiddenness();
        boolean boolean11 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder1.isPopulated();
        boolean boolean13 = jSDocInfoBuilder1.recordNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = null;
        boolean boolean15 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test07245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07245");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordVersion("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder11 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder11.isInterfaceRecorded();
        boolean boolean14 = jSDocInfoBuilder11.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        boolean boolean22 = node18.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node18, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder25 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray27 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray28 = (java.util.ArrayList<java.lang.String>[]) arrayListArray27;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = strListBuilder25.add((java.util.ArrayList<java.lang.String>[]) arrayListArray27);
        boolean boolean30 = jSTypeExpression24.equals((java.lang.Object) arrayListArray27);
        boolean boolean31 = jSDocInfoBuilder11.recordDefineType(jSTypeExpression24);
        com.google.javascript.rhino.Node node32 = jSTypeExpression24.getRoot();
        boolean boolean33 = jSDocInfoBuilder1.recordParameter("STRING  43", jSTypeExpression24);
        boolean boolean34 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strListBuilder25);
        org.junit.Assert.assertNotNull(arrayListArray27);
        org.junit.Assert.assertNotNull(strListArray28);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test07246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07246");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("[, hi!, , , hi!, , hi!, ]", 176180, 35);
        boolean boolean5 = node4.isSwitch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean9 = jSDocInfoBuilder7.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        jSDocInfoBuilder7.markName("hi!", staticSourceFile11, (int) (short) 0, (int) (short) 100);
        boolean boolean15 = jSDocInfoBuilder7.recordNoTypeCheck();
        boolean boolean16 = jSDocInfoBuilder7.recordExpose();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node20.addChildrenToFront(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = jSDocInfoBuilder7.build(node24);
        boolean boolean27 = jSDocInfo26.isConstructor();
        int int28 = jSDocInfo26.getExtendedInterfacesCount();
        boolean boolean29 = jSDocInfo26.isIdGenerator();
        java.lang.String str30 = jSDocInfo26.getFileOverview();
        boolean boolean31 = jSDocInfo26.isNoShadow();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node35.addChildrenToFront(node39);
        com.google.javascript.rhino.Node node42 = node35.getChildAtIndex(0);
        java.lang.String str43 = node42.toString();
        node42.setSourceEncodedPositionForTree((int) (byte) -1);
        node42.setOptionalArg(false);
        jSDocInfo26.setAssociatedNode(node42);
        com.google.javascript.rhino.Node node49 = jSDocInfo26.getAssociatedNode();
        boolean boolean50 = node49.isBlock();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean55 = node54.isVar();
        node54.addSuppression("JSDocInfo");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(4, node4, node49, node54, 32, 16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "STRING  43" + "'", str43, "STRING  43");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test07247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07247");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isHidden();
        java.lang.String str16 = jSDocInfo14.getDescription();
        boolean boolean17 = jSDocInfo14.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList18 = jSDocInfo14.getThrownTypes();
        java.lang.String str20 = jSDocInfo14.getDescriptionForParameter("NUMBER 0.0 43 [directives: []]\n");
        java.util.Set<java.lang.String> strSet21 = jSDocInfo14.getModifies();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet21.spliterator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSpliterator22);
    }

    @Test
    public void test07248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07248");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        boolean boolean27 = node24.isCall();
        boolean boolean28 = node24.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = new com.google.javascript.rhino.JSTypeExpression(node24, "STRING ");
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression30);
        boolean boolean32 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean33 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean34 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean35 = jSDocInfoBuilder1.isConstructorRecorded();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07249");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray8 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        node6.setDirectives((java.util.Set<java.lang.String>) strSet9);
        java.lang.Object[] objArray12 = strSet9.toArray();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        java.lang.Object[] objArray22 = strSet19.toArray();
        boolean boolean23 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet19);
        java.lang.Object[] objArray24 = strSet9.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder26.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile30 = null;
        jSDocInfoBuilder26.markName("hi!", staticSourceFile30, (int) (short) 0, (int) (short) 100);
        boolean boolean34 = jSDocInfoBuilder26.recordNoTypeCheck();
        boolean boolean35 = jSDocInfoBuilder26.recordExpose();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node39.addChildrenToFront(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = jSDocInfoBuilder26.build(node43);
        java.lang.String str46 = jSDocInfo45.getMeaning();
        boolean boolean47 = jSDocInfo45.isExport();
        boolean boolean48 = strSet9.equals((java.lang.Object) jSDocInfo45);
        boolean boolean49 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet9);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray55 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        node53.setDirectives((java.util.Set<java.lang.String>) strSet56);
        java.lang.Object[] objArray59 = strSet56.toArray();
        boolean boolean60 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet56);
        jSDocInfoBuilder1.markName("STRING \n", 42, (int) (byte) -1);
        boolean boolean65 = jSDocInfoBuilder1.isInterfaceRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(jSDocInfo45);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test07250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07250");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream11 = strList8.stream();
        boolean boolean12 = strList8.isEmpty();
        boolean boolean13 = strList8.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = strList8.remove(8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07251");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        boolean boolean30 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean32 = strSet16.add("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean38 = jSDocInfoBuilder34.recordParameter("hi!", jSTypeExpression37);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility39 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean40 = jSDocInfoBuilder34.recordVisibility(visibility39);
        boolean boolean41 = strSet16.contains((java.lang.Object) jSDocInfoBuilder34);
        boolean boolean43 = jSDocInfoBuilder34.recordLends("TYPEOF");
        boolean boolean44 = jSDocInfoBuilder34.recordNoAlias();
        boolean boolean46 = jSDocInfoBuilder34.recordVersion("NUMBER 0.0");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node50.addChildrenToFront(node54);
        node54.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node54.setJSType(jSType57);
        java.lang.String str59 = node54.getString();
        boolean boolean60 = node54.isWith();
        java.util.Set<java.lang.String> strSet61 = node54.getDirectives();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node54.children();
        jSDocInfoBuilder34.markTypeNode(node54, 52, 37, 53, 36, false);
        boolean boolean69 = jSDocInfoBuilder34.recordConstructor();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + visibility39 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility39.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(strSet61);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test07252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07252");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo20.getType();
        int int24 = jSDocInfo20.getParameterCount();
        boolean boolean25 = jSDocInfo20.hasReturnType();
        boolean boolean26 = jSDocInfo20.hasFileOverview();
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo20.getAuthors();
        int int28 = jSDocInfo20.getImplementedInterfaceCount();
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getReferences();
        boolean boolean30 = jSDocInfo20.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07253");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        java.lang.String str23 = jSDocInfo20.getMeaning();
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo20.getReferences();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getModifies();
        jSDocInfo20.setDeprecated(true);
        java.util.Set<java.lang.String> strSet28 = jSDocInfo20.getParameterNames();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 53, 42, 4);
        boolean boolean33 = node32.isFunction();
        com.google.javascript.rhino.Node node34 = node32.cloneTree();
        node32.detachChildren();
        boolean boolean36 = strSet28.contains((java.lang.Object) node32);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = strSet28.add("NUMBER 18.0");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(strCollection24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07254");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test07255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07255");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        boolean boolean52 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        boolean boolean53 = strList50.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList50.spliterator();
        java.util.ListIterator<java.lang.String> strItor55 = strList50.listIterator();
        java.util.Spliterator<java.lang.String> strSpliterator56 = strList50.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            strList50.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertNotNull(strSpliterator56);
    }

    @Test
    public void test07256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07256");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        int int30 = node4.getSourcePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition35 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition36 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean37 = typePosition36.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList38 = com.google.common.collect.ImmutableList.of(typePosition31, typePosition32, typePosition33, typePosition34, typePosition35, typePosition36);
        int int39 = typePosition33.getEndLine();
        int int40 = typePosition33.getStartLine();
        com.google.javascript.rhino.Node node41 = typePosition33.getItem();
        int int42 = typePosition33.getStartLine();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean48 = node47.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray54 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        node52.setDirectives((java.util.Set<java.lang.String>) strSet55);
        java.lang.Object obj59 = node52.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node60 = node47.copyInformationFrom(node52);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean65 = node64.isNull();
        boolean boolean66 = node64.isSyntheticBlock();
        com.google.javascript.rhino.Node node67 = node64.removeChildren();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean72 = node71.isDebugger();
        com.google.javascript.rhino.Node node73 = node71.getFirstChild();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj79 = node77.getProp(43);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int84 = node83.getSourceOffset();
        com.google.javascript.rhino.Node node85 = node77.useSourceInfoIfMissingFromForTree(node83);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(38, node52, node64, node71, node77);
        java.lang.String str87 = node77.getQualifiedName();
        node77.setType((int) (short) 100);
        typePosition33.setItem(node77);
        com.google.javascript.rhino.Node node91 = node4.clonePropsFrom(node77);
        node77.setCharno(0);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable94 = node77.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 176180 + "'", int30 == 176180);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(typePositionList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(obj59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(obj79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(ancestorIterable94);
    }

    @Test
    public void test07257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07257");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        java.lang.String str16 = jSDocInfo14.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo14.getReturnType();
        boolean boolean18 = jSDocInfo14.isDefine();
        boolean boolean19 = jSDocInfo14.isOverride();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07258");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        boolean boolean30 = jSDocInfo20.isNoSideEffects();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection31 = jSDocInfo20.getMarkers();
        java.lang.String str32 = jSDocInfo20.toString();
        boolean boolean33 = jSDocInfo20.isOverride();
        boolean boolean34 = jSDocInfo20.isNoAlias();
        boolean boolean35 = jSDocInfo20.isDefine();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(markerCollection31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "JSDocInfo" + "'", str32, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07259");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        boolean boolean20 = node18.isComma();
        com.google.javascript.rhino.Node node21 = node3.useSourceInfoFromForTree(node18);
        boolean boolean22 = node18.isDec();
        boolean boolean23 = node18.hasOneChild();
        boolean boolean24 = node18.isAssignAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node18.siblings();
        boolean boolean26 = node18.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07260");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        com.google.javascript.rhino.Node node6 = node3.removeChildren();
        com.google.javascript.rhino.InputId inputId7 = null;
        node3.setInputId(inputId7);
        int int9 = node3.getType();
        node3.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        boolean boolean18 = node15.isCall();
        boolean boolean19 = node15.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = new com.google.javascript.rhino.JSTypeExpression(node15, "STRING ");
        boolean boolean22 = node15.isDo();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        int int35 = node26.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo36 = node26.getJSDocInfo();
        boolean boolean37 = node26.isIn();
        node15.addChildrenToFront(node26);
        node15.putIntProp(48, 15);
        boolean boolean42 = node3.hasChild(node15);
        java.lang.String str43 = node3.getQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 39 + "'", int9 == 39);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNull(jSDocInfo36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str43);
    }

    @Test
    public void test07261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07261");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isGetterDef();
        boolean boolean10 = node3.hasMoreThanOneChild();
        boolean boolean11 = node3.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07262");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean24 = jSDocInfo20.isNoSideEffects();
        jSDocInfo20.setDeprecated(false);
        boolean boolean27 = jSDocInfo20.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getReturnType();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo20.getTemplateTypeNames();
        boolean boolean31 = jSDocInfo20.hasParameterType("STRING  36");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07263");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        boolean boolean30 = jSDocInfo20.containsDeclaration();
        boolean boolean31 = jSDocInfo20.isDefine();
        int int32 = jSDocInfo20.getImplementedInterfaceCount();
        boolean boolean33 = jSDocInfo20.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test07264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07264");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getBaseType();
        boolean boolean23 = jSDocInfo20.isConstant();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo20.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getBaseType();
        boolean boolean28 = jSDocInfo20.isImplicitCast();
        boolean boolean29 = jSDocInfo20.shouldPreserveTry();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07265");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder12.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        jSDocInfoBuilder12.markName("hi!", staticSourceFile16, (int) (short) 0, (int) (short) 100);
        boolean boolean20 = jSDocInfoBuilder12.recordNoTypeCheck();
        boolean boolean21 = jSDocInfoBuilder12.recordExpose();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node25.addChildrenToFront(node29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = jSDocInfoBuilder12.build(node29);
        boolean boolean32 = jSDocInfoBuilder12.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder34 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder34.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder34.recordThisType(jSTypeExpression36);
        boolean boolean39 = jSDocInfoBuilder34.addReference("hi!");
        boolean boolean41 = jSDocInfoBuilder34.recordVersion("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder44 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean45 = jSDocInfoBuilder44.isInterfaceRecorded();
        boolean boolean47 = jSDocInfoBuilder44.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj53 = node51.getProp(43);
        boolean boolean54 = node51.isCall();
        boolean boolean55 = node51.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = new com.google.javascript.rhino.JSTypeExpression(node51, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder58 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray60 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray61 = (java.util.ArrayList<java.lang.String>[]) arrayListArray60;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder62 = strListBuilder58.add((java.util.ArrayList<java.lang.String>[]) arrayListArray60);
        boolean boolean63 = jSTypeExpression57.equals((java.lang.Object) arrayListArray60);
        boolean boolean64 = jSDocInfoBuilder44.recordDefineType(jSTypeExpression57);
        com.google.javascript.rhino.Node node65 = jSTypeExpression57.getRoot();
        boolean boolean66 = jSDocInfoBuilder34.recordParameter("STRING  43", jSTypeExpression57);
        com.google.javascript.rhino.Node node67 = jSTypeExpression57.getRoot();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder69 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean70 = jSDocInfoBuilder69.recordNoTypeCheck();
        boolean boolean72 = jSDocInfoBuilder69.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        boolean boolean73 = jSDocInfoBuilder69.recordPreserveTry();
        boolean boolean74 = jSDocInfoBuilder69.recordNoCompile();
        boolean boolean75 = jSTypeExpression57.equals((java.lang.Object) boolean74);
        boolean boolean77 = jSDocInfoBuilder12.recordThrowDescription(jSTypeExpression57, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean78 = jSDocInfoBuilder1.recordParameter("STRING  [length: 53]\n", jSTypeExpression57);
        boolean boolean79 = jSDocInfoBuilder1.recordExport();
        boolean boolean80 = jSDocInfoBuilder1.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strListBuilder58);
        org.junit.Assert.assertNotNull(arrayListArray60);
        org.junit.Assert.assertNotNull(strListArray61);
        org.junit.Assert.assertNotNull(strListBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test07266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07266");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node9 = node3.copyInformationFromForTree(node8);
        com.google.javascript.rhino.Node node10 = node3.cloneTree();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        boolean boolean17 = node14.isCall();
        boolean boolean18 = node14.isGetterDef();
        java.lang.String str19 = node3.checkTreeEquals(node14);
        node3.setSourceEncodedPositionForTree(1);
        com.google.javascript.rhino.Node node22 = node3.getLastSibling();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder23 = node3.new FileLevelJsDocBuilder();
        node3.setCharno(0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(node22);
    }

    @Test
    public void test07267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07267");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isSyntheticBlock();
        boolean boolean6 = node3.isNew();
        boolean boolean7 = node3.isFromExterns();
        boolean boolean8 = node3.isLocalResultCall();
        boolean boolean9 = node3.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07268");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean5 = jSDocInfoBuilder1.recordLends("");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        int int18 = node9.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node9.getJSDocInfo();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean24 = node23.isVar();
        node23.putBooleanProp(30, false);
        boolean boolean28 = node23.isSwitch();
        boolean boolean29 = node23.isUnscopedQualifiedName();
        boolean boolean30 = node23.hasChildren();
        node23.setCharno(52);
        com.google.javascript.rhino.Node node33 = node9.clonePropsFrom(node23);
        node33.putIntProp(42, 46);
        node33.setVarArgs(false);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node33.siblings();
        boolean boolean40 = node33.isAssignAdd();
        jSDocInfoBuilder1.markTypeNode(node33, (int) (byte) 1, 39, 30, 38, true);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isIf();
        boolean boolean60 = node58.isBreak();
        boolean boolean61 = node58.isComma();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "", 54, 15);
        boolean boolean67 = node66.isIf();
        boolean boolean68 = node58.isEquivalentToTyped(node66);
        com.google.javascript.rhino.Node node69 = node33.useSourceInfoIfMissingFrom(node58);
        boolean boolean70 = node58.isLabel();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(jSDocInfo19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test07269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07269");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.recordOriginalCommentString("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.isInterfaceRecorded();
        boolean boolean10 = jSDocInfoBuilder7.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.isInterfaceRecorded();
        boolean boolean15 = jSDocInfoBuilder12.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        boolean boolean22 = node19.isCall();
        boolean boolean23 = node19.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = new com.google.javascript.rhino.JSTypeExpression(node19, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder26 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray28 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray29 = (java.util.ArrayList<java.lang.String>[]) arrayListArray28;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder30 = strListBuilder26.add((java.util.ArrayList<java.lang.String>[]) arrayListArray28);
        boolean boolean31 = jSTypeExpression25.equals((java.lang.Object) arrayListArray28);
        boolean boolean32 = jSDocInfoBuilder12.recordDefineType(jSTypeExpression25);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition33 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int34 = namePosition33.getEndLine();
        int int35 = namePosition33.getStartLine();
        com.google.javascript.rhino.Node node36 = namePosition33.getItem();
        boolean boolean37 = jSTypeExpression25.equals((java.lang.Object) node36);
        boolean boolean38 = jSDocInfoBuilder7.recordTypedef(jSTypeExpression25);
        boolean boolean39 = jSDocInfoBuilder1.recordParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", jSTypeExpression25);
        boolean boolean41 = jSDocInfoBuilder1.recordDeprecationReason("JSDocInfo");
        boolean boolean43 = jSDocInfoBuilder1.recordFileOverview("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        boolean boolean47 = jSDocInfoBuilder1.recordVersion("NUMBER 10.0 50");
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nNUMBER 12.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 12.0\n\n\nSubtree2: NUMBER 0.0 43\n", 51, (int) (short) 10, (int) (byte) 10, 36);
        boolean boolean55 = jSDocInfoBuilder1.recordLends("TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strListBuilder26);
        org.junit.Assert.assertNotNull(arrayListArray28);
        org.junit.Assert.assertNotNull(strListArray29);
        org.junit.Assert.assertNotNull(strListBuilder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test07270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07270");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node61.setDirectives((java.util.Set<java.lang.String>) strSet64);
        com.google.javascript.rhino.Node node67 = node55.useSourceInfoIfMissingFromForTree(node61);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        boolean boolean81 = node80.isAssignAdd();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean86 = node85.isVar();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) ' ', node39, node67, node80, node85, 1, 100);
        jSDocInfo20.setAssociatedNode(node89);
        boolean boolean91 = jSDocInfo20.isConstant();
        java.lang.String str92 = jSDocInfo20.getBlockDescription();
        java.lang.String str93 = jSDocInfo20.toString();
        boolean boolean94 = jSDocInfo20.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node95 = jSDocInfo20.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "JSDocInfo" + "'", str93, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
    }

    @Test
    public void test07271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07271");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int25 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node26 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.Node node36 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.InputId inputId37 = null;
        node30.setInputId(inputId37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int49 = node48.getSourceOffset();
        com.google.javascript.rhino.Node node50 = node42.useSourceInfoIfMissingFromForTree(node48);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray56 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet57 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet57, strArray56);
        node54.setDirectives((java.util.Set<java.lang.String>) strSet57);
        com.google.javascript.rhino.Node node60 = node48.useSourceInfoIfMissingFromForTree(node54);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) ' ', node30, node54);
        boolean boolean62 = node3.hasChild(node61);
        boolean boolean63 = node3.isArrayLit();
        boolean boolean64 = node3.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test07272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07272");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream11 = strList8.stream();
        boolean boolean12 = strList8.isEmpty();
        boolean boolean13 = strList8.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList22 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int24 = strList22.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator25 = strList22.spliterator();
        boolean boolean26 = strList22.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition27 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition28 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean33 = typePosition32.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList34 = com.google.common.collect.ImmutableList.of(typePosition27, typePosition28, typePosition29, typePosition30, typePosition31, typePosition32);
        int int35 = strList22.indexOf((java.lang.Object) typePosition32);
        boolean boolean36 = strList8.containsAll((java.util.Collection<java.lang.String>) strList22);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = strList22.reverse();
        java.lang.Object[] objArray38 = strList37.toArray();
        boolean boolean39 = strList37.isEmpty();
        java.lang.Object obj40 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = strList37.remove(obj40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(typePositionList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[, hi!, , hi!, , , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[, hi!, , hi!, , , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07273");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = null;
        boolean boolean10 = jSDocInfoBuilder1.recordEnumParameterType(jSTypeExpression9);
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("STRING  0", "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07274");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node9 = node3.copyInformationFromForTree(node8);
        boolean boolean10 = node9.isVarArgs();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray28 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        node26.setDirectives((java.util.Set<java.lang.String>) strSet29);
        com.google.javascript.rhino.Node node32 = node20.useSourceInfoIfMissingFromForTree(node26);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node32.getJsDocBuilderForNode();
        boolean boolean34 = node32.isAnd();
        node9.addChildToBack(node32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node32.siblings();
        boolean boolean37 = node32.isWhile();
        boolean boolean38 = node32.isNot();
        boolean boolean39 = node32.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07275");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean28 = node27.isVar();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node33 = node27.copyInformationFromForTree(node32);
        java.lang.String str34 = node15.checkTreeEquals(node33);
        node33.setLineno(29);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = node33.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  29 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str34, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
    }

    @Test
    public void test07276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07276");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        boolean boolean10 = node3.isFromExterns();
        com.google.javascript.rhino.Node node11 = node3.cloneNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node11.new FileLevelJsDocBuilder();
        boolean boolean13 = node11.isString();
        node11.detachChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07277");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        boolean boolean65 = strList62.isEmpty();
        com.google.javascript.rhino.JSDocInfo.Marker marker66 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition67 = marker66.getAnnotation();
        boolean boolean68 = strList62.equals((java.lang.Object) marker66);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition69 = marker66.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition70 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = marker66.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition72 = marker66.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker66.getName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(stringPosition67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(nodeSourcePosition69);
        org.junit.Assert.assertNull(stringPosition70);
        org.junit.Assert.assertNull(stringPosition71);
        org.junit.Assert.assertNull(typePosition72);
        org.junit.Assert.assertNull(stringPosition73);
    }

    @Test
    public void test07278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07278");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("hi!");
        int int4 = node2.getIntProp(44);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean9 = node8.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node10 = node8.cloneNode();
        boolean boolean11 = node10.isGetElem();
        node10.addSuppression("");
        boolean boolean14 = node10.isInstanceOf();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int25 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node26 = node18.useSourceInfoIfMissingFromForTree(node24);
        node18.setIsSyntheticBlock(false);
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node18.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean35 = node34.isNoSideEffectsCall();
        boolean boolean36 = node34.isWith();
        boolean boolean37 = node34.isInstanceOf();
        com.google.javascript.rhino.Node node38 = node18.srcrefTree(node34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node2, node10, node38);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj45 = node43.getProp(43);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int50 = node49.getSourceOffset();
        com.google.javascript.rhino.Node node51 = node43.useSourceInfoIfMissingFromForTree(node49);
        boolean boolean52 = node51.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile53 = node51.getStaticSourceFile();
        boolean boolean54 = node51.isExprResult();
        boolean boolean55 = node51.isScript();
        node38.addChildToBack(node51);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 43);
        boolean boolean59 = node58.isTry();
        node51.addChildToFront(node58);
        int int61 = node51.getSourcePosition();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(staticSourceFile53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 176129 + "'", int61 == 176129);
    }

    @Test
    public void test07279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07279");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isDefine();
        boolean boolean23 = jSDocInfo20.isConsistentIdGenerator();
        java.util.Collection<java.lang.String> strCollection24 = jSDocInfo20.getAuthors();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getThrownTypes();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strCollection24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
    }

    @Test
    public void test07280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07280");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean6 = jSDocInfoBuilder1.addReference("hi!");
        boolean boolean8 = jSDocInfoBuilder1.recordVersion("hi!");
        boolean boolean10 = jSDocInfoBuilder1.recordMeaning("");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node16.addChildrenToFront(node20);
        boolean boolean22 = node16.isGetterDef();
        boolean boolean23 = node16.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(32, node16, node33);
        boolean boolean47 = node46.isExprResult();
        boolean boolean48 = node46.isFunction();
        java.lang.String str49 = node46.toString();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node53.addChildrenToFront(node57);
        node57.setQuotedString();
        boolean boolean60 = node57.isHook();
        int int61 = node57.getType();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj67 = node65.getProp(43);
        int int68 = node65.getType();
        boolean boolean69 = node65.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node70 = node57.useSourceInfoIfMissingFromForTree(node65);
        boolean boolean71 = node46.hasChild(node70);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = new com.google.javascript.rhino.JSTypeExpression(node46, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean74 = jSDocInfoBuilder1.recordParameter("GETELEM", jSTypeExpression73);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression73);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "TYPEOF" + "'", str49, "TYPEOF");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 40 + "'", int61 == 40);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 40 + "'", int68 == 40);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression75);
    }

    @Test
    public void test07281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07281");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.lang.String str29 = jSDocInfo20.getMeaning();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str31 = jSDocInfo20.getVersion();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean36 = node34.getBooleanProp(51);
        boolean boolean37 = strSet32.contains((java.lang.Object) 51);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = null;
        boolean boolean41 = jSDocInfoBuilder39.recordThrowType(jSTypeExpression40);
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int52 = strList50.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList72 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList81 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList82 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList50, (java.lang.Iterable<java.lang.String>) strList61, (java.lang.Iterable<java.lang.String>) strList72, (java.lang.Iterable<java.lang.String>) strList81);
        boolean boolean83 = jSDocInfoBuilder39.recordTemplateTypeNames((java.util.List<java.lang.String>) strList50);
        com.google.common.collect.ImmutableList<java.lang.String> strList84 = strList50.asList();
        com.google.common.collect.ImmutableList<java.lang.String> strList85 = strList84.asList();
        boolean boolean86 = strSet32.containsAll((java.util.Collection<java.lang.String>) strList85);
        boolean boolean87 = strSet32.isEmpty();
        strSet32.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strIterableList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test07282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07282");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node11.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node11);
        typePosition1.setItem(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean33 = node32.isAssignAdd();
        boolean boolean34 = node32.isFromExterns();
        com.google.javascript.rhino.Node node35 = node19.copyInformationFromForTree(node32);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        boolean boolean37 = node32.hasOneChild();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node42 = node41.getNext();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(100, node32, node41, 26, 16);
        node41.setType(1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node42);
    }

    @Test
    public void test07283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07283");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean42 = strList19.isEmpty();
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int53 = strList51.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator54 = strList51.spliterator();
        boolean boolean55 = strList51.isEmpty();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition56 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition57 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition58 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition59 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition60 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition61 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean62 = typePosition61.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList63 = com.google.common.collect.ImmutableList.of(typePosition56, typePosition57, typePosition58, typePosition59, typePosition60, typePosition61);
        int int64 = strList51.indexOf((java.lang.Object) typePosition61);
        com.google.javascript.rhino.Node node65 = typePosition61.getItem();
        boolean boolean66 = strList19.contains((java.lang.Object) node65);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean70 = jSDocInfoBuilder68.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile72 = null;
        jSDocInfoBuilder68.markName("hi!", staticSourceFile72, (int) (short) 0, (int) (short) 100);
        boolean boolean76 = jSDocInfoBuilder68.recordNoTypeCheck();
        boolean boolean77 = jSDocInfoBuilder68.recordExpose();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node81.addChildrenToFront(node85);
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = jSDocInfoBuilder68.build(node85);
        boolean boolean88 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = jSDocInfo87.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList90 = jSDocInfo87.getTemplateTypeNames();
        boolean boolean91 = strList19.equals((java.lang.Object) strList90);
        java.util.ListIterator<java.lang.String> strItor92 = strList90.listIterator();
        int int93 = strList90.size();
        boolean boolean94 = strList90.isEmpty();
        java.util.ListIterator<java.lang.String> strItor95 = strList90.listIterator();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(typePositionList63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(jSDocInfo87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(jSTypeExpression89);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(strItor95);
    }

    @Test
    public void test07284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07284");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder15.recordParameter("", jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder15.recordExterns();
        boolean boolean21 = jSDocInfoBuilder15.recordPreserveTry();
        boolean boolean22 = jSDocInfoBuilder15.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder15.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.recordJavaDispatch();
        jSDocInfoBuilder26.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder35 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean36 = jSDocInfoBuilder35.recordJavaDispatch();
        boolean boolean37 = jSDocInfoBuilder35.recordNoCompile();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj44 = node42.getProp(43);
        boolean boolean45 = node42.isCall();
        boolean boolean46 = node42.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression48 = new com.google.javascript.rhino.JSTypeExpression(node42, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder49 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray51 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray52 = (java.util.ArrayList<java.lang.String>[]) arrayListArray51;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder53 = strListBuilder49.add((java.util.ArrayList<java.lang.String>[]) arrayListArray51);
        boolean boolean54 = jSTypeExpression48.equals((java.lang.Object) arrayListArray51);
        boolean boolean55 = jSDocInfoBuilder35.recordParameter("", jSTypeExpression48);
        boolean boolean56 = jSDocInfoBuilder26.recordThrowType(jSTypeExpression48);
        boolean boolean57 = jSDocInfoBuilder15.recordBaseType(jSTypeExpression48);
        boolean boolean58 = jSDocInfoBuilder1.recordImplementedInterface(jSTypeExpression48);
        jSDocInfoBuilder1.recordOriginalCommentString("[, hi!, , hi!, , , hi!, ]");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        jSDocInfoBuilder1.markName("NUMBER 0.0 [directives: []]", staticSourceFile62, 12, (int) (byte) 1);
        boolean boolean67 = jSDocInfoBuilder1.recordBlockDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 49.0\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 49.0\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strListBuilder49);
        org.junit.Assert.assertNotNull(arrayListArray51);
        org.junit.Assert.assertNotNull(strListArray52);
        org.junit.Assert.assertNotNull(strListBuilder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test07285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07285");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean9 = typePosition8.hasBrackets();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        typePosition8.setItem(node26);
        int int28 = typePosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean35 = typePosition34.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList36 = com.google.common.collect.ImmutableList.of(typePosition29, typePosition30, typePosition31, typePosition32, typePosition33, typePosition34);
        int int37 = typePosition31.getEndLine();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean42 = node41.isNull();
        boolean boolean43 = node41.isSyntheticBlock();
        boolean boolean44 = node41.hasMoreThanOneChild();
        typePosition31.setItem(node41);
        boolean boolean46 = typePosition31.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition4, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition8, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition31);
        int int48 = typePosition31.getStartLine();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int53 = node52.getSourceOffset();
        node52.addSuppression("[, hi!, , , hi!, , hi!, ]");
        typePosition31.setItem(node52);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = node52.getJSDocInfo();
        boolean boolean58 = node52.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(typePositionList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(jSDocInfo57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test07286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07286");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable3 = node1.getAncestors();
        boolean boolean4 = node1.isFunction();
        java.lang.String str5 = node1.getSourceFileName();
        node1.putBooleanProp(176180, false);
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(ancestorIterable3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test07287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07287");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.setIsSyntheticBlock(true);
        boolean boolean6 = node3.isReturn();
        boolean boolean7 = node3.isCatch();
        boolean boolean8 = node3.isStringKey();
        node3.setWasEmptyNode(true);
        boolean boolean11 = node3.isLabel();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder13.isInterfaceRecorded();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        int int22 = node19.getType();
        boolean boolean23 = node19.isGetterDef();
        node19.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = jSDocInfoBuilder13.build(node19);
        boolean boolean27 = jSDocInfo26.isNoSideEffects();
        boolean boolean28 = jSDocInfo26.hasTypedefType();
        boolean boolean29 = jSDocInfo26.isExterns();
        boolean boolean31 = jSDocInfo26.hasParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean36 = node35.isVar();
        node35.putBooleanProp(30, false);
        boolean boolean40 = node35.isSwitch();
        boolean boolean41 = node35.isIn();
        node35.setWasEmptyNode(true);
        jSDocInfo26.setAssociatedNode(node35);
        boolean boolean45 = node35.isIn();
        boolean boolean46 = node35.isHook();
        boolean boolean47 = node3.isEquivalentToTyped(node35);
        int int48 = node3.getLineno();
        boolean boolean49 = node3.isAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 40 + "'", int22 == 40);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSDocInfo26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 43 + "'", int48 == 43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test07288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07288");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean28 = node21.isThrow();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(35, node4, node21);
        node29.setLength(31);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean36 = node35.isNull();
        boolean boolean37 = node35.isFromExterns();
        boolean boolean38 = node35.isFunction();
        com.google.javascript.rhino.Node node39 = node35.cloneTree();
        boolean boolean40 = node39.isFor();
        com.google.javascript.rhino.Node node41 = node29.srcrefTree(node39);
        boolean boolean42 = node39.isDec();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test07289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07289");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean5 = jSDocInfoBuilder1.recordLends("GETELEM");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object[] objArray15 = strSet12.toArray();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray21 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        node19.setDirectives((java.util.Set<java.lang.String>) strSet22);
        java.lang.Object[] objArray25 = strSet22.toArray();
        boolean boolean26 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet22);
        boolean boolean27 = strSet22.isEmpty();
        int int28 = strSet22.size();
        strSet22.clear();
        boolean boolean30 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet22);
        boolean boolean31 = jSDocInfoBuilder1.recordExpose();
        jSDocInfoBuilder1.markText("STRING hi!", 35, (int) (byte) -1, 0, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test07290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07290");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int43 = strList41.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList62 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList52, (java.lang.Iterable<java.lang.String>) strList61);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int73 = strList71.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator74 = strList71.spliterator();
        boolean boolean75 = strList41.equals((java.lang.Object) strList71);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean80 = node79.isVar();
        boolean boolean81 = strList71.contains((java.lang.Object) node79);
        boolean boolean82 = node79.isThis();
        int int83 = node21.getIndexOfChild(node79);
        boolean boolean84 = node79.isVar();
        boolean boolean85 = node79.isDefaultCase();
        node79.setSourceFileForTesting("[, hi!, , , hi!, , hi!, ]");
        boolean boolean88 = node79.isParamList();
        boolean boolean89 = node79.isDo();
        boolean boolean90 = node79.isInc();
        boolean boolean91 = node79.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strIterableList62);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test07291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07291");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.isAnd();
        node17.detachChildren();
        com.google.javascript.rhino.Node node21 = node5.useSourceInfoIfMissingFromForTree(node17);
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int43 = strList41.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList52 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList62 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList52, (java.lang.Iterable<java.lang.String>) strList61);
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int73 = strList71.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator74 = strList71.spliterator();
        boolean boolean75 = strList41.equals((java.lang.Object) strList71);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean80 = node79.isVar();
        boolean boolean81 = strList71.contains((java.lang.Object) node79);
        boolean boolean82 = node79.isThis();
        int int83 = node21.getIndexOfChild(node79);
        boolean boolean84 = node79.isVar();
        boolean boolean85 = node79.isThis();
        boolean boolean86 = node79.isCase();
        boolean boolean87 = node79.isAssign();
        boolean boolean88 = node79.isWhile();
        boolean boolean89 = node79.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strIterableList62);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test07292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07292");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        int int13 = node4.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node4.getJSDocInfo();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(49, node4, (int) (byte) -1, (int) 'a');
        node4.detachChildren();
        boolean boolean19 = node4.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07293");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder10.recordNoCompile();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        boolean boolean20 = node17.isCall();
        boolean boolean21 = node17.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node17, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder24 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray26 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray27 = (java.util.ArrayList<java.lang.String>[]) arrayListArray26;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder28 = strListBuilder24.add((java.util.ArrayList<java.lang.String>[]) arrayListArray26);
        boolean boolean29 = jSTypeExpression23.equals((java.lang.Object) arrayListArray26);
        boolean boolean30 = jSDocInfoBuilder10.recordParameter("", jSTypeExpression23);
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression23);
        boolean boolean32 = jSTypeExpression23.isVarArgs();
        boolean boolean33 = jSTypeExpression23.isOptionalArg();
        boolean boolean34 = jSTypeExpression23.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression23);
        java.util.AbstractList[][] abstractListArray37 = new java.util.AbstractList[0][];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.lang.String>[][] strListArray38 = (java.util.AbstractList<java.lang.String>[][]) abstractListArray37;
        com.google.common.collect.ImmutableList<java.util.AbstractList<java.lang.String>[]> strListArrayList39 = com.google.common.collect.ImmutableList.of(strListArray38);
        boolean boolean40 = jSTypeExpression23.equals((java.lang.Object) strListArrayList39);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strListBuilder24);
        org.junit.Assert.assertNotNull(arrayListArray26);
        org.junit.Assert.assertNotNull(strListArray27);
        org.junit.Assert.assertNotNull(strListBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression35);
        org.junit.Assert.assertNotNull(abstractListArray37);
        org.junit.Assert.assertNotNull(strListArray38);
        org.junit.Assert.assertNotNull(strListArrayList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test07294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07294");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getAuthors();
        boolean boolean30 = jSDocInfo20.isConstructor();
        boolean boolean31 = jSDocInfo20.hasEnumParameterType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection32 = jSDocInfo20.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(markerCollection32);
    }

    @Test
    public void test07295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07295");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        boolean boolean11 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean13 = jSDocInfoBuilder1.recordExport();
        boolean boolean14 = jSDocInfoBuilder1.recordNoCompile();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07296");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.isInterfaceRecorded();
        boolean boolean9 = jSDocInfoBuilder6.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj15 = node13.getProp(43);
        boolean boolean16 = node13.isCall();
        boolean boolean17 = node13.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node13, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder20 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray22 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray23 = (java.util.ArrayList<java.lang.String>[]) arrayListArray22;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder24 = strListBuilder20.add((java.util.ArrayList<java.lang.String>[]) arrayListArray22);
        boolean boolean25 = jSTypeExpression19.equals((java.lang.Object) arrayListArray22);
        boolean boolean26 = jSDocInfoBuilder6.recordDefineType(jSTypeExpression19);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int28 = namePosition27.getEndLine();
        int int29 = namePosition27.getStartLine();
        com.google.javascript.rhino.Node node30 = namePosition27.getItem();
        boolean boolean31 = jSTypeExpression19.equals((java.lang.Object) node30);
        boolean boolean32 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression19);
        boolean boolean33 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean34 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder37.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = null;
        jSDocInfoBuilder37.markName("hi!", staticSourceFile41, (int) (short) 0, (int) (short) 100);
        boolean boolean45 = jSDocInfoBuilder37.recordNoTypeCheck();
        boolean boolean46 = jSDocInfoBuilder37.recordExpose();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node50.addChildrenToFront(node54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = jSDocInfoBuilder37.build(node54);
        boolean boolean57 = jSDocInfo56.isConstructor();
        int int58 = jSDocInfo56.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node59 = jSDocInfo56.getAssociatedNode();
        boolean boolean60 = node59.isDec();
        com.google.javascript.rhino.Node node61 = node59.detachFromParent();
        boolean boolean62 = node59.isThrow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder64 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean66 = jSDocInfoBuilder64.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile68 = null;
        jSDocInfoBuilder64.markName("hi!", staticSourceFile68, (int) (short) 0, (int) (short) 100);
        boolean boolean72 = jSDocInfoBuilder64.recordNoTypeCheck();
        boolean boolean73 = jSDocInfoBuilder64.recordExpose();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node77.addChildrenToFront(node81);
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = jSDocInfoBuilder64.build(node81);
        boolean boolean84 = jSDocInfo83.isConstructor();
        int int85 = jSDocInfo83.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node86 = jSDocInfo83.getAssociatedNode();
        boolean boolean87 = node86.isDec();
        com.google.javascript.rhino.Node node88 = node86.detachFromParent();
        boolean boolean89 = node86.isThrow();
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) 50);
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(38, node59, node86, node91);
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = jSDocInfoBuilder1.build(node92);
        jSDocInfoBuilder1.recordOriginalCommentString("GETELEM");
        boolean boolean96 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strListBuilder20);
        org.junit.Assert.assertNotNull(arrayListArray22);
        org.junit.Assert.assertNotNull(strListArray23);
        org.junit.Assert.assertNotNull(strListBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSDocInfo56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(jSDocInfo93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test07297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07297");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        boolean boolean10 = strSet6.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int32 = strList30.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList41 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList51 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList41, (java.lang.Iterable<java.lang.String>) strList50);
        com.google.common.collect.ImmutableList<java.lang.String> strList60 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int62 = strList60.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator63 = strList60.spliterator();
        boolean boolean64 = strList30.equals((java.lang.Object) strList60);
        boolean boolean65 = strSet6.addAll((java.util.Collection<java.lang.String>) strList60);
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int76 = strList74.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream77 = strList74.stream();
        boolean boolean78 = strList74.isEmpty();
        boolean boolean79 = strList74.isEmpty();
        boolean boolean80 = strSet6.retainAll((java.util.Collection<java.lang.String>) strList74);
        com.google.common.collect.ImmutableList<java.lang.String> strList81 = strList74.reverse();
        // The following exception was thrown during execution in test generation
        try {
            strList74.add(0, "NUMBER 0.0 43 [directives: []]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strIterableList51);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(strStream77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strList81);
    }

    @Test
    public void test07298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07298");
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = com.google.common.collect.ImmutableList.of("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "hi!", "", "NUMBER 0.0 43", "", "[]", "hi!", "[]", "STRING ", "NUMBER 0.0 43");
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor11 = strList10.listIterator();
        java.util.stream.Stream<java.lang.String> strStream12 = strList10.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = strList10.set(24, "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strStream12);
    }

    @Test
    public void test07299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07299");
        com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>>> strListBuilderBuilder0 = new com.google.common.collect.ImmutableList.Builder<com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>>>();
    }

    @Test
    public void test07300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07300");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int5 = node4.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType6 = node4.getJSType();
        boolean boolean7 = node4.isWith();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node12.addChildrenToFront(node16);
        boolean boolean18 = node12.isGetterDef();
        boolean boolean19 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj25 = node23.getProp(43);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int30 = node29.getSourceOffset();
        com.google.javascript.rhino.Node node31 = node23.useSourceInfoIfMissingFromForTree(node29);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        com.google.javascript.rhino.Node node41 = node29.useSourceInfoIfMissingFromForTree(node35);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node12, node29);
        boolean boolean43 = node42.isExprResult();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 0, node4, node42);
        node4.removeProp(10);
        node4.setVarArgs(true);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int59 = node58.getSourceOffset();
        com.google.javascript.rhino.Node node60 = node52.useSourceInfoIfMissingFromForTree(node58);
        boolean boolean61 = node60.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = node60.getStaticSourceFile();
        boolean boolean63 = node60.isDo();
        com.google.javascript.rhino.Node node64 = node4.useSourceInfoFrom(node60);
        boolean boolean65 = node60.isFromExterns();
        boolean boolean66 = node60.isTrue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(staticSourceFile62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test07301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07301");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection27 = jSDocInfo20.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getTypedefType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(markerCollection27);
        org.junit.Assert.assertNull(jSTypeExpression28);
    }

    @Test
    public void test07302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07302");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(167974, 43, (int) (short) -1);
    }

    @Test
    public void test07303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07303");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isInc();
        boolean boolean10 = node3.isEmpty();
        node3.setOptionalArg(true);
        int int13 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node14 = node3.getLastChild();
        node3.putIntProp(176180, (int) (short) -1);
        boolean boolean18 = node3.hasMoreThanOneChild();
        boolean boolean19 = node3.isScript();
        int int20 = node3.getType();
        java.lang.Object obj22 = node3.getProp((-1));
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 39 + "'", int20 == 39);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test07304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07304");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(42, nodeArray4, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(39, nodeArray4, (int) '4', 32);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(36, nodeArray4);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray4, 37, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = node14.getFirstChild();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNull(node15);
    }

    @Test
    public void test07305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07305");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node70.addChildrenToFront(node74);
        node74.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        node74.setJSType(jSType77);
        com.google.javascript.rhino.Node node79 = node66.useSourceInfoIfMissingFromForTree(node74);
        boolean boolean80 = node79.isCall();
        com.google.javascript.rhino.Node node84 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int85 = node84.getSourceOffset();
        node84.detachChildren();
        boolean boolean87 = node84.wasEmptyNode();
        int int88 = node79.getIndexOfChild(node84);
        boolean boolean89 = node79.isDefaultCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test07306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07306");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = null;
        boolean boolean23 = jSDocInfoBuilder19.recordParameter("hi!", jSTypeExpression22);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean25 = jSDocInfoBuilder19.recordVisibility(visibility24);
        jSDocInfo14.setVisibility(visibility24);
        boolean boolean27 = jSDocInfo14.isConstant();
        boolean boolean28 = jSDocInfo14.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo14.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
    }

    @Test
    public void test07307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07307");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean22 = node21.isNull();
        boolean boolean23 = node21.isSyntheticBlock();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean29 = node28.isDebugger();
        com.google.javascript.rhino.Node node30 = node28.getFirstChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(38, node9, node21, node28, node34);
        com.google.javascript.rhino.Node node44 = node21.getFirstChild();
        boolean boolean45 = node21.isBlock();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean50 = node49.isVar();
        node49.putBooleanProp(30, false);
        boolean boolean54 = node49.isSwitch();
        boolean boolean55 = node49.isUnscopedQualifiedName();
        boolean boolean56 = node49.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node49.setStaticSourceFile(staticSourceFile57);
        boolean boolean59 = node49.isGetElem();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int64 = node63.getSourceOffset();
        node63.detachChildren();
        com.google.javascript.rhino.Node node66 = node49.useSourceInfoFromForTree(node63);
        boolean boolean67 = node63.isNumber();
        boolean boolean68 = node63.isFalse();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node63.children();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) 4);
        com.google.javascript.rhino.Node node72 = node71.removeFirstChild();
        node71.putIntProp(26, 2);
        com.google.javascript.rhino.Node node76 = node63.copyInformationFrom(node71);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable77 = node71.getAncestors();
        boolean boolean78 = node71.isParamList();
        com.google.javascript.rhino.Node node79 = node21.useSourceInfoIfMissingFromForTree(node71);
        node79.setOptionalArg(true);
        boolean boolean82 = node79.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(ancestorIterable77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test07308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07308");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.Node.FileLevelJsDocBuilder[][]> fileLevelJsDocBuilderArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilderArrayBuilder0);
    }

    @Test
    public void test07309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07309");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        node7.setQuotedString();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node7.setJSType(jSType10);
        java.lang.String str12 = node7.getString();
        boolean boolean13 = node7.isWith();
        java.util.Set<java.lang.String> strSet14 = node7.getDirectives();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean20 = node19.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        com.google.javascript.rhino.Node node42 = node30.useSourceInfoIfMissingFromForTree(node36);
        boolean boolean43 = node36.isThrow();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(35, node19, node36);
        node44.setLength(31);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean51 = node50.isNull();
        boolean boolean52 = node50.isFromExterns();
        boolean boolean53 = node50.isFunction();
        com.google.javascript.rhino.Node node54 = node50.cloneTree();
        boolean boolean55 = node54.isFor();
        com.google.javascript.rhino.Node node56 = node44.srcrefTree(node54);
        node56.setLength(15);
        boolean boolean59 = node7.hasChild(node56);
        boolean boolean60 = node56.isParamList();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder62 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean64 = jSDocInfoBuilder62.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile66 = null;
        jSDocInfoBuilder62.markName("hi!", staticSourceFile66, (int) (short) 0, (int) (short) 100);
        boolean boolean70 = jSDocInfoBuilder62.recordNoTypeCheck();
        boolean boolean71 = jSDocInfoBuilder62.recordExpose();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node75.addChildrenToFront(node79);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = jSDocInfoBuilder62.build(node79);
        java.lang.String str82 = jSDocInfo81.getMeaning();
        boolean boolean83 = jSDocInfo81.isExport();
        java.lang.String str84 = jSDocInfo81.getOriginalCommentString();
        boolean boolean85 = jSDocInfo81.hasModifies();
        java.util.Set<java.lang.String> strSet86 = jSDocInfo81.getModifies();
        java.lang.String str87 = jSDocInfo81.getDescription();
        node56.setJSDocInfo(jSDocInfo81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = jSDocInfo81.getBaseType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(jSDocInfo81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(jSTypeExpression89);
    }

    @Test
    public void test07310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07310");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean2 = node1.isThrow();
        boolean boolean3 = node1.isWhile();
        node1.setLength(52);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test07311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07311");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int37 = node36.getSourceOffset();
        com.google.javascript.rhino.Node node38 = node30.useSourceInfoIfMissingFromForTree(node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray44 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        node42.setDirectives((java.util.Set<java.lang.String>) strSet45);
        com.google.javascript.rhino.Node node48 = node36.useSourceInfoIfMissingFromForTree(node42);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj54 = node52.getProp(43);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int59 = node58.getSourceOffset();
        com.google.javascript.rhino.Node node60 = node52.useSourceInfoIfMissingFromForTree(node58);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray66 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        node64.setDirectives((java.util.Set<java.lang.String>) strSet67);
        com.google.javascript.rhino.Node node70 = node58.useSourceInfoIfMissingFromForTree(node64);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj77 = node75.getProp(43);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int82 = node81.getSourceOffset();
        com.google.javascript.rhino.Node node83 = node75.useSourceInfoIfMissingFromForTree(node81);
        boolean boolean84 = node83.isAssignAdd();
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean89 = node88.isVar();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node((int) ' ', node42, node70, node83, node88, 1, 100);
        boolean boolean93 = node92.isNull();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) '4', node92);
        int int96 = node94.getIntProp((-1));
        jSDocInfo20.setAssociatedNode(node94);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
    }

    @Test
    public void test07312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07312");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        boolean boolean30 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet26);
        java.lang.Object[] objArray31 = strSet16.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean35 = jSDocInfoBuilder33.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        jSDocInfoBuilder33.markName("hi!", staticSourceFile37, (int) (short) 0, (int) (short) 100);
        boolean boolean41 = jSDocInfoBuilder33.recordNoTypeCheck();
        boolean boolean42 = jSDocInfoBuilder33.recordExpose();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node46.addChildrenToFront(node50);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = jSDocInfoBuilder33.build(node50);
        java.lang.String str53 = jSDocInfo52.getMeaning();
        boolean boolean54 = jSDocInfo52.isExport();
        boolean boolean55 = strSet16.equals((java.lang.Object) jSDocInfo52);
        boolean boolean56 = jSDocInfo52.isNoAlias();
        java.lang.String str57 = jSDocInfo52.getMeaning();
        java.lang.String str58 = jSDocInfo52.getMeaning();
        boolean boolean59 = jSDocInfo52.isNoTypeCheck();
        java.lang.String str60 = jSDocInfo52.getReturnDescription();
        boolean boolean61 = strSet6.equals((java.lang.Object) jSDocInfo52);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = jSDocInfo52.getTemplateTypeNames();
        java.lang.Object[] objArray63 = strList62.toArray();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor64 = strList62.listIterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSDocInfo52);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(strItor64);
    }

    @Test
    public void test07313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07313");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test07314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07314");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean16 = node15.isVar();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node21 = node15.copyInformationFromForTree(node20);
        com.google.javascript.rhino.Node node22 = node3.copyInformationFromForTree(node21);
        boolean boolean23 = node22.isTrue();
        boolean boolean24 = node22.isFromExterns();
        com.google.javascript.rhino.Node node25 = node22.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = node25.isRegExp();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
    }

    @Test
    public void test07315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07315");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(12, (-1), (int) (short) 10);
        boolean boolean4 = node3.isNot();
        node3.putIntProp(43, 45055);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07316");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        int int12 = node3.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node3.getJSDocInfo();
        boolean boolean14 = node3.isIn();
        boolean boolean15 = node3.isVarArgs();
        java.lang.String str16 = node3.getString();
        int int17 = node3.getLineno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 43 + "'", int17 == 43);
    }

    @Test
    public void test07317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07317");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int19 = node18.getSourceOffset();
        com.google.javascript.rhino.Node node20 = node12.useSourceInfoIfMissingFromForTree(node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        node24.setDirectives((java.util.Set<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node30 = node18.useSourceInfoIfMissingFromForTree(node24);
        boolean boolean31 = node24.isThrow();
        boolean boolean32 = node24.isNot();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean37 = node36.isVar();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node42 = node36.copyInformationFromForTree(node41);
        java.lang.String str43 = node24.checkTreeEquals(node42);
        com.google.javascript.rhino.Node node44 = null;
        com.google.javascript.rhino.Node node45 = node24.getChildBefore(node44);
        boolean boolean46 = node24.isVarArgs();
        boolean boolean47 = node24.isIn();
        boolean boolean48 = node24.isNE();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = null;
        node24.setStaticSourceFile(staticSourceFile49);
        boolean boolean51 = node24.isAssign();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node24.new FileLevelJsDocBuilder();
        boolean boolean53 = node3.isEquivalentToTyped(node24);
        boolean boolean54 = node3.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n" + "'", str43, "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test07318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07318");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        jSDocInfoBuilder1.markText("[, hi!, , , hi!, , hi!, ]", 44, 49, 176129, 10);
        boolean boolean11 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder13 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean14 = jSDocInfoBuilder13.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = null;
        boolean boolean17 = jSDocInfoBuilder13.recordParameter("", jSTypeExpression16);
        boolean boolean18 = jSDocInfoBuilder13.recordExterns();
        boolean boolean19 = jSDocInfoBuilder13.recordPreserveTry();
        boolean boolean20 = jSDocInfoBuilder13.recordNoCompile();
        boolean boolean22 = jSDocInfoBuilder13.recordLends("");
        boolean boolean25 = jSDocInfoBuilder13.recordParameterDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean28 = jSDocInfoBuilder27.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = null;
        boolean boolean31 = jSDocInfoBuilder27.recordParameter("", jSTypeExpression30);
        boolean boolean32 = jSDocInfoBuilder27.recordExterns();
        boolean boolean33 = jSDocInfoBuilder27.recordPreserveTry();
        boolean boolean34 = jSDocInfoBuilder27.recordNoCompile();
        boolean boolean36 = jSDocInfoBuilder27.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder38.recordJavaDispatch();
        jSDocInfoBuilder38.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordJavaDispatch();
        boolean boolean49 = jSDocInfoBuilder47.recordNoCompile();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        boolean boolean57 = node54.isCall();
        boolean boolean58 = node54.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression60 = new com.google.javascript.rhino.JSTypeExpression(node54, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray63 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray64 = (java.util.ArrayList<java.lang.String>[]) arrayListArray63;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder65 = strListBuilder61.add((java.util.ArrayList<java.lang.String>[]) arrayListArray63);
        boolean boolean66 = jSTypeExpression60.equals((java.lang.Object) arrayListArray63);
        boolean boolean67 = jSDocInfoBuilder47.recordParameter("", jSTypeExpression60);
        boolean boolean68 = jSDocInfoBuilder38.recordThrowType(jSTypeExpression60);
        boolean boolean69 = jSDocInfoBuilder27.recordBaseType(jSTypeExpression60);
        boolean boolean70 = jSDocInfoBuilder13.recordImplementedInterface(jSTypeExpression60);
        boolean boolean71 = jSDocInfoBuilder1.recordType(jSTypeExpression60);
        boolean boolean72 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean73 = jSDocInfoBuilder1.recordNoShadow();
        boolean boolean74 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean75 = jSDocInfoBuilder1.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertNotNull(arrayListArray63);
        org.junit.Assert.assertNotNull(strListArray64);
        org.junit.Assert.assertNotNull(strListBuilder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test07319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07319");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj15 = node13.getProp(43);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int20 = node19.getSourceOffset();
        com.google.javascript.rhino.Node node21 = node13.useSourceInfoIfMissingFromForTree(node19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean32 = node31.isContinue();
        boolean boolean33 = node31.isOnlyModifiesThisCall();
        boolean boolean34 = node31.isDefaultCase();
        boolean boolean35 = node4.hasChild(node31);
        java.lang.String str39 = node4.toString(false, true, true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable40 = node4.siblings();
        node4.setOptionalArg(false);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean47 = node46.isVar();
        node46.putBooleanProp(30, false);
        boolean boolean51 = node46.isSwitch();
        boolean boolean52 = node46.isIn();
        boolean boolean53 = node46.isFromExterns();
        boolean boolean54 = node46.isNot();
        boolean boolean55 = node46.isNumber();
        int int56 = node46.getSideEffectFlags();
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(42, nodeArray62, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(49, nodeArray62, 53, 43);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(176180, nodeArray62, 41, 38);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray62);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(26, nodeArray62);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean78 = node77.isVar();
        node77.putBooleanProp(30, false);
        boolean boolean82 = node77.isSwitch();
        boolean boolean83 = node77.isIn();
        boolean boolean84 = node77.isIn();
        boolean boolean85 = node77.isOr();
        com.google.javascript.rhino.Node node86 = node77.getLastSibling();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(46, node4, node46, node73, node77);
        boolean boolean88 = node46.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 0.0 [directives: []]" + "'", str39, "NUMBER 0.0 [directives: []]");
        org.junit.Assert.assertNotNull(nodeIterable40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(nodeArray62);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test07320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07320");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isOverride();
        int int24 = jSDocInfo20.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test07321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07321");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) -1);
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("JSDocInfo", 10, 0);
        com.google.javascript.rhino.Node node6 = node1.useSourceInfoIfMissingFrom(node5);
        boolean boolean7 = node6.isScript();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07322");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream11 = strList8.stream();
        boolean boolean12 = strList8.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator13 = strList8.spliterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        jSDocInfoBuilder15.markName("hi!", staticSourceFile19, (int) (short) 0, (int) (short) 100);
        boolean boolean23 = jSDocInfoBuilder15.recordNoTypeCheck();
        boolean boolean24 = jSDocInfoBuilder15.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int35 = strList33.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int46 = strList44.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList65 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList33, (java.lang.Iterable<java.lang.String>) strList44, (java.lang.Iterable<java.lang.String>) strList55, (java.lang.Iterable<java.lang.String>) strList64);
        boolean boolean66 = jSDocInfoBuilder15.recordTemplateTypeNames((java.util.List<java.lang.String>) strList64);
        boolean boolean67 = jSDocInfoBuilder15.recordHiddenness();
        boolean boolean69 = jSDocInfoBuilder15.hasParameter("hi!");
        boolean boolean70 = jSDocInfoBuilder15.recordJavaDispatch();
        boolean boolean72 = jSDocInfoBuilder15.recordDeprecationReason("ERROR  43\n");
        boolean boolean73 = jSDocInfoBuilder15.recordImplicitCast();
        boolean boolean74 = strList8.equals((java.lang.Object) jSDocInfoBuilder15);
        boolean boolean76 = jSDocInfoBuilder15.recordDescription("STRING hi!");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strIterableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test07323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07323");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        boolean boolean63 = strList19.containsAll((java.util.Collection<java.lang.String>) strList62);
        java.util.Iterator<java.lang.String> strItor64 = strList19.iterator();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int69 = node68.getSourceOffset();
        double double70 = node68.getDouble();
        boolean boolean71 = node68.isInc();
        int int72 = strList19.indexOf((java.lang.Object) node68);
        boolean boolean73 = node68.isEmpty();
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(42, nodeArray77, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(39, nodeArray77, (int) '4', 32);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(176129, nodeArray77);
        boolean boolean85 = node84.isObjectLit();
        com.google.javascript.rhino.Node node86 = node68.useSourceInfoFrom(node84);
        node84.setType(31);
        com.google.javascript.rhino.InputId inputId89 = node84.getInputId();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strItor64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeArray77);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(inputId89);
    }

    @Test
    public void test07324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07324");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        boolean boolean35 = jSDocInfoBuilder15.recordDefineType(jSTypeExpression28);
        boolean boolean36 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression28);
        boolean boolean37 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean38 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markText("STRING  43\n", 4095, 24, 37, 3);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07325");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList41 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList19);
        boolean boolean42 = strList19.isEmpty();
        java.lang.Object[] objArray43 = strList19.toArray();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) ' ', 16, 51);
        int int48 = strList19.indexOf((java.lang.Object) node47);
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.Iterator<java.lang.String> strItor59 = strList58.iterator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder61 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean63 = jSDocInfoBuilder61.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile65 = null;
        jSDocInfoBuilder61.markName("hi!", staticSourceFile65, (int) (short) 0, (int) (short) 100);
        boolean boolean69 = jSDocInfoBuilder61.recordNoTypeCheck();
        boolean boolean70 = jSDocInfoBuilder61.recordExpose();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node74.addChildrenToFront(node78);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = jSDocInfoBuilder61.build(node78);
        java.lang.String str81 = jSDocInfo80.getMeaning();
        boolean boolean82 = jSDocInfo80.isExport();
        boolean boolean83 = jSDocInfo80.isConstant();
        boolean boolean84 = strList58.equals((java.lang.Object) boolean83);
        com.google.common.collect.ImmutableList<java.lang.String> strList85 = strList58.reverse();
        com.google.common.collect.ImmutableList<java.lang.String> strList86 = strList85.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor87 = strList85.iterator();
        java.lang.String str88 = strList85.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = strList19.addAll(12, (java.util.Collection<java.lang.String>) strList85);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strIterableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(jSDocInfo80);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(strItor87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "[, hi!, , hi!, , , hi!, ]" + "'", str88, "[, hi!, , hi!, , , hi!, ]");
    }

    @Test
    public void test07326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07326");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        boolean boolean26 = jSDocInfo20.shouldPreserveTry();
        boolean boolean27 = jSDocInfo20.isConstructor();
        java.lang.String str28 = jSDocInfo20.getDeprecationReason();
        boolean boolean29 = jSDocInfo20.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07327");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isParamList();
        boolean boolean7 = node3.isParamList();
        com.google.javascript.rhino.Node node8 = node3.cloneNode();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        double double14 = node12.getDouble();
        boolean boolean15 = node12.isInc();
        node3.addChildToFront(node12);
        boolean boolean17 = node12.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test07328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07328");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isNoShadow();
        boolean boolean24 = jSDocInfo20.isInterface();
        boolean boolean25 = jSDocInfo20.isNoTypeCheck();
        java.lang.String str26 = jSDocInfo20.getReturnDescription();
        boolean boolean27 = jSDocInfo20.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test07329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07329");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        jSDocInfoBuilder1.markAnnotation("STRING  43", 39, 47);
        boolean boolean25 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean26 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean27 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean28 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean29 = jSDocInfoBuilder1.recordExpose();
        boolean boolean30 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test07330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07330");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.isInterfaceRecorded();
        boolean boolean9 = jSDocInfoBuilder6.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj15 = node13.getProp(43);
        boolean boolean16 = node13.isCall();
        boolean boolean17 = node13.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node13, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder20 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray22 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray23 = (java.util.ArrayList<java.lang.String>[]) arrayListArray22;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder24 = strListBuilder20.add((java.util.ArrayList<java.lang.String>[]) arrayListArray22);
        boolean boolean25 = jSTypeExpression19.equals((java.lang.Object) arrayListArray22);
        boolean boolean26 = jSDocInfoBuilder6.recordDefineType(jSTypeExpression19);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int28 = namePosition27.getEndLine();
        int int29 = namePosition27.getStartLine();
        com.google.javascript.rhino.Node node30 = namePosition27.getItem();
        boolean boolean31 = jSTypeExpression19.equals((java.lang.Object) node30);
        boolean boolean32 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression19);
        boolean boolean33 = jSDocInfoBuilder1.recordIdGenerator();
        jSDocInfoBuilder1.recordOriginalCommentString("STRING  43 [var_args_name: 1]\n");
        boolean boolean36 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean37 = jSDocInfoBuilder1.recordInterface();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strListBuilder20);
        org.junit.Assert.assertNotNull(arrayListArray22);
        org.junit.Assert.assertNotNull(strListArray23);
        org.junit.Assert.assertNotNull(strListBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test07331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07331");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet7);
        java.lang.Object[] objArray10 = strSet7.toArray();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray16 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        node14.setDirectives((java.util.Set<java.lang.String>) strSet17);
        java.lang.Object[] objArray20 = strSet17.toArray();
        boolean boolean21 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet17);
        java.lang.Object[] objArray22 = strSet7.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet7.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int34 = strList32.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList43 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int45 = strList43.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList64 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList32, (java.lang.Iterable<java.lang.String>) strList43, (java.lang.Iterable<java.lang.String>) strList54, (java.lang.Iterable<java.lang.String>) strList63);
        boolean boolean65 = strSet7.equals((java.lang.Object) strList63);
        java.util.Spliterator<java.lang.String> strSpliterator66 = strList63.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor67 = strList63.listIterator();
        java.util.Spliterator<java.lang.String> strSpliterator68 = strList63.spliterator();
        com.google.javascript.rhino.Node[] nodeArray73 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(42, nodeArray73, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(39, nodeArray73, (int) '4', 32);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(176129, nodeArray73);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node(35, nodeArray73);
        boolean boolean82 = strList63.contains((java.lang.Object) nodeArray73);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(38, nodeArray73);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(strSpliterator23);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strIterableList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strSpliterator66);
        org.junit.Assert.assertNotNull(strItor67);
        org.junit.Assert.assertNotNull(strSpliterator68);
        org.junit.Assert.assertNotNull(nodeArray73);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test07332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07332");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(39, 44, 53);
    }

    @Test
    public void test07333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07333");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo14.getParameterNames();
        boolean boolean19 = jSDocInfo14.hasReturnType();
        boolean boolean20 = jSDocInfo14.hasFileOverview();
        java.util.Collection<java.lang.String> strCollection21 = jSDocInfo14.getReferences();
        boolean boolean22 = jSDocInfo14.hasBaseType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(strCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test07334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07334");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.util.stream.Stream<java.lang.String> strStream9 = strList8.stream();
        java.util.ListIterator<java.lang.String> strItor10 = strList8.listIterator();
        java.lang.Object[] objArray11 = strList8.toArray();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        java.lang.Object[] objArray21 = strSet18.toArray();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        java.lang.Object[] objArray31 = strSet28.toArray();
        boolean boolean32 = strSet18.retainAll((java.util.Collection<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        boolean boolean42 = strSet28.containsAll((java.util.Collection<java.lang.String>) strSet39);
        boolean boolean44 = strSet28.add("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder46.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = null;
        boolean boolean50 = jSDocInfoBuilder46.recordParameter("hi!", jSTypeExpression49);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        boolean boolean52 = jSDocInfoBuilder46.recordVisibility(visibility51);
        boolean boolean53 = strSet28.contains((java.lang.Object) jSDocInfoBuilder46);
        boolean boolean55 = jSDocInfoBuilder46.recordLends("TYPEOF");
        boolean boolean56 = jSDocInfoBuilder46.recordExterns();
        boolean boolean57 = jSDocInfoBuilder46.recordConstructor();
        boolean boolean58 = jSDocInfoBuilder46.recordJavaDispatch();
        boolean boolean60 = jSDocInfoBuilder46.hasParameter("OR  54\n");
        int int61 = strList8.lastIndexOf((java.lang.Object) jSDocInfoBuilder46);
        boolean boolean63 = jSDocInfoBuilder46.addAuthor("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 49.0\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 49.0\n");
        boolean boolean64 = jSDocInfoBuilder46.recordExpose();
        boolean boolean66 = jSDocInfoBuilder46.recordDescription("STRING  43 [synthetic: 1]");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test07335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07335");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(42, nodeArray5, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(39, nodeArray5, (int) '4', 32);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(176129, nodeArray5);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(23, nodeArray5);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(8, nodeArray5, 1, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        boolean boolean28 = strSet24.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList37 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int39 = strList37.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList48 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int50 = strList48.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList68 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList69 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList37, (java.lang.Iterable<java.lang.String>) strList48, (java.lang.Iterable<java.lang.String>) strList59, (java.lang.Iterable<java.lang.String>) strList68);
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int80 = strList78.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator81 = strList78.spliterator();
        boolean boolean82 = strList48.equals((java.lang.Object) strList78);
        boolean boolean83 = strSet24.addAll((java.util.Collection<java.lang.String>) strList78);
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean88 = node87.isIf();
        boolean boolean89 = strSet24.equals((java.lang.Object) node87);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) -1, node87);
        int int91 = node90.getSourcePosition();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder92 = node90.new FileLevelJsDocBuilder();
        boolean boolean93 = node90.isNoSideEffectsCall();
        node16.addChildrenToFront(node90);
        java.lang.String str95 = node90.toStringTree();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strIterableList69);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "ERROR\n    NUMBER 40.0\n" + "'", str95, "ERROR\n    NUMBER 40.0\n");
    }

    @Test
    public void test07336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07336");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        boolean boolean5 = node3.isFor();
        java.lang.Object obj7 = node3.getProp(49);
        java.util.Set<java.lang.String> strSet8 = node3.getDirectives();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder9.append("NUMBER 10.0 50");
        fileLevelJsDocBuilder9.append("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        fileLevelJsDocBuilder9.append("Node tree inequality:\nTree1:\nNUMBER -1.0\n\n\nTree2:\nNULL\n\n\nSubtree1: NUMBER -1.0\n\n\nSubtree2: NULL\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(strSet8);
    }

    @Test
    public void test07337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07337");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        boolean boolean42 = strList39.contains((java.lang.Object) (short) -1);
        com.google.javascript.rhino.JSDocInfo.Marker marker43 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = marker43.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition45 = marker43.getAnnotation();
        boolean boolean46 = strList39.equals((java.lang.Object) marker43);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder48.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = null;
        jSDocInfoBuilder48.markName("hi!", staticSourceFile52, (int) (short) 0, (int) (short) 100);
        boolean boolean56 = jSDocInfoBuilder48.recordNoTypeCheck();
        boolean boolean57 = jSDocInfoBuilder48.recordExpose();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node61.addChildrenToFront(node65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = jSDocInfoBuilder48.build(node65);
        java.lang.String str68 = jSDocInfo67.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = jSDocInfo67.getTypedefType();
        java.lang.String str70 = jSDocInfo67.getLicense();
        boolean boolean71 = jSDocInfo67.isExport();
        java.lang.String str72 = jSDocInfo67.getBlockDescription();
        java.lang.String str73 = jSDocInfo67.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression74 = jSDocInfo67.getThisType();
        com.google.javascript.rhino.Node node75 = jSDocInfo67.getAssociatedNode();
        java.lang.String str76 = jSDocInfo67.getDescription();
        boolean boolean77 = strList39.equals((java.lang.Object) jSDocInfo67);
        boolean boolean78 = jSDocInfo67.isNoTypeCheck();
        java.lang.String str79 = jSDocInfo67.getDeprecationReason();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(typePosition44);
        org.junit.Assert.assertNull(stringPosition45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSDocInfo67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(jSTypeExpression69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(jSTypeExpression74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test07338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07338");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj16 = node14.getProp(43);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int21 = node20.getSourceOffset();
        com.google.javascript.rhino.Node node22 = node14.useSourceInfoIfMissingFromForTree(node20);
        int int23 = node14.getSourceOffset();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node14.getJSDocInfo();
        boolean boolean25 = node14.isIn();
        node3.addChildrenToFront(node14);
        boolean boolean27 = node3.isComma();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean31 = jSDocInfoBuilder29.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile33 = null;
        jSDocInfoBuilder29.markName("hi!", staticSourceFile33, (int) (short) 0, (int) (short) 100);
        boolean boolean37 = jSDocInfoBuilder29.recordNoTypeCheck();
        boolean boolean38 = jSDocInfoBuilder29.recordExpose();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node42.addChildrenToFront(node46);
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = jSDocInfoBuilder29.build(node46);
        boolean boolean49 = node46.isOptionalArg();
        com.google.javascript.rhino.Node node50 = node46.getParent();
        com.google.javascript.rhino.InputId inputId51 = null;
        node46.setInputId(inputId51);
        boolean boolean53 = node46.isNull();
        com.google.javascript.rhino.Node node54 = null;
        int int55 = node46.getIndexOfChild(node54);
        node46.setSourceFileForTesting("STRING  [length: 53]\n");
        com.google.javascript.rhino.Node[] nodeArray62 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(42, nodeArray62, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(39, nodeArray62, (int) '4', 32);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(176129, nodeArray62);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(35, nodeArray62);
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChildAfter(node46, node70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(nodeArray62);
    }

    @Test
    public void test07339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07339");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node23 = jSDocInfo20.getAssociatedNode();
        boolean boolean24 = node23.isDec();
        com.google.javascript.rhino.Node node25 = node23.detachFromParent();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder27 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean29 = jSDocInfoBuilder27.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        jSDocInfoBuilder27.markName("hi!", staticSourceFile31, (int) (short) 0, (int) (short) 100);
        boolean boolean35 = jSDocInfoBuilder27.recordNoTypeCheck();
        boolean boolean36 = jSDocInfoBuilder27.recordExpose();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node40.addChildrenToFront(node44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = jSDocInfoBuilder27.build(node44);
        java.lang.String str47 = jSDocInfo46.getMeaning();
        boolean boolean48 = jSDocInfo46.isExport();
        int int49 = jSDocInfo46.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo46.getExtendedInterfaces();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean55 = node54.isVar();
        node54.putBooleanProp(30, false);
        boolean boolean59 = node54.isSwitch();
        boolean boolean60 = node54.isIn();
        boolean boolean61 = node54.isFromExterns();
        com.google.javascript.rhino.Node node62 = node54.cloneNode();
        jSDocInfo46.setAssociatedNode(node62);
        boolean boolean64 = node62.isQuotedString();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean70 = node69.isVar();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj76 = node74.getProp(43);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int81 = node80.getSourceOffset();
        com.google.javascript.rhino.Node node82 = node74.useSourceInfoIfMissingFromForTree(node80);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray88 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        node86.setDirectives((java.util.Set<java.lang.String>) strSet89);
        com.google.javascript.rhino.Node node92 = node80.useSourceInfoIfMissingFromForTree(node86);
        boolean boolean93 = node86.isThrow();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node(35, node69, node86);
        java.lang.String str95 = node94.toString();
        boolean boolean96 = node94.isThrow();
        com.google.javascript.rhino.Node node97 = node94.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node25.addChildBefore(node62, node94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSDocInfo46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "GETELEM" + "'", str95, "GETELEM");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test07340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07340");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isFromExterns();
        boolean boolean6 = node3.isFunction();
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        node3.setOptionalArg(false);
        node3.setSourceEncodedPositionForTree(16);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
    }

    @Test
    public void test07341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07341");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 0);
        boolean boolean2 = node1.isAnd();
        boolean boolean3 = node1.isNoSideEffectsCall();
        boolean boolean4 = node1.hasChildren();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07342");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNull();
        node3.putIntProp(1, (int) (byte) 0);
        boolean boolean8 = node3.isIf();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = node3.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07343");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 52, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = new com.google.javascript.rhino.JSTypeExpression(node3, "NUMBER 0.0 43 [directives: []]\n");
        boolean boolean6 = node3.isAssign();
        boolean boolean7 = node3.isFromExterns();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean12 = node11.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node13 = node11.cloneNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoIfMissingFromForTree(node23);
        boolean boolean26 = node25.isIf();
        boolean boolean27 = node25.isAnd();
        node25.detachChildren();
        com.google.javascript.rhino.Node node29 = node13.useSourceInfoIfMissingFromForTree(node25);
        node13.setOptionalArg(true);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean37 = node36.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node38 = node36.cloneNode();
        boolean boolean39 = node38.isGetElem();
        node38.addSuppression("");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int46 = node45.getSourceOffset();
        boolean boolean47 = node45.isBreak();
        int int48 = node45.getSourcePosition();
        com.google.javascript.rhino.Node node49 = node38.useSourceInfoFrom(node45);
        com.google.javascript.rhino.Node node50 = node45.getFirstChild();
        boolean boolean51 = node45.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(16, node45, 0, 176129);
        boolean boolean55 = node54.isNumber();
        com.google.javascript.rhino.Node node56 = node13.copyInformationFrom(node54);
        com.google.javascript.rhino.Node node57 = node56.cloneNode();
        boolean boolean58 = node56.isReturn();
        node3.addChildrenToBack(node56);
        java.lang.Class<?> wildcardClass60 = node56.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 176129 + "'", int48 == 176129);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test07344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07344");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(23, "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", 0, 176180);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test07345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07345");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isUnscopedQualifiedName();
        boolean boolean10 = node3.isName();
        node3.setWasEmptyNode(false);
        boolean boolean13 = node3.isArrayLit();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int24 = node23.getSourceOffset();
        com.google.javascript.rhino.Node node25 = node17.useSourceInfoIfMissingFromForTree(node23);
        node17.setIsSyntheticBlock(true);
        boolean boolean28 = node17.isBlock();
        com.google.javascript.rhino.Node node29 = node3.clonePropsFrom(node17);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node17.getAncestors();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder32.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = null;
        jSDocInfoBuilder32.markName("hi!", staticSourceFile36, (int) (short) 0, (int) (short) 100);
        boolean boolean40 = jSDocInfoBuilder32.recordNoTypeCheck();
        boolean boolean41 = jSDocInfoBuilder32.recordExpose();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node45.addChildrenToFront(node49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = jSDocInfoBuilder32.build(node49);
        boolean boolean52 = jSDocInfo51.isConstructor();
        boolean boolean53 = jSDocInfo51.isDefine();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo51.getParameterNames();
        node17.setJSDocInfo(jSDocInfo51);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSDocInfo51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet54);
    }

    @Test
    public void test07346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07346");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection33 = jSDocInfo20.getMarkers();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection34 = jSDocInfo20.getMarkers();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.lang.Object[] objArray44 = strSet41.toArray();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        node48.setDirectives((java.util.Set<java.lang.String>) strSet51);
        java.lang.Object[] objArray54 = strSet51.toArray();
        boolean boolean55 = strSet41.retainAll((java.util.Collection<java.lang.String>) strSet51);
        java.lang.Object[] objArray56 = strSet41.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder58.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        jSDocInfoBuilder58.markName("hi!", staticSourceFile62, (int) (short) 0, (int) (short) 100);
        boolean boolean66 = jSDocInfoBuilder58.recordNoTypeCheck();
        boolean boolean67 = jSDocInfoBuilder58.recordExpose();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node71.addChildrenToFront(node75);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = jSDocInfoBuilder58.build(node75);
        java.lang.String str78 = jSDocInfo77.getMeaning();
        boolean boolean79 = jSDocInfo77.isExport();
        boolean boolean80 = strSet41.equals((java.lang.Object) jSDocInfo77);
        boolean boolean81 = jSDocInfo77.isNoAlias();
        java.lang.String str82 = jSDocInfo77.getMeaning();
        java.lang.String str83 = jSDocInfo77.getMeaning();
        boolean boolean84 = jSDocInfo77.hasThisType();
        java.lang.String str85 = jSDocInfo77.getLendsName();
        boolean boolean86 = jSDocInfo77.isImplicitCast();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility87 = jSDocInfo77.getVisibility();
        jSDocInfo20.setVisibility(visibility87);
        boolean boolean89 = jSDocInfo20.isIdGenerator();
        boolean boolean90 = jSDocInfo20.isExport();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertNotNull(markerCollection33);
        org.junit.Assert.assertNotNull(markerCollection34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(jSDocInfo77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + visibility87 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility87.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test07347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07347");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.stream.Stream<java.lang.String> strStream11 = strList8.stream();
        boolean boolean12 = strList8.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            strList8.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07348");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        boolean boolean6 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordReturnDescription("GETELEM  43\n");
        boolean boolean10 = jSDocInfoBuilder1.recordLends("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nBITXOR 0\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: BITXOR 0\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07349");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node9 = node3.copyInformationFromForTree(node8);
        boolean boolean10 = node9.isVarArgs();
        int int11 = node9.getSideEffectFlags();
        com.google.javascript.rhino.Node node12 = node9.getLastSibling();
        boolean boolean13 = node12.isFalse();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07350");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        jSDocInfoBuilder1.markText("[, hi!, , , hi!, , hi!, ]", 44, 49, 176129, 10);
        boolean boolean12 = jSDocInfoBuilder1.recordDescription("");
        boolean boolean13 = jSDocInfoBuilder1.recordHiddenness();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        jSDocInfoBuilder15.markName("hi!", staticSourceFile19, (int) (short) 0, (int) (short) 100);
        boolean boolean23 = jSDocInfoBuilder15.recordNoTypeCheck();
        boolean boolean24 = jSDocInfoBuilder15.recordExpose();
        com.google.common.collect.ImmutableList<java.lang.String> strList33 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int35 = strList33.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList44 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int46 = strList44.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList55 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList65 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList33, (java.lang.Iterable<java.lang.String>) strList44, (java.lang.Iterable<java.lang.String>) strList55, (java.lang.Iterable<java.lang.String>) strList64);
        boolean boolean66 = jSDocInfoBuilder15.recordTemplateTypeNames((java.util.List<java.lang.String>) strList64);
        boolean boolean67 = strList64.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator68 = strList64.spliterator();
        boolean boolean69 = jSDocInfoBuilder1.recordTemplateTypeNames((java.util.List<java.lang.String>) strList64);
        java.util.Collection<java.lang.String> strCollection70 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = strList64.addAll(strCollection70);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(strIterableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strSpliterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test07351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07351");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = jSDocInfo42.getTemplateTypeNames();
        java.util.ListIterator<java.lang.String> strItor51 = strList50.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor52 = strList50.listIterator();
        boolean boolean53 = strList50.isEmpty();
        java.lang.Object[] objArray54 = strList50.toArray();
        java.lang.Object[] objArray55 = strList50.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder57 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder57.recordJavaDispatch();
        boolean boolean59 = jSDocInfoBuilder57.recordNoCompile();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj66 = node64.getProp(43);
        boolean boolean67 = node64.isCall();
        boolean boolean68 = node64.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = new com.google.javascript.rhino.JSTypeExpression(node64, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder71 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray73 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray74 = (java.util.ArrayList<java.lang.String>[]) arrayListArray73;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder75 = strListBuilder71.add((java.util.ArrayList<java.lang.String>[]) arrayListArray73);
        boolean boolean76 = jSTypeExpression70.equals((java.lang.Object) arrayListArray73);
        boolean boolean77 = jSDocInfoBuilder57.recordParameter("", jSTypeExpression70);
        jSDocInfoBuilder57.markAnnotation("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nTYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: TYPEOF\n    NUMBER 0.0 43\n        STRING  43\n    NUMBER 0.0 43\n", (int) (short) 1, 15);
        boolean boolean82 = jSDocInfoBuilder57.isPopulatedWithFileOverview();
        int int83 = strList50.lastIndexOf((java.lang.Object) boolean82);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(26, 0, 39);
        boolean boolean88 = strList50.equals((java.lang.Object) 39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = strList50.remove(45055);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strListBuilder71);
        org.junit.Assert.assertNotNull(arrayListArray73);
        org.junit.Assert.assertNotNull(strListArray74);
        org.junit.Assert.assertNotNull(strListBuilder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test07352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07352");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo42.getThisType();
        int int76 = jSDocInfo42.getParameterCount();
        boolean boolean77 = jSDocInfo42.hasThisType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test07353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07353");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        boolean boolean11 = node10.isIf();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean24 = node23.isAssignAdd();
        boolean boolean25 = node23.isEmpty();
        node23.setSourceEncodedPosition(40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean32 = node31.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray38 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        node36.setDirectives((java.util.Set<java.lang.String>) strSet39);
        java.lang.Object obj43 = node36.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = node31.copyInformationFrom(node36);
        boolean boolean45 = node31.isOr();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(1, node4, node10, node23, node31, 176180, 1);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = node4.getExistingIntProp(51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 51");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test07354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07354");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.isExterns();
        boolean boolean26 = jSDocInfo20.isHidden();
        java.lang.String str27 = jSDocInfo20.getMeaning();
        boolean boolean28 = jSDocInfo20.isExterns();
        boolean boolean29 = jSDocInfo20.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07355");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean4 = jSDocInfoBuilder1.addAuthor("");
        boolean boolean5 = jSDocInfoBuilder1.recordExpose();
        boolean boolean7 = jSDocInfoBuilder1.recordMeaning("STRING  43");
        boolean boolean8 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean9 = jSDocInfoBuilder1.recordConstructor();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test07356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07356");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        boolean boolean23 = jSDocInfo20.isConsistentIdGenerator();
        boolean boolean24 = jSDocInfo20.isIdGenerator();
        java.lang.String str25 = jSDocInfo20.getFileOverview();
        com.google.common.collect.ImmutableList<java.lang.String> strList26 = jSDocInfo20.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection27 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = strList26.addAll(strCollection27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(strList26);
    }

    @Test
    public void test07357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07357");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = node18.isOptionalArg();
        com.google.javascript.rhino.Node node22 = node18.getParent();
        boolean boolean23 = node18.isRegExp();
        int int24 = node18.getChildCount();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = node18.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(staticSourceFile25);
    }

    @Test
    public void test07358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07358");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder0 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        boolean boolean7 = node4.isCall();
        boolean boolean8 = node4.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = new com.google.javascript.rhino.JSTypeExpression(node4, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder11 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray13 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray14 = (java.util.ArrayList<java.lang.String>[]) arrayListArray13;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder15 = strListBuilder11.add((java.util.ArrayList<java.lang.String>[]) arrayListArray13);
        boolean boolean16 = jSTypeExpression10.equals((java.lang.Object) arrayListArray13);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder17 = strListBuilder0.add((java.util.ArrayList<java.lang.String>[]) arrayListArray13);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder18 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray20 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray21 = (java.util.ArrayList<java.lang.String>[]) arrayListArray20;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder22 = strListBuilder18.add((java.util.ArrayList<java.lang.String>[]) arrayListArray20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        boolean boolean29 = node26.isCall();
        boolean boolean30 = node26.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = new com.google.javascript.rhino.JSTypeExpression(node26, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray35 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray36 = (java.util.ArrayList<java.lang.String>[]) arrayListArray35;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder37 = strListBuilder33.add((java.util.ArrayList<java.lang.String>[]) arrayListArray35);
        boolean boolean38 = jSTypeExpression32.equals((java.lang.Object) arrayListArray35);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj45 = node43.getProp(43);
        boolean boolean46 = node43.isCall();
        boolean boolean47 = node43.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node43, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder50 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray52 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray53 = (java.util.ArrayList<java.lang.String>[]) arrayListArray52;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder54 = strListBuilder50.add((java.util.ArrayList<java.lang.String>[]) arrayListArray52);
        boolean boolean55 = jSTypeExpression49.equals((java.lang.Object) arrayListArray52);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder56 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray52);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        boolean boolean64 = node61.isCall();
        boolean boolean65 = node61.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = new com.google.javascript.rhino.JSTypeExpression(node61, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder68 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray70 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray71 = (java.util.ArrayList<java.lang.String>[]) arrayListArray70;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder72 = strListBuilder68.add((java.util.ArrayList<java.lang.String>[]) arrayListArray70);
        boolean boolean73 = jSTypeExpression67.equals((java.lang.Object) arrayListArray70);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder74 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray70);
        com.google.common.collect.ImmutableList<java.util.ArrayList[]> arrayListArrayList75 = com.google.common.collect.ImmutableList.of(arrayListArray20, arrayListArray35, arrayListArray52, arrayListArray70);
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder76 = strListBuilder0.add((java.util.ArrayList<java.lang.String>[]) arrayListArray70);
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList77 = strListBuilder0.build();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList78 = strListBuilder0.build();
        org.junit.Assert.assertNotNull(strListBuilder0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strListBuilder11);
        org.junit.Assert.assertNotNull(arrayListArray13);
        org.junit.Assert.assertNotNull(strListArray14);
        org.junit.Assert.assertNotNull(strListBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strListBuilder17);
        org.junit.Assert.assertNotNull(strListBuilder18);
        org.junit.Assert.assertNotNull(arrayListArray20);
        org.junit.Assert.assertNotNull(strListArray21);
        org.junit.Assert.assertNotNull(strListBuilder22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertNotNull(arrayListArray35);
        org.junit.Assert.assertNotNull(strListArray36);
        org.junit.Assert.assertNotNull(strListBuilder37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strListBuilder50);
        org.junit.Assert.assertNotNull(arrayListArray52);
        org.junit.Assert.assertNotNull(strListArray53);
        org.junit.Assert.assertNotNull(strListBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strListBuilder56);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strListBuilder68);
        org.junit.Assert.assertNotNull(arrayListArray70);
        org.junit.Assert.assertNotNull(strListArray71);
        org.junit.Assert.assertNotNull(strListBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strListBuilder74);
        org.junit.Assert.assertNotNull(arrayListArrayList75);
        org.junit.Assert.assertNotNull(strListBuilder76);
        org.junit.Assert.assertNotNull(strListList77);
        org.junit.Assert.assertNotNull(strListList78);
    }

    @Test
    public void test07359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07359");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        boolean boolean23 = jSDocInfo20.isConsistentIdGenerator();
        java.lang.String str24 = jSDocInfo20.getReturnDescription();
        boolean boolean25 = jSDocInfo20.isDeprecated();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo20.getModifies();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString((int) ' ', "");
        boolean boolean30 = node29.isNew();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node29.getJSDocInfo();
        boolean boolean32 = strSet26.contains((java.lang.Object) node29);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test07360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07360");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isFromExterns();
        boolean boolean6 = node3.isFunction();
        com.google.javascript.rhino.Node node7 = node3.cloneTree();
        int int8 = node3.getSourcePosition();
        boolean boolean9 = node3.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 176180 + "'", int8 == 176180);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test07361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07361");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean5 = jSDocInfoBuilder1.recordLends("");
        boolean boolean6 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean7 = jSDocInfoBuilder1.recordOverride();
        boolean boolean8 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean9 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07362");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isVar();
        node3.putBooleanProp(30, false);
        boolean boolean8 = node3.isSwitch();
        boolean boolean9 = node3.isIn();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray25 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        node23.setDirectives((java.util.Set<java.lang.String>) strSet26);
        java.lang.Object[] objArray29 = strSet26.toArray();
        boolean boolean30 = strSet16.retainAll((java.util.Collection<java.lang.String>) strSet26);
        strSet26.clear();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray37 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        node35.setDirectives((java.util.Set<java.lang.String>) strSet38);
        java.lang.Object[] objArray41 = strSet38.toArray();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray47 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        node45.setDirectives((java.util.Set<java.lang.String>) strSet48);
        java.lang.Object[] objArray51 = strSet48.toArray();
        boolean boolean52 = strSet38.retainAll((java.util.Collection<java.lang.String>) strSet48);
        boolean boolean53 = strSet26.removeAll((java.util.Collection<java.lang.String>) strSet38);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet38);
        int int55 = strSet38.size();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder56 = new com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>>();
        com.google.common.collect.ImmutableList<java.util.ArrayList<java.lang.String>> strListList57 = strListBuilder56.build();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        boolean boolean62 = strList60.isEmpty();
        java.util.Iterator<java.lang.String> strItor63 = strList60.iterator();
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder64 = strListBuilder56.add(strList60);
        boolean boolean65 = strSet38.containsAll((java.util.Collection<java.lang.String>) strList60);
        java.util.Spliterator<java.lang.String> strSpliterator66 = strSet38.spliterator();
        boolean boolean68 = strSet38.add("NUMBER 0.0 [directives: []]");
        java.util.Spliterator<java.lang.String> strSpliterator69 = strSet38.spliterator();
        int int70 = strSet38.size();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(strListList57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strListBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strSpliterator69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
    }

    @Test
    public void test07363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07363");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getReturnType();
        java.lang.String str25 = jSDocInfo20.getSourceName();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection26 = jSDocInfo20.getMarkers();
        boolean boolean27 = jSDocInfo20.isNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo20.getImplementedInterfaces();
        boolean boolean30 = jSDocInfo20.isDeprecated();
        java.lang.String str31 = jSDocInfo20.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(markerCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test07364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07364");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        boolean boolean23 = jSDocInfo20.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        boolean boolean25 = jSDocInfo20.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test07365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07365");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo14.getParameterNames();
        boolean boolean19 = strSet18.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test07366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07366");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        boolean boolean10 = strSet7.equals((java.lang.Object) (-1));
        boolean boolean11 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet7);
        boolean boolean12 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean13 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07367");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isOverride();
        boolean boolean19 = jSDocInfo14.isExport();
        java.lang.String str20 = jSDocInfo14.getLendsName();
        com.google.javascript.rhino.Node node21 = jSDocInfo14.getAssociatedNode();
        boolean boolean22 = node21.isTrue();
        boolean boolean23 = node21.isDo();
        node21.setSourceFileForTesting("[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07368");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        boolean boolean5 = jSDocInfoBuilder1.recordExport();
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", (int) (byte) -1, 31, 49, 12);
        boolean boolean12 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean13 = jSDocInfoBuilder1.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder15.recordParameter("hi!", jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder15.recordHiddenness();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.recordJavaDispatch();
        jSDocInfoBuilder22.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        boolean boolean30 = jSDocInfoBuilder22.shouldParseDocumentation();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.isInterfaceRecorded();
        boolean boolean35 = jSDocInfoBuilder32.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj41 = node39.getProp(43);
        boolean boolean42 = node39.isCall();
        boolean boolean43 = node39.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = new com.google.javascript.rhino.JSTypeExpression(node39, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder46 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray48 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray49 = (java.util.ArrayList<java.lang.String>[]) arrayListArray48;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder50 = strListBuilder46.add((java.util.ArrayList<java.lang.String>[]) arrayListArray48);
        boolean boolean51 = jSTypeExpression45.equals((java.lang.Object) arrayListArray48);
        boolean boolean52 = jSDocInfoBuilder32.recordDefineType(jSTypeExpression45);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition53 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int54 = namePosition53.getEndLine();
        int int55 = namePosition53.getStartLine();
        com.google.javascript.rhino.Node node56 = namePosition53.getItem();
        boolean boolean57 = jSTypeExpression45.equals((java.lang.Object) node56);
        boolean boolean58 = jSTypeExpression45.isVarArgs();
        boolean boolean59 = jSDocInfoBuilder22.recordTypedef(jSTypeExpression45);
        boolean boolean61 = jSDocInfoBuilder15.recordThrowDescription(jSTypeExpression45, "NUMBER 12.0\n");
        boolean boolean62 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression45);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strListBuilder46);
        org.junit.Assert.assertNotNull(arrayListArray48);
        org.junit.Assert.assertNotNull(strListArray49);
        org.junit.Assert.assertNotNull(strListBuilder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test07369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07369");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordDeprecationReason("Node tree inequality:\nTree1:\nNUMBER 12.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 12.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test07370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07370");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        int int23 = jSDocInfo20.getParameterCount();
        boolean boolean24 = jSDocInfo20.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getParameterNames();
        boolean boolean26 = jSDocInfo20.isNoAlias();
        boolean boolean27 = jSDocInfo20.isNoSideEffects();
        boolean boolean28 = jSDocInfo20.isHidden();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) '4');
        node30.setDouble((double) 38);
        jSDocInfo20.setAssociatedNode(node30);
        boolean boolean34 = jSDocInfo20.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test07371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07371");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        boolean boolean14 = node13.isFor();
        boolean boolean15 = node13.isNull();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj21 = node19.getProp(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int26 = node25.getSourceOffset();
        com.google.javascript.rhino.Node node27 = node19.useSourceInfoIfMissingFromForTree(node25);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        node31.setDirectives((java.util.Set<java.lang.String>) strSet34);
        com.google.javascript.rhino.Node node37 = node25.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node39 = node37.cloneTree();
        node13.addChildToBack(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = jSDocInfoBuilder1.build(node37);
        boolean boolean42 = node37.hasOneChild();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSDocInfo41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test07372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07372");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 37, 167974, 147494);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test07373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07373");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.setIsSyntheticBlock(true);
        boolean boolean7 = node4.isReturn();
        boolean boolean8 = node4.isCatch();
        boolean boolean9 = node4.isStringKey();
        boolean boolean10 = node4.isBlock();
        boolean boolean11 = node4.isBlock();
        boolean boolean12 = node4.isFor();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj18 = node16.getProp(43);
        boolean boolean19 = node16.isCall();
        int int20 = node16.getSourcePosition();
        node16.setWasEmptyNode(true);
        node4.addChildrenToBack(node16);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        boolean boolean30 = node27.isCall();
        boolean boolean31 = node27.isQuotedString();
        boolean boolean32 = node27.isObjectLit();
        boolean boolean33 = node27.isOr();
        boolean boolean34 = node27.isNull();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int39 = node38.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType40 = node38.getJSType();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder41 = node38.getJsDocBuilderForNode();
        node38.putBooleanProp(30, false);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node38.getJsDocBuilderForNode();
        java.lang.String str46 = node27.checkTreeEquals(node38);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        int int54 = node50.getSourcePosition();
        java.lang.String str58 = node50.toString(false, true, false);
        boolean boolean59 = node50.isNot();
        boolean boolean60 = node50.isString();
        com.google.javascript.rhino.Node node61 = node50.getLastSibling();
        boolean boolean62 = node50.isParamList();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(46, node4, node38, node50, 39, 35);
        boolean boolean66 = node38.isDo();
        boolean boolean67 = node38.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 176180 + "'", int20 == 176180);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNull(jSType40);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder41);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n" + "'", str46, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 176180 + "'", int54 == 176180);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "STRING " + "'", str58, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test07374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07374");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor9 = strList8.iterator();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj15 = node13.getProp(43);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int20 = node19.getSourceOffset();
        com.google.javascript.rhino.Node node21 = node13.useSourceInfoIfMissingFromForTree(node19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray27 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet28);
        com.google.javascript.rhino.Node node31 = node19.useSourceInfoIfMissingFromForTree(node25);
        boolean boolean32 = node31.isLabel();
        boolean boolean33 = strList8.contains((java.lang.Object) boolean32);
        java.lang.Object[] objArray34 = strList8.toArray();
        java.lang.String str35 = strList8.toString();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition36 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int37 = namePosition36.getEndLine();
        int int38 = namePosition36.getStartLine();
        com.google.javascript.rhino.Node node39 = namePosition36.getItem();
        int int40 = namePosition36.getStartLine();
        int int41 = strList8.lastIndexOf((java.lang.Object) namePosition36);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList42 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition36);
        int int43 = namePosition36.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str35, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(nodeSourcePositionList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test07375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07375");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        jSDocInfoBuilder1.markText("[, hi!, , , hi!, , hi!, ]", 44, 49, 176129, 10);
        boolean boolean11 = jSDocInfoBuilder1.recordExpose();
        boolean boolean12 = jSDocInfoBuilder1.recordExpose();
        boolean boolean14 = jSDocInfoBuilder1.hasParameter("JSDocInfo");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder16 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder16.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder16.recordThisType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder16.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        boolean boolean24 = jSDocInfoBuilder22.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder26 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean27 = jSDocInfoBuilder26.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = null;
        boolean boolean30 = jSDocInfoBuilder26.recordParameter("", jSTypeExpression29);
        boolean boolean31 = jSDocInfoBuilder26.recordExterns();
        boolean boolean32 = jSDocInfoBuilder26.recordPreserveTry();
        boolean boolean33 = jSDocInfoBuilder26.recordNoCompile();
        boolean boolean35 = jSDocInfoBuilder26.recordLends("");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder37 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean38 = jSDocInfoBuilder37.recordJavaDispatch();
        jSDocInfoBuilder37.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder46 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean47 = jSDocInfoBuilder46.recordJavaDispatch();
        boolean boolean48 = jSDocInfoBuilder46.recordNoCompile();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        boolean boolean56 = node53.isCall();
        boolean boolean57 = node53.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression59 = new com.google.javascript.rhino.JSTypeExpression(node53, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder60 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray62 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray63 = (java.util.ArrayList<java.lang.String>[]) arrayListArray62;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder64 = strListBuilder60.add((java.util.ArrayList<java.lang.String>[]) arrayListArray62);
        boolean boolean65 = jSTypeExpression59.equals((java.lang.Object) arrayListArray62);
        boolean boolean66 = jSDocInfoBuilder46.recordParameter("", jSTypeExpression59);
        boolean boolean67 = jSDocInfoBuilder37.recordThrowType(jSTypeExpression59);
        boolean boolean68 = jSDocInfoBuilder26.recordBaseType(jSTypeExpression59);
        boolean boolean69 = jSDocInfoBuilder22.recordTypedef(jSTypeExpression59);
        boolean boolean70 = jSDocInfoBuilder16.recordEnumParameterType(jSTypeExpression59);
        boolean boolean71 = jSDocInfoBuilder1.recordThisType(jSTypeExpression59);
        boolean boolean73 = jSDocInfoBuilder1.addAuthor("NUMBER 0.0 43 [directives: []]\n");
        boolean boolean74 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strListBuilder60);
        org.junit.Assert.assertNotNull(arrayListArray62);
        org.junit.Assert.assertNotNull(strListArray63);
        org.junit.Assert.assertNotNull(strListBuilder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test07376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07376");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getReturnType();
        java.lang.String str25 = jSDocInfo20.getSourceName();
        boolean boolean26 = jSDocInfo20.isConstant();
        boolean boolean27 = jSDocInfo20.isNoCompile();
        boolean boolean28 = jSDocInfo20.hasFileOverview();
        boolean boolean29 = jSDocInfo20.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07377");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        boolean boolean13 = node12.isIf();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(49, node12, 0, 100);
        com.google.javascript.rhino.Node node17 = node16.getLastChild();
        boolean boolean18 = node17.isRegExp();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder20 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean22 = jSDocInfoBuilder20.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        jSDocInfoBuilder20.markName("hi!", staticSourceFile24, (int) (short) 0, (int) (short) 100);
        boolean boolean28 = jSDocInfoBuilder20.recordNoTypeCheck();
        boolean boolean29 = jSDocInfoBuilder20.recordExpose();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node33.addChildrenToFront(node37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = jSDocInfoBuilder20.build(node37);
        boolean boolean40 = node37.isOptionalArg();
        boolean boolean41 = node37.isGetProp();
        int int42 = node17.getIndexOfChild(node37);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(jSDocInfo39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test07378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07378");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        int int2 = stringPosition0.getPositionOnEndLine();
        java.lang.String str3 = stringPosition0.getItem();
        stringPosition0.setItem("");
        java.lang.String str6 = stringPosition0.getItem();
        stringPosition0.setPositionInformation((int) '#', 24, (int) 'a', 26);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test07379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07379");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo20.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(jSTypeExpression31);
    }

    @Test
    public void test07380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07380");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        jSDocInfoBuilder1.markAnnotation("STRING  43", 39, 47);
        boolean boolean25 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean26 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean27 = jSDocInfoBuilder1.isPopulated();
        boolean boolean28 = jSDocInfoBuilder1.recordImplicitCast();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) (short) 10, 52, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node32, "NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder1.recordType(jSTypeExpression35);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = null;
        boolean boolean39 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression37, "Node tree inequality:\nTree1:\nNUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSTypeExpression35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test07381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07381");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.AncestorIterable[]> ancestorIterableArrayList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(ancestorIterableArrayList0);
    }

    @Test
    public void test07382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07382");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder1.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        boolean boolean21 = node18.isCall();
        int int22 = node18.getSourcePosition();
        java.lang.String str26 = node18.toString(false, true, false);
        boolean boolean27 = node18.isDo();
        boolean boolean28 = node18.isWith();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = jSDocInfoBuilder1.build(node18);
        boolean boolean31 = jSDocInfoBuilder1.addAuthor("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder33.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = null;
        boolean boolean36 = jSDocInfoBuilder33.recordBaseType(jSTypeExpression35);
        boolean boolean38 = jSDocInfoBuilder33.recordVersion("NUMBER 0.0 43");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder40 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean41 = jSDocInfoBuilder40.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = null;
        boolean boolean44 = jSDocInfoBuilder40.recordParameter("", jSTypeExpression43);
        boolean boolean45 = jSDocInfoBuilder40.recordExterns();
        boolean boolean46 = jSDocInfoBuilder40.recordPreserveTry();
        boolean boolean47 = jSDocInfoBuilder40.recordNoCompile();
        boolean boolean49 = jSDocInfoBuilder40.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = null;
        boolean boolean51 = jSDocInfoBuilder40.recordType(jSTypeExpression50);
        boolean boolean52 = jSDocInfoBuilder40.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder54 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean55 = jSDocInfoBuilder54.isInterfaceRecorded();
        boolean boolean57 = jSDocInfoBuilder54.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj63 = node61.getProp(43);
        boolean boolean64 = node61.isCall();
        boolean boolean65 = node61.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = new com.google.javascript.rhino.JSTypeExpression(node61, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder68 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray70 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray71 = (java.util.ArrayList<java.lang.String>[]) arrayListArray70;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder72 = strListBuilder68.add((java.util.ArrayList<java.lang.String>[]) arrayListArray70);
        boolean boolean73 = jSTypeExpression67.equals((java.lang.Object) arrayListArray70);
        boolean boolean74 = jSDocInfoBuilder54.recordDefineType(jSTypeExpression67);
        boolean boolean75 = jSDocInfoBuilder40.recordBaseType(jSTypeExpression67);
        boolean boolean76 = jSDocInfoBuilder33.recordThrowType(jSTypeExpression67);
        boolean boolean77 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression67);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression78 = null;
        boolean boolean79 = jSDocInfoBuilder1.recordThisType(jSTypeExpression78);
        boolean boolean80 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 176180 + "'", int22 == 176180);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING " + "'", str26, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSDocInfo29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strListBuilder68);
        org.junit.Assert.assertNotNull(arrayListArray70);
        org.junit.Assert.assertNotNull(strListArray71);
        org.junit.Assert.assertNotNull(strListBuilder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test07383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07383");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 43, (-1));
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = node3.getJSDocInfo();
        boolean boolean5 = node3.wasEmptyNode();
        org.junit.Assert.assertNull(jSDocInfo4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07384");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = marker0.getType();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(typePosition6);
    }

    @Test
    public void test07385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07385");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean10 = jSDocInfoBuilder1.recordNoAlias();
        boolean boolean13 = jSDocInfoBuilder1.recordParameterDescription("NUMBER 0.0 43\n    STRING  43\n", "NUMBER 0.0 43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder15.recordParameter("", jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder15.recordExterns();
        boolean boolean21 = jSDocInfoBuilder15.recordPreserveTry();
        boolean boolean22 = jSDocInfoBuilder15.recordNoCompile();
        boolean boolean24 = jSDocInfoBuilder15.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = null;
        boolean boolean26 = jSDocInfoBuilder15.recordType(jSTypeExpression25);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean28 = jSDocInfoBuilder15.recordVisibility(visibility27);
        boolean boolean29 = jSDocInfoBuilder1.recordVisibility(visibility27);
        boolean boolean30 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder32 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean33 = jSDocInfoBuilder32.isInterfaceRecorded();
        boolean boolean34 = jSDocInfoBuilder32.isPopulatedWithFileOverview();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder36 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean37 = jSDocInfoBuilder36.isInterfaceRecorded();
        boolean boolean39 = jSDocInfoBuilder36.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj45 = node43.getProp(43);
        boolean boolean46 = node43.isCall();
        boolean boolean47 = node43.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node43, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder50 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray52 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray53 = (java.util.ArrayList<java.lang.String>[]) arrayListArray52;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder54 = strListBuilder50.add((java.util.ArrayList<java.lang.String>[]) arrayListArray52);
        boolean boolean55 = jSTypeExpression49.equals((java.lang.Object) arrayListArray52);
        boolean boolean56 = jSDocInfoBuilder36.recordDefineType(jSTypeExpression49);
        boolean boolean57 = jSTypeExpression49.isVarArgs();
        java.lang.Object obj58 = null;
        boolean boolean59 = jSTypeExpression49.equals(obj58);
        boolean boolean60 = jSDocInfoBuilder32.recordEnumParameterType(jSTypeExpression49);
        boolean boolean61 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression49);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strListBuilder50);
        org.junit.Assert.assertNotNull(arrayListArray52);
        org.junit.Assert.assertNotNull(strListArray53);
        org.junit.Assert.assertNotNull(strListBuilder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test07386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07386");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        double double24 = node21.getDouble();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable25 = node21.siblings();
        boolean boolean26 = node21.isVar();
        boolean boolean27 = node21.isWhile();
        java.lang.String str28 = node21.toStringTree();
        boolean boolean29 = node21.isQualifiedName();
        node21.setSourceEncodedPosition(23);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertNotNull(nodeIterable25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NUMBER 0.0 43\n" + "'", str28, "NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07387");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.recordConstructor();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder5.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = null;
        jSDocInfoBuilder5.markName("hi!", staticSourceFile9, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = null;
        boolean boolean14 = jSDocInfoBuilder5.recordEnumParameterType(jSTypeExpression13);
        jSDocInfoBuilder5.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean17 = jSDocInfoBuilder5.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean20 = jSDocInfoBuilder19.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = null;
        boolean boolean22 = jSDocInfoBuilder19.recordThisType(jSTypeExpression21);
        boolean boolean24 = jSDocInfoBuilder19.addReference("hi!");
        boolean boolean25 = jSDocInfoBuilder19.recordPreserveTry();
        boolean boolean27 = jSDocInfoBuilder19.addAuthor("Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder29 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean30 = jSDocInfoBuilder29.recordJavaDispatch();
        jSDocInfoBuilder29.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder38 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean39 = jSDocInfoBuilder38.recordJavaDispatch();
        boolean boolean40 = jSDocInfoBuilder38.recordNoCompile();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj47 = node45.getProp(43);
        boolean boolean48 = node45.isCall();
        boolean boolean49 = node45.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression51 = new com.google.javascript.rhino.JSTypeExpression(node45, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder52 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray54 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray55 = (java.util.ArrayList<java.lang.String>[]) arrayListArray54;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder56 = strListBuilder52.add((java.util.ArrayList<java.lang.String>[]) arrayListArray54);
        boolean boolean57 = jSTypeExpression51.equals((java.lang.Object) arrayListArray54);
        boolean boolean58 = jSDocInfoBuilder38.recordParameter("", jSTypeExpression51);
        boolean boolean59 = jSDocInfoBuilder29.recordThrowType(jSTypeExpression51);
        boolean boolean60 = jSTypeExpression51.isVarArgs();
        boolean boolean61 = jSDocInfoBuilder19.recordThisType(jSTypeExpression51);
        boolean boolean62 = jSDocInfoBuilder5.recordThisType(jSTypeExpression51);
        boolean boolean63 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression51);
        boolean boolean64 = jSDocInfoBuilder1.shouldParseDocumentation();
        boolean boolean66 = jSDocInfoBuilder1.recordReturnDescription("NUMBER 0.0");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList67 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1);
        boolean boolean68 = jSDocInfoBuilder1.recordNoAlias();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strListBuilder52);
        org.junit.Assert.assertNotNull(arrayListArray54);
        org.junit.Assert.assertNotNull(strListArray55);
        org.junit.Assert.assertNotNull(strListBuilder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test07388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07388");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        boolean boolean47 = strSet6.contains((java.lang.Object) namePosition46);
        int int48 = strSet6.size();
        strSet6.clear();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test07389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07389");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(12, (-1), (int) (short) 10);
        boolean boolean4 = node3.isNot();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        boolean boolean6 = node3.isSetterDef();
        boolean boolean7 = node3.isString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07390");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.isInterfaceRecorded();
        boolean boolean28 = jSDocInfoBuilder25.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression38);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getEndLine();
        int int48 = namePosition46.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition46.getItem();
        boolean boolean50 = jSTypeExpression38.equals((java.lang.Object) node49);
        boolean boolean51 = jSDocInfoBuilder22.recordExtendedInterface(jSTypeExpression38);
        boolean boolean52 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression38);
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 0.0 43\n    STRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 0.0 43\n    STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean57 = jSDocInfoBuilder1.recordParameterDescription("STRING ", "hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.isInterfaceRecorded();
        boolean boolean62 = jSDocInfoBuilder59.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj68 = node66.getProp(43);
        boolean boolean69 = node66.isCall();
        boolean boolean70 = node66.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = new com.google.javascript.rhino.JSTypeExpression(node66, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder73 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray75 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray76 = (java.util.ArrayList<java.lang.String>[]) arrayListArray75;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder77 = strListBuilder73.add((java.util.ArrayList<java.lang.String>[]) arrayListArray75);
        boolean boolean78 = jSTypeExpression72.equals((java.lang.Object) arrayListArray75);
        boolean boolean79 = jSDocInfoBuilder59.recordDefineType(jSTypeExpression72);
        boolean boolean80 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression72);
        boolean boolean81 = jSTypeExpression72.isVarArgs();
        com.google.javascript.rhino.Node node82 = jSTypeExpression72.getRoot();
        boolean boolean83 = node82.isDelProp();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(obj68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strListBuilder73);
        org.junit.Assert.assertNotNull(arrayListArray75);
        org.junit.Assert.assertNotNull(strListArray76);
        org.junit.Assert.assertNotNull(strListBuilder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test07391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07391");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean5 = jSDocInfoBuilder1.recordDeprecationReason("hi!");
        jSDocInfoBuilder1.markAnnotation("", 47, (int) (byte) -1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder12 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean13 = jSDocInfoBuilder12.recordNoTypeCheck();
        boolean boolean15 = jSDocInfoBuilder12.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        boolean boolean16 = jSDocInfoBuilder12.recordPreserveTry();
        boolean boolean17 = jSDocInfoBuilder12.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder19 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean21 = jSDocInfoBuilder19.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        jSDocInfoBuilder19.markName("hi!", staticSourceFile23, (int) (short) 0, (int) (short) 100);
        boolean boolean27 = jSDocInfoBuilder19.recordNoTypeCheck();
        boolean boolean28 = jSDocInfoBuilder19.recordExpose();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node32.addChildrenToFront(node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = jSDocInfoBuilder19.build(node36);
        boolean boolean39 = jSDocInfoBuilder19.shouldParseDocumentation();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean44 = node43.isVar();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node49 = node43.copyInformationFromForTree(node48);
        com.google.javascript.rhino.Node node50 = node43.cloneTree();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression52 = new com.google.javascript.rhino.JSTypeExpression(node50, "STRING  43");
        boolean boolean53 = jSTypeExpression52.isVarArgs();
        boolean boolean54 = jSDocInfoBuilder19.recordBaseType(jSTypeExpression52);
        boolean boolean55 = jSDocInfoBuilder12.recordThisType(jSTypeExpression52);
        boolean boolean56 = jSDocInfoBuilder1.recordParameter("STRING  43 [var_args_name: 1]\n", jSTypeExpression52);
        jSDocInfoBuilder1.markText("Node tree inequality:\nTree1:\nSTRING  43\n    NUMBER 0.0 43\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING  43\n    NUMBER 0.0 43\n\n\nSubtree2: STRING  43\n", 1, 2, 49, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(jSDocInfo38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test07392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07392");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getStartLine();
        stringPosition0.setItem("[]");
        int int7 = stringPosition0.getEndLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test07393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07393");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        com.google.javascript.rhino.Node node11 = node4.getChildAtIndex(0);
        java.lang.String str12 = node11.toString();
        node11.setSourceEncodedPositionForTree((int) (byte) -1);
        boolean boolean15 = node11.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((-2147483596), node11, 4, (-2147483596));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  43" + "'", str12, "STRING  43");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07394");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isDelProp();
        boolean boolean14 = node3.isTrue();
        boolean boolean15 = node3.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType16 = node3.getJSType();
        boolean boolean17 = node3.isFromExterns();
        int int19 = node3.getIntProp(4);
        boolean boolean20 = node3.isFromExterns();
        boolean boolean21 = node3.isNull();
        java.lang.Class<?> wildcardClass22 = node3.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test07395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07395");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator11 = strList8.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList51 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList52 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList20, (java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList51);
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int63 = strList61.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator64 = strList61.spliterator();
        boolean boolean65 = strList31.equals((java.lang.Object) strList61);
        int int66 = strList8.indexOf((java.lang.Object) strList61);
        java.lang.String str67 = strList8.toString();
        java.util.ListIterator<java.lang.String> strItor69 = strList8.listIterator(0);
        java.util.stream.Stream<java.lang.String> strStream70 = strList8.parallelStream();
        java.lang.Object[] objArray71 = strList8.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = strList8.remove(147494);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strIterableList52);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[, hi!, , , hi!, , hi!, ]" + "'", str67, "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strStream70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test07396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07396");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        boolean boolean7 = node3.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = new com.google.javascript.rhino.JSTypeExpression(node3, "STRING ");
        boolean boolean10 = node3.isDo();
        com.google.javascript.rhino.Node node11 = node3.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(node11);
    }

    @Test
    public void test07397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07397");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node11.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node11);
        typePosition1.setItem(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean33 = node32.isAssignAdd();
        boolean boolean34 = node32.isFromExterns();
        com.google.javascript.rhino.Node node35 = node19.copyInformationFromForTree(node32);
        boolean boolean36 = node19.isDelProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        boolean boolean42 = node40.isFor();
        java.lang.Object obj44 = node40.getProp(49);
        java.util.Set<java.lang.String> strSet45 = node40.getDirectives();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordNoTypeCheck();
        boolean boolean49 = jSDocInfoBuilder47.isInterfaceRecorded();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        int int56 = node53.getType();
        boolean boolean57 = node53.isGetterDef();
        node53.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = jSDocInfoBuilder47.build(node53);
        boolean boolean61 = jSDocInfo60.isNoSideEffects();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo60.setAssociatedNode(node63);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(49, node19, node40, node63, (int) (short) 0, 36);
        java.lang.String str68 = node67.getSourceFileName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSDocInfo60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test07398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07398");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", (int) (short) 10, 48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder10.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder10.markName("hi!", staticSourceFile14, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder10.recordEnumParameterType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder10.recordConstructor();
        boolean boolean21 = jSDocInfoBuilder10.recordNoTypeCheck();
        boolean boolean22 = jSDocInfoBuilder10.isConstructorRecorded();
        boolean boolean23 = jSDocInfoBuilder10.isDescriptionRecorded();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        boolean boolean35 = jSDocInfoBuilder10.recordParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder1.recordType(jSTypeExpression34);
        boolean boolean38 = jSDocInfoBuilder1.recordLends("[, hi!, , hi!, , , hi!, ]");
        boolean boolean40 = jSDocInfoBuilder1.recordReturnDescription("");
        boolean boolean41 = jSDocInfoBuilder1.recordNoAlias();
        jSDocInfoBuilder1.markText("NUMBER 0.0", 176180, 30, (int) (short) 100, 176180);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.isInterfaceRecorded();
        boolean boolean51 = jSDocInfoBuilder49.isPopulatedWithFileOverview();
        boolean boolean52 = jSDocInfoBuilder49.isPopulated();
        boolean boolean53 = jSDocInfoBuilder49.recordNoShadow();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder55 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = null;
        boolean boolean57 = jSDocInfoBuilder55.recordTypedef(jSTypeExpression56);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder59 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder59.recordNoTypeCheck();
        boolean boolean61 = jSDocInfoBuilder59.isInterfaceRecorded();
        jSDocInfoBuilder59.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean66 = jSDocInfoBuilder59.recordIdGenerator();
        boolean boolean67 = jSDocInfoBuilder59.recordNoAlias();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder69 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean70 = jSDocInfoBuilder69.isInterfaceRecorded();
        boolean boolean72 = jSDocInfoBuilder69.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj78 = node76.getProp(43);
        boolean boolean79 = node76.isCall();
        boolean boolean80 = node76.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = new com.google.javascript.rhino.JSTypeExpression(node76, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder83 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray85 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray86 = (java.util.ArrayList<java.lang.String>[]) arrayListArray85;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder87 = strListBuilder83.add((java.util.ArrayList<java.lang.String>[]) arrayListArray85);
        boolean boolean88 = jSTypeExpression82.equals((java.lang.Object) arrayListArray85);
        boolean boolean89 = jSDocInfoBuilder69.recordDefineType(jSTypeExpression82);
        boolean boolean90 = jSDocInfoBuilder59.recordThisType(jSTypeExpression82);
        boolean boolean91 = jSDocInfoBuilder55.recordThisType(jSTypeExpression82);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression92 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression82);
        boolean boolean93 = jSDocInfoBuilder49.recordExtendedInterface(jSTypeExpression92);
        com.google.javascript.rhino.Node node94 = jSTypeExpression92.getRoot();
        boolean boolean95 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression92);
        boolean boolean96 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strListBuilder83);
        org.junit.Assert.assertNotNull(arrayListArray85);
        org.junit.Assert.assertNotNull(strListArray86);
        org.junit.Assert.assertNotNull(strListBuilder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(jSTypeExpression92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test07399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07399");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(typePositionBuilder0);
    }

    @Test
    public void test07400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07400");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable9 = node3.siblings();
        node3.setDouble((double) 10);
        boolean boolean12 = node3.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(nodeIterable9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07401");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nERROR  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: ERROR  43\n", 16, 52);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test07402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07402");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType5 = node3.getJSType();
        boolean boolean6 = node3.isCall();
        node3.setSourceEncodedPosition(31);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test07403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07403");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder6 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean7 = jSDocInfoBuilder6.isInterfaceRecorded();
        boolean boolean9 = jSDocInfoBuilder6.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj15 = node13.getProp(43);
        boolean boolean16 = node13.isCall();
        boolean boolean17 = node13.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node13, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder20 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray22 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray23 = (java.util.ArrayList<java.lang.String>[]) arrayListArray22;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder24 = strListBuilder20.add((java.util.ArrayList<java.lang.String>[]) arrayListArray22);
        boolean boolean25 = jSTypeExpression19.equals((java.lang.Object) arrayListArray22);
        boolean boolean26 = jSDocInfoBuilder6.recordDefineType(jSTypeExpression19);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int28 = namePosition27.getEndLine();
        int int29 = namePosition27.getStartLine();
        com.google.javascript.rhino.Node node30 = namePosition27.getItem();
        boolean boolean31 = jSTypeExpression19.equals((java.lang.Object) node30);
        boolean boolean32 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression19);
        boolean boolean33 = jSDocInfoBuilder1.recordIdGenerator();
        jSDocInfoBuilder1.recordOriginalCommentString("STRING  43 [var_args_name: 1]\n");
        boolean boolean37 = jSDocInfoBuilder1.recordDeprecationReason("[]");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder39.recordJavaDispatch();
        jSDocInfoBuilder39.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        boolean boolean47 = jSDocInfoBuilder39.shouldParseDocumentation();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder49 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder49.isInterfaceRecorded();
        boolean boolean52 = jSDocInfoBuilder49.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj58 = node56.getProp(43);
        boolean boolean59 = node56.isCall();
        boolean boolean60 = node56.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression62 = new com.google.javascript.rhino.JSTypeExpression(node56, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder63 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray65 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray66 = (java.util.ArrayList<java.lang.String>[]) arrayListArray65;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder67 = strListBuilder63.add((java.util.ArrayList<java.lang.String>[]) arrayListArray65);
        boolean boolean68 = jSTypeExpression62.equals((java.lang.Object) arrayListArray65);
        boolean boolean69 = jSDocInfoBuilder49.recordDefineType(jSTypeExpression62);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition70 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int71 = namePosition70.getEndLine();
        int int72 = namePosition70.getStartLine();
        com.google.javascript.rhino.Node node73 = namePosition70.getItem();
        boolean boolean74 = jSTypeExpression62.equals((java.lang.Object) node73);
        boolean boolean75 = jSTypeExpression62.isVarArgs();
        boolean boolean76 = jSDocInfoBuilder39.recordTypedef(jSTypeExpression62);
        boolean boolean77 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression62);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strListBuilder20);
        org.junit.Assert.assertNotNull(arrayListArray22);
        org.junit.Assert.assertNotNull(strListArray23);
        org.junit.Assert.assertNotNull(strListBuilder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strListBuilder63);
        org.junit.Assert.assertNotNull(arrayListArray65);
        org.junit.Assert.assertNotNull(strListArray66);
        org.junit.Assert.assertNotNull(strListBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test07404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07404");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        jSDocInfoBuilder1.markAnnotation("[, hi!, , , hi!, , hi!, ]", (int) (short) 0, 2);
        boolean boolean8 = jSDocInfoBuilder1.isPopulated();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        jSDocInfoBuilder1.markName("NUMBER 0.0 [directives: []]", staticSourceFile10, 37, (int) '#');
        boolean boolean14 = jSDocInfoBuilder1.isDescriptionRecorded();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07405");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        java.lang.String str26 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.Node node27 = jSDocInfo20.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getEnumParameterType();
        boolean boolean29 = jSDocInfo20.isNoShadow();
        boolean boolean30 = jSDocInfo20.isOverride();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo20.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertNull(jSTypeExpression32);
    }

    @Test
    public void test07406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07406");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        java.lang.String str37 = node34.toString();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node41.addChildrenToFront(node45);
        node45.setQuotedString();
        boolean boolean48 = node45.isHook();
        int int49 = node45.getType();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        int int56 = node53.getType();
        boolean boolean57 = node53.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node58 = node45.useSourceInfoIfMissingFromForTree(node53);
        boolean boolean59 = node34.hasChild(node58);
        boolean boolean60 = node58.isBreak();
        boolean boolean61 = node58.isLocalResultCall();
        boolean boolean62 = node58.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "TYPEOF" + "'", str37, "TYPEOF");
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test07407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07407");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        jSDocInfo20.setLicense("hi!");
        java.lang.String str33 = jSDocInfo20.getBlockDescription();
        int int34 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean35 = jSDocInfo20.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo20.getImplementedInterfaces();
        boolean boolean37 = jSDocInfo20.containsDeclaration();
        boolean boolean38 = jSDocInfo20.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo20.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
    }

    @Test
    public void test07408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07408");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node15.isThrow();
        boolean boolean23 = node15.isNot();
        node15.setWasEmptyNode(true);
        int int26 = node15.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test07409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07409");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean4 = node3.isNull();
        boolean boolean5 = node3.isDebugger();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node3.setJSType(jSType6);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder9 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder9.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        jSDocInfoBuilder9.markName("hi!", staticSourceFile13, (int) (short) 0, (int) (short) 100);
        boolean boolean17 = jSDocInfoBuilder9.recordNoTypeCheck();
        boolean boolean18 = jSDocInfoBuilder9.recordExpose();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node22.addChildrenToFront(node26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = jSDocInfoBuilder9.build(node26);
        boolean boolean29 = jSDocInfo28.isConstructor();
        java.util.Collection<java.lang.String> strCollection30 = jSDocInfo28.getAuthors();
        node3.setJSDocInfo(jSDocInfo28);
        java.lang.String str32 = jSDocInfo28.getSourceName();
        int int33 = jSDocInfo28.getExtendedInterfacesCount();
        boolean boolean34 = jSDocInfo28.hasTypedefType();
        boolean boolean36 = jSDocInfo28.hasParameterType("NUMBER 0.0 43");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strCollection30);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test07410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07410");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean2 = typePosition1.hasBrackets();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean7 = node6.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray13 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        node11.setDirectives((java.util.Set<java.lang.String>) strSet14);
        java.lang.Object obj18 = node11.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node19 = node6.copyInformationFrom(node11);
        typePosition1.setItem(node19);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj26 = node24.getProp(43);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int31 = node30.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node24.useSourceInfoIfMissingFromForTree(node30);
        boolean boolean33 = node32.isAssignAdd();
        boolean boolean34 = node32.isFromExterns();
        com.google.javascript.rhino.Node node35 = node19.copyInformationFromForTree(node32);
        boolean boolean36 = node19.isDelProp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        boolean boolean42 = node40.isFor();
        java.lang.Object obj44 = node40.getProp(49);
        java.util.Set<java.lang.String> strSet45 = node40.getDirectives();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder47 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean48 = jSDocInfoBuilder47.recordNoTypeCheck();
        boolean boolean49 = jSDocInfoBuilder47.isInterfaceRecorded();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj55 = node53.getProp(43);
        int int56 = node53.getType();
        boolean boolean57 = node53.isGetterDef();
        node53.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = jSDocInfoBuilder47.build(node53);
        boolean boolean61 = jSDocInfo60.isNoSideEffects();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 12);
        jSDocInfo60.setAssociatedNode(node63);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(49, node19, node40, node63, (int) (short) 0, 36);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression69 = new com.google.javascript.rhino.JSTypeExpression(node19, "Node tree inequality:\nTree1:\nSTRING \n\n\nTree2:\nNUMBER 0.0 43 [directives: []]\n\n\nSubtree1: STRING \n\n\nSubtree2: NUMBER 0.0 43 [directives: []]\n");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSDocInfo60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test07411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07411");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(176129);
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07412");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int4 = node3.getSourceOffset();
        boolean boolean5 = node3.isWhile();
        com.google.javascript.rhino.Node node6 = node3.getParent();
        // The following exception was thrown during execution in test generation
        try {
            node6.setSourceEncodedPosition((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(node6);
    }

    @Test
    public void test07413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07413");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 43, (-1));
        node3.detachChildren();
        boolean boolean5 = node3.isWith();
        int int6 = node3.getChildCount();
        boolean boolean7 = node3.isLabel();
        int int8 = node3.getLineno();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test07414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07414");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasFileOverview();
        boolean boolean24 = jSDocInfo20.hasParameter("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean25 = jSDocInfo20.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo20.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
    }

    @Test
    public void test07415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07415");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node5.isGetElem();
        node5.addSuppression("");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int13 = node12.getSourceOffset();
        boolean boolean14 = node12.isBreak();
        int int15 = node12.getSourcePosition();
        com.google.javascript.rhino.Node node16 = node5.useSourceInfoFrom(node12);
        com.google.javascript.rhino.Node node17 = node12.getFirstChild();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj23 = node21.getProp(43);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int28 = node27.getSourceOffset();
        com.google.javascript.rhino.Node node29 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node30 = node12.srcref(node29);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node30.new FileLevelJsDocBuilder();
        java.lang.Object obj33 = node30.getProp(54);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 176129 + "'", int15 == 176129);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test07416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07416");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        jSDocInfoBuilder1.markText("hi!", (-1), (int) (byte) -1, 4095, 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean11 = jSDocInfoBuilder10.recordJavaDispatch();
        boolean boolean12 = jSDocInfoBuilder10.recordNoCompile();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj19 = node17.getProp(43);
        boolean boolean20 = node17.isCall();
        boolean boolean21 = node17.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node17, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder24 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray26 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray27 = (java.util.ArrayList<java.lang.String>[]) arrayListArray26;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder28 = strListBuilder24.add((java.util.ArrayList<java.lang.String>[]) arrayListArray26);
        boolean boolean29 = jSTypeExpression23.equals((java.lang.Object) arrayListArray26);
        boolean boolean30 = jSDocInfoBuilder10.recordParameter("", jSTypeExpression23);
        boolean boolean31 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression23);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder33 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean34 = jSDocInfoBuilder33.recordJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = null;
        boolean boolean37 = jSDocInfoBuilder33.recordParameter("hi!", jSTypeExpression36);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder39 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean40 = jSDocInfoBuilder39.isInterfaceRecorded();
        boolean boolean41 = jSDocInfoBuilder39.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder43 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean44 = jSDocInfoBuilder43.isInterfaceRecorded();
        boolean boolean46 = jSDocInfoBuilder43.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        boolean boolean53 = node50.isCall();
        boolean boolean54 = node50.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = new com.google.javascript.rhino.JSTypeExpression(node50, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder57 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray59 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray60 = (java.util.ArrayList<java.lang.String>[]) arrayListArray59;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder61 = strListBuilder57.add((java.util.ArrayList<java.lang.String>[]) arrayListArray59);
        boolean boolean62 = jSTypeExpression56.equals((java.lang.Object) arrayListArray59);
        boolean boolean63 = jSDocInfoBuilder43.recordDefineType(jSTypeExpression56);
        com.google.javascript.rhino.Node node64 = jSTypeExpression56.getRoot();
        boolean boolean66 = jSDocInfoBuilder39.recordThrowDescription(jSTypeExpression56, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder68 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean69 = jSDocInfoBuilder68.isInterfaceRecorded();
        boolean boolean71 = jSDocInfoBuilder68.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj77 = node75.getProp(43);
        boolean boolean78 = node75.isCall();
        boolean boolean79 = node75.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = new com.google.javascript.rhino.JSTypeExpression(node75, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder82 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray84 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray85 = (java.util.ArrayList<java.lang.String>[]) arrayListArray84;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder86 = strListBuilder82.add((java.util.ArrayList<java.lang.String>[]) arrayListArray84);
        boolean boolean87 = jSTypeExpression81.equals((java.lang.Object) arrayListArray84);
        boolean boolean88 = jSDocInfoBuilder68.recordDefineType(jSTypeExpression81);
        boolean boolean89 = jSDocInfoBuilder39.recordEnumParameterType(jSTypeExpression81);
        boolean boolean90 = jSTypeExpression81.isOptionalArg();
        boolean boolean91 = jSDocInfoBuilder33.recordEnumParameterType(jSTypeExpression81);
        boolean boolean92 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression81);
        boolean boolean95 = jSDocInfoBuilder1.recordParameterDescription("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "STRING  43");
        boolean boolean96 = jSDocInfoBuilder1.recordImplicitCast();
        boolean boolean97 = jSDocInfoBuilder1.recordExport();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strListBuilder24);
        org.junit.Assert.assertNotNull(arrayListArray26);
        org.junit.Assert.assertNotNull(strListArray27);
        org.junit.Assert.assertNotNull(strListBuilder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strListBuilder57);
        org.junit.Assert.assertNotNull(arrayListArray59);
        org.junit.Assert.assertNotNull(strListArray60);
        org.junit.Assert.assertNotNull(strListBuilder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strListBuilder82);
        org.junit.Assert.assertNotNull(arrayListArray84);
        org.junit.Assert.assertNotNull(strListArray85);
        org.junit.Assert.assertNotNull(strListBuilder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test07417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07417");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        boolean boolean75 = jSDocInfo42.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = jSDocInfo42.getType();
        int int77 = jSDocInfo42.getExtendedInterfacesCount();
        boolean boolean78 = jSDocInfo42.isExpose();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSTypeExpression76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test07418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07418");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression31 = jSDocInfo20.getBaseType();
        boolean boolean32 = jSDocInfo20.hasEnumParameterType();
        boolean boolean33 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility34 = jSDocInfo20.getVisibility();
        boolean boolean35 = jSDocInfo20.hasModifies();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(jSTypeExpression31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + visibility34 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility34.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07419");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        int int11 = strList8.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = strList8.asList();
        java.util.Spliterator<java.lang.String> strSpliterator13 = strList12.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList16 = strList12.subList((int) (byte) 10, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (10) must not be greater than size (8)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strSpliterator13);
    }

    @Test
    public void test07420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07420");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node7.addChildrenToFront(node11);
        boolean boolean13 = node7.isGetterDef();
        boolean boolean14 = node7.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj20 = node18.getProp(43);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int25 = node24.getSourceOffset();
        com.google.javascript.rhino.Node node26 = node18.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        node30.setDirectives((java.util.Set<java.lang.String>) strSet33);
        com.google.javascript.rhino.Node node36 = node24.useSourceInfoIfMissingFromForTree(node30);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(32, node7, node24);
        boolean boolean38 = node37.isExprResult();
        boolean boolean39 = node37.isFunction();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = jSDocInfoBuilder1.build(node37);
        jSDocInfoBuilder1.recordOriginalCommentString("NUMBER 0.0");
        boolean boolean45 = jSDocInfoBuilder1.recordParameterDescription("[, hi!, , hi!, , , hi!, ]", "STRING \n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSDocInfo40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test07421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07421");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((-1));
    }

    @Test
    public void test07422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07422");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        boolean boolean6 = node3.hasChildren();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(15);
        com.google.javascript.rhino.Node node9 = node3.useSourceInfoIfMissingFrom(node8);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = node3.getStaticSourceFile();
        boolean boolean11 = node3.isReturn();
        com.google.javascript.rhino.jstype.JSType jSType12 = node3.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(staticSourceFile10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSType12);
    }

    @Test
    public void test07423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07423");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        boolean boolean5 = node3.isWith();
        boolean boolean6 = node3.isInstanceOf();
        boolean boolean7 = node3.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node9 = node3.getAncestor((int) 'a');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node9);
    }

    @Test
    public void test07424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07424");
        com.google.common.collect.ImmutableList<java.lang.String> strList20 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int22 = strList20.indexOf((java.lang.Object) 'a');
        int int23 = strList20.size();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.lang.String[] strArray27 = strList20.toArray(strArray26);
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("[, hi!, , , hi!, , hi!, ]", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n", "STRING ", "NUMBER 12.0\n", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "NUMBER 0.0 43 [directives: []]\n", "NUMBER 0.0", "Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", "hi!", "[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]", strArray26);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder30 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean32 = jSDocInfoBuilder30.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile34 = null;
        jSDocInfoBuilder30.markName("hi!", staticSourceFile34, (int) (short) 0, (int) (short) 100);
        boolean boolean38 = jSDocInfoBuilder30.recordNoTypeCheck();
        boolean boolean39 = jSDocInfoBuilder30.recordExpose();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node43.addChildrenToFront(node47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = jSDocInfoBuilder30.build(node47);
        boolean boolean50 = strList28.contains((java.lang.Object) node47);
        boolean boolean51 = node47.isFalse();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node47.children();
        boolean boolean53 = node47.isGetElem();
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSDocInfo49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07425");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node21.cloneTree();
        java.lang.String str24 = node23.toString();
        boolean boolean25 = node23.isReturn();
        com.google.javascript.rhino.InputId inputId26 = null;
        node23.setInputId(inputId26);
        boolean boolean28 = node23.isReturn();
        boolean boolean29 = node23.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "NUMBER 0.0 43" + "'", str24, "NUMBER 0.0 43");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07426");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        boolean boolean22 = jSDocInfo20.isNoCompile();
        java.lang.String str24 = jSDocInfo20.getDescriptionForParameter("NUMBER 0.0 43");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getImplementedInterfaces();
        java.lang.String str26 = jSDocInfo20.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test07427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07427");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.recordLends("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = null;
        boolean boolean12 = jSDocInfoBuilder1.recordType(jSTypeExpression11);
        boolean boolean13 = jSDocInfoBuilder1.recordOverride();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder15.isInterfaceRecorded();
        boolean boolean18 = jSDocInfoBuilder15.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj24 = node22.getProp(43);
        boolean boolean25 = node22.isCall();
        boolean boolean26 = node22.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = new com.google.javascript.rhino.JSTypeExpression(node22, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder29 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray31 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray32 = (java.util.ArrayList<java.lang.String>[]) arrayListArray31;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder33 = strListBuilder29.add((java.util.ArrayList<java.lang.String>[]) arrayListArray31);
        boolean boolean34 = jSTypeExpression28.equals((java.lang.Object) arrayListArray31);
        boolean boolean35 = jSDocInfoBuilder15.recordDefineType(jSTypeExpression28);
        boolean boolean36 = jSDocInfoBuilder1.recordBaseType(jSTypeExpression28);
        boolean boolean37 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean38 = jSDocInfoBuilder1.recordIdGenerator();
        boolean boolean39 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean40 = jSDocInfoBuilder1.recordOverride();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strListBuilder29);
        org.junit.Assert.assertNotNull(arrayListArray31);
        org.junit.Assert.assertNotNull(strListArray32);
        org.junit.Assert.assertNotNull(strListBuilder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test07428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07428");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        java.lang.String str47 = jSDocInfo42.getMeaning();
        java.lang.String str48 = jSDocInfo42.getMeaning();
        boolean boolean49 = jSDocInfo42.hasThisType();
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = jSDocInfo42.getTemplateTypeNames();
        java.util.ListIterator<java.lang.String> strItor51 = strList50.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor52 = strList50.listIterator();
        boolean boolean53 = strList50.isEmpty();
        java.lang.Object[] objArray54 = strList50.toArray();
        java.lang.Object[] objArray55 = strList50.toArray();
        // The following exception was thrown during execution in test generation
        try {
            strList50.add(50, "NUMBER 0.0 [var_args_name: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
    }

    @Test
    public void test07429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07429");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        boolean boolean23 = jSDocInfo20.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getThisType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo20.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("OR  54\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getType();
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = jSDocInfo20.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getType();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNull(jSTypeExpression30);
    }

    @Test
    public void test07430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07430");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isDo();
        boolean boolean13 = node3.isWith();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isVar();
        node17.putBooleanProp(30, false);
        boolean boolean22 = node17.isSwitch();
        boolean boolean23 = node17.isUnscopedQualifiedName();
        boolean boolean24 = node3.isEquivalentTo(node17);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        com.google.javascript.rhino.Node node35 = node28.getChildAtIndex(0);
        java.lang.String str36 = node35.toString();
        node35.setSourceEncodedPositionForTree((int) (byte) -1);
        node35.setOptionalArg(false);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj46 = node44.getProp(43);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int51 = node50.getSourceOffset();
        com.google.javascript.rhino.Node node52 = node44.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean57 = node56.isVar();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node62 = node56.copyInformationFromForTree(node61);
        com.google.javascript.rhino.Node node63 = node44.copyInformationFromForTree(node62);
        boolean boolean64 = node35.isEquivalentToTyped(node44);
        com.google.javascript.rhino.Node node65 = node3.srcrefTree(node35);
        boolean boolean66 = node65.isEmpty();
        com.google.javascript.rhino.Node node67 = node65.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean68 = node67.isTrue();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  43" + "'", str36, "STRING  43");
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(node67);
    }

    @Test
    public void test07431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07431");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        boolean boolean11 = node8.isCall();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node8, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder15 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray17 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray18 = (java.util.ArrayList<java.lang.String>[]) arrayListArray17;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = strListBuilder15.add((java.util.ArrayList<java.lang.String>[]) arrayListArray17);
        boolean boolean20 = jSTypeExpression14.equals((java.lang.Object) arrayListArray17);
        boolean boolean21 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.isInterfaceRecorded();
        boolean boolean26 = jSDocInfoBuilder23.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        boolean boolean33 = node30.isCall();
        boolean boolean34 = node30.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node30, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder37 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray39 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray40 = (java.util.ArrayList<java.lang.String>[]) arrayListArray39;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder41 = strListBuilder37.add((java.util.ArrayList<java.lang.String>[]) arrayListArray39);
        boolean boolean42 = jSTypeExpression36.equals((java.lang.Object) arrayListArray39);
        boolean boolean43 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression36);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition44 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int45 = namePosition44.getEndLine();
        int int46 = namePosition44.getStartLine();
        com.google.javascript.rhino.Node node47 = namePosition44.getItem();
        boolean boolean48 = jSTypeExpression36.equals((java.lang.Object) node47);
        boolean boolean49 = jSTypeExpression36.isOptionalArg();
        boolean boolean50 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression36);
        boolean boolean51 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList52 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1);
        com.google.javascript.rhino.Node node53 = null;
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = jSDocInfoBuilder1.build(node53);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo54.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression56 = jSDocInfo54.getEnumParameterType();
        boolean boolean57 = jSDocInfo54.hasFileOverview();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strListBuilder15);
        org.junit.Assert.assertNotNull(arrayListArray17);
        org.junit.Assert.assertNotNull(strListArray18);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strListBuilder37);
        org.junit.Assert.assertNotNull(arrayListArray39);
        org.junit.Assert.assertNotNull(strListArray40);
        org.junit.Assert.assertNotNull(strListBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList52);
        org.junit.Assert.assertNotNull(jSDocInfo54);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertNull(jSTypeExpression56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test07432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07432");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int51 = strList49.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList49.spliterator();
        boolean boolean53 = strList19.equals((java.lang.Object) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList54 = strList49.reverse();
        java.lang.String str56 = strList54.get(0);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder58 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean60 = jSDocInfoBuilder58.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile62 = null;
        jSDocInfoBuilder58.markName("hi!", staticSourceFile62, (int) (short) 0, (int) (short) 100);
        boolean boolean66 = jSDocInfoBuilder58.recordNoTypeCheck();
        boolean boolean67 = jSDocInfoBuilder58.recordExpose();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node71.addChildrenToFront(node75);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = jSDocInfoBuilder58.build(node75);
        boolean boolean78 = jSDocInfo77.isExport();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean83 = node82.isOptionalArg();
        com.google.javascript.rhino.Node node84 = node82.getNext();
        jSDocInfo77.setAssociatedNode(node84);
        jSDocInfo77.setLicense("STRING ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression89 = jSDocInfo77.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        boolean boolean90 = jSDocInfo77.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression91 = jSDocInfo77.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression92 = jSDocInfo77.getTypedefType();
        int int93 = strList54.lastIndexOf((java.lang.Object) jSDocInfo77);
        com.google.common.collect.ImmutableList<java.lang.String> strList94 = jSDocInfo77.getTemplateTypeNames();
        // The following exception was thrown during execution in test generation
        try {
            strList94.add((int) ' ', "NAME\n");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNull(jSTypeExpression89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(jSTypeExpression91);
        org.junit.Assert.assertNull(jSTypeExpression92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(strList94);
    }

    @Test
    public void test07433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07433");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node4.addChildrenToFront(node8);
        boolean boolean10 = node4.isGetterDef();
        boolean boolean11 = node4.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj17 = node15.getProp(43);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int22 = node21.getSourceOffset();
        com.google.javascript.rhino.Node node23 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray29 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node27.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node33 = node21.useSourceInfoIfMissingFromForTree(node27);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(32, node4, node21);
        boolean boolean35 = node34.isExprResult();
        boolean boolean36 = node34.isFunction();
        int int37 = node34.getSourceOffset();
        boolean boolean38 = node34.isName();
        boolean boolean39 = node34.isNew();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile40 = null;
        node34.setStaticSourceFile(staticSourceFile40);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07434");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isVoid();
        node21.setSourceEncodedPosition(4095);
        com.google.javascript.rhino.Node node26 = node21.cloneNode();
        java.util.Set<java.lang.String> strSet27 = node26.getDirectives();
        com.google.javascript.rhino.Node node28 = node26.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = node28.isNumber();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(strSet27);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test07435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07435");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        boolean boolean10 = strSet7.equals((java.lang.Object) (-1));
        boolean boolean11 = jSDocInfoBuilder1.recordModifies((java.util.Set<java.lang.String>) strSet7);
        boolean boolean12 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean15 = jSDocInfoBuilder14.recordNoTypeCheck();
        jSDocInfoBuilder14.recordOriginalCommentString("");
        boolean boolean18 = jSDocInfoBuilder14.isJavaDispatch();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        jSDocInfoBuilder14.markName("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n", staticSourceFile20, 47, 12);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList24 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1, jSDocInfoBuilder14);
        boolean boolean27 = jSDocInfoBuilder14.recordParameterDescription("NUMBER 0.0", "STRING  43 [empty_block: 1]");
        boolean boolean29 = jSDocInfoBuilder14.recordVersion("[STRING , [, hi!, , , hi!, , hi!, ], STRING , [, hi!, , , hi!, , hi!, ], STRING , , STRING , STRING , hi!]");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node33.addChildrenToFront(node37);
        node37.setQuotedString();
        boolean boolean40 = node37.isHook();
        int int41 = node37.getType();
        node37.putIntProp(0, (int) (byte) 0);
        boolean boolean45 = node37.isRegExp();
        boolean boolean46 = node37.isEmpty();
        boolean boolean47 = node37.isNoSideEffectsCall();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = new com.google.javascript.rhino.JSTypeExpression(node37, "Node tree inequality:\nTree1:\nTHROW 0\n    STRING  43\n\n\nTree2:\nSTRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n\n\nSubtree1: THROW 0\n    STRING  43\n\n\nSubtree2: STRING Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n 12\n");
        boolean boolean50 = jSDocInfoBuilder14.recordBaseType(jSTypeExpression49);
        boolean boolean52 = jSDocInfoBuilder14.addReference("GETELEM\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 40 + "'", int41 == 40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test07436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07436");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = null;
        boolean boolean4 = jSDocInfoBuilder1.recordThisType(jSTypeExpression3);
        jSDocInfoBuilder1.markText("[, hi!, , , hi!, , hi!, ]", 44, 49, 176129, 10);
        boolean boolean11 = jSDocInfoBuilder1.recordExpose();
        boolean boolean13 = jSDocInfoBuilder1.addReference("NUMBER 0.0 43");
        boolean boolean14 = jSDocInfoBuilder1.recordNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07437");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        java.lang.String str24 = jSDocInfo20.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo20.getReturnType();
        boolean boolean26 = jSDocInfo20.isConstant();
        java.lang.String str27 = jSDocInfo20.getDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test07438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07438");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        boolean boolean6 = node3.isCall();
        int int7 = node3.getSourcePosition();
        java.lang.String str11 = node3.toString(false, true, false);
        boolean boolean12 = node3.isNot();
        boolean boolean13 = node3.isDelProp();
        boolean boolean14 = node3.isTrue();
        boolean boolean15 = node3.isAdd();
        com.google.javascript.rhino.jstype.JSType jSType16 = node3.getJSType();
        node3.setString("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean19 = node3.isDo();
        boolean boolean20 = node3.isDo();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 176180 + "'", int7 == 176180);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING " + "'", str11, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07439");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        jSDocInfo20.setLicense("STRING ");
        jSDocInfo20.setLicense("hi!");
        java.lang.String str33 = jSDocInfo20.getBlockDescription();
        int int34 = jSDocInfo20.getExtendedInterfacesCount();
        boolean boolean35 = jSDocInfo20.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList36 = jSDocInfo20.getImplementedInterfaces();
        boolean boolean37 = jSDocInfo20.containsDeclaration();
        boolean boolean38 = jSDocInfo20.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression40 = jSDocInfo20.getParameterType("NUMBER 0.0 43\n");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(jSTypeExpression40);
    }

    @Test
    public void test07440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07440");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        java.lang.Object[] objArray9 = strList8.toArray();
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor10 = strList8.iterator();
        com.google.common.collect.ImmutableCollection[] immutableCollectionArray12 = new com.google.common.collect.ImmutableCollection[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableCollection<java.lang.String>[] strCollectionArray13 = (com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray12;
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection<java.lang.String>> strCollectionList14 = com.google.common.collect.ImmutableList.copyOf((com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray12);
        com.google.common.collect.ImmutableList[] immutableListArray16 = new com.google.common.collect.ImmutableList[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList<java.lang.String>[] strListArray17 = (com.google.common.collect.ImmutableList<java.lang.String>[]) immutableListArray16;
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<java.lang.String>> strListList18 = com.google.common.collect.ImmutableList.copyOf(strListArray17);
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection[]> immutableCollectionArrayList19 = com.google.common.collect.ImmutableList.of(immutableCollectionArray12, (com.google.common.collect.ImmutableCollection[]) strListArray17);
        com.google.common.collect.ImmutableList<java.lang.String> strList28 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int30 = strList28.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int41 = strList39.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList50 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList60 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList28, (java.lang.Iterable<java.lang.String>) strList39, (java.lang.Iterable<java.lang.String>) strList50, (java.lang.Iterable<java.lang.String>) strList59);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor61 = strList59.iterator();
        java.lang.Object obj62 = null;
        int int63 = strList59.indexOf(obj62);
        java.util.stream.Stream<java.lang.String> strStream64 = strList59.stream();
        java.lang.Object[] objArray65 = strList59.toArray();
        java.lang.Object obj66 = null;
        boolean boolean67 = strList59.contains(obj66);
        com.google.common.collect.ImmutableCollection[] immutableCollectionArray69 = new com.google.common.collect.ImmutableCollection[1];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableCollection<java.lang.String>[] strCollectionArray70 = (com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray69;
        strCollectionArray70[0] = strList59;
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection<java.lang.String>> strCollectionList73 = com.google.common.collect.ImmutableList.copyOf(strCollectionArray70);
        com.google.common.collect.ImmutableCollection[] immutableCollectionArray75 = new com.google.common.collect.ImmutableCollection[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableCollection<java.lang.String>[] strCollectionArray76 = (com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray75;
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection<java.lang.String>> strCollectionList77 = com.google.common.collect.ImmutableList.copyOf((com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray75);
        com.google.common.collect.ImmutableList[] immutableListArray79 = new com.google.common.collect.ImmutableList[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList<java.lang.String>[] strListArray80 = (com.google.common.collect.ImmutableList<java.lang.String>[]) immutableListArray79;
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<java.lang.String>> strListList81 = com.google.common.collect.ImmutableList.copyOf(strListArray80);
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection[]> immutableCollectionArrayList82 = com.google.common.collect.ImmutableList.of(immutableCollectionArray75, (com.google.common.collect.ImmutableCollection[]) strListArray80);
        com.google.common.collect.ImmutableCollection[] immutableCollectionArray84 = new com.google.common.collect.ImmutableCollection[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableCollection<java.lang.String>[] strCollectionArray85 = (com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray84;
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection<java.lang.String>> strCollectionList86 = com.google.common.collect.ImmutableList.copyOf((com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray84);
        com.google.common.collect.ImmutableList[] immutableListArray88 = new com.google.common.collect.ImmutableList[0];
        @SuppressWarnings("unchecked")
        com.google.common.collect.ImmutableList<java.lang.String>[] strListArray89 = (com.google.common.collect.ImmutableList<java.lang.String>[]) immutableListArray88;
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList<java.lang.String>> strListList90 = com.google.common.collect.ImmutableList.copyOf(strListArray89);
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection[]> immutableCollectionArrayList91 = com.google.common.collect.ImmutableList.of(immutableCollectionArray84, (com.google.common.collect.ImmutableCollection[]) strListArray89);
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection[]> immutableCollectionArrayList92 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection[]) strListArray17, (com.google.common.collect.ImmutableCollection[]) strCollectionArray70, immutableCollectionArray75, immutableCollectionArray84);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableCollection<java.lang.String>[] strCollectionArray93 = strList8.toArray((com.google.common.collect.ImmutableCollection<java.lang.String>[]) immutableCollectionArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(immutableCollectionArray12);
        org.junit.Assert.assertNotNull(strCollectionArray13);
        org.junit.Assert.assertNotNull(strCollectionList14);
        org.junit.Assert.assertNotNull(immutableListArray16);
        org.junit.Assert.assertNotNull(strListArray17);
        org.junit.Assert.assertNotNull(strListList18);
        org.junit.Assert.assertNotNull(immutableCollectionArrayList19);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(strIterableList60);
        org.junit.Assert.assertNotNull(strItor61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(immutableCollectionArray69);
        org.junit.Assert.assertNotNull(strCollectionArray70);
        org.junit.Assert.assertNotNull(strCollectionList73);
        org.junit.Assert.assertNotNull(immutableCollectionArray75);
        org.junit.Assert.assertNotNull(strCollectionArray76);
        org.junit.Assert.assertNotNull(strCollectionList77);
        org.junit.Assert.assertNotNull(immutableListArray79);
        org.junit.Assert.assertNotNull(strListArray80);
        org.junit.Assert.assertNotNull(strListList81);
        org.junit.Assert.assertNotNull(immutableCollectionArrayList82);
        org.junit.Assert.assertNotNull(immutableCollectionArray84);
        org.junit.Assert.assertNotNull(strCollectionArray85);
        org.junit.Assert.assertNotNull(strCollectionList86);
        org.junit.Assert.assertNotNull(immutableListArray88);
        org.junit.Assert.assertNotNull(strListArray89);
        org.junit.Assert.assertNotNull(strListList90);
        org.junit.Assert.assertNotNull(immutableCollectionArrayList91);
        org.junit.Assert.assertNotNull(immutableCollectionArrayList92);
    }

    @Test
    public void test07441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07441");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj6 = node4.getProp(43);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int11 = node10.getSourceOffset();
        com.google.javascript.rhino.Node node12 = node4.useSourceInfoIfMissingFromForTree(node10);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray18 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        node16.setDirectives((java.util.Set<java.lang.String>) strSet19);
        com.google.javascript.rhino.Node node22 = node10.useSourceInfoIfMissingFromForTree(node16);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj28 = node26.getProp(43);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int33 = node32.getSourceOffset();
        com.google.javascript.rhino.Node node34 = node26.useSourceInfoIfMissingFromForTree(node32);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        com.google.javascript.rhino.Node node44 = node32.useSourceInfoIfMissingFromForTree(node38);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        boolean boolean58 = node57.isAssignAdd();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean63 = node62.isVar();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) ' ', node16, node44, node57, node62, 1, 100);
        int int67 = node57.getSideEffectFlags();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj73 = node71.getProp(43);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int78 = node77.getSourceOffset();
        com.google.javascript.rhino.Node node79 = node71.useSourceInfoIfMissingFromForTree(node77);
        boolean boolean80 = node79.isAssignAdd();
        boolean boolean81 = node57.isEquivalentTo(node79);
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        node57.setJSType(jSType82);
        boolean boolean84 = node57.isSwitch();
        java.lang.String str85 = node57.getQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test07442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07442");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean9 = typePosition8.hasBrackets();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        typePosition8.setItem(node26);
        int int28 = typePosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean35 = typePosition34.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList36 = com.google.common.collect.ImmutableList.of(typePosition29, typePosition30, typePosition31, typePosition32, typePosition33, typePosition34);
        int int37 = typePosition31.getEndLine();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean42 = node41.isNull();
        boolean boolean43 = node41.isSyntheticBlock();
        boolean boolean44 = node41.hasMoreThanOneChild();
        typePosition31.setItem(node41);
        boolean boolean46 = typePosition31.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition4, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition8, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition31);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj53 = node51.getProp(43);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int58 = node57.getSourceOffset();
        com.google.javascript.rhino.Node node59 = node51.useSourceInfoIfMissingFromForTree(node57);
        com.google.javascript.rhino.Node node60 = node51.removeFirstChild();
        boolean boolean61 = node51.isFor();
        boolean boolean62 = node51.isNumber();
        typePosition31.setItem(node51);
        int int64 = typePosition31.getEndLine();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(typePositionList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test07443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07443");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(30);
        sideEffectFlags1.setMutatesArguments();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07444");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(42, nodeArray6, (int) (byte) 1, 43);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(4, nodeArray6, (int) (short) 1, 47);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(51, nodeArray6);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(48, nodeArray6, (int) (short) 0, 26);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((-2147483596), nodeArray6, (int) (short) 10, (int) (byte) -1);
        org.junit.Assert.assertNotNull(nodeArray6);
    }

    @Test
    public void test07445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07445");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 35);
        node1.setSourceFileForTesting("TYPEOF");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable4 = node1.siblings();
        boolean boolean5 = node1.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07446");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(40, "hi!");
        java.lang.String str3 = node2.getSourceFileName();
        node2.putBooleanProp(30, false);
        boolean boolean7 = node2.isObjectLit();
        int int8 = node2.getSourcePosition();
        boolean boolean9 = node2.isParamList();
        boolean boolean10 = node2.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test07447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07447");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        boolean boolean11 = node8.isCall();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node8, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder15 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray17 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray18 = (java.util.ArrayList<java.lang.String>[]) arrayListArray17;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = strListBuilder15.add((java.util.ArrayList<java.lang.String>[]) arrayListArray17);
        boolean boolean20 = jSTypeExpression14.equals((java.lang.Object) arrayListArray17);
        boolean boolean21 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.isInterfaceRecorded();
        boolean boolean26 = jSDocInfoBuilder23.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        boolean boolean33 = node30.isCall();
        boolean boolean34 = node30.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node30, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder37 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray39 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray40 = (java.util.ArrayList<java.lang.String>[]) arrayListArray39;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder41 = strListBuilder37.add((java.util.ArrayList<java.lang.String>[]) arrayListArray39);
        boolean boolean42 = jSTypeExpression36.equals((java.lang.Object) arrayListArray39);
        boolean boolean43 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression36);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition44 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int45 = namePosition44.getEndLine();
        int int46 = namePosition44.getStartLine();
        com.google.javascript.rhino.Node node47 = namePosition44.getItem();
        boolean boolean48 = jSTypeExpression36.equals((java.lang.Object) node47);
        boolean boolean49 = jSTypeExpression36.isOptionalArg();
        boolean boolean50 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression36);
        boolean boolean51 = jSTypeExpression36.isOptionalArg();
        com.google.javascript.rhino.Node node52 = jSTypeExpression36.getRoot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strListBuilder15);
        org.junit.Assert.assertNotNull(arrayListArray17);
        org.junit.Assert.assertNotNull(strListArray18);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strListBuilder37);
        org.junit.Assert.assertNotNull(arrayListArray39);
        org.junit.Assert.assertNotNull(strListArray40);
        org.junit.Assert.assertNotNull(strListBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
    }

    @Test
    public void test07448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07448");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.shouldPreserveTry();
        boolean boolean49 = jSDocInfo42.hasType();
        java.lang.String str50 = jSDocInfo42.getLendsName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test07449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07449");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        boolean boolean17 = jSDocInfo14.isConsistentIdGenerator();
        boolean boolean18 = jSDocInfo14.isNoAlias();
        boolean boolean19 = jSDocInfo14.isJavaDispatch();
        boolean boolean21 = jSDocInfo14.hasDescriptionForParameter("NUMBER 0.0 43");
        boolean boolean22 = jSDocInfo14.isInterface();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo14.getImplementedInterfaces();
        boolean boolean24 = jSDocInfo14.hasType();
        boolean boolean25 = jSDocInfo14.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test07450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07450");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isAdd();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        com.google.javascript.rhino.Node node6 = node3.cloneTree();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node7 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(node6);
    }

    @Test
    public void test07451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07451");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.isJavaDispatch();
        boolean boolean7 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean8 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean9 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean10 = jSDocInfoBuilder1.isDescriptionRecorded();
        boolean boolean12 = jSDocInfoBuilder1.recordReturnDescription("Node tree inequality:\nTree1:\nSTRING STRING  43 [synthetic: 1] 35\n\n\nTree2:\nSTRING  43\n\n\nSubtree1: STRING STRING  43 [synthetic: 1] 35\n\n\nSubtree2: STRING  43\n");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07452");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(44, "STRING  43", (int) (short) 100, 48);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test07453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07453");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean10 = node3.getBooleanProp(8);
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        node3.setCharno(52);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
    }

    @Test
    public void test07454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07454");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj7 = node5.getProp(43);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node5.useSourceInfoIfMissingFromForTree(node11);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray19 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        node17.setDirectives((java.util.Set<java.lang.String>) strSet20);
        com.google.javascript.rhino.Node node23 = node11.useSourceInfoIfMissingFromForTree(node17);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj52 = node50.getProp(43);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int57 = node56.getSourceOffset();
        com.google.javascript.rhino.Node node58 = node50.useSourceInfoIfMissingFromForTree(node56);
        boolean boolean59 = node58.isAssignAdd();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean64 = node63.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) ' ', node17, node45, node58, node63, 1, 100);
        node63.setWasEmptyNode(true);
        java.lang.String str70 = node63.getString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(47, node63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test07455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07455");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isDefine();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection23 = jSDocInfo20.getMarkers();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo20.getTypedefType();
        boolean boolean26 = jSDocInfo20.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(markerCollection23);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(jSTypeExpression25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test07456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07456");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean11 = jSDocInfoBuilder1.recordNoSideEffects();
        boolean boolean12 = jSDocInfoBuilder1.recordExport();
        boolean boolean13 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder15 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean17 = jSDocInfoBuilder15.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = null;
        jSDocInfoBuilder15.markName("hi!", staticSourceFile19, (int) (short) 0, (int) (short) 100);
        boolean boolean23 = jSDocInfoBuilder15.recordNoTypeCheck();
        boolean boolean24 = jSDocInfoBuilder15.recordExpose();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node28.addChildrenToFront(node32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = jSDocInfoBuilder15.build(node32);
        java.lang.String str35 = jSDocInfo34.getMeaning();
        boolean boolean36 = jSDocInfo34.isExport();
        boolean boolean38 = jSDocInfo34.hasDescriptionForParameter("STRING ");
        boolean boolean39 = jSDocInfo34.isNoCompile();
        jSDocInfo34.addSuppression("STRING ");
        boolean boolean42 = jSDocInfo34.isExport();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo34.getParameterNames();
        java.util.stream.Stream<java.lang.String> strStream44 = strSet43.stream();
        boolean boolean45 = jSDocInfoBuilder1.recordSuppressions(strSet43);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSDocInfo34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test07457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07457");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNull();
        boolean boolean6 = node4.isFromExterns();
        boolean boolean7 = node4.isFunction();
        com.google.javascript.rhino.Node node8 = node4.cloneTree();
        boolean boolean9 = node8.isFor();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean18 = node17.isOptionalArg();
        boolean boolean19 = node17.isSwitch();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node24.addChildrenToFront(node28);
        boolean boolean30 = node24.isGetterDef();
        boolean boolean31 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj37 = node35.getProp(43);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int42 = node41.getSourceOffset();
        com.google.javascript.rhino.Node node43 = node35.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet50);
        com.google.javascript.rhino.Node node53 = node41.useSourceInfoIfMissingFromForTree(node47);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(32, node24, node41);
        boolean boolean55 = node54.isExprResult();
        boolean boolean56 = node54.isFunction();
        com.google.javascript.rhino.Node node57 = node17.srcrefTree(node54);
        com.google.javascript.rhino.Node node58 = node13.srcrefTree(node54);
        com.google.javascript.rhino.Node node59 = node8.useSourceInfoFrom(node58);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(49, node59);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 'a', 41, 23);
        com.google.javascript.rhino.Node node66 = node64.getAncestor(11);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString((int) (short) 0, "[, hi!, , , hi!, , hi!, ]");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile70 = node69.getStaticSourceFile();
        boolean boolean71 = node69.isNot();
        // The following exception was thrown during execution in test generation
        try {
            node60.addChildBefore(node64, node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(staticSourceFile70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test07458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07458");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isVar();
        node4.putBooleanProp(30, false);
        boolean boolean9 = node4.isSwitch();
        boolean boolean10 = node4.isUnscopedQualifiedName();
        boolean boolean11 = node4.isName();
        node4.setWasEmptyNode(false);
        boolean boolean14 = node4.isTrue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(32, node4, (int) (byte) -1, 54);
        boolean boolean18 = node4.isSetterDef();
        node4.putBooleanProp(45055, false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07459");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(44, "GETELEM 43", (int) (byte) 1, 24);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test07460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07460");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isConstructorRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder5 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean6 = jSDocInfoBuilder5.isInterfaceRecorded();
        boolean boolean8 = jSDocInfoBuilder5.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj14 = node12.getProp(43);
        boolean boolean15 = node12.isCall();
        boolean boolean16 = node12.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = new com.google.javascript.rhino.JSTypeExpression(node12, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray21 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray22 = (java.util.ArrayList<java.lang.String>[]) arrayListArray21;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder23 = strListBuilder19.add((java.util.ArrayList<java.lang.String>[]) arrayListArray21);
        boolean boolean24 = jSTypeExpression18.equals((java.lang.Object) arrayListArray21);
        boolean boolean25 = jSDocInfoBuilder5.recordDefineType(jSTypeExpression18);
        com.google.javascript.rhino.Node node26 = jSTypeExpression18.getRoot();
        boolean boolean28 = jSDocInfoBuilder1.recordThrowDescription(jSTypeExpression18, "Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean29 = jSDocInfoBuilder1.recordConsistentIdGenerator();
        boolean boolean31 = jSDocInfoBuilder1.recordLends("hi!");
        boolean boolean32 = jSDocInfoBuilder1.recordConstancy();
        boolean boolean33 = jSDocInfoBuilder1.recordDeprecated();
        boolean boolean34 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean36 = jSDocInfoBuilder1.recordFileOverview("NUMBER 0.0 43");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 39);
        node38.setType(38);
        boolean boolean41 = node38.isOr();
        jSDocInfoBuilder1.markTypeNode(node38, 8, 39, 49, 45, true);
        boolean boolean48 = jSDocInfoBuilder1.recordImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertNotNull(arrayListArray21);
        org.junit.Assert.assertNotNull(strListArray22);
        org.junit.Assert.assertNotNull(strListBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test07461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07461");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        boolean boolean23 = jSDocInfo20.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getReturnType();
        java.lang.String str25 = jSDocInfo20.getSourceName();
        boolean boolean26 = jSDocInfo20.isConstant();
        boolean boolean27 = jSDocInfo20.isNoCompile();
        boolean boolean28 = jSDocInfo20.hasFileOverview();
        int int29 = jSDocInfo20.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test07462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07462");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "STRING  43\n    NUMBER 0.0 43\n        STRING  43\n", 35, (int) (short) -1);
        boolean boolean6 = node5.hasChildren();
        java.lang.Object obj8 = null;
        node5.putProp((int) '#', obj8);
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int20 = strList18.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList29 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int31 = strList29.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList49 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList50 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList18, (java.lang.Iterable<java.lang.String>) strList29, (java.lang.Iterable<java.lang.String>) strList40, (java.lang.Iterable<java.lang.String>) strList49);
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int61 = strList59.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator62 = strList59.spliterator();
        boolean boolean63 = strList29.equals((java.lang.Object) strList59);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean68 = node67.isVar();
        boolean boolean69 = strList59.contains((java.lang.Object) node67);
        boolean boolean70 = node67.isThis();
        boolean boolean71 = node67.isGetProp();
        com.google.javascript.rhino.Node node72 = node67.getNext();
        node67.setVarArgs(true);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((-1), node5, node67, 30, 147494);
        boolean boolean78 = node5.isCall();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strIterableList50);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test07463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07463");
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int10 = strList8.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList19 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int21 = strList19.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList39 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList40 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList8, (java.lang.Iterable<java.lang.String>) strList19, (java.lang.Iterable<java.lang.String>) strList30, (java.lang.Iterable<java.lang.String>) strList39);
        com.google.common.collect.UnmodifiableIterator<java.lang.String> strItor41 = strList39.iterator();
        java.lang.Object obj42 = null;
        int int43 = strList39.indexOf(obj42);
        java.util.stream.Stream<java.lang.String> strStream44 = strList39.stream();
        java.lang.Object[] objArray45 = strList39.toArray();
        java.lang.Object obj46 = null;
        boolean boolean47 = strList39.contains(obj46);
        boolean boolean48 = strList39.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            strList39.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strIterableList40);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test07464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07464");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node3 = namePosition0.getItem();
        int int4 = namePosition0.getStartLine();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj11 = node9.getProp(43);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int16 = node15.getSourceOffset();
        com.google.javascript.rhino.Node node17 = node9.useSourceInfoIfMissingFromForTree(node15);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray23 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        node21.setDirectives((java.util.Set<java.lang.String>) strSet24);
        com.google.javascript.rhino.Node node27 = node15.useSourceInfoIfMissingFromForTree(node21);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj33 = node31.getProp(43);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int38 = node37.getSourceOffset();
        com.google.javascript.rhino.Node node39 = node31.useSourceInfoIfMissingFromForTree(node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray45 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        node43.setDirectives((java.util.Set<java.lang.String>) strSet46);
        com.google.javascript.rhino.Node node49 = node37.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj56 = node54.getProp(43);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int61 = node60.getSourceOffset();
        com.google.javascript.rhino.Node node62 = node54.useSourceInfoIfMissingFromForTree(node60);
        boolean boolean63 = node62.isAssignAdd();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean68 = node67.isVar();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) ' ', node21, node49, node62, node67, 1, 100);
        node67.setWasEmptyNode(true);
        boolean boolean74 = node67.isQuotedString();
        boolean boolean76 = node67.getBooleanProp((int) (byte) 0);
        boolean boolean77 = node67.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node78 = node67.getLastSibling();
        namePosition0.setItem(node78);
        int int80 = node78.getSourceOffset();
        node78.setIsSyntheticBlock(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
    }

    @Test
    public void test07465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07465");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        int int22 = jSDocInfo20.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj29 = node27.getProp(43);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int34 = node33.getSourceOffset();
        com.google.javascript.rhino.Node node35 = node27.useSourceInfoIfMissingFromForTree(node33);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray41 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        node39.setDirectives((java.util.Set<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node45 = node33.useSourceInfoIfMissingFromForTree(node39);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj51 = node49.getProp(43);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int56 = node55.getSourceOffset();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node55);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray63 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        node61.setDirectives((java.util.Set<java.lang.String>) strSet64);
        com.google.javascript.rhino.Node node67 = node55.useSourceInfoIfMissingFromForTree(node61);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj74 = node72.getProp(43);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int79 = node78.getSourceOffset();
        com.google.javascript.rhino.Node node80 = node72.useSourceInfoIfMissingFromForTree(node78);
        boolean boolean81 = node80.isAssignAdd();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean86 = node85.isVar();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) ' ', node39, node67, node80, node85, 1, 100);
        jSDocInfo20.setAssociatedNode(node89);
        boolean boolean91 = jSDocInfo20.isConstant();
        java.lang.String str92 = jSDocInfo20.getBlockDescription();
        java.lang.String str93 = jSDocInfo20.toString();
        java.lang.String str94 = jSDocInfo20.getLicense();
        java.lang.String str95 = jSDocInfo20.getMeaning();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "JSDocInfo" + "'", str93, "JSDocInfo");
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertNull(str95);
    }

    @Test
    public void test07466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07466");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        boolean boolean6 = jSDocInfoBuilder1.recordExterns();
        boolean boolean7 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean8 = jSDocInfoBuilder1.recordNoCompile();
        jSDocInfoBuilder1.recordOriginalCommentString("Node tree inequality:\nTree1:\nNUMBER 40.0\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: NUMBER 40.0\n\n\nSubtree2: NUMBER 0.0 43\n");
        boolean boolean12 = jSDocInfoBuilder1.recordDeprecationReason("THROW");
        jSDocInfoBuilder1.markText("STRING  43\n    NUMBER 0.0 43\n        STRING  43\n", 100, 46, 176180, 43);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test07467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07467");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordBlockDescription("hi!");
        jSDocInfoBuilder1.recordOriginalCommentString("STRING ");
        boolean boolean8 = jSDocInfoBuilder1.recordReturnDescription("STRING  43\n");
        jSDocInfoBuilder1.markName("STRING  43 [empty_block: 1]", 147494, 29);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test07468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07468");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordJavaDispatch();
        boolean boolean3 = jSDocInfoBuilder1.recordNoCompile();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj10 = node8.getProp(43);
        boolean boolean11 = node8.isCall();
        boolean boolean12 = node8.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = new com.google.javascript.rhino.JSTypeExpression(node8, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder15 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray17 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray18 = (java.util.ArrayList<java.lang.String>[]) arrayListArray17;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder19 = strListBuilder15.add((java.util.ArrayList<java.lang.String>[]) arrayListArray17);
        boolean boolean20 = jSTypeExpression14.equals((java.lang.Object) arrayListArray17);
        boolean boolean21 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression14);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.isInterfaceRecorded();
        boolean boolean26 = jSDocInfoBuilder23.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj32 = node30.getProp(43);
        boolean boolean33 = node30.isCall();
        boolean boolean34 = node30.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node30, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder37 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray39 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray40 = (java.util.ArrayList<java.lang.String>[]) arrayListArray39;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder41 = strListBuilder37.add((java.util.ArrayList<java.lang.String>[]) arrayListArray39);
        boolean boolean42 = jSTypeExpression36.equals((java.lang.Object) arrayListArray39);
        boolean boolean43 = jSDocInfoBuilder23.recordDefineType(jSTypeExpression36);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition44 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int45 = namePosition44.getEndLine();
        int int46 = namePosition44.getStartLine();
        com.google.javascript.rhino.Node node47 = namePosition44.getItem();
        boolean boolean48 = jSTypeExpression36.equals((java.lang.Object) node47);
        boolean boolean49 = jSTypeExpression36.isOptionalArg();
        boolean boolean50 = jSDocInfoBuilder1.recordTypedef(jSTypeExpression36);
        boolean boolean51 = jSDocInfoBuilder1.isJavaDispatch();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfoBuilder> jSDocInfoBuilderList52 = com.google.common.collect.ImmutableList.of(jSDocInfoBuilder1);
        com.google.javascript.rhino.Node node53 = null;
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = jSDocInfoBuilder1.build(node53);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder56 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean58 = jSDocInfoBuilder56.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = null;
        jSDocInfoBuilder56.markName("hi!", staticSourceFile60, (int) (short) 0, (int) (short) 100);
        jSDocInfoBuilder56.markText("hi!", 0, 32, (int) (short) 10, (int) '#');
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder71 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean72 = jSDocInfoBuilder71.recordNoTypeCheck();
        jSDocInfoBuilder71.recordOriginalCommentString("");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean79 = node78.isVar();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node84 = node78.copyInformationFromForTree(node83);
        com.google.javascript.rhino.Node node85 = node78.cloneTree();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression87 = new com.google.javascript.rhino.JSTypeExpression(node85, "STRING  43");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression87);
        boolean boolean89 = jSDocInfoBuilder71.recordReturnType(jSTypeExpression87);
        boolean boolean90 = jSDocInfoBuilder56.recordType(jSTypeExpression87);
        boolean boolean91 = jSDocInfoBuilder1.recordThisType(jSTypeExpression87);
        boolean boolean92 = jSTypeExpression87.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strListBuilder15);
        org.junit.Assert.assertNotNull(arrayListArray17);
        org.junit.Assert.assertNotNull(strListArray18);
        org.junit.Assert.assertNotNull(strListBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strListBuilder37);
        org.junit.Assert.assertNotNull(arrayListArray39);
        org.junit.Assert.assertNotNull(strListArray40);
        org.junit.Assert.assertNotNull(strListBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(jSDocInfoBuilderList52);
        org.junit.Assert.assertNotNull(jSDocInfo54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(jSTypeExpression88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test07469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07469");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str1 = stringPosition0.getItem();
        java.lang.String str2 = stringPosition0.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str4 = stringPosition3.getItem();
        java.lang.String str5 = stringPosition3.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str7 = stringPosition6.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str9 = stringPosition8.getItem();
        java.lang.String str10 = stringPosition8.getItem();
        int int11 = stringPosition8.getPositionOnStartLine();
        int int12 = stringPosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition14 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str16 = stringPosition15.getItem();
        stringPosition15.setItem("");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str20 = stringPosition19.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str22 = stringPosition21.getItem();
        java.lang.String str23 = stringPosition21.getItem();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        java.lang.String str25 = stringPosition24.getItem();
        java.lang.String str26 = stringPosition24.getItem();
        int int27 = stringPosition24.getPositionOnStartLine();
        int int28 = stringPosition24.getStartLine();
        int int29 = stringPosition24.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.StringPosition> stringPositionList30 = com.google.common.collect.ImmutableList.of(stringPosition0, stringPosition3, stringPosition6, stringPosition8, stringPosition13, stringPosition14, stringPosition15, stringPosition19, stringPosition21, stringPosition24);
        int int31 = stringPosition8.getEndLine();
        int int32 = stringPosition8.getPositionOnStartLine();
        int int33 = stringPosition8.getStartLine();
        stringPosition8.setItem("GETELEM");
        // The following exception was thrown during execution in test generation
        try {
            stringPosition8.setPositionInformation((int) 'a', 38, 16, 176180);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 97?end-line: 16");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(stringPositionList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test07470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07470");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean3 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean5 = typePosition4.hasBrackets();
        int int6 = typePosition4.getEndLine();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node10.addChildrenToFront(node14);
        boolean boolean16 = node10.isGetterDef();
        boolean boolean17 = node10.isEmpty();
        typePosition4.setItem(node10);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node10.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node24.addChildrenToFront(node28);
        boolean boolean30 = node24.isGetterDef();
        boolean boolean31 = node24.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj37 = node35.getProp(43);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int42 = node41.getSourceOffset();
        com.google.javascript.rhino.Node node43 = node35.useSourceInfoIfMissingFromForTree(node41);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray49 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        node47.setDirectives((java.util.Set<java.lang.String>) strSet50);
        com.google.javascript.rhino.Node node53 = node41.useSourceInfoIfMissingFromForTree(node47);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(32, node24, node41);
        boolean boolean55 = node24.isComma();
        com.google.javascript.rhino.Node node56 = node10.srcref(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = jSDocInfoBuilder1.build(node10);
        boolean boolean58 = jSDocInfoBuilder1.recordExpose();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSDocInfo57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test07471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07471");
        java.lang.String[] strArray4 = new java.lang.String[] { "[, hi!, , , hi!, , hi!, ]", "", "[, hi!, , , hi!, , hi!, ]", "hi!" };
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = com.google.common.collect.ImmutableList.copyOf(strArray4);
        int int6 = strList5.size();
        com.google.common.collect.ImmutableList<java.lang.String> strList17 = com.google.common.collect.ImmutableList.of("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", "hi!", "", "NUMBER 0.0 43", "", "[]", "hi!", "[]", "STRING ", "NUMBER 0.0 43");
        com.google.common.collect.UnmodifiableListIterator<java.lang.String> strItor18 = strList17.listIterator();
        boolean boolean19 = strList5.containsAll((java.util.Collection<java.lang.String>) strList17);
        java.lang.String str21 = strList17.get((int) (short) 1);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean24 = jSDocInfoBuilder23.isPopulated();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray30 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        node28.setDirectives((java.util.Set<java.lang.String>) strSet31);
        java.lang.Object[] objArray34 = strSet31.toArray();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray40 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        node38.setDirectives((java.util.Set<java.lang.String>) strSet41);
        java.lang.Object[] objArray44 = strSet41.toArray();
        boolean boolean45 = strSet31.retainAll((java.util.Collection<java.lang.String>) strSet41);
        java.lang.Object[] objArray46 = strSet31.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder48 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean50 = jSDocInfoBuilder48.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = null;
        jSDocInfoBuilder48.markName("hi!", staticSourceFile52, (int) (short) 0, (int) (short) 100);
        boolean boolean56 = jSDocInfoBuilder48.recordNoTypeCheck();
        boolean boolean57 = jSDocInfoBuilder48.recordExpose();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node61.addChildrenToFront(node65);
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = jSDocInfoBuilder48.build(node65);
        java.lang.String str68 = jSDocInfo67.getMeaning();
        boolean boolean69 = jSDocInfo67.isExport();
        boolean boolean70 = strSet31.equals((java.lang.Object) jSDocInfo67);
        boolean boolean71 = jSDocInfoBuilder23.recordSuppressions((java.util.Set<java.lang.String>) strSet31);
        int int72 = strSet31.size();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition73 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int74 = namePosition73.getEndLine();
        int int75 = namePosition73.getStartLine();
        int int76 = namePosition73.getPositionOnEndLine();
        int int77 = namePosition73.getEndLine();
        int int78 = namePosition73.getStartLine();
        com.google.javascript.rhino.Node node79 = namePosition73.getItem();
        boolean boolean80 = strSet31.remove((java.lang.Object) node79);
        java.lang.Object[] objArray81 = strSet31.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = strList17.addAll((java.util.Collection<java.lang.String>) strSet31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strItor18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSDocInfo67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
    }

    @Test
    public void test07472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07472");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(12, "", (int) ' ', 47);
        com.google.javascript.rhino.Node node5 = node4.getNext();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        sideEffectFlags7.clearAllFlags();
        sideEffectFlags7.clearAllFlags();
        sideEffectFlags7.setMutatesArguments();
        sideEffectFlags7.setAllFlags();
        sideEffectFlags7.setMutatesGlobalState();
        sideEffectFlags7.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node5.setSideEffectFlags(sideEffectFlags7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test07473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07473");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj5 = node3.getProp(43);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int10 = node9.getSourceOffset();
        com.google.javascript.rhino.Node node11 = node3.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray17 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        node15.setDirectives((java.util.Set<java.lang.String>) strSet18);
        com.google.javascript.rhino.Node node21 = node9.useSourceInfoIfMissingFromForTree(node15);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.InputId inputId23 = node21.getInputId();
        boolean boolean24 = node21.isDelProp();
        com.google.javascript.rhino.Node node25 = node21.removeFirstChild();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj31 = node29.getProp(43);
        boolean boolean32 = node29.isCall();
        int int33 = node29.getSourcePosition();
        java.lang.String str37 = node29.toString(false, true, false);
        boolean boolean38 = node29.isDo();
        boolean boolean39 = node29.isWith();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean44 = node43.isVar();
        node43.putBooleanProp(30, false);
        boolean boolean48 = node43.isSwitch();
        boolean boolean49 = node43.isUnscopedQualifiedName();
        boolean boolean50 = node29.isEquivalentTo(node43);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node54.addChildrenToFront(node58);
        com.google.javascript.rhino.Node node61 = node54.getChildAtIndex(0);
        java.lang.String str62 = node61.toString();
        node61.setSourceEncodedPositionForTree((int) (byte) -1);
        node61.setOptionalArg(false);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj72 = node70.getProp(43);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int77 = node76.getSourceOffset();
        com.google.javascript.rhino.Node node78 = node70.useSourceInfoIfMissingFromForTree(node76);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean83 = node82.isVar();
        com.google.javascript.rhino.Node node87 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node88 = node82.copyInformationFromForTree(node87);
        com.google.javascript.rhino.Node node89 = node70.copyInformationFromForTree(node88);
        boolean boolean90 = node61.isEquivalentToTyped(node70);
        com.google.javascript.rhino.Node node91 = node29.srcrefTree(node61);
        com.google.javascript.rhino.Node node92 = node21.copyInformationFromForTree(node61);
        int int93 = node61.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(inputId23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 176180 + "'", int33 == 176180);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "STRING " + "'", str37, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "STRING  43" + "'", str62, "STRING  43");
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test07474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07474");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo20.getThisType();
        boolean boolean24 = jSDocInfo20.shouldPreserveTry();
        boolean boolean25 = jSDocInfo20.hasReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility26);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
    }

    @Test
    public void test07475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07475");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.recordConstructor();
        boolean boolean5 = jSDocInfoBuilder1.addAuthor("STRING  43 [quoted: 1]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test07476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07476");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean6 = typePosition5.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList7 = com.google.common.collect.ImmutableList.of(typePosition0, typePosition1, typePosition2, typePosition3, typePosition4, typePosition5);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition8 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean9 = typePosition8.hasBrackets();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean14 = node13.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray20 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        node18.setDirectives((java.util.Set<java.lang.String>) strSet21);
        java.lang.Object obj25 = node18.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node13.copyInformationFrom(node18);
        typePosition8.setItem(node26);
        int int28 = typePosition8.getStartLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition29 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition30 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition31 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition32 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition33 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition34 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean35 = typePosition34.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.TypePosition> typePositionList36 = com.google.common.collect.ImmutableList.of(typePosition29, typePosition30, typePosition31, typePosition32, typePosition33, typePosition34);
        int int37 = typePosition31.getEndLine();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean42 = node41.isNull();
        boolean boolean43 = node41.isSyntheticBlock();
        boolean boolean44 = node41.hasMoreThanOneChild();
        typePosition31.setItem(node41);
        boolean boolean46 = typePosition31.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition4, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition8, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition31);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList48 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition31);
        int int49 = typePosition31.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typePositionList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(typePositionList36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertNotNull(nodeSourcePositionList48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test07477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07477");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean6 = node5.isVar();
        node5.putBooleanProp(30, false);
        boolean boolean10 = node5.isSwitch();
        boolean boolean11 = node5.isUnscopedQualifiedName();
        boolean boolean12 = node5.hasChildren();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node5.setStaticSourceFile(staticSourceFile13);
        boolean boolean15 = node5.isGetElem();
        namePosition0.setItem(node5);
        boolean boolean17 = node5.isCatch();
        boolean boolean18 = node5.isRegExp();
        boolean boolean19 = node5.hasMoreThanOneChild();
        boolean boolean20 = node5.isNot();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07478");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean26 = node25.isOptionalArg();
        com.google.javascript.rhino.Node node27 = node25.getNext();
        jSDocInfo20.setAssociatedNode(node27);
        java.util.Collection<java.lang.String> strCollection29 = jSDocInfo20.getAuthors();
        boolean boolean30 = jSDocInfo20.isConstructor();
        boolean boolean31 = jSDocInfo20.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression32 = jSDocInfo20.getThisType();
        boolean boolean33 = jSDocInfo20.isNoTypeCheck();
        boolean boolean34 = jSDocInfo20.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo20.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNull(strCollection29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
    }

    @Test
    public void test07479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07479");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder22 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean23 = jSDocInfoBuilder22.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder25 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean26 = jSDocInfoBuilder25.isInterfaceRecorded();
        boolean boolean28 = jSDocInfoBuilder25.recordBlockDescription("hi!");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj34 = node32.getProp(43);
        boolean boolean35 = node32.isCall();
        boolean boolean36 = node32.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = new com.google.javascript.rhino.JSTypeExpression(node32, "STRING ");
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder39 = com.google.common.collect.ImmutableList.builder();
        java.util.ArrayList[] arrayListArray41 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray42 = (java.util.ArrayList<java.lang.String>[]) arrayListArray41;
        com.google.common.collect.ImmutableList.Builder<java.util.ArrayList<java.lang.String>> strListBuilder43 = strListBuilder39.add((java.util.ArrayList<java.lang.String>[]) arrayListArray41);
        boolean boolean44 = jSTypeExpression38.equals((java.lang.Object) arrayListArray41);
        boolean boolean45 = jSDocInfoBuilder25.recordDefineType(jSTypeExpression38);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition46 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int47 = namePosition46.getEndLine();
        int int48 = namePosition46.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition46.getItem();
        boolean boolean50 = jSTypeExpression38.equals((java.lang.Object) node49);
        boolean boolean51 = jSDocInfoBuilder22.recordExtendedInterface(jSTypeExpression38);
        boolean boolean52 = jSDocInfoBuilder1.recordExtendedInterface(jSTypeExpression38);
        boolean boolean54 = jSDocInfoBuilder1.recordBlockDescription("");
        boolean boolean55 = jSDocInfoBuilder1.isDescriptionRecorded();
        jSDocInfoBuilder1.markText("JSDocInfo", (int) (byte) -1, 40, 4095, 46);
        jSDocInfoBuilder1.recordOriginalCommentString("TYPEOF 1\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean64 = jSDocInfoBuilder1.recordIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strListBuilder39);
        org.junit.Assert.assertNotNull(arrayListArray41);
        org.junit.Assert.assertNotNull(strListArray42);
        org.junit.Assert.assertNotNull(strListBuilder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test07480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07480");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection26 = jSDocInfo20.getTypeNodes();
        boolean boolean27 = jSDocInfo20.hasReturnType();
        boolean boolean28 = jSDocInfo20.isExpose();
        java.lang.String str29 = jSDocInfo20.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getReturnType();
        java.lang.String str31 = jSDocInfo20.getReturnDescription();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeCollection26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test07481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07481");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isConstructorRecorded();
        boolean boolean4 = jSDocInfoBuilder1.recordPreserveTry();
        boolean boolean5 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder7 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean8 = jSDocInfoBuilder7.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder7.recordMeaning("[, hi!, , , hi!, , hi!, ]");
        boolean boolean11 = jSDocInfoBuilder7.recordPreserveTry();
        boolean boolean12 = jSDocInfoBuilder7.recordExterns();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder14 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean16 = jSDocInfoBuilder14.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = null;
        jSDocInfoBuilder14.markName("hi!", staticSourceFile18, (int) (short) 0, (int) (short) 100);
        boolean boolean22 = jSDocInfoBuilder14.recordNoTypeCheck();
        boolean boolean23 = jSDocInfoBuilder14.recordExpose();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node27.addChildrenToFront(node31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = jSDocInfoBuilder14.build(node31);
        boolean boolean34 = jSDocInfoBuilder14.shouldParseDocumentation();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean39 = node38.isVar();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) 40, (int) (short) 10, (-1));
        com.google.javascript.rhino.Node node44 = node38.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node45 = node38.cloneTree();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = new com.google.javascript.rhino.JSTypeExpression(node45, "STRING  43");
        boolean boolean48 = jSTypeExpression47.isVarArgs();
        boolean boolean49 = jSDocInfoBuilder14.recordBaseType(jSTypeExpression47);
        boolean boolean50 = jSDocInfoBuilder7.recordThisType(jSTypeExpression47);
        com.google.javascript.rhino.Node node51 = jSTypeExpression47.getRoot();
        boolean boolean52 = jSDocInfoBuilder1.recordThrowType(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSDocInfo33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test07482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07482");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder3 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean5 = jSDocInfoBuilder3.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = null;
        jSDocInfoBuilder3.markName("hi!", staticSourceFile7, (int) (short) 0, (int) (short) 100);
        boolean boolean11 = jSDocInfoBuilder3.recordNoTypeCheck();
        boolean boolean12 = jSDocInfoBuilder3.recordExpose();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node16.addChildrenToFront(node20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = jSDocInfoBuilder3.build(node20);
        boolean boolean23 = jSDocInfo22.isConstructor();
        boolean boolean25 = jSDocInfo22.hasParameterType("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nTYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: TYPEOF 43\n    NUMBER 0.0 43 [directives: []]\n    NUMBER 0.0 43\n    STRING  43\n    STRING  43\n");
        boolean boolean26 = jSDocInfo22.isNoSideEffects();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection27 = jSDocInfo22.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int38 = strList36.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int49 = strList47.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList58 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList67 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList68 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList36, (java.lang.Iterable<java.lang.String>) strList47, (java.lang.Iterable<java.lang.String>) strList58, (java.lang.Iterable<java.lang.String>) strList67);
        com.google.common.collect.ImmutableList<java.lang.String> strList77 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int79 = strList77.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator80 = strList77.spliterator();
        boolean boolean81 = strList47.equals((java.lang.Object) strList77);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean86 = node85.isNull();
        boolean boolean87 = node85.isSyntheticBlock();
        com.google.javascript.rhino.Node node88 = node85.removeChildren();
        com.google.javascript.rhino.InputId inputId89 = null;
        node85.setInputId(inputId89);
        boolean boolean91 = strList47.equals((java.lang.Object) node85);
        boolean boolean92 = node85.isParamList();
        jSDocInfo22.setAssociatedNode(node85);
        typePosition0.setItem(node85);
        int int95 = typePosition0.getPositionOnEndLine();
        int int96 = typePosition0.getStartLine();
        int int97 = typePosition0.getEndLine();
        int int98 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeCollection27);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(strIterableList68);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(node88);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test07483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07483");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.lang.String str23 = jSDocInfo20.getLicense();
        boolean boolean24 = jSDocInfo20.isExport();
        boolean boolean25 = jSDocInfo20.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression27 = jSDocInfo20.getParameterType("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo20.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo20.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo20.getReturnType();
        boolean boolean31 = jSDocInfo20.isNoCompile();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression27);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07484");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean4 = node3.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray10 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        node8.setDirectives((java.util.Set<java.lang.String>) strSet11);
        java.lang.Object obj15 = node8.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node3.copyInformationFrom(node8);
        boolean boolean17 = node16.hasMoreThanOneChild();
        boolean boolean18 = node16.isQuotedString();
        boolean boolean19 = node16.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07485");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = null;
        boolean boolean5 = jSDocInfoBuilder1.recordParameter("", jSTypeExpression4);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        boolean boolean16 = strSet12.contains((java.lang.Object) 10.0d);
        com.google.common.collect.ImmutableList<java.lang.String> strList25 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int27 = strList25.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList36 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int38 = strList36.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList47 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList56 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList57 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList25, (java.lang.Iterable<java.lang.String>) strList36, (java.lang.Iterable<java.lang.String>) strList47, (java.lang.Iterable<java.lang.String>) strList56);
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int68 = strList66.indexOf((java.lang.Object) 'a');
        java.util.Spliterator<java.lang.String> strSpliterator69 = strList66.spliterator();
        boolean boolean70 = strList36.equals((java.lang.Object) strList66);
        boolean boolean71 = strSet12.addAll((java.util.Collection<java.lang.String>) strList66);
        boolean boolean72 = jSDocInfoBuilder1.recordSuppressions((java.util.Set<java.lang.String>) strSet12);
        jSDocInfoBuilder1.markText("NUMBER 0.0 [directives: []]", 32, 26, 35, (int) (short) 0);
        boolean boolean79 = jSDocInfoBuilder1.recordConstancy();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj85 = node83.getProp(43);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int90 = node89.getSourceOffset();
        com.google.javascript.rhino.Node node91 = node83.useSourceInfoIfMissingFromForTree(node89);
        boolean boolean92 = node91.isAssignAdd();
        boolean boolean93 = node91.isScript();
        boolean boolean94 = node91.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = jSDocInfoBuilder1.build(node91);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility96 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        boolean boolean97 = jSDocInfoBuilder1.recordVisibility(visibility96);
        boolean boolean98 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean99 = jSDocInfoBuilder1.shouldParseDocumentation();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(strIterableList57);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(strSpliterator69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(obj85);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jSDocInfo95);
        org.junit.Assert.assertTrue("'" + visibility96 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility96.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test07486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07486");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        boolean boolean5 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray11 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        node9.setDirectives((java.util.Set<java.lang.String>) strSet12);
        java.lang.Object obj16 = node9.getProp((int) (byte) 1);
        com.google.javascript.rhino.Node node17 = node4.copyInformationFrom(node9);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean22 = node21.isNull();
        boolean boolean23 = node21.isSyntheticBlock();
        com.google.javascript.rhino.Node node24 = node21.removeChildren();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        boolean boolean29 = node28.isDebugger();
        com.google.javascript.rhino.Node node30 = node28.getFirstChild();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj36 = node34.getProp(43);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int41 = node40.getSourceOffset();
        com.google.javascript.rhino.Node node42 = node34.useSourceInfoIfMissingFromForTree(node40);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(38, node9, node21, node28, node34);
        int int44 = node28.getType();
        int int45 = node28.getType();
        boolean boolean47 = node28.getBooleanProp((int) (short) 1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 39 + "'", int44 == 39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 39 + "'", int45 == 39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test07487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07487");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo20.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo20.isImplicitCast();
        jSDocInfo20.addSuppression("hi!");
        java.util.Collection<java.lang.String> strCollection27 = jSDocInfo20.getAuthors();
        boolean boolean28 = jSDocInfo20.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(strCollection27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test07488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07488");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isDefine();
        boolean boolean23 = jSDocInfo20.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = jSDocInfo20.getEnumParameterType();
        jSDocInfo20.addSuppression("");
        java.lang.String str27 = jSDocInfo20.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = jSDocInfo20.getParameterType("NUMBER 0.0 43 [directives: []]\n");
        boolean boolean30 = jSDocInfo20.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(jSTypeExpression24);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(jSTypeExpression29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07489");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet6.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList31 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int33 = strList31.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList42 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        int int44 = strList42.indexOf((java.lang.Object) 'a');
        com.google.common.collect.ImmutableList<java.lang.String> strList53 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.String> strList62 = com.google.common.collect.ImmutableList.of("", "hi!", "", "", "hi!", "", "hi!", "");
        com.google.common.collect.ImmutableList<java.lang.Iterable<java.lang.String>> strIterableList63 = com.google.common.collect.ImmutableList.of((java.lang.Iterable<java.lang.String>) strList31, (java.lang.Iterable<java.lang.String>) strList42, (java.lang.Iterable<java.lang.String>) strList53, (java.lang.Iterable<java.lang.String>) strList62);
        boolean boolean64 = strSet6.equals((java.lang.Object) strList62);
        java.util.Spliterator<java.lang.String> strSpliterator65 = strList62.spliterator();
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = strList62.asList();
        java.lang.Object[] objArray67 = strList66.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = strList66.set(176129, "STRING  43 [empty_block: 1]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strSpliterator22);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strIterableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strSpliterator65);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[, hi!, , , hi!, , hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[, hi!, , , hi!, , hi!, ]");
    }

    @Test
    public void test07490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07490");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray5 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet6);
        java.lang.Object[] objArray9 = strSet6.toArray();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        java.lang.String[] strArray15 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        node13.setDirectives((java.util.Set<java.lang.String>) strSet16);
        java.lang.Object[] objArray19 = strSet16.toArray();
        boolean boolean20 = strSet6.retainAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet6.toArray();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder23 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean25 = jSDocInfoBuilder23.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = null;
        jSDocInfoBuilder23.markName("hi!", staticSourceFile27, (int) (short) 0, (int) (short) 100);
        boolean boolean31 = jSDocInfoBuilder23.recordNoTypeCheck();
        boolean boolean32 = jSDocInfoBuilder23.recordExpose();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node36.addChildrenToFront(node40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = jSDocInfoBuilder23.build(node40);
        java.lang.String str43 = jSDocInfo42.getMeaning();
        boolean boolean44 = jSDocInfo42.isExport();
        boolean boolean45 = strSet6.equals((java.lang.Object) jSDocInfo42);
        boolean boolean46 = jSDocInfo42.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo42.getType();
        boolean boolean48 = jSDocInfo42.containsDeclaration();
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder50 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean52 = jSDocInfoBuilder50.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = null;
        jSDocInfoBuilder50.markName("hi!", staticSourceFile54, (int) (short) 0, (int) (short) 100);
        boolean boolean58 = jSDocInfoBuilder50.recordNoTypeCheck();
        boolean boolean59 = jSDocInfoBuilder50.recordExpose();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node63.addChildrenToFront(node67);
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = jSDocInfoBuilder50.build(node67);
        boolean boolean70 = jSDocInfo69.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo69.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility72 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo69.setVisibility(visibility72);
        jSDocInfo42.setVisibility(visibility72);
        boolean boolean75 = jSDocInfo42.containsDeclaration();
        boolean boolean76 = jSDocInfo42.isExpose();
        java.lang.String str78 = jSDocInfo42.getDescriptionForParameter("OR  54\n");
        boolean boolean79 = jSDocInfo42.hasBaseType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSDocInfo42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSDocInfo69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + visibility72 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility72.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test07491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07491");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getTypedefType();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo20.getAuthors();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility24 = jSDocInfo20.getVisibility();
        boolean boolean25 = jSDocInfo20.isNoTypeCheck();
        boolean boolean26 = jSDocInfo20.hasBaseType();
        boolean boolean27 = jSDocInfo20.hasType();
        int int28 = jSDocInfo20.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(strCollection23);
        org.junit.Assert.assertTrue("'" + visibility24 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility24.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test07492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07492");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.JSDocInfo.Visibility[]> visibilityArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(visibilityArrayBuilder0);
    }

    @Test
    public void test07493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07493");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo20.getType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility23 = com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC;
        jSDocInfo20.setVisibility(visibility23);
        boolean boolean25 = jSDocInfo20.hasBaseType();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node29.addChildrenToFront(node33);
        boolean boolean35 = node29.isGetterDef();
        boolean boolean36 = node29.hasMoreThanOneChild();
        jSDocInfo20.setAssociatedNode(node29);
        boolean boolean38 = jSDocInfo20.hasReturnType();
        boolean boolean39 = jSDocInfo20.isIdGenerator();
        boolean boolean40 = jSDocInfo20.hasThisType();
        boolean boolean41 = jSDocInfo20.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertTrue("'" + visibility23 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC + "'", visibility23.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test07494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07494");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        java.lang.String str21 = jSDocInfo20.getMeaning();
        boolean boolean22 = jSDocInfo20.isExport();
        boolean boolean24 = jSDocInfo20.hasDescriptionForParameter("STRING ");
        boolean boolean25 = jSDocInfo20.hasEnumParameterType();
        boolean boolean26 = jSDocInfo20.isNoCompile();
        int int27 = jSDocInfo20.getImplementedInterfaceCount();
        java.lang.String str28 = jSDocInfo20.getBlockDescription();
        java.lang.String str29 = jSDocInfo20.getVersion();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test07495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07495");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean3 = jSDocInfoBuilder1.isInterfaceRecorded();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj9 = node7.getProp(43);
        int int10 = node7.getType();
        boolean boolean11 = node7.isGetterDef();
        node7.setSourceEncodedPositionForTree(54);
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = jSDocInfoBuilder1.build(node7);
        boolean boolean15 = jSDocInfo14.isNoSideEffects();
        boolean boolean16 = jSDocInfo14.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo14.getExtendedInterfaces();
        boolean boolean18 = jSDocInfo14.hasType();
        boolean boolean19 = jSDocInfo14.isConsistentIdGenerator();
        int int20 = jSDocInfo14.getImplementedInterfaceCount();
        boolean boolean21 = jSDocInfo14.hasThisType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07496");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean3 = jSDocInfoBuilder1.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = null;
        jSDocInfoBuilder1.markName("hi!", staticSourceFile5, (int) (short) 0, (int) (short) 100);
        boolean boolean9 = jSDocInfoBuilder1.recordNoTypeCheck();
        boolean boolean10 = jSDocInfoBuilder1.recordExpose();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node14.addChildrenToFront(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = jSDocInfoBuilder1.build(node18);
        boolean boolean21 = jSDocInfo20.isConstructor();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection22 = jSDocInfo20.getTypeNodes();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo20.getSuppressions();
        com.google.common.collect.ImmutableList<java.util.Set<java.lang.String>> strSetList24 = com.google.common.collect.ImmutableList.of(strSet23);
        boolean boolean25 = strSet23.isEmpty();
        java.util.Iterator<java.lang.String> strItor26 = strSet23.iterator();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeCollection22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strSetList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strItor26);
    }

    @Test
    public void test07497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07497");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int7 = node6.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType8 = node6.getJSType();
        boolean boolean9 = node6.isWith();
        typePosition0.setItem(node6);
        com.google.javascript.rhino.Node node11 = typePosition0.getItem();
        boolean boolean12 = node11.isCase();
        node11.removeProp((int) '4');
        boolean boolean15 = node11.isVar();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07498");
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder1 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean2 = jSDocInfoBuilder1.isInterfaceRecorded();
        boolean boolean3 = jSDocInfoBuilder1.isPopulatedWithFileOverview();
        boolean boolean4 = jSDocInfoBuilder1.recordOverride();
        jSDocInfoBuilder1.markName("Node tree inequality:\nTree1:\nNUMBER 0.0 43 [directives: []]\n\n\nTree2:\nSTRING \n\n\nSubtree1: NUMBER 0.0 43 [directives: []]\n\n\nSubtree2: STRING \n", (int) (short) 10, 48);
        com.google.javascript.rhino.JSDocInfoBuilder jSDocInfoBuilder10 = new com.google.javascript.rhino.JSDocInfoBuilder(false);
        boolean boolean12 = jSDocInfoBuilder10.recordVersion("");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = null;
        jSDocInfoBuilder10.markName("hi!", staticSourceFile14, (int) (short) 0, (int) (short) 100);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression18 = null;
        boolean boolean19 = jSDocInfoBuilder10.recordEnumParameterType(jSTypeExpression18);
        boolean boolean20 = jSDocInfoBuilder10.recordConstructor();
        boolean boolean21 = jSDocInfoBuilder10.recordNoTypeCheck();
        boolean boolean22 = jSDocInfoBuilder10.isConstructorRecorded();
        boolean boolean23 = jSDocInfoBuilder10.isDescriptionRecorded();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        java.lang.Object obj30 = node28.getProp(43);
        boolean boolean31 = node28.isCall();
        boolean boolean32 = node28.isEmpty();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node28, "STRING ");
        boolean boolean35 = jSDocInfoBuilder10.recordParameter("Node tree inequality:\nTree1:\nSTRING  43\n\n\nTree2:\nNUMBER 0.0 43\n\n\nSubtree1: STRING  43\n\n\nSubtree2: NUMBER 0.0 43\n", jSTypeExpression34);
        boolean boolean36 = jSDocInfoBuilder1.recordType(jSTypeExpression34);
        boolean boolean38 = jSDocInfoBuilder1.addReference("");
        boolean boolean39 = jSDocInfoBuilder1.recordExport();
        boolean boolean41 = jSDocInfoBuilder1.recordFileOverview("STRING  0");
        boolean boolean42 = jSDocInfoBuilder1.recordNoCompile();
        boolean boolean44 = jSDocInfoBuilder1.recordVersion("NUMBER 0.0 43");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test07499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07499");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 43, (int) '4');
        node3.addChildrenToFront(node7);
        boolean boolean9 = node3.isGetterDef();
        boolean boolean10 = node3.hasMoreThanOneChild();
        boolean boolean11 = node3.isBlock();
        boolean boolean12 = node3.isSetterDef();
        java.util.Set<java.lang.String> strSet13 = node3.getDirectives();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node3.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(nodeIterable14);
    }

    @Test
    public void test07500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07500");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(37);
        com.google.javascript.rhino.Node node2 = node1.getParent();
        com.google.javascript.rhino.InputId inputId3 = node1.getInputId();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber(0.0d, 43, 1);
        int int8 = node7.getSourceOffset();
        com.google.javascript.rhino.jstype.JSType jSType9 = node7.getJSType();
        boolean boolean10 = node7.isDelProp();
        java.lang.String str11 = node7.toString();
        node1.addChildToBack(node7);
        boolean boolean13 = node1.isAssign();
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNull(inputId3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 0.0 43" + "'", str11, "NUMBER 0.0 43");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }
}


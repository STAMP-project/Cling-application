import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest9 {

    public static boolean debug = false;

    @Test
    public void test04501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04501");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
        org.joda.time.LocalDate localDate7 = localDate1.withYearOfEra((int) '#');
        org.joda.time.LocalDate.Property property8 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate10 = localDate1.withYear(53654);
        org.joda.time.LocalDate localDate12 = localDate1.plusMonths(53654);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Period period17 = mutableInterval15.toPeriod();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate21 = localDate19.withDayOfMonth(21);
        int int22 = localDate21.getMonthOfYear();
        org.joda.time.DateTime dateTime23 = localDate21.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime24 = localDate21.toDateTimeAtCurrentTime();
        boolean boolean25 = mutableInterval15.contains((org.joda.time.ReadableInstant) dateTime24);
        long long26 = mutableInterval15.getEndMillis();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime34 = dateTime29.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        int int39 = dateTime36.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = dateTime36.toDateTime(dateTimeZone40);
        int int42 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean47 = interval45.isAfter((long) 10);
        org.joda.time.Duration duration48 = interval45.toDuration();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        boolean boolean53 = interval51.isAfter((long) 10);
        org.joda.time.Duration duration54 = interval51.toDuration();
        org.joda.time.Duration duration56 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) '4');
        org.joda.time.DateTime dateTime57 = dateTime29.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        boolean boolean62 = interval60.isAfter((long) 10);
        org.joda.time.Duration duration63 = interval60.toDuration();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean68 = interval66.isAfter((long) 10);
        org.joda.time.Duration duration69 = interval66.toDuration();
        org.joda.time.Duration duration71 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration69, (int) '4');
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime73);
        int int75 = dateTime72.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = dateTime72.toDateTime(dateTimeZone76);
        int int78 = dateTime77.getCenturyOfEra();
        org.joda.time.Interval interval79 = duration69.toIntervalTo((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime dateTime81 = dateTime77.minusWeeks(6139);
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime81.toMutableDateTimeISO();
        org.joda.time.Period period83 = duration54.toPeriodTo((org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = mutableInterval15.isBefore((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Period period85 = mutableInterval15.toPeriod();
        org.joda.time.LocalDate localDate87 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period85, 4492);
        org.joda.time.DurationFieldType[] durationFieldTypeArray88 = period85.getFieldTypes();
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.forFields(durationFieldTypeArray88);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 426L + "'", long16 == 426L);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 478L + "'", long26 == 478L);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 19 + "'", int78 == 19);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(durationFieldTypeArray88);
        org.junit.Assert.assertNotNull(periodType89);
    }

    @Test
    public void test04502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04502");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        boolean boolean9 = interval7.isAfter((long) 10);
        org.joda.time.Duration duration10 = interval7.toDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        boolean boolean16 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadableDuration) duration14);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime2.toGregorianCalendar();
        java.time.Instant instant19 = gregorianCalendar18.toInstant();
        gregorianCalendar18.set(56751, 98, 625, 2022, 0, 45);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = gregorianCalendar18.getGreatestMinimum(645);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 645");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test04503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04503");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) (byte) 100);
        boolean boolean9 = dateTime5.isBefore((long) (short) 1);
        org.joda.time.DateTime dateTime11 = dateTime5.withSecondOfMinute(14);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime12, (org.joda.time.ReadablePartial) localTime13, periodType14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime22 = dateTime19.toLocalTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.DateTime dateTime30 = dateTime19.withDurationAdded((org.joda.time.ReadableDuration) duration28, 0);
        org.joda.time.DateTime dateTime31 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime37.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyear();
        org.joda.time.DateTime dateTime46 = dateTime33.toDateTime(chronology43);
        org.joda.time.DateTime.Property property47 = dateTime33.millisOfSecond();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType49 = periodType48.withMillisRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime33, periodType48);
        org.joda.time.Period period51 = new org.joda.time.Period(59875200100L, periodType48);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Period period56 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime57 = dateTime52.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime65 = dateTime60.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime67 = dateTime52.toDateTime(chronology66);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime68, (org.joda.time.ReadablePartial) localTime69, periodType70);
        org.joda.time.LocalTime localTime73 = localTime69.withMillisOfSecond(4);
        int[] intArray75 = chronology66.get((org.joda.time.ReadablePartial) localTime69, (long) 0);
        org.joda.time.DurationField durationField76 = chronology66.hours();
        org.joda.time.DateTimeField dateTimeField77 = chronology66.dayOfYear();
        org.joda.time.Period period78 = new org.joda.time.Period((-61977568319990L), periodType48, chronology66);
        org.joda.time.format.PeriodFormatter periodFormatter79 = null;
        java.lang.String str80 = period78.toString(periodFormatter79);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "P0M" + "'", str80, "P0M");
    }

    @Test
    public void test04504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04504");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime10 = dateTime7.toLocalTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean15 = interval13.isAfter((long) 10);
        org.joda.time.Duration duration16 = interval13.toDuration();
        org.joda.time.DateTime dateTime18 = dateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration16, 0);
        org.joda.time.DateTime dateTime19 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter((long) 10);
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.Duration duration33 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) '4');
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime34.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTime(dateTimeZone38);
        int int40 = dateTime39.getCenturyOfEra();
        org.joda.time.Interval interval41 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Minutes minutes42 = duration31.toStandardMinutes();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) minutes42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period50 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime51 = dateTime46.plus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        int int56 = dateTime53.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime53.toDateTime(dateTimeZone57);
        int int59 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = interval62.isAfter((long) 10);
        org.joda.time.Duration duration65 = interval62.toDuration();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = interval68.isAfter((long) 10);
        org.joda.time.Duration duration71 = interval68.toDuration();
        org.joda.time.Duration duration73 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) '4');
        org.joda.time.DateTime dateTime74 = dateTime46.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime.Property property75 = dateTime74.weekOfWeekyear();
        boolean boolean76 = interval43.isAfter((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime.Property property77 = dateTime74.weekyear();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 19 + "'", int40 == 19);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test04505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04505");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime13 = property11.getLocalTime();
        org.joda.time.LocalTime localTime15 = property11.addCopy(12);
        int int16 = property11.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test04506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04506");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period5 = period1.normalizedStandard(periodType4);
        org.joda.time.Period period7 = period1.minusYears(103);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test04507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04507");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) -1, dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.withMaximumValue();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime5, (org.joda.time.ReadablePartial) localTime6, periodType7);
        org.joda.time.LocalTime localTime10 = localTime5.minusSeconds((int) (short) 100);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        int int15 = period12.getHours();
        org.joda.time.LocalTime localTime16 = localTime10.minus((org.joda.time.ReadablePeriod) period12);
        int int17 = localTime4.compareTo((org.joda.time.ReadablePartial) localTime10);
        org.joda.time.LocalTime.Property property18 = localTime10.hourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test04508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04508");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime0.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = dateTime0.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime0.plusSeconds(53658501);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        boolean boolean16 = interval14.isAfter((long) 10);
        org.joda.time.Duration duration17 = interval14.toDuration();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        boolean boolean22 = interval20.isAfter((long) 10);
        org.joda.time.Duration duration23 = interval20.toDuration();
        org.joda.time.Duration duration25 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) '4');
        org.joda.time.Duration duration27 = duration17.withMillis((long) (short) -1);
        long long28 = duration17.getMillis();
        org.joda.time.Period period29 = duration17.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime0.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime31 = dateTime0.withEarlierOffsetAtOverlap();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test04509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04509");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar calendar5 = builder4.build();
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder10 = builder6.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder14 = builder10.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(10L, chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime21 = dateTime17.plusWeeks(4);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        java.util.TimeZone timeZone24 = calendar23.getTimeZone();
        java.util.Calendar.Builder builder25 = builder10.setTimeZone(timeZone24);
        java.util.Calendar.Builder builder26 = builder4.setTimeZone(timeZone24);
        java.util.Calendar.Builder builder30 = builder4.setWeekDate(53658501, 1, 1970);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(10L, chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = dateTime33.get(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusWeeks(4);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        java.util.Date date40 = calendar39.getTime();
        java.util.Calendar.Builder builder41 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder45 = builder41.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder49 = builder45.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(10L, chronology51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekyear();
        int int54 = dateTime52.get(dateTimeFieldType53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusWeeks(4);
        java.util.Locale locale57 = java.util.Locale.ROOT;
        java.util.Calendar calendar58 = dateTime56.toCalendar(locale57);
        java.util.TimeZone timeZone59 = calendar58.getTimeZone();
        java.util.Calendar.Builder builder60 = builder45.setTimeZone(timeZone59);
        timeZone59.setID("65");
        calendar39.setTimeZone(timeZone59);
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.fromCalendarFields(calendar39);
        calendar39.setFirstDayOfWeek(32772);
        java.util.Date date72 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        int int73 = date72.getMinutes();
        calendar39.setTime(date72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder75 = builder30.setInstant(date72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=53627455000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1971,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=256,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=30,SECOND=55,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=191522106600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=32772,minimalDaysInFirstWeek=1,ERA=1,YEAR=8039,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=35,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Thu Jan 29 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1970 + "'", int54 == 1970);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(localDate64);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
    }

    @Test
    public void test04510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04510");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate9 = property7.setCopy(36);
        org.joda.time.LocalDate localDate11 = localDate9.minusDays(536);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test04511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04511");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime.Property property6 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = interval9.isAfter((long) 10);
        boolean boolean12 = interval9.containsNow();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (byte) 100);
        boolean boolean19 = interval9.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int20 = property6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = property6.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(35L, chronology23);
        org.joda.time.LocalTime localTime26 = localTime24.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        org.joda.time.LocalTime localTime30 = localTime24.withFieldAdded(durationFieldType28, (-1));
        org.joda.time.LocalTime localTime32 = localTime30.plusHours(53633080);
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfSecond();
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder39 = builder35.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale42 = new java.util.Locale("", "hi!");
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale43);
        java.lang.String str45 = locale42.getDisplayScript(locale43);
        java.util.Calendar.Builder builder46 = builder39.setLocale(locale42);
        org.joda.time.LocalTime localTime47 = property33.setCopy("70", locale42);
        org.joda.time.LocalTime localTime49 = localTime47.minusSeconds((int) (byte) 10);
        int int50 = property6.compareTo((org.joda.time.ReadablePartial) localTime49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period55 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime56 = dateTime51.plus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property58 = dateTime57.era();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period63 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime64 = dateTime59.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Chronology chronology65 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime66 = dateTime51.toDateTime(chronology65);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime67, (org.joda.time.ReadablePartial) localTime68, periodType69);
        org.joda.time.LocalTime localTime72 = localTime68.withMillisOfSecond(4);
        int[] intArray74 = chronology65.get((org.joda.time.ReadablePartial) localTime68, (long) 0);
        org.joda.time.DateTimeField dateTimeField75 = chronology65.weekyearOfCentury();
        long long77 = dateTimeField75.roundFloor(100L);
        java.lang.String str79 = dateTimeField75.getAsShortText((long) (byte) 100);
        long long82 = dateTimeField75.add((long) (short) 1, (long) 53623795);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.LocalTime localTime85 = new org.joda.time.LocalTime(35L, chronology84);
        int int86 = dateTimeField75.getMinimumValue((org.joda.time.ReadablePartial) localTime85);
        org.joda.time.LocalTime localTime88 = localTime85.withHourOfDay((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int90 = localTime88.get(dateTimeFieldType89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime92 = localTime49.withField(dateTimeFieldType89, 2238);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2238 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "70" + "'", str79, "70");
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1692203524934400001L + "'", long82 == 1692203524934400001L);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test04512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04512");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.withHourOfDay(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime.Property property22 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int30 = localDateTime29.getEra();
        int int31 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime15, (org.joda.time.ReadablePartial) localDateTime29, periodType32);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period36 = period33.plusHours(54);
        org.joda.time.Period period38 = period36.plusYears(1852);
        int int39 = period36.getSeconds();
        org.joda.time.PeriodType periodType40 = period36.getPeriodType();
        org.joda.time.Period period42 = period36.plusHours(56733);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((java.lang.Object) 56733);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT14H" + "'", str34, "PT14H");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test04513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04513");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 17);
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusWeeks(4);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = locale14.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.halfdayOfDay();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DurationField durationField30 = chronology27.years();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType18.getField(chronology27);
        java.util.Locale locale35 = new java.util.Locale("", "hi!");
        java.lang.String str36 = dateTimeField31.getAsShortText(10L, locale35);
        java.lang.String str37 = locale14.getDisplayName(locale35);
        java.lang.String str38 = locale14.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter3.withLocale(locale14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter39.withPivotYear((java.lang.Integer) 32770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter39.withDefaultYear(59);
        java.lang.Integer int44 = dateTimeFormatter43.getPivotYear();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType48 = periodType47.withMillisRemoved();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(10L, chronology50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        int int53 = dateTime51.get(dateTimeFieldType52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean55 = dateTime51.isSupported(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType54.getDurationType();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Period period62 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime63 = dateTime58.plus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property65 = dateTime64.era();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Period period70 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime71 = dateTime66.plus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.Chronology chronology72 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime73 = dateTime58.toDateTime(chronology72);
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime74, (org.joda.time.ReadablePartial) localTime75, periodType76);
        org.joda.time.LocalTime localTime79 = localTime75.withMillisOfSecond(4);
        int[] intArray81 = chronology72.get((org.joda.time.ReadablePartial) localTime75, (long) 0);
        org.joda.time.Chronology chronology82 = chronology72.withUTC();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.dayOfYear();
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((long) 10, chronology82);
        org.joda.time.DateTimeField dateTimeField85 = chronology82.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType54.getField(chronology82);
        org.joda.time.Period period87 = new org.joda.time.Period(312413848400000L, (long) 171, periodType48, chronology82);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter43.withChronology(chronology82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant89 = org.joda.time.Instant.parse("Sun", dateTimeFormatter88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AM" + "'", str36, "AM");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
    }

    @Test
    public void test04514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04514");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths(1);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int23 = localDateTime22.getEra();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = dateTime24.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime24.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int33 = dateTime24.get(dateTimeFieldType32);
        int int34 = localDateTime22.get(dateTimeFieldType32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime22.withMonthOfYear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days40 = duration39.toStandardDays();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.minus((org.joda.time.ReadableDuration) duration39);
        int int42 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime36);
        boolean boolean43 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 14 + "'", int34 == 14);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test04515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04515");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        int int4 = localDate1.getDayOfWeek();
        org.joda.time.LocalDate.Property property5 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate6 = property5.getLocalDate();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test04516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04516");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("117");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 117");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04517");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone14);
        int int16 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.Duration duration30 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) '4');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration22);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval0.copy();
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Duration duration35 = mutableInterval33.toDuration();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(10L, chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(10L, chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        int int43 = dateTime41.get(dateTimeFieldType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean45 = dateTime41.isSupported(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getDurationType();
        boolean boolean47 = dateTime38.equals((java.lang.Object) durationFieldType46);
        org.joda.time.DateTime dateTime49 = dateTime38.plusMillis(762);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDay();
        int int52 = periodType51.size();
        org.joda.time.Period period53 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49, periodType51);
        org.joda.time.PeriodType periodType54 = periodType51.withSecondsRemoved();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
    }

    @Test
    public void test04518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04518");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime6.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime(dateTimeZone10);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.monthOfYear();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = property13.getAsShortText(locale14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withLocale(locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter16.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = dateTimeFormatter16.parseLocalDateTime("halfdays");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jan" + "'", str15, "Jan");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimeZone17);
    }

    @Test
    public void test04519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04519");
        java.text.DateFormatSymbols dateFormatSymbols0 = new java.text.DateFormatSymbols();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime3, periodType4);
        org.joda.time.Period period6 = period5.negated();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.weeks();
        int int8 = period5.get(durationFieldType7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = dateTime10.toDateTime(chronology24);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime26, (org.joda.time.ReadablePartial) localTime27, periodType28);
        org.joda.time.LocalTime localTime31 = localTime27.withMillisOfSecond(4);
        int[] intArray33 = chronology24.get((org.joda.time.ReadablePartial) localTime27, (long) 0);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(0L, chronology24);
        org.joda.time.DateTimeField dateTimeField35 = chronology24.millisOfSecond();
        boolean boolean36 = durationFieldType7.isSupported(chronology24);
        boolean boolean37 = periodType1.isSupported(durationFieldType7);
        boolean boolean38 = dateFormatSymbols0.equals((java.lang.Object) periodType1);
        java.lang.String[] strArray39 = dateFormatSymbols0.getWeekdays();
        java.text.DateFormatSymbols dateFormatSymbols40 = java.text.DateFormatSymbols.getInstance();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols42 = new java.text.DateFormatSymbols(locale41);
        java.lang.String[] strArray43 = dateFormatSymbols42.getMonths();
        java.lang.String[] strArray44 = dateFormatSymbols42.getAmPmStrings();
        dateFormatSymbols40.setWeekdays(strArray44);
        java.lang.String[] strArray46 = dateFormatSymbols40.getEras();
        dateFormatSymbols0.setShortWeekdays(strArray46);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(dateFormatSymbols40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray46);
    }

    @Test
    public void test04520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04520");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) 'u');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04521");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.lang.Object obj2 = dateFormatSymbols1.clone();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols1.setMonths(strArray9);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("2022-02-21T14:54:24.218Z/2022-02-21T14:54:24.218Z");
        boolean boolean13 = dateFormatSymbols1.equals((java.lang.Object) locale12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekyear();
        long long28 = dateTimeField26.roundFloor((long) 53623795);
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder29.setLanguage("minutes");
        java.util.Locale locale32 = builder29.build();
        java.util.Locale locale35 = new java.util.Locale("", "hi!");
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale36);
        java.lang.String str38 = locale35.getDisplayScript(locale36);
        java.lang.String str39 = locale32.getDisplayCountry(locale35);
        int int40 = dateTimeField26.getMaximumTextLength(locale32);
        java.text.DateFormatSymbols dateFormatSymbols41 = new java.text.DateFormatSymbols(locale32);
        java.lang.String[] strArray42 = dateFormatSymbols41.getMonths();
        java.lang.String[] strArray43 = dateFormatSymbols41.getWeekdays();
        dateFormatSymbols1.setAmPmStrings(strArray43);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-259200000L) + "'", long28 == (-259200000L));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "minutes");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
    }

    @Test
    public void test04522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04522");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.PeriodType periodType5 = periodType3.withWeeksRemoved();
        org.joda.time.Chronology chronology6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period7 = new org.joda.time.Period(1613191507200015L, (long) (-1963), periodType3, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1613191507201");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test04523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04523");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-1L), dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfWeek(2);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime15 = dateTime12.plusMinutes(20987);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        boolean boolean22 = interval20.isAfter((long) 10);
        org.joda.time.Duration duration23 = interval20.toDuration();
        org.joda.time.Chronology chronology24 = interval20.getChronology();
        boolean boolean25 = durationFieldType17.isSupported(chronology24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 9, chronology24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths(12);
        int[] intArray33 = chronology24.get((org.joda.time.ReadablePartial) localDate31, (long) 762);
        org.joda.time.DateTimeZone dateTimeZone34 = chronology24.getZone();
        org.joda.time.DateTime dateTime35 = dateTime15.toDateTime(dateTimeZone34);
        long long36 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1086419999L + "'", long36 == 1086419999L);
    }

    @Test
    public void test04524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04524");
        java.util.Date date5 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        date5.setMinutes((int) (short) 0);
        java.util.Date date13 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        date13.setMinutes((int) (short) 0);
        date13.setDate(53);
        boolean boolean18 = date5.after(date13);
        java.lang.String str19 = date5.toString();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 04 01:00:00 GMT+00:00 8039");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Mar 25 01:00:00 GMT+00:00 8039");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Fri Feb 04 01:00:00 GMT+00:00 8039" + "'", str19, "Fri Feb 04 01:00:00 GMT+00:00 8039");
    }

    @Test
    public void test04525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04525");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("PT-1H");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04526");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 132);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths(12);
        org.joda.time.LocalDate.Property property6 = localDate3.centuryOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = localTime1.get(dateTimeFieldType7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuryOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
    }

    @Test
    public void test04527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04527");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.DateTime dateTime30 = dateTime2.minus((org.joda.time.ReadableDuration) duration27);
        boolean boolean32 = dateTime2.isBefore(2000000L);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime33.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime.Property property39 = dateTime33.millisOfDay();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        boolean boolean44 = interval42.isAfter((long) 10);
        boolean boolean45 = interval42.containsNow();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.DateTime dateTime51 = dateTime49.plusMonths((int) (byte) 100);
        boolean boolean52 = interval42.isAfter((org.joda.time.ReadableInstant) dateTime49);
        int int53 = property39.compareTo((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean54 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime49);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test04528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04528");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(99);
        org.joda.time.LocalDateTime localDateTime18 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(10L, chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean31 = dateTime27.isSupported(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        boolean boolean33 = dateTime24.isSupported(dateTimeFieldType30);
        int int34 = localDateTime18.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime18.withWeekyear(53623795);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withField(dateTimeFieldType43, 100);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withField(dateTimeFieldType52, 100);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime51.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int60 = localDateTime59.getSecondOfMinute();
        int int61 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withField(dateTimeFieldType70, 100);
        org.joda.time.Period period73 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime63, (org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime63.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime75 = property74.roundFloorCopy();
        boolean boolean76 = localDateTime18.isEqual((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.withField(dateTimeFieldType83, 100);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime82.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int91 = localDateTime90.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property92 = localDateTime90.dayOfWeek();
        boolean boolean93 = localDateTime75.isAfter((org.joda.time.ReadablePartial) localDateTime90);
        org.joda.time.LocalDateTime.Property property94 = localDateTime90.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test04529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04529");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate localDate5 = localDate3.minusDays(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        int int7 = localDate5.indexOf(dateTimeFieldType6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate5.withYearOfCentury(363);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 363 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test04530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04530");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.text.DateFormatSymbols dateFormatSymbols1 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(dateFormatSymbols1);
    }

    @Test
    public void test04531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04531");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        int int7 = dateTime4.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTime(dateTimeZone8);
        int int10 = dateTime9.getCenturyOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(10L, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean17 = dateTime13.isSupported(dateTimeFieldType16);
        int int18 = dateTime9.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime20 = dateTime9.plusMillis(7);
        org.joda.time.DateTime.Property property21 = dateTime20.secondOfMinute();
        int int22 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime20.minusDays(672);
        org.joda.time.DateTime dateTime26 = dateTime20.withCenturyOfEra(2922789);
        org.joda.time.DateTime.Property property27 = dateTime26.hourOfDay();
        int int28 = dateTime26.getMinuteOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 10, chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTime();
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) mutableDateTime34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(81, (int) 'u', 103, 58, chronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19 + "'", int10 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
    }

    @Test
    public void test04532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04532");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.Period period5 = interval2.toPeriod();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        boolean boolean12 = interval2.abuts((org.joda.time.ReadableInterval) interval8);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Duration duration20 = interval17.toDuration();
        org.joda.time.Chronology chronology21 = interval17.getChronology();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.Interval interval24 = interval2.withChronology(chronology23);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType27 = localTime25.getFieldType(768);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 768");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test04533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04533");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        boolean boolean6 = dateTimeZone3.isStandardOffset((long) '4');
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval8 = new org.joda.time.Interval(7450099200014L, (long) 21098599, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test04534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04534");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.minusDays(10);
        org.joda.time.Duration duration6 = period3.toStandardDuration();
        org.joda.time.Duration duration8 = org.joda.time.Duration.millis((long) (short) -1);
        long long9 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration8);
        long long10 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = duration6.minus((org.joda.time.ReadableDuration) duration8);
        long long12 = duration8.getStandardSeconds();
        org.joda.time.Period period13 = duration8.toPeriod();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.Duration duration17 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime14.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.months();
        org.joda.time.Period period20 = duration17.toPeriod(periodType19);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.Period period26 = period24.minusDays(10);
        org.joda.time.Duration duration27 = period24.toStandardDuration();
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis((long) (short) -1);
        long long30 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration29);
        long long31 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration27.minus((org.joda.time.ReadableDuration) duration29);
        long long33 = duration27.getStandardDays();
        boolean boolean34 = duration17.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration35 = org.joda.time.Duration.ZERO;
        boolean boolean36 = duration27.isEqual((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration37 = duration8.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean40 = dateTimeZone39.isFixed();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 2, dateTimeZone39);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeUtils.getZone(dateTimeZone39);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = dateTime44.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(10L, chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        int int50 = dateTime48.get(dateTimeFieldType49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusWeeks(4);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Calendar calendar54 = dateTime52.toCalendar(locale53);
        org.joda.time.DateTime dateTime56 = dateTime52.plusMillis(22);
        org.joda.time.Period period58 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.Duration duration60 = period58.toDurationFrom(readableInstant59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = interval63.isAfter((long) 10);
        org.joda.time.Duration duration66 = interval63.toDuration();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = interval69.isAfter((long) 10);
        org.joda.time.Duration duration72 = interval69.toDuration();
        org.joda.time.Duration duration74 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) '4');
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime();
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime76);
        int int78 = dateTime75.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = dateTime75.toDateTime(dateTimeZone79);
        int int81 = dateTime80.getCenturyOfEra();
        org.joda.time.Interval interval82 = duration72.toIntervalTo((org.joda.time.ReadableInstant) dateTime80);
        int int83 = duration60.compareTo((org.joda.time.ReadableDuration) duration72);
        org.joda.time.DateTime dateTime84 = dateTime56.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration72);
        long long86 = duration72.getMillis();
        org.joda.time.Duration duration87 = duration37.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Days days88 = duration72.toStandardDays();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 19 + "'", int81 == 19);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(days88);
    }

    @Test
    public void test04535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04535");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime3, periodType4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime12 = dateTime6.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime15 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        int int16 = localTime2.getHourOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(35L, chronology18);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        int int21 = periodType20.size();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime19, periodType20);
        org.joda.time.PeriodType periodType23 = periodType20.withHoursRemoved();
        org.joda.time.Period period24 = new org.joda.time.Period(946684800000L, 7L, periodType20);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        int int26 = periodType20.indexOf(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test04536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04536");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime3, periodType4);
        org.joda.time.LocalTime localTime7 = localTime2.minusSeconds((int) (short) 100);
        boolean boolean8 = localTime1.equals((java.lang.Object) (short) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime15 = dateTime12.toLocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16);
        int int18 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime16);
        org.joda.time.LocalTime.Property property19 = localTime16.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = property19.addCopy(15512766482700030L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 15512766482700030 * 60000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test04537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04537");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTime.Property property7 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime8 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withField(dateTimeFieldType16, 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int24 = localDateTime23.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.property(dateTimeFieldType26);
        boolean boolean28 = dateTime9.isSupported(dateTimeFieldType26);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DurationField durationField31 = durationFieldType29.getField(chronology30);
        long long32 = durationField31.getUnitMillis();
        long long34 = durationField31.getMillis(53786271);
        java.lang.String str35 = durationField31.getName();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3600000L + "'", long32 == 3600000L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 193630575600000L + "'", long34 == 193630575600000L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hours" + "'", str35, "hours");
    }

    @Test
    public void test04538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04538");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean23 = interval21.isAfter((long) 10);
        org.joda.time.Duration duration24 = interval21.toDuration();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean29 = interval27.isAfter((long) 10);
        org.joda.time.Duration duration30 = interval27.toDuration();
        org.joda.time.Duration duration32 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) '4');
        boolean boolean33 = localDateTime18.equals((java.lang.Object) duration30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.withMillisOfDay(0);
        int int36 = localDateTime35.getYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
    }

    @Test
    public void test04539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04539");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone1.convertUTCToLocal(426L);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 53658501, dateTimeZone1);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property9 = localDate6.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight10 = localDate6.toDateMidnight();
        org.joda.time.LocalDate localDate12 = localDate6.withDayOfMonth(15);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        boolean boolean17 = interval15.isAfter((long) 10);
        org.joda.time.Duration duration18 = interval15.toDuration();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean23 = interval21.isAfter((long) 10);
        org.joda.time.Duration duration24 = interval21.toDuration();
        org.joda.time.Duration duration26 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration24, (int) '4');
        org.joda.time.Duration duration28 = duration18.withMillis((long) (short) -1);
        long long29 = duration18.getMillis();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime35 = dateTime30.plus((org.joda.time.ReadablePeriod) period34);
        boolean boolean37 = dateTime30.equals((java.lang.Object) "en_CA");
        org.joda.time.DateTime.Property property38 = dateTime30.monthOfYear();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        boolean boolean44 = interval42.isAfter((long) 10);
        boolean boolean45 = interval42.containsNow();
        boolean boolean46 = periodType39.equals((java.lang.Object) boolean45);
        org.joda.time.Period period47 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30, periodType39);
        org.joda.time.LocalDate localDate49 = localDate6.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 32769);
        org.joda.time.LocalDate localDate50 = localDate4.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.PeriodType periodType51 = period47.getPeriodType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray52 = period47.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 426L + "'", long3 == 426L);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(durationFieldTypeArray52);
    }

    @Test
    public void test04540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04540");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withDefaultYear(0);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter6.getZone();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter6.getZone();
        java.lang.Appendable appendable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(appendable9, (long) 41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test04541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04541");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration13 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) '4');
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime14.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTime(dateTimeZone18);
        int int20 = dateTime19.getCenturyOfEra();
        org.joda.time.Interval interval21 = duration11.toIntervalTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime23 = dateTime19.minusWeeks(6139);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime26 = dateTime23.withYear((int) '#');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime27.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.toDateTime(dateTimeZone31);
        int int33 = dateTime32.getCenturyOfEra();
        org.joda.time.DateTime.Property property34 = dateTime32.monthOfYear();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime37.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37);
        long long44 = property34.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime37);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.text.DateFormatSymbols dateFormatSymbols46 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale45);
        int int47 = property34.getMaximumShortTextLength(locale45);
        org.joda.time.Instant instant49 = new org.joda.time.Instant(35L);
        long long50 = instant49.getMillis();
        org.joda.time.Instant instant52 = instant49.plus((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime53 = instant52.toMutableDateTime();
        int int54 = property34.getDifference((org.joda.time.ReadableInstant) instant52);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) instant52);
        org.joda.time.Chronology chronology56 = instant52.getChronology();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 19 + "'", int33 == 19);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 35L + "'", long50 == 35L);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test04542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04542");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime0.withMillisOfSecond(9);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = period9.toDurationFrom(readableInstant10);
        org.joda.time.Seconds seconds12 = duration11.toStandardSeconds();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(10L, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        int int18 = dateTime16.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime20 = dateTime16.plusWeeks(4);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Calendar calendar22 = dateTime20.toCalendar(locale21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMillis(22);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = period26.toDurationFrom(readableInstant27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval31.isAfter((long) 10);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = interval37.isAfter((long) 10);
        org.joda.time.Duration duration40 = interval37.toDuration();
        org.joda.time.Duration duration42 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) '4');
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime43.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime43.toDateTime(dateTimeZone47);
        int int49 = dateTime48.getCenturyOfEra();
        org.joda.time.Interval interval50 = duration40.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        int int51 = duration28.compareTo((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTime dateTime52 = dateTime24.plus((org.joda.time.ReadableDuration) duration40);
        long long53 = duration40.getStandardSeconds();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = interval56.getEnd();
        org.joda.time.DateTime dateTime59 = dateTime57.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMonths(8);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime69 = dateTime63.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime71 = dateTime69.plus((long) (byte) 10);
        org.joda.time.DateTime.Property property72 = dateTime71.monthOfYear();
        long long73 = dateTime71.getMillis();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime();
        org.joda.time.Interval interval76 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime77 = interval76.getEnd();
        org.joda.time.DateTime.Property property78 = dateTime77.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        long long82 = dateTimeZone79.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime((java.lang.Object) dateTime77, dateTimeZone79);
        long long87 = dateTimeZone79.convertLocalToUTC(35L, false, 1L);
        java.lang.String str89 = dateTimeZone79.getName((long) 12);
        int int91 = dateTimeZone79.getStandardOffset(100001L);
        boolean boolean93 = dateTimeZone79.isStandardOffset((long) 16);
        org.joda.time.MutableDateTime mutableDateTime94 = dateTime71.toMutableDateTime(dateTimeZone79);
        org.joda.time.DateTime dateTime95 = dateTime71.withTimeAtStartOfDay();
        int int96 = dateTime95.getMinuteOfHour();
        org.joda.time.Duration duration97 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime95);
        int int98 = duration11.compareTo((org.joda.time.ReadableDuration) duration97);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 19 + "'", int49 == 19);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-61977571197804L) + "'", long73 == (-61977571197804L));
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 378691200010L + "'", long82 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 35L + "'", long87 == 35L);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "+00:00" + "'", str89, "+00:00");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(mutableDateTime94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test04543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04543");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 32769);
        org.joda.time.TimeOfDay timeOfDay2 = dateTime1.toTimeOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.minusMinutes(1164);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test04544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04544");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays(6);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localDateTime17.toString(dateTimeFormatter19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withWeekOfWeekyear(52);
        int int23 = localDateTime17.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0014-05-12T21:40:01.893" + "'", str20, "0014-05-12T21:40:01.893");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test04545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04545");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        boolean boolean4 = instant1.isAfter((long) (short) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Instant instant7 = instant1.plus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(35L);
        long long10 = instant9.getMillis();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime11, (org.joda.time.ReadablePartial) localTime12, periodType13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime21 = dateTime18.toLocalTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration27, 0);
        org.joda.time.DateTime dateTime30 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period40 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime41 = dateTime36.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.weekyear();
        org.joda.time.DateTime dateTime45 = dateTime32.toDateTime(chronology42);
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.DateTime dateTime52 = dateTime50.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime53 = dateTime50.toLocalTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        boolean boolean58 = interval56.isAfter((long) 10);
        org.joda.time.Duration duration59 = interval56.toDuration();
        org.joda.time.DateTime dateTime61 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration59, 0);
        org.joda.time.Instant instant62 = instant9.minus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Instant instant63 = instant7.plus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Instant instant65 = instant7.withMillis(6554L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 35L + "'", long10 == 35L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(instant65);
    }

    @Test
    public void test04546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04546");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = dateTime2.toDateTime(chronology16);
        org.joda.time.DurationField durationField18 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekOfWeekyear();
        org.joda.time.DurationField durationField20 = chronology16.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval(1893L, 366L, chronology16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test04547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04547");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        int int19 = durationField16.getDifference((long) 2, (long) (-1));
        int int22 = durationField16.getDifference((long) 6, (long) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField16.getType();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        boolean boolean30 = interval26.contains((long) 1970);
        org.joda.time.Interval interval31 = interval26.toInterval();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        boolean boolean37 = interval31.abuts((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Chronology chronology38 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfDay();
        boolean boolean40 = durationFieldType23.isSupported(chronology38);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        int int44 = period42.getValue(0);
        org.joda.time.Period period45 = period42.normalizedStandard();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period48 = period42.withField(durationFieldType46, 478);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        boolean boolean53 = interval51.isAfter((long) 10);
        org.joda.time.Duration duration54 = interval51.toDuration();
        org.joda.time.Chronology chronology55 = interval51.getChronology();
        org.joda.time.DurationField durationField56 = durationFieldType46.getField(chronology55);
        boolean boolean57 = durationFieldType23.isSupported(chronology55);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        long long60 = dateTimeField58.roundHalfFloor((long) 49);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-259200000L) + "'", long60 == (-259200000L));
    }

    @Test
    public void test04548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04548");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withField(dateTimeFieldType21, 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusMonths(5);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfYear();
        org.joda.time.Duration duration34 = org.joda.time.Duration.millis((long) (short) -1);
        long long35 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration34);
        long long36 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.toDuration();
        long long38 = duration37.getMillis();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime28.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime13.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfMonth();
        java.lang.String str42 = property41.getName();
        java.lang.String str43 = property41.getAsShortText();
        org.joda.time.LocalDateTime localDateTime45 = property41.addWrapFieldToCopy(20986);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "dayOfMonth" + "'", str42, "dayOfMonth");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "12" + "'", str43, "12");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test04549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04549");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-21T14:45:31.211Z/2022-02-21T14:45:31.211Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-21T14:45:31.211Z/2022-02-21T14:45:31.211Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04550");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.DateTime dateTime30 = dateTime2.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 893);
        boolean boolean34 = dateTime30.isEqual((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime45 = dateTime40.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology46);
        org.joda.time.DurationField durationField48 = chronology46.weeks();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.hourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.secondOfDay();
        org.joda.time.DurationField durationField51 = chronology46.centuries();
        org.joda.time.Period period52 = duration36.toPeriod(chronology46);
        org.joda.time.DateTime dateTime54 = dateTime30.withDurationAdded((org.joda.time.ReadableDuration) duration36, 6);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Interval interval59 = interval57.toInterval();
        boolean boolean61 = interval57.contains((long) 1970);
        org.joda.time.Interval interval62 = interval57.toInterval();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        boolean boolean67 = interval65.isAfter((long) 10);
        boolean boolean68 = interval62.abuts((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Chronology chronology69 = interval65.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.weekyears();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime54.toMutableDateTime(chronology69);
        long long73 = dateTime54.getMillis();
        org.joda.time.DateTime dateTime75 = dateTime54.plusHours(0);
        int int76 = dateTime75.getYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-21597814L) + "'", long73 == (-21597814L));
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1969 + "'", int76 == 1969);
    }

    @Test
    public void test04551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04551");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(69);
        org.joda.time.Period period9 = new org.joda.time.Period((int) (byte) 100, 72001893, 69, 0);
        org.joda.time.LocalDate localDate10 = localDate1.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime11, (org.joda.time.ReadablePartial) localTime12, periodType13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime21 = dateTime18.toLocalTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.DateTime dateTime29 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration27, 0);
        org.joda.time.DateTime dateTime30 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = interval33.isAfter((long) 10);
        org.joda.time.Duration duration36 = interval33.toDuration();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = interval39.isAfter((long) 10);
        org.joda.time.Duration duration42 = interval39.toDuration();
        org.joda.time.Duration duration44 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) '4');
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime45.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTime(dateTimeZone49);
        int int51 = dateTime50.getCenturyOfEra();
        org.joda.time.Interval interval52 = duration42.toIntervalTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Minutes minutes53 = duration42.toStandardMinutes();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadablePeriod) minutes53);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean57 = dateTimeZone56.isFixed();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 2, dateTimeZone56);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeUtils.getZone(dateTimeZone56);
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone60);
        boolean boolean62 = interval54.isBefore((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int64 = dateTime61.get(dateTimeFieldType63);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = localDate10.get(dateTimeFieldType63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 19 + "'", int51 == 19);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test04552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04552");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime14.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTime(dateTimeZone18);
        int int20 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean25 = interval23.isAfter((long) 10);
        org.joda.time.Duration duration26 = interval23.toDuration();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.Duration duration34 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) '4');
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration26);
        mutableInterval4.setDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Days days37 = duration26.toStandardDays();
        org.joda.time.Instant instant39 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) -1);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTime40.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime40.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime.Property property48 = dateTime40.dayOfYear();
        boolean boolean49 = instant39.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Instant instant50 = instant39.toInstant();
        org.joda.time.Instant instant51 = instant50.toInstant();
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(instant39);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test04553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04553");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        boolean boolean5 = interval2.containsNow();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) (byte) 100);
        boolean boolean12 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime9.withDayOfMonth((int) (short) 1);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.Chronology chronology29 = chronology26.withUTC();
        org.joda.time.Period period30 = new org.joda.time.Period((long) '4', (long) '#', chronology26);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.DateTime dateTime32 = dateTime9.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long39 = chronology26.getDateTimeMillis(2819700288000000L, 53130794, (-9), 1008, 98);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53130794 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test04554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04554");
        java.util.Date date5 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        int int6 = date5.getMinutes();
        int int7 = date5.getSeconds();
        java.lang.Object obj8 = date5.clone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Interval interval13 = interval11.toInterval();
        org.joda.time.Period period14 = interval11.toPeriod();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Duration duration20 = interval17.toDuration();
        boolean boolean21 = interval11.abuts((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.Chronology chronology30 = interval26.getChronology();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.Interval interval33 = interval11.withChronology(chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(obj8, chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.halfdayOfDay();
        long long38 = dateTimeField35.add(540691200029L, 37);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "Fri Feb 04 01:10:00 GMT+00:00 8039");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 542289600029L + "'", long38 == 542289600029L);
    }

    @Test
    public void test04555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04555");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        int int3 = periodType2.size();
        org.joda.time.PeriodType periodType4 = periodType2.withHoursRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 31, 426L, periodType2);
        java.util.Set<java.lang.String> strSet6 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet6.spliterator();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        java.lang.String str11 = interval10.toString();
        java.lang.Class<?> wildcardClass12 = interval10.getClass();
        boolean boolean13 = strSet6.contains((java.lang.Object) interval10);
        boolean boolean14 = period5.equals((java.lang.Object) boolean13);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSpliterator7);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z" + "'", str11, "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04556");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 53918190);
    }

    @Test
    public void test04557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04557");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy((int) 'x');
        int int16 = property11.getMinimumValueOverall();
        org.joda.time.LocalTime localTime17 = property11.roundHalfCeilingCopy();
        org.joda.time.Period period19 = org.joda.time.Period.seconds(99);
        org.joda.time.Period period21 = period19.multipliedBy(7);
        org.joda.time.Period period23 = period21.multipliedBy(89422);
        org.joda.time.LocalTime localTime25 = localTime17.withPeriodAdded((org.joda.time.ReadablePeriod) period21, 89422);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test04558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04558");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(25024636800000L);
    }

    @Test
    public void test04559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04559");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks(4);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        java.lang.String str15 = locale13.getVariant();
        java.lang.String str16 = locale13.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType17.getField(chronology26);
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.lang.String str35 = dateTimeField30.getAsShortText(10L, locale34);
        java.lang.String str36 = locale13.getDisplayName(locale34);
        java.lang.String str37 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withLocale(locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withPivotYear((java.lang.Integer) 32770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter38.withZoneUTC();
        boolean boolean42 = dateTimeFormatter41.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AM" + "'", str35, "AM");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test04560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04560");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(8);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        org.joda.time.Duration duration13 = interval10.toDuration();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.Duration duration21 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '4');
        long long22 = duration21.getStandardMinutes();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime23.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime(dateTimeZone31);
        org.joda.time.Interval interval34 = duration21.toIntervalFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days37 = duration36.toStandardDays();
        org.joda.time.Duration duration39 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration36, 53654);
        org.joda.time.DateTime dateTime40 = dateTime5.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime47 = dateTime41.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime49 = dateTime47.plus((long) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime47.withYear(762);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        boolean boolean58 = interval56.isAfter((long) 10);
        org.joda.time.Duration duration59 = interval56.toDuration();
        org.joda.time.Chronology chronology60 = interval56.getChronology();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology60);
        org.joda.time.Chronology chronology62 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.DateTime dateTime63 = dateTime47.withChronology(chronology62);
        org.joda.time.Chronology chronology64 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period66 = org.joda.time.Period.weeks(2922789);
        org.joda.time.Period period68 = period66.plusDays(2074);
        int int69 = period66.getDays();
        org.joda.time.Period period71 = period66.minusMillis(53785992);
        long long74 = chronology64.add((org.joda.time.ReadablePeriod) period71, (long) 53131701, 22);
        org.joda.time.Period period76 = period71.plusHours(22);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 38889460188239877L + "'", long74 == 38889460188239877L);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test04561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04561");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime4, (org.joda.time.ReadablePartial) localTime5, periodType6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime8.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime17 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int int18 = localTime4.getHourOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(35L, chronology20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        int int23 = periodType22.size();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime4, (org.joda.time.ReadablePartial) localTime21, periodType22);
        org.joda.time.PeriodType periodType25 = periodType22.withHoursRemoved();
        org.joda.time.Period period26 = new org.joda.time.Period(946684800000L, 7L, periodType22);
        org.joda.time.PeriodType periodType27 = org.joda.time.DateTimeUtils.getPeriodType(periodType22);
        org.joda.time.Period period28 = new org.joda.time.Period((long) 86399004, 9L, periodType27);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType27);
    }

    @Test
    public void test04562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04562");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        boolean boolean5 = interval2.containsNow();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) (byte) 100);
        boolean boolean12 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime9.withDayOfMonth((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime14.withDayOfMonth(59392155);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59392155 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test04563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04563");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime0.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = dateTime0.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime.Property property16 = dateTime10.millisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str19 = mutableInterval18.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval18.setEndMillis((long) (-736377));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z" + "'", str19, "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z");
    }

    @Test
    public void test04564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04564");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime13 = property11.getLocalTime();
        int int14 = localTime13.getHourOfDay();
        org.joda.time.LocalTime localTime16 = localTime13.plusSeconds((int) (short) 10);
        org.joda.time.LocalTime.Property property17 = localTime16.secondOfMinute();
        org.joda.time.LocalTime localTime18 = property17.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test04565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04565");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("PT14H");
        java.util.Locale.Builder builder7 = builder5.setLanguageTag("CA");
        java.util.Locale.Builder builder9 = builder5.addUnicodeLocaleAttribute("year");
        java.util.Locale.Builder builder10 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder5.setUnicodeLocaleKeyword("hi!", "99");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test04566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04566");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime16 = dateTime11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime18 = dateTime3.toDateTime(chronology17);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localTime20, periodType21);
        org.joda.time.LocalTime localTime24 = localTime20.withMillisOfSecond(4);
        int[] intArray26 = chronology17.get((org.joda.time.ReadablePartial) localTime20, (long) 0);
        org.joda.time.Chronology chronology27 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.monthOfYear();
        boolean boolean30 = dateTimeFieldType2.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval(1645455513346L, (long) 33, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test04567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04567");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology14 = interval10.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime18, periodType19);
        boolean boolean21 = localTime16.equals((java.lang.Object) period20);
        org.joda.time.Interval interval22 = interval10.withPeriodAfterStart((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 10, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime25.plusMinutes((int) (short) 0);
        boolean boolean32 = interval22.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime33 = interval22.getStart();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = interval36.isAfter((long) 10);
        boolean boolean39 = interval36.containsNow();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths((int) (byte) 100);
        boolean boolean46 = interval36.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime48 = dateTime43.withDayOfMonth((int) (short) 1);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property53 = dateTime52.era();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period58 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime59 = dateTime54.plus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.weekyearOfCentury();
        org.joda.time.Chronology chronology63 = chronology60.withUTC();
        org.joda.time.Period period64 = new org.joda.time.Period((long) '4', (long) '#', chronology60);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(chronology60);
        org.joda.time.DateTime dateTime66 = dateTime43.withChronology(chronology60);
        org.joda.time.DurationField durationField67 = chronology60.centuries();
        org.joda.time.Interval interval68 = interval22.withChronology(chronology60);
        org.joda.time.Chronology chronology69 = interval22.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(chronology69);
    }

    @Test
    public void test04568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04568");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime.Property property6 = dateTime0.millisOfDay();
        org.joda.time.Chronology chronology7 = dateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(35L, chronology10);
        org.joda.time.LocalTime localTime13 = localTime11.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.LocalTime localTime17 = localTime11.withFieldAdded(durationFieldType15, (-1));
        org.joda.time.LocalTime localTime19 = localTime17.plusHours(53633080);
        org.joda.time.LocalTime.Property property20 = localTime19.millisOfSecond();
        org.joda.time.LocalTime localTime22 = property20.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime24 = property20.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime25 = property20.roundHalfEvenCopy();
        org.joda.time.Period period27 = org.joda.time.Period.months(53);
        org.joda.time.LocalTime localTime29 = localTime25.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 16);
        org.joda.time.LocalTime localTime31 = localTime29.minusSeconds(2922789);
        int int32 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localTime29);
        int int33 = dateTimeField8.getMaximumValue();
        int int34 = dateTimeField8.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 86399 + "'", int32 == 86399);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 86399 + "'", int33 == 86399);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test04569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04569");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime1.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime18, periodType19);
        org.joda.time.LocalTime localTime22 = localTime18.withMillisOfSecond(4);
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) localTime18, (long) 0);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(0L, chronology15);
        org.joda.time.DateTimeField dateTimeField26 = chronology15.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology15.centuries();
        long long30 = durationField27.getMillis(53661, (long) (-52));
        org.joda.time.Instant instant32 = new org.joda.time.Instant(35L);
        long long33 = instant32.getMillis();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime34, (org.joda.time.ReadablePartial) localTime35, periodType36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.DateTime dateTime43 = dateTime41.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime44 = dateTime41.toLocalTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        boolean boolean49 = interval47.isAfter((long) 10);
        org.joda.time.Duration duration50 = interval47.toDuration();
        org.joda.time.DateTime dateTime52 = dateTime41.withDurationAdded((org.joda.time.ReadableDuration) duration50, 0);
        org.joda.time.DateTime dateTime53 = localTime35.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property58 = dateTime57.era();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period63 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime64 = dateTime59.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Chronology chronology65 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.weekyear();
        org.joda.time.DateTime dateTime68 = dateTime55.toDateTime(chronology65);
        org.joda.time.Chronology chronology69 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTimeField dateTimeField70 = chronology69.yearOfEra();
        org.joda.time.DurationField durationField71 = dateTimeField70.getDurationField();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property73 = dateTime72.era();
        org.joda.time.DateTime.Property property74 = dateTime72.monthOfYear();
        org.joda.time.DurationField durationField75 = property74.getDurationField();
        int int78 = durationField75.getValue(4460054926L, (long) 53);
        boolean boolean79 = durationField75.isSupported();
        int int80 = durationField71.compareTo(durationField75);
        int int81 = durationField27.compareTo(durationField71);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 169337760192000000L + "'", long30 == 169337760192000000L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 35L + "'", long33 == 35L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test04570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04570");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime.Property property6 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime7 = dateTime0.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime0.minusMonths(363);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test04571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04571");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime9.isSupported(dateTimeFieldType12);
        int int14 = dateTime5.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime16 = dateTime5.plusMillis(7);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        int int18 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusDays(672);
        org.joda.time.DateTime dateTime22 = dateTime16.withCenturyOfEra(2922789);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        int int24 = dateTime22.getMinuteOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 10, chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime27.toMutableDateTime();
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Instant instant33 = new org.joda.time.Instant(35L);
        long long34 = instant33.getMillis();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime35, (org.joda.time.ReadablePartial) localTime36, periodType37);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime45 = dateTime42.toLocalTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = interval48.isAfter((long) 10);
        org.joda.time.Duration duration51 = interval48.toDuration();
        org.joda.time.DateTime dateTime53 = dateTime42.withDurationAdded((org.joda.time.ReadableDuration) duration51, 0);
        org.joda.time.DateTime dateTime54 = localTime36.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime65 = dateTime60.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyear();
        org.joda.time.DateTime dateTime69 = dateTime56.toDateTime(chronology66);
        org.joda.time.Chronology chronology70 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant33, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeField dateTimeField71 = chronology70.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval72 = new org.joda.time.Interval((java.lang.Object) dateTime22, chronology70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 35L + "'", long34 == 35L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
    }

    @Test
    public void test04572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04572");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale4);
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        java.lang.String str7 = locale0.getDisplayScript(locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale0);
        calendar8.clear(12);
        calendar8.setMinimalDaysInFirstWeek(6);
        calendar8.setLenient(false);
        java.time.Instant instant15 = calendar8.toInstant();
        java.time.Instant instant16 = calendar8.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645452053674,areFieldsSet=true,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=6,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=?,SECOND=53,MILLISECOND=674,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test04573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04573");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        java.lang.String str4 = interval2.toString();
        org.joda.time.Chronology chronology5 = interval2.getChronology();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime11 = dateTime6.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Interval interval12 = interval2.withEnd((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Interval interval13 = interval2.toInterval();
        org.joda.time.Duration duration14 = interval2.toDuration();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z" + "'", str4, "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration14);
    }

    @Test
    public void test04574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04574");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(1970);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime10, periodType11);
        org.joda.time.Period period14 = period12.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime15.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime23 = dateTime21.plus((long) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period30 = period14.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.MutablePeriod mutablePeriod31 = period29.toMutablePeriod();
        org.joda.time.DateTime dateTime32 = dateTime8.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period33 = period29.toPeriod();
        org.joda.time.Period period35 = period33.withMinutes((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType37 = period35.getFieldType(53771);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
    }

    @Test
    public void test04575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04575");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        boolean boolean13 = interval9.contains((long) 1970);
        org.joda.time.Interval interval14 = interval9.toInterval();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        boolean boolean20 = interval14.abuts((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Interval interval21 = interval17.toInterval();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property25 = dateTime23.millisOfDay();
        org.joda.time.DateTime.Property property26 = dateTime23.weekyear();
        boolean boolean27 = interval21.isAfter((org.joda.time.ReadableInstant) dateTime23);
        long long28 = interval21.toDurationMillis();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime35 = dateTime29.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime37 = dateTime35.withMillisOfDay(1970);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfWeek();
        boolean boolean39 = interval21.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime40 = interval21.getEnd();
        org.joda.time.Chronology chronology41 = interval21.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(103, (int) (byte) 1, 53657, 75241893, 5, 926, 0, chronology41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 75241893 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test04576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04576");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.DateTime dateTime5 = interval2.getEnd();
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) localTime8, periodType9);
        org.joda.time.Period period12 = period10.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime13.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = period23.toDurationFrom(readableInstant24);
        org.joda.time.Seconds seconds26 = duration25.toStandardSeconds();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period28 = period12.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 10, chronology30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(dateTimeZone32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period12, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = period12.minusSeconds(69);
        org.joda.time.Interval interval37 = interval2.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Interval interval39 = interval37.withEndMillis(98728960937392994L);
        org.joda.time.MutableInterval mutableInterval40 = interval37.toMutableInterval();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(seconds26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableInterval40);
    }

    @Test
    public void test04577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04577");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.months();
        long long19 = durationField16.subtract(3061497600000L, (-2016L));
        long long22 = durationField16.getValueAsLong(27424253L, (long) 35);
        long long24 = durationField16.getValueAsLong((long) (short) 10);
        long long27 = durationField16.add((long) 852, (-120));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 8363001600000L + "'", long19 == 8363001600000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-315619199148L) + "'", long27 == (-315619199148L));
    }

    @Test
    public void test04578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04578");
        java.util.Date date3 = new java.util.Date((int) '4', 132, (int) ' ');
        date3.setTime(694224000120L);
        int int6 = date3.getDate();
        int int7 = date3.getTimezoneOffset();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Jan 01 00:00:00 GMT+00:00 1992");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test04579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04579");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Period period4 = mutableInterval2.toPeriod();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfMonth(21);
        int int9 = localDate8.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtCurrentTime();
        boolean boolean12 = mutableInterval2.contains((org.joda.time.ReadableInstant) dateTime11);
        long long13 = mutableInterval2.getEndMillis();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTime(dateTimeZone27);
        int int29 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        org.joda.time.Duration duration35 = interval32.toDuration();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = interval38.isAfter((long) 10);
        org.joda.time.Duration duration41 = interval38.toDuration();
        org.joda.time.Duration duration43 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) '4');
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight dateMidnight45 = dateTime23.toDateMidnight();
        boolean boolean46 = mutableInterval2.isAfter((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval2.copy();
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = period49.toDurationFrom(readableInstant50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = interval54.isAfter((long) 10);
        org.joda.time.Duration duration57 = interval54.toDuration();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        boolean boolean62 = interval60.isAfter((long) 10);
        org.joda.time.Duration duration63 = interval60.toDuration();
        org.joda.time.Duration duration65 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) '4');
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTime66.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = dateTime66.toDateTime(dateTimeZone70);
        int int72 = dateTime71.getCenturyOfEra();
        org.joda.time.Interval interval73 = duration63.toIntervalTo((org.joda.time.ReadableInstant) dateTime71);
        int int74 = duration51.compareTo((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Period period75 = duration63.toPeriod();
        org.joda.time.Duration duration78 = duration63.withDurationAdded((long) 'a', 52);
        org.joda.time.Duration duration79 = duration63.toDuration();
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        boolean boolean82 = duration63.isEqual((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Hours hours83 = duration63.toStandardHours();
        mutableInterval47.setPeriodAfterStart((org.joda.time.ReadablePeriod) hours83);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 426L + "'", long3 == 426L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 478L + "'", long13 == 478L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight45);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 19 + "'", int72 == 19);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(hours83);
    }

    @Test
    public void test04580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04580");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DurationField durationField11 = chronology8.years();
        org.joda.time.DurationFieldType durationFieldType12 = durationField11.getType();
        long long15 = durationField11.getMillis(793, 259202023L);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = durationField11.subtract(4460054926L, 1721700000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1721698030 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25024636800000L + "'", long15 == 25024636800000L);
    }

    @Test
    public void test04581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04581");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int19 = calendar8.getWeeksInWeekYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime20, (org.joda.time.ReadablePartial) localTime21, periodType22);
        org.joda.time.LocalTime localTime25 = localTime20.minusSeconds((int) (short) 100);
        boolean boolean26 = calendar8.before((java.lang.Object) localTime25);
        java.util.Locale locale29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap30 = calendar8.getDisplayNames((-736377), 625, locale29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-1,MONTH=21,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=11,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=893,SECOND=10,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04582");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("30 Dec 1969 23:59:59 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=30 dec 1969 23:59:59 gmt");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04583");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear((int) 'x');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withField(dateTimeFieldType30, 893);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.withYearOfCentury(2);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property42 = dateTime40.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        boolean boolean44 = localDateTime36.isSupported(dateTimeFieldType43);
        java.lang.String str45 = dateTimeFieldType43.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "millisOfDay" + "'", str45, "millisOfDay");
    }

    @Test
    public void test04584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04584");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.months();
        org.joda.time.Period period6 = duration3.toPeriod(periodType5);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) localTime8, periodType9);
        org.joda.time.Period period12 = period10.minusDays(10);
        org.joda.time.Duration duration13 = period10.toStandardDuration();
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis((long) (short) -1);
        long long16 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        long long17 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = duration13.minus((org.joda.time.ReadableDuration) duration15);
        long long19 = duration13.getStandardDays();
        boolean boolean20 = duration3.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        boolean boolean22 = duration13.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        boolean boolean30 = interval26.contains((long) 1970);
        org.joda.time.Interval interval31 = interval26.toInterval();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        boolean boolean37 = interval31.abuts((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Chronology chronology38 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfDay();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.LocalTime localTime42 = localTime40.minusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology43 = localTime42.getChronology();
        org.joda.time.Period period44 = duration13.toPeriod(periodType23, chronology43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime51 = dateTime45.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime53 = dateTime51.plus((long) (byte) 10);
        org.joda.time.Period period55 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Duration duration57 = period55.toDurationFrom(readableInstant56);
        org.joda.time.Seconds seconds58 = duration57.toStandardSeconds();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration61 = duration57.plus(893L);
        boolean boolean62 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration57);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(seconds58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test04585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04585");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withField(dateTimeFieldType21, 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusMonths(5);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfYear();
        org.joda.time.Duration duration34 = org.joda.time.Duration.millis((long) (short) -1);
        long long35 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration34);
        long long36 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.toDuration();
        long long38 = duration37.getMillis();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime28.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime13.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime40);
        int int42 = localDateTime41.getDayOfWeek();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime41.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.plusHours(39);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test04586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04586");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.dayOfMonth();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.Chronology chronology16 = interval12.getChronology();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100, chronology16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology16);
        java.lang.String str19 = localDateTime18.toString();
        long long21 = chronology6.set((org.joda.time.ReadablePartial) localDateTime18, 2764800010L);
        int int22 = localDateTime18.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withSecondOfMinute(79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:02.186" + "'", str19, "1970-01-01T00:00:02.186");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2186L + "'", long21 == 2186L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test04587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04587");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField17.getAsShortText(0, locale19);
        long long23 = dateTimeField17.add((long) 53788450, 4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0" + "'", str20, "0");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2472988450L + "'", long23 == 2472988450L);
    }

    @Test
    public void test04588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04588");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("99", "");
        java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("Sun");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder10 = builder8.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test04589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04589");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder4 = builder2.setLocale(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder2.setUnicodeLocaleKeyword("2022-02-21T14:54:25.167Z/2022-02-21T14:54:25.167Z", "PT926M99S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-21T14:54:25.167Z/2022-02-21T14:54:25.167Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test04590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04590");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
        org.joda.time.LocalDate localDate7 = localDate1.withYearOfEra((int) '#');
        org.joda.time.LocalDate.Property property8 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate10 = localDate1.withYear(53654);
        int int11 = localDate1.size();
        org.joda.time.LocalDate.Property property12 = localDate1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 2, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((-1L), dateTimeZone15);
        org.joda.time.LocalDate localDate20 = localDate18.withDayOfWeek(2);
        int int21 = localDate18.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(1);
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.DateTime dateTime25 = localDate18.toDateTimeAtMidnight(dateTimeZone23);
        org.joda.time.LocalDate localDate27 = localDate18.minusMonths(0);
        org.joda.time.LocalDate localDate28 = localDate1.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(35L, chronology30);
        org.joda.time.LocalTime localTime33 = localTime31.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        org.joda.time.LocalTime localTime37 = localTime31.withFieldAdded(durationFieldType35, (-1));
        org.joda.time.LocalTime localTime39 = localTime37.plusHours(53633080);
        org.joda.time.LocalTime.Property property40 = localTime39.millisOfSecond();
        org.joda.time.LocalTime localTime41 = property40.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property42 = localTime41.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = localDate1.compareTo((org.joda.time.ReadablePartial) localTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 69 + "'", int21 == 69);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test04591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04591");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter5.getParser();
        java.lang.StringBuffer stringBuffer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(stringBuffer7, 23998L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
    }

    @Test
    public void test04592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04592");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        boolean boolean5 = interval2.containsNow();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) (byte) 100);
        boolean boolean12 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime9.withDayOfMonth((int) (short) 1);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.Chronology chronology29 = chronology26.withUTC();
        org.joda.time.Period period30 = new org.joda.time.Period((long) '4', (long) '#', chronology26);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.DateTime dateTime32 = dateTime9.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfYear();
        int int34 = dateTimeField33.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 366 + "'", int34 == 366);
    }

    @Test
    public void test04593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04593");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy(5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDate4.getFieldTypes();
        org.joda.time.LocalDate localDate7 = localDate4.withWeekyear(99);
        org.joda.time.LocalDate.Property property8 = localDate7.weekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfWeek();
        org.joda.time.LocalDate localDate13 = localDate10.plusWeeks(69);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = period15.toDurationFrom(readableInstant16);
        int int18 = period15.getHours();
        org.joda.time.Period period20 = period15.withYears(0);
        org.joda.time.LocalDate localDate22 = localDate10.withPeriodAdded((org.joda.time.ReadablePeriod) period15, (int) (short) 10);
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear((int) 'x');
        org.joda.time.LocalDate localDate25 = localDate7.withFields((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(35L, chronology27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.millis();
        boolean boolean30 = localTime28.isSupported(durationFieldType29);
        org.joda.time.LocalTime localTime32 = localTime28.minusHours(14);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime37.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.weekyear();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekyear();
        org.joda.time.DurationField durationField47 = chronology43.eras();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.year();
        org.joda.time.DateTimeField dateTimeField49 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType33.getField(chronology43);
        boolean boolean51 = localTime32.isSupported(dateTimeFieldType33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property52 = localDate25.property(dateTimeFieldType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test04594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04594");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone2 = calendar0.getTimeZone();
        calendar0.setTimeInMillis((long) (byte) 10);
        long long5 = calendar0.getTimeInMillis();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:00\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10L + "'", long5 == 10L);
    }

    @Test
    public void test04595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04595");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology14 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.LocalTime localTime18 = localTime16.minusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfMonth();
        java.lang.Class<?> wildcardClass22 = chronology19.getClass();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test04596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04596");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withField(dateTimeFieldType21, 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusMonths(5);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfYear();
        org.joda.time.Duration duration34 = org.joda.time.Duration.millis((long) (short) -1);
        long long35 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration34);
        long long36 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.toDuration();
        long long38 = duration37.getMillis();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime28.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime13.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime40);
        int int42 = localDateTime41.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusHours((int) '4');
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime50 = dateTime45.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime.Property property51 = dateTime45.millisOfDay();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = interval54.isAfter((long) 10);
        boolean boolean57 = interval54.containsNow();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        org.joda.time.DateTime dateTime63 = dateTime61.plusMonths((int) (byte) 100);
        boolean boolean64 = interval54.isAfter((org.joda.time.ReadableInstant) dateTime61);
        int int65 = property51.compareTo((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.YearMonthDay yearMonthDay66 = dateTime61.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            int int67 = localDateTime41.compareTo((org.joda.time.ReadablePartial) yearMonthDay66);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay66);
    }

    @Test
    public void test04597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04597");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime9 = dateTime4.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology10);
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.minuteOfDay();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DurationField durationField15 = chronology10.millis();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(4460054926L, chronology10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.Period period20 = period18.withHours((int) 'x');
        org.joda.time.LocalTime localTime21 = localTime16.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime22.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime35 = dateTime30.plus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime37 = dateTime22.toDateTime(chronology36);
        org.joda.time.DurationField durationField38 = chronology36.centuries();
        int int41 = durationField38.getDifference((long) 2, (long) (-1));
        int int44 = durationField38.getDifference(10L, (long) (short) 100);
        org.joda.time.DurationFieldType durationFieldType45 = durationField38.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime47 = localTime21.withFieldAdded(durationFieldType45, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(durationFieldType45);
    }

    @Test
    public void test04598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04598");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.months();
        org.joda.time.Period period6 = duration3.toPeriod(periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period6, readableInstant7);
        org.joda.time.Period period9 = period6.negated();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.Duration duration13 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime10.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.Interval interval19 = interval17.toInterval();
        org.joda.time.Period period20 = interval17.toPeriod();
        org.joda.time.DateTime dateTime22 = dateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period20, 20);
        org.joda.time.PeriodType periodType23 = period20.getPeriodType();
        org.joda.time.Period period25 = period20.withSeconds(53648193);
        org.joda.time.PeriodType periodType26 = period20.getPeriodType();
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        int int30 = period28.getValue(0);
        org.joda.time.Period period31 = period28.normalizedStandard();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Period period33 = period31.plus(readablePeriod32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(35L, chronology35);
        org.joda.time.LocalTime localTime38 = localTime36.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        org.joda.time.LocalTime localTime42 = localTime36.withFieldAdded(durationFieldType40, (-1));
        boolean boolean43 = period31.isSupported(durationFieldType40);
        int int44 = periodType26.indexOf(durationFieldType40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period46 = period6.withFieldAdded(durationFieldType40, 45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
    }

    @Test
    public void test04599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04599");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(896, 349);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 896 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04600");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean29 = interval27.isAfter((long) 10);
        org.joda.time.Duration duration30 = interval27.toDuration();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = interval33.isAfter((long) 10);
        org.joda.time.Duration duration36 = interval33.toDuration();
        org.joda.time.Duration duration38 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) '4');
        long long39 = duration38.getStandardMinutes();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTime40.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime40.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean49 = dateTimeZone48.isFixed();
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTime(dateTimeZone48);
        org.joda.time.Interval interval51 = duration38.toIntervalFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        int int53 = localDateTime13.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
    }

    @Test
    public void test04601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04601");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime1.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime18, periodType19);
        org.joda.time.LocalTime localTime22 = localTime18.withMillisOfSecond(4);
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) localTime18, (long) 0);
        org.joda.time.Chronology chronology25 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfYear();
        int int28 = dateTimeField26.getLeapAmount(378691200010L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(10L, chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusWeeks(4);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        java.lang.String str38 = locale36.getDisplayVariant();
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleKeys();
        int int40 = dateTimeField26.getMaximumTextLength(locale36);
        java.util.Locale.setDefault(category0, locale36);
        java.util.Locale locale44 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols45 = new java.text.DateFormatSymbols(locale44);
        java.util.Locale.setDefault(category0, locale44);
        java.util.Locale locale47 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator49 = strSet48.spliterator();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertEquals(locale44.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strSpliterator49);
    }

    @Test
    public void test04602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04602");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean6 = dateTime2.isSupported(dateTimeFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType5.getDurationType();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime24 = dateTime9.toDateTime(chronology23);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime25, (org.joda.time.ReadablePartial) localTime26, periodType27);
        org.joda.time.LocalTime localTime30 = localTime26.withMillisOfSecond(4);
        int[] intArray32 = chronology23.get((org.joda.time.ReadablePartial) localTime26, (long) 0);
        org.joda.time.Chronology chronology33 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfYear();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 10, chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType5.getField(chronology33);
        int int39 = dateTimeField37.getMinimumValue(70761600000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test04603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04603");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 2, dateTimeZone6);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((int) (short) 10, 1, 22, 14, 14, dateTimeZone6);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = dateTime12.toDateTime(chronology26);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime28, (org.joda.time.ReadablePartial) localTime29, periodType30);
        org.joda.time.LocalTime localTime33 = localTime29.withMillisOfSecond(4);
        int[] intArray35 = chronology26.get((org.joda.time.ReadablePartial) localTime29, (long) 0);
        org.joda.time.DateTimeField dateTimeField36 = chronology26.weekyearOfCentury();
        long long38 = dateTimeField36.remainder((long) (short) -1);
        int int39 = dateTime11.get(dateTimeField36);
        java.lang.String str40 = dateTime11.toString();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 31535999999L + "'", long38 == 31535999999L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0010-01-22T14:14:00.000Z" + "'", str40, "0010-01-22T14:14:00.000Z");
    }

    @Test
    public void test04604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04604");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        java.lang.String str4 = interval2.toString();
        long long5 = interval2.getStartMillis();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime6.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime(dateTimeZone10);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16);
        long long23 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.text.DateFormatSymbols dateFormatSymbols25 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale24);
        int int26 = property13.getMaximumShortTextLength(locale24);
        org.joda.time.DateTime dateTime27 = property13.getDateTime();
        org.joda.time.Interval interval28 = interval2.withEnd((org.joda.time.ReadableInstant) dateTime27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval30 = interval28.withEndMillis((-61977571199886L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z" + "'", str4, "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 2186L + "'", long5 == 2186L);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test04605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04605");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.withHourOfDay(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime.Property property22 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int30 = localDateTime29.getEra();
        int int31 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime15, (org.joda.time.ReadablePartial) localDateTime29, periodType32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.DateTime.Property property38 = dateTime37.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        long long42 = dateTimeZone39.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((java.lang.Object) dateTime37, dateTimeZone39);
        long long47 = dateTimeZone39.convertLocalToUTC(35L, false, 1L);
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.now(dateTimeZone39);
        long long52 = dateTimeZone39.convertLocalToUTC(1645455242916L, false, (long) (short) 1);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.DateTime.Property property57 = dateTime56.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        long long61 = dateTimeZone58.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((java.lang.Object) dateTime56, dateTimeZone58);
        long long66 = dateTimeZone58.convertLocalToUTC(35L, false, 1L);
        java.lang.String str68 = dateTimeZone58.getName((long) 12);
        int int70 = dateTimeZone58.getStandardOffset(100001L);
        boolean boolean72 = dateTimeZone58.isStandardOffset((long) 16);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeUtils.getZone(dateTimeZone58);
        long long75 = dateTimeZone39.getMillisKeepLocal(dateTimeZone58, (long) 32770);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((java.lang.Object) periodType32, dateTimeZone39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 378691200010L + "'", long42 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 35L + "'", long47 == 35L);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645455242916L + "'", long52 == 1645455242916L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 378691200010L + "'", long61 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 35L + "'", long66 == 35L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 32770L + "'", long75 == 32770L);
    }

    @Test
    public void test04606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04606");
        org.joda.time.Period period1 = org.joda.time.Period.hours(29);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04607");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime.Property property8 = dateTime6.dayOfYear();
        org.joda.time.DateTime dateTime9 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.plusWeeks(21);
        int int12 = dateTime11.getEra();
        org.joda.time.DateTime dateTime13 = dateTime11.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime11.withDayOfMonth((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test04608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04608");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        int int3 = property1.getMaximumValueOverall();
        int int4 = property1.getMinimumValueOverall();
        org.joda.time.DateTime dateTime5 = property1.getDateTime();
        org.joda.time.DateTime dateTime6 = property1.withMaximumValue();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Interval interval13 = interval11.toInterval();
        boolean boolean15 = interval11.contains((long) 1970);
        org.joda.time.Interval interval16 = interval11.toInterval();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = interval16.withEnd(readableInstant17);
        org.joda.time.Interval interval19 = interval8.gap((org.joda.time.ReadableInterval) interval16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime.Property property26 = dateTime20.millisOfDay();
        org.joda.time.DateTime dateTime28 = property26.addToCopy((long) 2);
        org.joda.time.DateTime dateTime29 = property26.roundFloorCopy();
        boolean boolean30 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeField dateTimeField31 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int32 = dateTime29.get(dateTimeField31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeField must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNull(interval19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test04609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04609");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("months");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("weeks");
        java.util.Locale.LanguageRange languageRange5 = new java.util.Locale.LanguageRange("months");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange3, languageRange5 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setLanguage("minutes");
        java.util.Locale.Builder builder12 = builder9.clear();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder14 = builder12.setLocale(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("minutes", strMap18);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        boolean boolean29 = strSet26.addAll((java.util.Collection<java.lang.String>) strSet28);
        boolean boolean30 = strSet22.containsAll((java.util.Collection<java.lang.String>) strSet26);
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet26);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Locale locale43 = java.util.Locale.JAPAN;
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale37, locale39, locale41, locale42, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList46, filteringMode48);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale53);
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Locale locale59 = java.util.Locale.JAPAN;
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale53, locale55, locale57, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList62, filteringMode64);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter(languageRangeList33, (java.util.Collection<java.util.Locale>) localeList49, filteringMode64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        boolean boolean70 = dateTimeZone69.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((java.lang.Object) localeList67, dateTimeZone69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.ArrayList");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode64.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test04610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04610");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.setVariant("2022-02-21T14:45:32.559Z/2022-02-21T14:45:32.559Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-21T14:45:32.559Z/2022-02-21T14:45:32.559Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test04611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04611");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyear();
        long long14 = dateTimeField12.roundFloor((long) 53623795);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.setLanguage("minutes");
        java.util.Locale locale18 = builder15.build();
        java.util.Locale locale21 = new java.util.Locale("", "hi!");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale21.getDisplayScript(locale22);
        java.lang.String str25 = locale18.getDisplayCountry(locale21);
        int int26 = dateTimeField12.getMaximumTextLength(locale18);
        java.text.DateFormatSymbols dateFormatSymbols27 = new java.text.DateFormatSymbols(locale18);
        java.lang.String str28 = locale18.getDisplayScript();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = locale18.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for minutes");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-259200000L) + "'", long14 == (-259200000L));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "minutes");
        org.junit.Assert.assertEquals(locale21.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645455534937,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:00\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=58,SECOND=54,MILLISECOND=937,ZONE_OFFSET=10800000,DST_OFFSET=0]");
    }

    @Test
    public void test04612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04612");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 14);
        org.joda.time.Period period3 = org.joda.time.Period.weeks(2922789);
        org.joda.time.LocalTime localTime4 = localTime1.plus((org.joda.time.ReadablePeriod) period3);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test04613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04613");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.withHourOfDay(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime.Property property22 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int30 = localDateTime29.getEra();
        int int31 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime15, (org.joda.time.ReadablePartial) localDateTime29, periodType32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = localDateTime15.withMillisOfSecond(2238);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2238 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(periodType32);
    }

    @Test
    public void test04614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04614");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        int int4 = localDate3.getMonthOfYear();
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds(893);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime10 = dateTime7.withField(dateTimeFieldType8, 99);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test04615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04615");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(2922789);
        int[] intArray2 = period1.getValues();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 2922789, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04616");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone14);
        int int16 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.Duration duration30 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) '4');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration22);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        java.lang.Object obj33 = mutableInterval0.clone();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.DateTime dateTime39 = dateTime37.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime40 = dateTime37.toLocalTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean45 = interval43.isAfter((long) 10);
        org.joda.time.Duration duration46 = interval43.toDuration();
        org.joda.time.DateTime dateTime48 = dateTime37.withDurationAdded((org.joda.time.ReadableDuration) duration46, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        int int50 = dateTime48.get(dateTimeFieldType49);
        int int51 = dateTime48.getDayOfWeek();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Period period56 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime57 = dateTime52.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.DateTime.Property property58 = dateTime52.millisOfDay();
        org.joda.time.DateTime dateTime59 = dateTime52.withEarlierOffsetAtOverlap();
        int int60 = dateTime48.compareTo((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean61 = dateTime52.isBeforeNow();
        boolean boolean62 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime dateTime66 = interval65.getEnd();
        org.joda.time.DateTime dateTime68 = dateTime66.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime69 = dateTime66.toLocalTime();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = interval72.isAfter((long) 10);
        org.joda.time.Duration duration75 = interval72.toDuration();
        org.joda.time.DateTime dateTime77 = dateTime66.withDurationAdded((org.joda.time.ReadableDuration) duration75, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyear();
        int int79 = dateTime77.get(dateTimeFieldType78);
        long long80 = dateTime77.getMillis();
        org.joda.time.DateTime.Property property81 = dateTime77.secondOfDay();
        boolean boolean82 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Instant instant83 = org.joda.time.Instant.now();
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) instant83);
        org.joda.time.Instant instant86 = instant83.plus((long) 10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1970 + "'", int79 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + long80 + "' != '" + 2186L + "'", long80 == 2186L);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(instant86);
    }

    @Test
    public void test04617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04617");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(35L, chronology13);
        org.joda.time.LocalTime localTime16 = localTime14.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        org.joda.time.LocalTime localTime20 = localTime14.withFieldAdded(durationFieldType18, (-1));
        org.joda.time.LocalTime localTime22 = localTime20.plusHours(53633080);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfSecond();
        org.joda.time.LocalTime localTime25 = property23.setCopy(9);
        org.joda.time.LocalTime localTime26 = property23.roundHalfEvenCopy();
        int int27 = property11.compareTo((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.LocalTime localTime29 = property11.addNoWrapToCopy(53657);
        org.joda.time.LocalTime localTime30 = property11.roundCeilingCopy();
        org.joda.time.LocalTime localTime31 = property11.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField32 = property11.getField();
        org.joda.time.LocalTime localTime34 = property11.setCopy(18);
        org.joda.time.LocalTime localTime35 = property11.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime37 = property11.setCopy("PT-1H");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT-1H\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test04618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04618");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalTime localTime14 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = property11.getLocalTime();
        org.joda.time.LocalTime localTime16 = property11.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = property11.setCopy(21097938);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21097938 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test04619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04619");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.setLenient(true);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar8.getMinimum(57550035);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 57550035");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test04620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04620");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField6 = localDate1.getField(110);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 110");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test04621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04621");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.DateTime dateTime30 = dateTime2.minus((org.joda.time.ReadableDuration) duration27);
        java.util.GregorianCalendar gregorianCalendar31 = dateTime30.toGregorianCalendar();
        gregorianCalendar31.setFirstDayOfWeek(2186);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period43 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime44 = dateTime39.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyear();
        java.lang.String str49 = dateTimeField47.getAsText(35L);
        long long52 = dateTimeField47.getDifferenceAsLong(1645488000000L, 1645455232776L);
        java.util.Locale locale56 = new java.util.Locale("Chinese", "2022-02-21T14:53:58.179Z/2022-02-21T14:53:58.179Z");
        java.lang.String str57 = dateTimeField47.getAsShortText((long) 8, locale56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = gregorianCalendar31.getDisplayName(0, (-736377), locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(gregorianCalendar31);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970" + "'", str49, "1970");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertEquals(locale56.toString(), "chinese_2022-02-21T14:53:58.179Z/2022-02-21T14:53:58.179Z");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970" + "'", str57, "1970");
    }

    @Test
    public void test04622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04622");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(20);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMonths(53654);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.era();
        boolean boolean22 = property21.isLeap();
        long long23 = property21.remainder();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 141751087920000L + "'", long23 == 141751087920000L);
    }

    @Test
    public void test04623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04623");
        org.joda.time.Period period1 = org.joda.time.Period.millis(10);
        org.joda.time.Period period6 = new org.joda.time.Period((int) (byte) 1, (int) (byte) 0, 6, 22);
        org.joda.time.Period period8 = period6.minusWeeks(1);
        org.joda.time.Period period9 = period8.negated();
        org.joda.time.Period period10 = period1.withFields((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths(8);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime28 = dateTime23.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyear();
        org.joda.time.Period period33 = new org.joda.time.Period((-2016L), chronology29);
        org.joda.time.DateTime dateTime34 = dateTime18.withChronology(chronology29);
        org.joda.time.Duration duration35 = period10.toDurationFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period37 = period10.minusWeeks((-10));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test04624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04624");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime0.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths(0);
        org.joda.time.DateTime dateTime11 = dateTime9.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int18 = localDateTime17.getEra();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime19.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = dateTime19.get(dateTimeFieldType27);
        int int29 = localDateTime17.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime31 = dateTime11.withField(dateTimeFieldType27, 7);
        java.lang.String str32 = dateTimeFieldType27.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 14 + "'", int29 == 14);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hourOfDay" + "'", str32, "hourOfDay");
    }

    @Test
    public void test04625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04625");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) 20986);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04626");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime.Property property6 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = interval9.isAfter((long) 10);
        boolean boolean12 = interval9.containsNow();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (byte) 100);
        boolean boolean19 = interval9.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int20 = property6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime22 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test04627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04627");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguageTag("UTC");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setRegion("2022-02-21T14:56:15.548Z/2022-02-21T14:56:15.548Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-21T14:56:15.548Z/2022-02-21T14:56:15.548Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test04628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04628");
        java.lang.String[] strArray4 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        boolean boolean10 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.stream.Stream<java.lang.String> strStream11 = strSet9.parallelStream();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days14 = duration13.toStandardDays();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTime(dateTimeZone29);
        int int31 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        org.joda.time.Duration duration45 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '4');
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration37);
        mutableInterval15.setDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Days days48 = duration37.toStandardDays();
        org.joda.time.Days[] daysArray49 = new org.joda.time.Days[] { days14, days48 };
        org.joda.time.Days[] daysArray50 = strSet9.toArray(daysArray49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        int int54 = dateTime51.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime51.withMillisOfSecond(9);
        boolean boolean59 = strSet9.contains((java.lang.Object) dateTime51);
        int int60 = dateTime51.getMillisOfDay();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((java.lang.Object) dateTime51);
        org.joda.time.LocalTime.Property property62 = localTime61.minuteOfHour();
        org.joda.time.LocalTime localTime63 = property62.roundCeilingCopy();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(daysArray49);
        org.junit.Assert.assertNotNull(daysArray50);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2186 + "'", int60 == 2186);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localTime63);
    }

    @Test
    public void test04629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04629");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime16 = property11.roundHalfEvenCopy();
        int int17 = property11.getLeapAmount();
        org.joda.time.LocalTime localTime18 = property11.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = localTime18.withMinuteOfHour((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test04630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04630");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.Date date9 = calendar8.getTime();
        int int10 = date9.getDay();
        java.lang.String str11 = date9.toGMTString();
        java.util.Date date15 = new java.util.Date(2022, 1970, (int) (short) 100);
        int int16 = date15.getMinutes();
        java.lang.String str17 = date15.toGMTString();
        date15.setHours(45);
        boolean boolean20 = date9.after(date15);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 29 03:00:00 GMT+03:00 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "29 Jan 1970 00:00:00 GMT" + "'", str11, "29 Jan 1970 00:00:00 GMT");
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sun Jun 09 21:00:00 GMT+03:00 4086");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "7 Jun 4086 21:00:00 GMT" + "'", str17, "7 Jun 4086 21:00:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int20 = calendar8.getMinimum((int) (short) 1);
        int int21 = calendar8.getMinimalDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromCalendarFields(calendar8);
        org.joda.time.DateTime dateTime23 = localDateTime22.toDateTime();
        int int24 = localDateTime22.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-62142800809990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=285,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=10,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 41 + "'", int24 == 41);
    }

    @Test
    public void test04632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04632");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((-1));
        int int19 = localDateTime16.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.era();
        java.lang.String str21 = property20.getAsText();
        org.joda.time.LocalDateTime localDateTime22 = property20.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withField(dateTimeFieldType29, 100);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withField(dateTimeFieldType38, 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime37.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int46 = localDateTime45.getSecondOfMinute();
        int int47 = localDateTime31.compareTo((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withField(dateTimeFieldType56, 100);
        org.joda.time.Period period59 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime49, (org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime22.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime.Property property64 = dateTime62.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = property64.getFieldType();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime22.withField(dateTimeFieldType65, 762);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime69 = property68.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AD" + "'", str21, "AD");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime69);
    }

    @Test
    public void test04633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04633");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(3);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int8 = localDateTime7.getEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYear(2);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime19 = dateTime14.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTime21.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.toDateTime(dateTimeZone25);
        int int27 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = interval36.isAfter((long) 10);
        org.joda.time.Duration duration39 = interval36.toDuration();
        org.joda.time.Duration duration41 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) '4');
        org.joda.time.DateTime dateTime42 = dateTime14.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime10.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime10.plusMonths(762);
        boolean boolean46 = dateTimeZone1.isLocalDateTimeGap(localDateTime45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withMillisOfSecond(21093276);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21093276 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test04634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04634");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.plus((long) (byte) 10);
        org.joda.time.DateTime.Property property9 = dateTime8.monthOfYear();
        org.joda.time.DurationField durationField10 = property9.getLeapDurationField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(10L, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusWeeks(4);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        java.lang.String str20 = locale18.toLanguageTag();
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = property9.getAsShortText(locale18);
        java.lang.String str23 = property9.getAsText();
        int int24 = property9.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Jan" + "'", str22, "Jan");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "January" + "'", str23, "January");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
    }

    @Test
    public void test04635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04635");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime1.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime18, periodType19);
        org.joda.time.LocalTime localTime22 = localTime18.withMillisOfSecond(4);
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) localTime18, (long) 0);
        org.joda.time.Chronology chronology25 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfYear();
        int int28 = dateTimeField26.getLeapAmount(378691200010L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(10L, chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusWeeks(4);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        java.lang.String str38 = locale36.getDisplayVariant();
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleKeys();
        int int40 = dateTimeField26.getMaximumTextLength(locale36);
        java.util.Locale.setDefault(category0, locale36);
        java.util.Locale locale42 = java.util.Locale.getDefault(category0);
        java.util.Locale locale45 = new java.util.Locale("", "hi!");
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale46);
        java.lang.String str48 = locale45.getDisplayScript(locale46);
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale46.getDisplayLanguage(locale49);
        java.util.Set<java.lang.String> strSet51 = locale46.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale46);
        java.lang.String str53 = locale46.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test04636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04636");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((-1));
        int int19 = localDateTime16.getMinuteOfHour();
        int int20 = localDateTime16.getMonthOfYear();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.millisOfDay();
        org.joda.time.DateTime.Property property25 = dateTime22.weekyear();
        org.joda.time.DateTime.Property property26 = dateTime22.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int28 = dateTime22.get(dateTimeFieldType27);
        int int29 = localDateTime16.get(dateTimeFieldType27);
        int int30 = localDateTime16.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 51120 + "'", int29 == 51120);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
    }

    @Test
    public void test04637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04637");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.DateTime.Property property5 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone6.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) dateTime4, dateTimeZone6);
        long long14 = dateTimeZone6.convertLocalToUTC(35L, false, 1L);
        java.lang.String str16 = dateTimeZone6.getName((long) 12);
        int int18 = dateTimeZone6.getStandardOffset(100001L);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(4460054926L, dateTimeZone6);
        int int20 = localTime19.getMillisOfSecond();
        org.joda.time.Period period22 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.PeriodType periodType23 = period22.getPeriodType();
        org.joda.time.LocalTime localTime24 = localTime19.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalTime localTime26 = localTime19.withMillisOfDay(0);
        org.joda.time.LocalTime.Property property27 = localTime19.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime29.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTime(dateTimeZone33);
        int int35 = dateTime34.getCenturyOfEra();
        org.joda.time.DateTime.Property property36 = dateTime34.monthOfYear();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.era();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period43 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime44 = dateTime39.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime39);
        long long46 = property36.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime39);
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.text.DateFormatSymbols dateFormatSymbols48 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale47);
        int int49 = property36.getMaximumShortTextLength(locale47);
        java.lang.String str50 = locale47.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime51 = property27.setCopy("14AM207432", locale47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"14AM207432\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 378691200010L + "'", long9 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 926 + "'", int20 == 926);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test04638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04638");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean16 = dateTimeZone15.isFixed();
        org.joda.time.DateTime dateTime17 = localDateTime5.toDateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime5.withSecondOfMinute(8);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime5.plusHours((int) 'u');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusYears(6139);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(10L, chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusWeeks(4);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = locale32.getCountry();
        int int36 = property24.getMaximumShortTextLength(locale32);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(strSet37);
    }

    @Test
    public void test04639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04639");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder2 = builder0.setCalendarType("fra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: fra");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04640");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.DateTime dateTime30 = dateTime2.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) 893);
        boolean boolean34 = dateTime30.isEqual((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((-1L));
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime45 = dateTime40.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology46);
        org.joda.time.DurationField durationField48 = chronology46.weeks();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.hourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.secondOfDay();
        org.joda.time.DurationField durationField51 = chronology46.centuries();
        org.joda.time.Period period52 = duration36.toPeriod(chronology46);
        org.joda.time.DateTime dateTime54 = dateTime30.withDurationAdded((org.joda.time.ReadableDuration) duration36, 6);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Interval interval59 = interval57.toInterval();
        boolean boolean61 = interval57.contains((long) 1970);
        org.joda.time.Interval interval62 = interval57.toInterval();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        boolean boolean67 = interval65.isAfter((long) 10);
        boolean boolean68 = interval62.abuts((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Chronology chronology69 = interval65.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.weekyears();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime54.toMutableDateTime(chronology69);
        org.joda.time.DateTimeField dateTimeField73 = chronology69.secondOfMinute();
        org.joda.time.DurationField durationField74 = chronology69.seconds();
        long long75 = durationField74.getUnitMillis();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1000L + "'", long75 == 1000L);
    }

    @Test
    public void test04641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04641");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int20 = calendar8.getMinimum((int) (short) 1);
        calendar8.roll(7, false);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime29 = dateTime24.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime37 = dateTime32.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime39 = dateTime24.toDateTime(chronology38);
        org.joda.time.DurationField durationField40 = chronology38.centuries();
        int int43 = durationField40.getDifference((long) 2, (long) (-1));
        int int46 = durationField40.getDifference((long) (byte) 10, (long) 53633080);
        long long47 = durationField40.getUnitMillis();
        boolean boolean48 = calendar8.before((java.lang.Object) durationField40);
        calendar8.set(6, 53775186);
        calendar8.set(894, 53917634, 2, (-292275054), 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=894,MONTH=53917634,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=2,DAY_OF_YEAR=53775186,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=-292275054,MINUTE=0,SECOND=10,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3155695200000L + "'", long47 == 3155695200000L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test04642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04642");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.dayOfMonth();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.Chronology chronology16 = interval12.getChronology();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100, chronology16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology16);
        java.lang.String str19 = localDateTime18.toString();
        long long21 = chronology6.set((org.joda.time.ReadablePartial) localDateTime18, 2764800010L);
        int int22 = localDateTime18.getEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withYearOfEra(24);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusYears(51120);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:02.186" + "'", str19, "1970-01-01T00:00:02.186");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2186L + "'", long21 == 2186L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test04643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04643");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone2);
        timeZone2.setRawOffset(53654);
        java.util.TimeZone.setDefault(timeZone2);
        java.util.Date date10 = new java.util.Date(893, (int) (byte) -1, (int) (byte) 10);
        date10.setMonth((int) '#');
        int int13 = date10.getDate();
        boolean boolean14 = timeZone2.inDaylightTime(date10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455536125,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=53654,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=56,MILLISECOND=126,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date10.toString(), "Sat Dec 10 00:00:00 GMT+00:00 2794");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04644");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
        org.joda.time.LocalDate localDate7 = localDate1.withDayOfMonth(15);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        org.joda.time.Duration duration13 = interval10.toDuration();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.Duration duration21 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '4');
        org.joda.time.Duration duration23 = duration13.withMillis((long) (short) -1);
        long long24 = duration13.getMillis();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime30 = dateTime25.plus((org.joda.time.ReadablePeriod) period29);
        boolean boolean32 = dateTime25.equals((java.lang.Object) "en_CA");
        org.joda.time.DateTime.Property property33 = dateTime25.monthOfYear();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = interval37.isAfter((long) 10);
        boolean boolean40 = interval37.containsNow();
        boolean boolean41 = periodType34.equals((java.lang.Object) boolean40);
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25, periodType34);
        org.joda.time.LocalDate localDate44 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period42, 32769);
        org.joda.time.LocalDate.Property property45 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate46 = property45.roundHalfCeilingCopy();
        int int47 = property45.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test04645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04645");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("months");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("weeks");
        java.util.Locale.LanguageRange languageRange5 = new java.util.Locale.LanguageRange("months");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange3, languageRange5 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setLanguage("minutes");
        java.util.Locale.Builder builder12 = builder9.clear();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder14 = builder12.setLocale(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray21 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        boolean boolean27 = strSet22.containsAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        boolean boolean33 = strSet30.addAll((java.util.Collection<java.lang.String>) strSet32);
        boolean boolean34 = strSet32.isEmpty();
        boolean boolean35 = strSet32.isEmpty();
        boolean boolean36 = strSet22.addAll((java.util.Collection<java.lang.String>) strSet32);
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap38);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols43 = new java.text.DateFormatSymbols(locale42);
        java.lang.Object obj44 = dateFormatSymbols43.clone();
        java.lang.String[] strArray51 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols43.setMonths(strArray51);
        java.lang.String[][] strArray53 = new java.lang.String[][] {};
        dateFormatSymbols43.setZoneStrings(strArray53);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols56 = new java.text.DateFormatSymbols(locale55);
        java.lang.Object obj57 = dateFormatSymbols56.clone();
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols56.setMonths(strArray64);
        dateFormatSymbols43.setEras(strArray64);
        java.util.Locale locale67 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols68 = new java.text.DateFormatSymbols(locale67);
        java.lang.String[] strArray69 = dateFormatSymbols68.getMonths();
        java.lang.String[] strArray71 = java.util.TimeZone.getAvailableIDs(53661);
        dateFormatSymbols68.setShortWeekdays(strArray71);
        dateFormatSymbols43.setShortWeekdays(strArray71);
        java.lang.Comparable<java.lang.String>[] strComparableArray74 = strSet41.toArray((java.lang.Comparable<java.lang.String>[]) strArray71);
        java.lang.String str75 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap76);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strComparableArray74);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(languageRangeList77);
    }

    @Test
    public void test04646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04646");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        org.joda.time.DurationField durationField18 = chronology14.years();
        long long21 = durationField18.getMillis((long) 266, 1613191507200015L);
        long long24 = durationField18.add(1728000002L, (long) 68);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 8394105600000L + "'", long21 == 8394105600000L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2147644800002L + "'", long24 == 2147644800002L);
    }

    @Test
    public void test04647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04647");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        int int4 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTime(dateTimeZone5);
        int int7 = dateTime6.getCenturyOfEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(10L, chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        int int12 = dateTime10.get(dateTimeFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = dateTime10.isSupported(dateTimeFieldType13);
        int int15 = dateTime6.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime17 = dateTime6.plusMillis(7);
        org.joda.time.DateTime.Property property18 = dateTime17.secondOfMinute();
        int int19 = dateTime17.getSecondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime17.minusDays(672);
        org.joda.time.DateTime dateTime23 = dateTime17.withCenturyOfEra(2922789);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay(25140369600L, chronology24);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime26, (org.joda.time.ReadablePartial) localTime27, periodType28);
        org.joda.time.Period period31 = period29.withMinutes((int) '#');
        long long34 = chronology24.add((org.joda.time.ReadablePeriod) period29, (long) 58, 1979);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType36 = period29.getFieldType(53773647);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 19 + "'", int7 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 58L + "'", long34 == 58L);
    }

    @Test
    public void test04648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04648");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((-1));
        org.joda.time.Duration duration20 = org.joda.time.Duration.millis((long) (short) -1);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration20);
        long long22 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration20);
        long long23 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withField(dateTimeFieldType32, 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime31.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int40 = localDateTime39.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.property(dateTimeFieldType42);
        boolean boolean44 = localDateTime25.isSupported(dateTimeFieldType42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = localDateTime25.withTime(13, 72000032, 110, 36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72000032 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test04649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04649");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-1L), dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfWeek(2);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        org.joda.time.DateTime dateTime12 = localDate7.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfWeek();
        org.joda.time.DateTime dateTime15 = dateTime12.plusMinutes(20987);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfWeek();
        int int17 = property16.getMaximumValue();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(10L, chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        int int22 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = dateTime20.plusWeeks(4);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Calendar calendar26 = dateTime24.toCalendar(locale25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = period39.toDurationFrom(readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        boolean boolean43 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime44 = dateTime29.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = interval49.isAfter((long) 10);
        org.joda.time.Duration duration52 = interval49.toDuration();
        org.joda.time.Chronology chronology53 = interval49.getChronology();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology53);
        org.joda.time.Period period55 = duration41.toPeriod(chronology53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) calendar26, chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((java.lang.Object) int17, chronology53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(calendar26);
        org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test04650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04650");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test04651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04651");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.Period period3 = period1.plusYears(1969);
        org.joda.time.Period period5 = period3.withSeconds(9);
        org.joda.time.Period period7 = period5.minusWeeks(53654);
        org.joda.time.DurationFieldType durationFieldType9 = period7.getFieldType((int) (short) 1);
        org.joda.time.Period period11 = period7.minusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property15 = dateTime13.millisOfDay();
        org.joda.time.DateTime.Property property16 = dateTime13.weekyear();
        org.joda.time.DateTime.Property property17 = dateTime13.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int19 = dateTime13.get(dateTimeFieldType18);
        int int20 = dateTime13.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withField(dateTimeFieldType27, 100);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withField(dateTimeFieldType36, 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime35.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int44 = localDateTime43.getSecondOfMinute();
        int int45 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withField(dateTimeFieldType54, 100);
        org.joda.time.Period period57 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime47, (org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.DateTime dateTime58 = dateTime13.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period63 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime64 = dateTime59.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property66 = dateTime65.era();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Period period71 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime72 = dateTime67.plus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Chronology chronology73 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime74 = dateTime59.toDateTime(chronology73);
        org.joda.time.DurationField durationField75 = chronology73.centuries();
        int int78 = durationField75.getDifference((long) 2, (long) (-1));
        int int81 = durationField75.getDifference((long) 6, (long) 100);
        org.joda.time.DurationFieldType durationFieldType82 = durationField75.getType();
        int int84 = durationField75.getValue((long) ' ');
        org.joda.time.DurationFieldType durationFieldType85 = durationField75.getType();
        int int86 = period57.indexOf(durationFieldType85);
        boolean boolean87 = period7.isSupported(durationFieldType85);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test04652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04652");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("clockhourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04653");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(69);
        int int5 = localDate4.getCenturyOfEra();
        int int6 = localDate4.getYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1971 + "'", int6 == 1971);
    }

    @Test
    public void test04654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04654");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(12);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime14 = interval13.getEnd();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(10L, chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime.Property property22 = dateTime16.property(dateTimeFieldType20);
        org.joda.time.LocalDate localDate24 = localDate10.withField(dateTimeFieldType20, 1970);
        org.joda.time.DateTime dateTime25 = localDate24.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property26 = localDate24.era();
        int int27 = localDate24.getDayOfMonth();
        int int28 = localDate6.compareTo((org.joda.time.ReadablePartial) localDate24);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(1645455229061L);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime33.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTime40.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = dateTime40.toDateTime(dateTimeZone44);
        int int46 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = interval49.isAfter((long) 10);
        org.joda.time.Duration duration52 = interval49.toDuration();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        boolean boolean57 = interval55.isAfter((long) 10);
        org.joda.time.Duration duration58 = interval55.toDuration();
        org.joda.time.Duration duration60 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration58, (int) '4');
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean64 = dateTimeZone63.isFixed();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 2, dateTimeZone63);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeUtils.getZone(dateTimeZone63);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = dateTime40.withZoneRetainFields(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int71 = dateTime69.get(dateTimeFieldType70);
        boolean boolean72 = localTime30.isSupported(dateTimeFieldType70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property73 = localDate24.property(dateTimeFieldType70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2186 + "'", int71 == 2186);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test04655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04655");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration13 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) '4');
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime14.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTime(dateTimeZone18);
        int int20 = dateTime19.getCenturyOfEra();
        org.joda.time.Interval interval21 = duration11.toIntervalTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime22, (org.joda.time.ReadablePartial) localTime23, periodType24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime32 = dateTime29.toLocalTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = interval35.isAfter((long) 10);
        org.joda.time.Duration duration38 = interval35.toDuration();
        org.joda.time.DateTime dateTime40 = dateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration38, 0);
        org.joda.time.DateTime dateTime41 = localTime23.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property46 = dateTime45.era();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Period period51 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime52 = dateTime47.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.weekyear();
        org.joda.time.DateTime dateTime56 = dateTime43.toDateTime(chronology53);
        org.joda.time.Period period57 = duration11.toPeriod(chronology53);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime64 = dateTime58.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime66 = dateTime64.plus((long) (byte) 10);
        org.joda.time.DateTime.Property property67 = dateTime66.monthOfYear();
        long long68 = dateTime66.getMillis();
        int int69 = dateTime66.getDayOfMonth();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = interval72.isAfter((long) 10);
        boolean boolean75 = interval72.containsNow();
        long long76 = interval72.toDurationMillis();
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(10L, chronology80);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.weekyear();
        int int83 = dateTime81.get(dateTimeFieldType82);
        org.joda.time.DateTime dateTime85 = dateTime81.plusWeeks(4);
        boolean boolean86 = periodType78.equals((java.lang.Object) dateTime85);
        int int87 = periodType78.size();
        org.joda.time.PeriodType periodType88 = periodType78.withMillisRemoved();
        org.joda.time.Period period89 = new org.joda.time.Period((long) 12, periodType78);
        org.joda.time.Interval interval90 = interval72.withPeriodAfterStart((org.joda.time.ReadablePeriod) period89);
        org.joda.time.DateTime dateTime91 = dateTime66.minus((org.joda.time.ReadablePeriod) period89);
        org.joda.time.DateTime dateTime93 = dateTime91.withSecondOfMinute(59);
        org.joda.time.Interval interval94 = duration11.toIntervalTo((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime.Property property95 = dateTime91.minuteOfHour();
        int int96 = dateTime91.getEra();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-61977571197804L) + "'", long68 == (-61977571197804L));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1970 + "'", int83 == 1970);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 6 + "'", int87 == 6);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test04656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04656");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime4.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime13 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int int14 = localTime0.getSecondOfMinute();
        org.joda.time.LocalTime localTime16 = localTime0.withMillisOfSecond(645);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        boolean boolean22 = interval19.containsNow();
        long long23 = interval19.toDurationMillis();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(10L, chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        int int30 = dateTime28.get(dateTimeFieldType29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusWeeks(4);
        boolean boolean33 = periodType25.equals((java.lang.Object) dateTime32);
        int int34 = periodType25.size();
        org.joda.time.PeriodType periodType35 = periodType25.withMillisRemoved();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 12, periodType25);
        org.joda.time.Interval interval37 = interval19.withPeriodAfterStart((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Interval interval43 = interval41.toInterval();
        boolean boolean45 = interval41.contains((long) 1970);
        org.joda.time.Interval interval46 = interval41.toInterval();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = interval49.isAfter((long) 10);
        boolean boolean52 = interval46.abuts((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Chronology chronology53 = interval49.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.weekyears();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (-1), chronology53);
        org.joda.time.Interval interval56 = interval37.withChronology(chronology53);
        org.joda.time.DateTimeField dateTimeField57 = chronology53.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField57.getType();
        // The following exception was thrown during execution in test generation
        try {
            int int59 = localTime0.get(dateTimeFieldType58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 6 + "'", int34 == 6);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
    }

    @Test
    public void test04657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04657");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale4);
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        java.lang.String str7 = locale0.getDisplayScript(locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale0);
        calendar8.clear(12);
        calendar8.setMinimalDaysInFirstWeek(6);
        calendar8.setLenient(false);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap20 = calendar8.getDisplayNames(5, 124, locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=53654,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=6,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=?,SECOND=50,MILLISECOND=376,ZONE_OFFSET=53654,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test04658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04658");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("10 Jun 4086 04:59:59 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=10 jun 4086 04:59:59 gmt");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04659");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        calendar8.set(0, (int) ' ', 4);
        calendar8.setTimeInMillis((long) 0);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields(calendar8);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = calendar8.getLeastMaximum(18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 18");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test04660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04660");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Interval interval14 = interval10.toInterval();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.millisOfDay();
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        boolean boolean20 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Interval interval25 = interval23.toInterval();
        org.joda.time.Period period26 = interval23.toPeriod();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        boolean boolean33 = interval23.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime34, (org.joda.time.ReadablePartial) localTime35, periodType36);
        org.joda.time.Period period38 = period37.negated();
        org.joda.time.Interval interval39 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Interval interval40 = interval14.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.MutableInterval mutableInterval41 = interval14.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        org.joda.time.Period period45 = mutableInterval44.toPeriod();
        boolean boolean46 = mutableInterval41.isAfter((org.joda.time.ReadableInterval) mutableInterval44);
        org.joda.time.ReadableInterval readableInterval47 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.ReadableInterval readableInterval48 = null;
        boolean boolean49 = mutableInterval41.contains(readableInterval48);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval48);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(readableInterval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test04661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04661");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(100L, 53L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04662");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
        org.joda.time.LocalDate localDate7 = localDate1.withYearOfEra((int) '#');
        org.joda.time.LocalDate.Property property8 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate10 = localDate1.withYear(53654);
        java.lang.String str11 = localDate1.toString();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.millis();
        boolean boolean13 = localDate1.isSupported(durationFieldType12);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04663");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        int int5 = dateTime0.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTime0.withMonthOfYear(53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
    }

    @Test
    public void test04664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04664");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime.Property property12 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime14 = localTime10.minusSeconds(53661);
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property15.withMaximumValue();
        org.joda.time.LocalTime localTime18 = localTime16.withMillisOfDay(56751);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test04665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04665");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.MutableInterval mutableInterval6 = interval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.toDateTime(dateTimeZone21);
        int int23 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        org.joda.time.Duration duration35 = interval32.toDuration();
        org.joda.time.Duration duration37 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) '4');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration29);
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval7.copy();
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval7.copy();
        boolean boolean42 = interval2.isAfter((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long46 = mutableInterval45.toDurationMillis();
        mutableInterval45.setInterval((long) 14, (long) '4');
        mutableInterval41.setInterval((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean55 = interval53.isAfter((long) 10);
        boolean boolean56 = interval53.containsNow();
        long long57 = interval53.toDurationMillis();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(10L, chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.weekyear();
        int int64 = dateTime62.get(dateTimeFieldType63);
        org.joda.time.DateTime dateTime66 = dateTime62.plusWeeks(4);
        boolean boolean67 = periodType59.equals((java.lang.Object) dateTime66);
        int int68 = periodType59.size();
        org.joda.time.PeriodType periodType69 = periodType59.withMillisRemoved();
        org.joda.time.Period period70 = new org.joda.time.Period((long) 12, periodType59);
        org.joda.time.Interval interval71 = interval53.withPeriodAfterStart((org.joda.time.ReadablePeriod) period70);
        boolean boolean72 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) interval53);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime76 = interval75.getEnd();
        org.joda.time.Interval interval77 = interval75.toInterval();
        boolean boolean79 = interval75.contains((long) 1970);
        org.joda.time.Interval interval80 = interval75.toInterval();
        org.joda.time.ReadableInstant readableInstant81 = null;
        boolean boolean82 = interval80.isBefore(readableInstant81);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property84 = dateTime83.era();
        org.joda.time.DurationField durationField85 = property84.getLeapDurationField();
        int int86 = property84.getMaximumValueOverall();
        int int87 = property84.getMinimumValueOverall();
        org.joda.time.DateTime dateTime88 = property84.getDateTime();
        org.joda.time.DateTime dateTime89 = property84.withMaximumValue();
        org.joda.time.Interval interval90 = interval80.withEnd((org.joda.time.ReadableInstant) dateTime89);
        boolean boolean92 = interval80.contains((long) 10);
        org.joda.time.DateTime dateTime93 = interval80.getEnd();
        mutableInterval41.setInterval((org.joda.time.ReadableInterval) interval80);
        org.joda.time.Period period96 = org.joda.time.Period.years(2922789);
        mutableInterval41.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period96);
        org.joda.time.MutableInterval mutableInterval98 = mutableInterval41.copy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 426L + "'", long46 == 426L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNull(durationField85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(mutableInterval98);
    }

    @Test
    public void test04666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04666");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.setCopy(9);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime20 = dateTime14.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime22 = dateTime20.plus((long) (byte) 10);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = period24.toDurationFrom(readableInstant25);
        org.joda.time.Seconds seconds27 = duration26.toStandardSeconds();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalTime localTime29 = localTime13.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = period28.minusMinutes((int) (byte) 1);
        org.joda.time.Period period33 = period28.minusYears(27);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test04667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04667");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(897, 53640079, 1439, 57, 2, 2154, 496);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04668");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        long long29 = dateTimeZone27.nextTransition((long) 885);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 885L + "'", long29 == 885L);
    }

    @Test
    public void test04669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04669");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 893);
        org.joda.time.Instant instant3 = instant1.minus((long) 22);
        org.joda.time.Instant instant5 = instant3.plus((long) (short) 0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getDurationType();
        boolean boolean12 = instant3.isSupported(dateTimeFieldType9);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter((long) 10);
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.DateTime dateTime27 = dateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration25, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusWeeks((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.withMillis((long) 12);
        org.joda.time.DateTime dateTime34 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime36 = dateTime31.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime31.withDayOfYear(659);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 659 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test04670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04670");
        org.joda.time.Instant instant8 = new org.joda.time.Instant(35L);
        long long9 = instant8.getMillis();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime10, (org.joda.time.ReadablePartial) localTime11, periodType12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime20 = dateTime17.toLocalTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean25 = interval23.isAfter((long) 10);
        org.joda.time.Duration duration26 = interval23.toDuration();
        org.joda.time.DateTime dateTime28 = dateTime17.withDurationAdded((org.joda.time.ReadableDuration) duration26, 0);
        org.joda.time.DateTime dateTime29 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime40 = dateTime35.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.weekyear();
        org.joda.time.DateTime dateTime44 = dateTime31.toDateTime(chronology41);
        org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadableInstant) dateTime31);
        java.lang.String str46 = chronology45.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(366, 53782845, 4492, 56751, 2, 866, 124, chronology45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56751 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 35L + "'", long9 == 35L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test04671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04671");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int10 = timeZone9.getRawOffset();
        timeZone9.setRawOffset(53623795);
        int int13 = timeZone9.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=53623795,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04672");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(2022);
        org.joda.time.LocalDate.Property property6 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property6.addToCopy(58);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test04673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04673");
        org.joda.time.Period period1 = org.joda.time.Period.months(1969);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04674");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate1.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (-1), chronology6);
        org.joda.time.Period period8 = period7.toPeriod();
        int int9 = period8.size();
        int int10 = period8.getMinutes();
        org.joda.time.Period period12 = period8.minusSeconds((int) (short) -1);
        org.joda.time.LocalDate localDate13 = localDate1.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.LocalDate localDate15 = localDate13.withYear((int) (short) 10);
        org.joda.time.LocalDate localDate17 = localDate13.withYearOfCentury((int) (byte) 10);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test04675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04675");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(3290910690545L);
    }

    @Test
    public void test04676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04676");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(5);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        boolean boolean22 = interval20.isAfter((long) 10);
        boolean boolean23 = interval20.containsNow();
        long long24 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusWeeks(4);
        boolean boolean34 = periodType26.equals((java.lang.Object) dateTime33);
        int int35 = periodType26.size();
        org.joda.time.PeriodType periodType36 = periodType26.withMillisRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 12, periodType26);
        org.joda.time.Interval interval38 = interval20.withPeriodAfterStart((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Interval interval44 = interval42.toInterval();
        boolean boolean46 = interval42.contains((long) 1970);
        org.joda.time.Interval interval47 = interval42.toInterval();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = interval50.isAfter((long) 10);
        boolean boolean53 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Chronology chronology54 = interval50.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.weekyears();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (-1), chronology54);
        org.joda.time.Interval interval57 = interval38.withChronology(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = chronology54.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField58.getType();
        int int60 = localDateTime17.get(dateTimeFieldType59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) int60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 163 + "'", int60 == 163);
    }

    @Test
    public void test04677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04677");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("Property[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[hourOfDay]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04678");
        java.util.Date date3 = new java.util.Date(2022, 1970, (int) (short) 100);
        int int4 = date3.getSeconds();
        date3.setHours(53);
        int int7 = date3.getHours();
        java.time.Instant instant8 = date3.toInstant();
        java.util.Date date12 = new java.util.Date(2022, 1970, (int) (short) 100);
        int int13 = date12.getSeconds();
        date12.setHours(53);
        int int16 = date12.getHours();
        java.time.Instant instant17 = date12.toInstant();
        java.util.Date date18 = java.util.Date.from(instant17);
        int int19 = date3.compareTo(date18);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Jun 10 05:00:00 GMT+00:00 4086");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertEquals(date12.toString(), "Mon Jun 10 05:00:00 GMT+00:00 4086");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Mon Jun 10 05:00:00 GMT+00:00 4086");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test04679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04679");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(20);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.secondOfMinute();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.LocalDateTime localDateTime21 = property19.getLocalDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test04680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04680");
        org.joda.time.Period period2 = new org.joda.time.Period(100L, 694224000120L);
        java.lang.String str3 = period2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "P22YT0.020S" + "'", str3, "P22YT0.020S");
    }

    @Test
    public void test04681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04681");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-1,MONTH=21,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=11,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=893,SECOND=10,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"java.util.GregorianCalendar[time...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04682");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        java.lang.String str3 = interval2.toString();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Interval interval5 = interval2.withChronology(chronology4);
        boolean boolean6 = interval5.isBeforeNow();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z" + "'", str3, "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z");
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test04683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04683");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.lang.String str3 = locale0.getVariant();
        boolean boolean4 = locale0.hasExtensions();
        java.lang.String str5 = locale0.getDisplayCountry();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths(12);
        org.joda.time.LocalDate.Property property11 = localDate8.centuryOfEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (-1), chronology13);
        org.joda.time.Period period15 = period14.toPeriod();
        int int16 = period15.size();
        int int17 = period15.getMinutes();
        org.joda.time.Period period19 = period15.minusSeconds((int) (short) -1);
        org.joda.time.LocalDate localDate20 = localDate8.minus((org.joda.time.ReadablePeriod) period19);
        int int21 = localDate8.getEra();
        boolean boolean22 = strSet6.remove((java.lang.Object) int21);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Canada" + "'", str5, "Canada");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test04684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04684");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("99", "");
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Locale locale10 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale11);
        java.lang.String str13 = locale10.getDisplayScript(locale11);
        java.lang.String str14 = locale7.getDisplayScript(locale11);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale7);
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale7.getDisplayLanguage(locale16);
        java.util.Locale locale18 = locale7.stripExtensions();
        java.util.Locale.Builder builder19 = builder6.setLocale(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder6.setUnicodeLocaleKeyword("java.util.GregorianCalendar[time=1645455394322,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=34,MILLISECOND=322,ZONE_OFFSET=0,DST_OFFSET=0]", "1970-01-01T00:00:00.893Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.util.GregorianCalendar[time=1645455394322,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=34,MILLISECOND=322,ZONE_OFFSET=0,DST_OFFSET=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455537463,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=53654,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=51,MILLISECOND=117,ZONE_OFFSET=53654,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test04685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04685");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime3, periodType4);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusWeeks(4);
        boolean boolean14 = periodType6.equals((java.lang.Object) dateTime13);
        org.joda.time.DateTime dateTime15 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean17 = dateTime15.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours(1);
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((int) (short) -1, 2, 14, (int) (short) 1, 31, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime15.withZone(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval28 = new org.joda.time.Interval((long) 41, (-61977517321496L), dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test04686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04686");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        java.lang.String str17 = chronology14.toString();
        org.joda.time.DurationField durationField18 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.dayOfYear();
        org.joda.time.DurationField durationField20 = dateTimeField19.getDurationField();
        java.lang.String str22 = dateTimeField19.getAsShortText((-1645455388603L));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str17, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "314" + "'", str22, "314");
    }

    @Test
    public void test04687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04687");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime6 = dateTime3.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = interval9.isAfter((long) 10);
        org.joda.time.Duration duration12 = interval9.toDuration();
        org.joda.time.DateTime dateTime14 = dateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration12, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology17);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test04688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04688");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate1.centuryOfEra();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfEra();
        int int7 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test04689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04689");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int19 = calendar8.getWeeksInWeekYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime20, (org.joda.time.ReadablePartial) localTime21, periodType22);
        org.joda.time.LocalTime localTime25 = localTime20.minusSeconds((int) (short) 100);
        boolean boolean26 = calendar8.before((java.lang.Object) localTime25);
        calendar8.set(31, (int) (byte) 100, 365);
        // The following exception was thrown during execution in test generation
        try {
            calendar8.set(30, 89422);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=100,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=365,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=893,SECOND=10,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test04690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04690");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 8);
        long long30 = chronology24.add((org.joda.time.ReadablePeriod) period27, (long) 17, 11);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = interval35.isAfter((long) 10);
        org.joda.time.Duration duration38 = interval35.toDuration();
        org.joda.time.Chronology chronology39 = interval35.getChronology();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology39);
        java.lang.String str41 = mutableInterval40.toString();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        int int45 = dateTime42.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = dateTime42.toDateTime(dateTimeZone46);
        int int48 = dateTime47.getCenturyOfEra();
        org.joda.time.DateTime dateTime50 = dateTime47.minusHours((int) '4');
        boolean boolean51 = mutableInterval40.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration52 = period27.toDurationFrom((org.joda.time.ReadableInstant) dateTime47);
        int int53 = period27.getHours();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 105L + "'", long30 == 105L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z" + "'", str41, "1970-01-01T00:00:00.001Z/1970-01-01T00:00:00.001Z");
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 19 + "'", int48 == 19);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test04691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04691");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.LocalDate localDate7 = property4.addWrapFieldToCopy(762);
        int int8 = localDate7.getEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "January" + "'", str5, "January");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test04692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04692");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(63, 51, 9, 0, 44, 999, 53764795);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04693");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((-61977517543221L), dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(3);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = dateTime2.withZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime6.withWeekyear(40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withDayOfMonth((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test04694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04694");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime16 = property11.roundHalfEvenCopy();
        java.lang.String str17 = property11.getAsShortText();
        java.lang.String str18 = property11.toString();
        org.joda.time.DateTimeField dateTimeField19 = property11.getField();
        org.joda.time.LocalTime localTime20 = property11.getLocalTime();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "35" + "'", str17, "35");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[millisOfSecond]" + "'", str18, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test04695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04695");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int25 = localDateTime24.getEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYear(2);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfWeek();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime36 = dateTime31.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime38.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTime(dateTimeZone42);
        int int44 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        boolean boolean49 = interval47.isAfter((long) 10);
        org.joda.time.Duration duration50 = interval47.toDuration();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean55 = interval53.isAfter((long) 10);
        org.joda.time.Duration duration56 = interval53.toDuration();
        org.joda.time.Duration duration58 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) '4');
        org.joda.time.DateTime dateTime59 = dateTime31.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime27.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusMonths(53640079);
        java.util.Locale locale63 = java.util.Locale.US;
        java.lang.String str64 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime60, locale63);
        int int65 = localDateTime60.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Sun" + "'", str64, "Sun");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test04696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04696");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.DateTime.Property property5 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone6.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) dateTime4, dateTimeZone6);
        long long14 = dateTimeZone6.convertLocalToUTC(35L, false, 1L);
        java.lang.String str16 = dateTimeZone6.getName((long) 12);
        int int18 = dateTimeZone6.getStandardOffset(100001L);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(4460054926L, dateTimeZone6);
        org.joda.time.LocalTime.Property property20 = localTime19.secondOfMinute();
        org.joda.time.LocalTime.Property property21 = localTime19.minuteOfHour();
        int int22 = localTime19.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 378691200010L + "'", long9 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
    }

    @Test
    public void test04697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04697");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.dayOfMonth();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.Chronology chronology16 = interval12.getChronology();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100, chronology16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology16);
        java.lang.String str19 = localDateTime18.toString();
        long long21 = chronology6.set((org.joda.time.ReadablePartial) localDateTime18, 2764800010L);
        int int22 = localDateTime18.getEra();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withYearOfEra(24);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMillis(53771);
        java.lang.String str27 = localDateTime26.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:02.186" + "'", str19, "1970-01-01T00:00:02.186");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2186L + "'", long21 == 2186L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0023-12-31T23:59:08.415" + "'", str27, "0023-12-31T23:59:08.415");
    }

    @Test
    public void test04698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04698");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 17);
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusWeeks(4);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = locale14.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.halfdayOfDay();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DurationField durationField30 = chronology27.years();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType18.getField(chronology27);
        java.util.Locale locale35 = new java.util.Locale("", "hi!");
        java.lang.String str36 = dateTimeField31.getAsShortText(10L, locale35);
        java.lang.String str37 = locale14.getDisplayName(locale35);
        java.lang.String str38 = locale14.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter3.withLocale(locale14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter3.withDefaultYear(86399);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.parse("DateTimeField[dayOfWeek]", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AM" + "'", str36, "AM");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
    }

    @Test
    public void test04699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04699");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime13 = property11.getLocalTime();
        org.joda.time.LocalTime localTime15 = property11.setCopy((int) (short) 1);
        int int16 = property11.getMinimumValueOverall();
        org.joda.time.LocalTime localTime17 = property11.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = property11.setCopy("22:14:59.999");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"22:14:59.999\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test04700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04700");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(20);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfFloorCopy();
        int int23 = localDateTime22.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
    }

    @Test
    public void test04701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04701");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean23 = interval21.isAfter((long) 10);
        org.joda.time.Duration duration24 = interval21.toDuration();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean29 = interval27.isAfter((long) 10);
        org.joda.time.Duration duration30 = interval27.toDuration();
        org.joda.time.Duration duration32 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) '4');
        boolean boolean33 = localDateTime18.equals((java.lang.Object) duration30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy(478);
        org.joda.time.DateTimeField dateTimeField39 = property36.getField();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test04702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04702");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 16);
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        java.lang.String str3 = property2.toString();
        int int4 = property2.getLeapAmount();
        org.joda.time.LocalTime localTime5 = property2.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[hourOfDay]" + "'", str3, "Property[hourOfDay]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test04703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04703");
        java.util.Date date5 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        int int6 = date5.getMinutes();
        int int7 = date5.getSeconds();
        java.lang.Object obj8 = date5.clone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Interval interval13 = interval11.toInterval();
        org.joda.time.Period period14 = interval11.toPeriod();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Duration duration20 = interval17.toDuration();
        boolean boolean21 = interval11.abuts((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.Chronology chronology30 = interval26.getChronology();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.Interval interval33 = interval11.withChronology(chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(obj8, chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long40 = chronology32.getDateTimeMillis(56752, 334, (int) (byte) 0, 6554);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 334 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test04704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04704");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime.Property property11 = dateTime5.property(dateTimeFieldType9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime5.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        long long22 = dateTimeZone19.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) dateTime17, dateTimeZone19);
        long long27 = dateTimeZone19.convertLocalToUTC(35L, false, 1L);
        java.lang.String str29 = dateTimeZone19.getName((long) 12);
        org.joda.time.DateTime dateTime30 = dateTime5.toDateTime(dateTimeZone19);
        int int31 = dateTime30.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 378691200010L + "'", long22 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 35L + "'", long27 == 35L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
    }

    @Test
    public void test04705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04705");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes((int) (byte) 0);
        org.joda.time.DateTime dateTime6 = dateTime2.withYear(86399004);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DurationField durationField10 = property9.getLeapDurationField();
        int int11 = property9.getMaximumValueOverall();
        int int12 = property9.getMinimumValueOverall();
        org.joda.time.DateTime dateTime13 = property9.roundFloorCopy();
        java.lang.String str14 = property9.getAsShortText();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols16 = new java.text.DateFormatSymbols(locale15);
        java.text.DateFormatSymbols dateFormatSymbols17 = java.text.DateFormatSymbols.getInstance(locale15);
        java.lang.String str18 = property9.getAsText(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = dateTime2.toString("14AM207432", locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AD" + "'", str14, "AD");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AD" + "'", str18, "AD");
    }

    @Test
    public void test04706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04706");
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime8, (org.joda.time.ReadablePartial) localTime9, periodType10);
        org.joda.time.Period period13 = period11.minusDays(10);
        org.joda.time.Duration duration14 = period11.toStandardDuration();
        org.joda.time.Duration duration16 = org.joda.time.Duration.millis((long) (short) -1);
        long long17 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration16);
        long long18 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration14.minus((org.joda.time.ReadableDuration) duration16);
        long long20 = duration14.getStandardDays();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType22 = periodType21.withHoursRemoved();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime30 = dateTime25.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeField dateTimeField32 = chronology31.halfdayOfDay();
        org.joda.time.DurationField durationField33 = chronology31.minutes();
        org.joda.time.DurationField durationField34 = chronology31.years();
        org.joda.time.Period period35 = duration14.toPeriod(periodType22, chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period36 = new org.joda.time.Period(292278993, 103, 53773647, 2023, 72000967, 49, 266, 53131, periodType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(period35);
    }

    @Test
    public void test04707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04707");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("PT79200S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=pt79200s");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04708");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime4.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime13 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int int14 = localTime0.getHourOfDay();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16, periodType17);
        org.joda.time.Period period20 = period18.minusDays(10);
        org.joda.time.LocalTime localTime21 = localTime0.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.LocalTime localTime23 = localTime0.withHourOfDay(0);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime24.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime32 = dateTime30.plus((long) (byte) 10);
        org.joda.time.DateTime.Property property33 = dateTime32.monthOfYear();
        long long34 = dateTime32.getMillis();
        int int35 = dateTime32.getDayOfMonth();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = interval38.isAfter((long) 10);
        boolean boolean41 = interval38.containsNow();
        long long42 = interval38.toDurationMillis();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(10L, chronology46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.weekyear();
        int int49 = dateTime47.get(dateTimeFieldType48);
        org.joda.time.DateTime dateTime51 = dateTime47.plusWeeks(4);
        boolean boolean52 = periodType44.equals((java.lang.Object) dateTime51);
        int int53 = periodType44.size();
        org.joda.time.PeriodType periodType54 = periodType44.withMillisRemoved();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 12, periodType44);
        org.joda.time.Interval interval56 = interval38.withPeriodAfterStart((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime57 = dateTime32.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period59 = period55.plusHours((int) (byte) 10);
        org.joda.time.LocalTime localTime61 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 335);
        org.joda.time.Period period63 = period55.minusHours((int) 'a');
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-61977571197804L) + "'", long34 == (-61977571197804L));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(period63);
    }

    @Test
    public void test04709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04709");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((java.lang.Object) dateTimeFieldType0, chronology9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test04710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04710");
        org.joda.time.Period period1 = org.joda.time.Period.months(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes2 = period1.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Minutes as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04711");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 10, 0L);
        long long3 = duration2.getMillis();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-10L) + "'", long3 == (-10L));
    }

    @Test
    public void test04712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04712");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 13, 1646362432994L);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths(12);
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.LocalDate localDate8 = property7.withMaximumValue();
        int int9 = localDate8.getDayOfYear();
        org.joda.time.LocalDate.Property property10 = localDate8.centuryOfEra();
        org.joda.time.LocalDate localDate11 = property10.roundFloorCopy();
        org.joda.time.Interval interval12 = property10.toInterval();
        boolean boolean13 = interval2.contains((org.joda.time.ReadableInterval) interval12);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 335 + "'", int9 == 335);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04713");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 17);
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusWeeks(4);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = locale14.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.halfdayOfDay();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DurationField durationField30 = chronology27.years();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType18.getField(chronology27);
        java.util.Locale locale35 = new java.util.Locale("", "hi!");
        java.lang.String str36 = dateTimeField31.getAsShortText(10L, locale35);
        java.lang.String str37 = locale14.getDisplayName(locale35);
        java.lang.String str38 = locale14.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter3.withLocale(locale14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter3.withDefaultYear(86399);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.parse("2022-02-21T15:45:36.527Z/2022-02-21T15:45:36.527Z", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AM" + "'", str36, "AM");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
    }

    @Test
    public void test04714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04714");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime12 = dateTime6.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime14 = dateTime12.plus((long) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period21 = period5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutablePeriod mutablePeriod22 = period20.toMutablePeriod();
        org.joda.time.Period period24 = period20.plusSeconds(86399999);
        org.joda.time.Period period26 = period20.plusMonths(51120);
        org.joda.time.Period period28 = period26.withMillis(21095060);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test04715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04715");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime12 = dateTime6.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime14 = dateTime12.plus((long) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period21 = period5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutablePeriod mutablePeriod22 = period5.toMutablePeriod();
        org.joda.time.PeriodType periodType23 = mutablePeriod22.getPeriodType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray24 = mutablePeriod22.getFieldTypes();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldTypeArray24);
    }

    @Test
    public void test04716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04716");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(1970);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime10, periodType11);
        org.joda.time.Period period14 = period12.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime15.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime23 = dateTime21.plus((long) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period30 = period14.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.MutablePeriod mutablePeriod31 = period29.toMutablePeriod();
        org.joda.time.DateTime dateTime32 = dateTime8.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime33 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(35L, chronology35);
        org.joda.time.LocalTime localTime38 = localTime36.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        org.joda.time.LocalTime localTime42 = localTime36.withFieldAdded(durationFieldType40, (-1));
        org.joda.time.LocalTime localTime44 = localTime42.plusHours(53633080);
        org.joda.time.LocalTime.Property property45 = localTime44.millisOfSecond();
        java.util.Calendar.Builder builder47 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder51 = builder47.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale54 = new java.util.Locale("", "hi!");
        java.util.Locale locale55 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale55);
        java.lang.String str57 = locale54.getDisplayScript(locale55);
        java.util.Calendar.Builder builder58 = builder51.setLocale(locale54);
        org.joda.time.LocalTime localTime59 = property45.setCopy("70", locale54);
        org.joda.time.LocalTime localTime61 = localTime59.minusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime63);
        int int65 = dateTime62.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = dateTime62.toDateTime(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime.Property property71 = dateTime69.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property71.getFieldType();
        int int73 = dateTime62.get(dateTimeFieldType72);
        boolean boolean74 = localTime59.isSupported(dateTimeFieldType72);
        boolean boolean75 = dateTime33.isSupported(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2186 + "'", int73 == 2186);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test04717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04717");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("weekyear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: weekyear");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04718");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        int int4 = localDate1.getDayOfWeek();
        int int5 = localDate1.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test04719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04719");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        int int9 = localDateTime8.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withCenturyOfEra(892);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test04720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04720");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period6 = period4.negated();
        org.joda.time.PeriodType periodType7 = period4.getPeriodType();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
    }

    @Test
    public void test04721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04721");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        int int3 = property1.getMaximumValueOverall();
        int int4 = property1.getMinimumValueOverall();
        org.joda.time.DateTime dateTime5 = property1.getDateTime();
        org.joda.time.DateTime dateTime6 = property1.withMaximumValue();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Interval interval13 = interval11.toInterval();
        boolean boolean15 = interval11.contains((long) 1970);
        org.joda.time.Interval interval16 = interval11.toInterval();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = interval16.withEnd(readableInstant17);
        boolean boolean19 = interval8.isAfter((org.joda.time.ReadableInterval) interval16);
        long long20 = interval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = interval8.toMutableInterval();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Interval interval26 = interval24.toInterval();
        boolean boolean28 = interval24.contains((long) 1970);
        org.joda.time.Interval interval29 = interval24.toInterval();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        boolean boolean35 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Chronology chronology36 = interval32.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime39, (org.joda.time.ReadablePartial) localTime40, periodType41);
        boolean boolean43 = localTime38.equals((java.lang.Object) period42);
        org.joda.time.Interval interval44 = interval32.withPeriodAfterStart((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period46 = org.joda.time.Period.hours((int) (short) 0);
        org.joda.time.Interval interval47 = interval32.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        java.lang.String str48 = interval32.toString();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property50 = dateTime49.era();
        org.joda.time.DurationField durationField51 = property50.getLeapDurationField();
        int int52 = property50.getMaximumValueOverall();
        int int53 = property50.getMinimumValueOverall();
        org.joda.time.DateTime dateTime54 = property50.getDateTime();
        org.joda.time.DateTime dateTime55 = property50.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property57 = dateTime56.era();
        org.joda.time.DateTime.Property property58 = dateTime56.monthOfYear();
        boolean boolean59 = dateTime55.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime56.plus(readableDuration60);
        boolean boolean62 = interval32.contains((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean63 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z" + "'", str48, "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNull(durationField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test04722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04722");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
        org.joda.time.LocalDate localDate7 = localDate1.withYearOfEra((int) '#');
        org.joda.time.LocalDate.Property property8 = localDate1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test04723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04723");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("PeriodType[Years]");
        boolean boolean2 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test04724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04724");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime9.isSupported(dateTimeFieldType12);
        int int14 = dateTime5.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime16 = dateTime5.plusMillis(7);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        int int18 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusDays(672);
        org.joda.time.DateTime dateTime22 = dateTime16.withCenturyOfEra(2922789);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = property23.addToCopy(275335702);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223371259747202193 + 991208527200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test04725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04725");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.text.DateFormatSymbols dateFormatSymbols2 = java.text.DateFormatSymbols.getInstance(locale0);
        dateFormatSymbols2.setLocalPatternChars("hi!");
        java.lang.String[] strArray5 = dateFormatSymbols2.getShortWeekdays();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols7 = new java.text.DateFormatSymbols(locale6);
        java.lang.Object obj8 = dateFormatSymbols7.clone();
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols7.setMonths(strArray15);
        dateFormatSymbols2.setWeekdays(strArray15);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols19 = new java.text.DateFormatSymbols(locale18);
        java.text.DateFormatSymbols dateFormatSymbols20 = java.text.DateFormatSymbols.getInstance(locale18);
        dateFormatSymbols20.setLocalPatternChars("hi!");
        java.lang.String[] strArray23 = dateFormatSymbols20.getShortWeekdays();
        dateFormatSymbols2.setWeekdays(strArray23);
        java.lang.Object obj25 = dateFormatSymbols2.clone();
        java.lang.String[] strArray26 = dateFormatSymbols2.getWeekdays();
        java.lang.Object obj27 = dateFormatSymbols2.clone();
        java.lang.String[] strArray28 = java.util.TimeZone.getAvailableIDs();
        dateFormatSymbols2.setShortWeekdays(strArray28);
        java.text.DateFormatSymbols dateFormatSymbols30 = java.text.DateFormatSymbols.getInstance();
        java.lang.String[] strArray31 = dateFormatSymbols30.getMonths();
        java.lang.String[] strArray32 = dateFormatSymbols30.getMonths();
        dateFormatSymbols2.setShortMonths(strArray32);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols35 = new java.text.DateFormatSymbols(locale34);
        java.text.DateFormatSymbols dateFormatSymbols36 = java.text.DateFormatSymbols.getInstance(locale34);
        java.lang.String[] strArray37 = dateFormatSymbols36.getShortWeekdays();
        dateFormatSymbols2.setEras(strArray37);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(dateFormatSymbols30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols36);
        org.junit.Assert.assertNotNull(strArray37);
    }

    @Test
    public void test04726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04726");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Interval interval14 = interval10.toInterval();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.millisOfDay();
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        boolean boolean20 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Interval interval25 = interval23.toInterval();
        org.joda.time.Period period26 = interval23.toPeriod();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        boolean boolean33 = interval23.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime34, (org.joda.time.ReadablePartial) localTime35, periodType36);
        org.joda.time.Period period38 = period37.negated();
        org.joda.time.Interval interval39 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Interval interval40 = interval14.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.MutableInterval mutableInterval41 = interval14.toMutableInterval();
        org.joda.time.Duration duration42 = mutableInterval41.toDuration();
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval41.copy();
        long long44 = mutableInterval41.getStartMillis();
        mutableInterval41.setDurationAfterStart(1645455386848L);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Interval interval51 = interval49.toInterval();
        boolean boolean53 = interval49.contains((long) 1970);
        org.joda.time.Interval interval54 = interval49.toInterval();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean59 = interval57.isAfter((long) 10);
        boolean boolean60 = interval54.abuts((org.joda.time.ReadableInterval) interval57);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime64 = interval63.getEnd();
        org.joda.time.Interval interval65 = interval63.toInterval();
        boolean boolean67 = interval63.contains((long) 1970);
        org.joda.time.Interval interval68 = interval63.toInterval();
        boolean boolean69 = interval57.contains((org.joda.time.ReadableInterval) interval63);
        org.joda.time.DateTime dateTime70 = interval57.getEnd();
        boolean boolean71 = mutableInterval41.contains((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration73 = org.joda.time.Duration.millis((long) (short) -1);
        long long74 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration73);
        long long75 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration76 = duration73.toDuration();
        long long77 = duration76.getMillis();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) 10, chronology79);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration76, (org.joda.time.ReadableInstant) dateTime80, periodType81);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval41.setEnd((org.joda.time.ReadableInstant) dateTime80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(mutableInterval43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2186L + "'", long44 == 2186L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(periodType81);
    }

    @Test
    public void test04727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04727");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.lang.Object obj2 = dateFormatSymbols1.clone();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols1.setMonths(strArray9);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("2022-02-21T14:54:24.218Z/2022-02-21T14:54:24.218Z");
        boolean boolean13 = dateFormatSymbols1.equals((java.lang.Object) locale12);
        java.lang.String[] strArray14 = dateFormatSymbols1.getAmPmStrings();
        java.lang.String[] strArray15 = dateFormatSymbols1.getShortWeekdays();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
    }

    @Test
    public void test04728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04728");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology9.centuries();
        org.joda.time.Period period16 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.Period period18 = period16.withHours((int) 'x');
        int[] intArray20 = chronology9.get((org.joda.time.ReadablePeriod) period18, (long) (-51));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, -51]");
    }

    @Test
    public void test04729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04729");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 2, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        long long8 = dateTimeZone5.convertUTCToLocal(66788236813948L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 66788236813948L + "'", long8 == 66788236813948L);
    }

    @Test
    public void test04730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04730");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = interval7.isBefore(readableInstant8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("minutes", strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.parse("minutes", strMap14);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags(languageRangeList15, (java.util.Collection<java.lang.String>) strSet18);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        boolean boolean25 = strSet22.addAll((java.util.Collection<java.lang.String>) strSet24);
        boolean boolean26 = strSet18.containsAll((java.util.Collection<java.lang.String>) strSet22);
        java.util.Iterator<java.lang.String> strItor27 = strSet22.iterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.parse("minutes", strMap29);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.parse("und");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList34 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale38);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.util.Locale locale45 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale38, locale40, locale42, locale43, locale44, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList47, filteringMode49);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale54);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale59 = java.util.Locale.getDefault();
        java.util.Locale locale60 = java.util.Locale.JAPAN;
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray62 = new java.util.Locale[] { locale54, locale56, locale58, locale59, locale60, locale61 };
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList63, filteringMode65);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter(languageRangeList34, (java.util.Collection<java.util.Locale>) localeList50, filteringMode65);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter(languageRangeList32, (java.util.Collection<java.util.Locale>) localeList50);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale72);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.util.Locale locale76 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale77 = java.util.Locale.getDefault();
        java.util.Locale locale78 = java.util.Locale.JAPAN;
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray80 = new java.util.Locale[] { locale72, locale74, locale76, locale77, locale78, locale79 };
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.Locale.FilteringMode filteringMode83 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList81, filteringMode83);
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter(languageRangeList30, (java.util.Collection<java.util.Locale>) localeList68, filteringMode83);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags(languageRangeList12, (java.util.Collection<java.lang.String>) strSet22, filteringMode83);
        boolean boolean87 = interval7.equals((java.lang.Object) strSet22);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime();
        org.joda.time.Interval interval90 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime88, (org.joda.time.ReadableInstant) dateTime89);
        boolean boolean91 = interval7.overlaps((org.joda.time.ReadableInterval) interval90);
        org.joda.time.Duration duration92 = interval7.toDuration();
        org.joda.time.Chronology chronology93 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode49.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode65.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(localeList68);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + filteringMode83 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode83.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test04731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04731");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 2, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone7 = dateTimeZone5.toTimeZone();
        java.lang.String str9 = dateTimeZone5.getNameKey((long) 3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        int int12 = dateTimeZone5.getOffset(98728960935600000L);
        long long14 = dateTimeZone5.nextTransition((long) 768);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "UTC" + "'", str9, "UTC");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 768L + "'", long14 == 768L);
    }

    @Test
    public void test04732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04732");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalTime localTime14 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = property11.getLocalTime();
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localTime15.getFields();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
    }

    @Test
    public void test04733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04733");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-1L), dateTimeZone2);
        int int6 = localDate5.getYearOfEra();
        java.util.Date date7 = localDate5.toDate();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromDateFields(date7);
        java.lang.String str9 = date7.toGMTString();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime18 = dateTime13.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.weekyearOfCentury();
        org.joda.time.Chronology chronology22 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.hourOfDay();
        org.joda.time.DurationField durationField25 = chronology22.centuries();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.halfdayOfDay();
        org.joda.time.Period period28 = org.joda.time.Period.hours((int) '#');
        boolean boolean30 = period28.equals((java.lang.Object) "2022-02-21T14:56:10.501Z/2022-02-21T14:56:10.501Z");
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePeriod) period28, (long) 13, 349200000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) str9, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"30 Dec 1969 23:59:06 GMT\" is malformed at \" Dec 1969 23:59:06 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 00:00:00 GMT+00:00 1969");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "30 Dec 1969 23:59:06 GMT" + "'", str9, "30 Dec 1969 23:59:06 GMT");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 4, 0, 59, 59, 987]");
    }

    @Test
    public void test04734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04734");
        java.lang.String[] strArray4 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        boolean boolean10 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.stream.Stream<java.lang.String> strStream11 = strSet9.parallelStream();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days14 = duration13.toStandardDays();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTime(dateTimeZone29);
        int int31 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        org.joda.time.Duration duration45 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '4');
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration37);
        mutableInterval15.setDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Days days48 = duration37.toStandardDays();
        org.joda.time.Days[] daysArray49 = new org.joda.time.Days[] { days14, days48 };
        org.joda.time.Days[] daysArray50 = strSet9.toArray(daysArray49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        int int54 = dateTime51.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime51.withMillisOfSecond(9);
        boolean boolean59 = strSet9.contains((java.lang.Object) dateTime51);
        int int60 = dateTime51.getMillisOfDay();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((java.lang.Object) dateTime51);
        org.joda.time.Period period63 = new org.joda.time.Period((long) '#');
        int int65 = period63.getValue(0);
        org.joda.time.Period period67 = period63.plusDays((int) '#');
        int int68 = period67.getMonths();
        org.joda.time.Period period70 = period67.plusMillis(22);
        org.joda.time.Period period72 = period67.minusMonths(893);
        org.joda.time.Period period74 = period72.minusWeeks(70);
        org.joda.time.Period period76 = period72.minusMonths(2022);
        org.joda.time.Period period78 = period72.plusSeconds(0);
        org.joda.time.LocalTime localTime79 = localTime61.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Period period81 = period78.minusMillis(53765);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(daysArray49);
        org.junit.Assert.assertNotNull(daysArray50);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2186 + "'", int60 == 2186);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test04735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04735");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar calendar5 = builder4.build();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        calendar5.set(496, 0, 0, (int) 'u', 72000967);
        calendar5.set(2074, 5, 663, (-51), (int) ' ');
        calendar5.setFirstDayOfWeek(21);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=53654,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=21,minimalDaysInFirstWeek=1,ERA=1,YEAR=2074,MONTH=5,WEEK_OF_YEAR=13,WEEK_OF_MONTH=4,DAY_OF_MONTH=663,DAY_OF_YEAR=256,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=4,HOUR_OF_DAY=-51,MINUTE=32,SECOND=55,MILLISECOND=0,ZONE_OFFSET=53654,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test04736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04736");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder6 = builder0.setLenient(false);
        java.util.Calendar.Builder builder9 = builder6.set((int) (short) 1, (int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder12 = builder9.setWeekDefinition((int) (short) 10, 1852);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04737");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("0001-01-01T00:00:00.000Z/0001-01-01T00:00:00.000Z");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '0001-01-01T00:00:00.000Z/0001-01-01T00:00:00.000Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test04738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04738");
        java.util.Date date5 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        date5.setMinutes((int) (short) 0);
        java.util.Date date13 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        date13.setMinutes((int) (short) 0);
        date13.setDate(53);
        boolean boolean18 = date5.after(date13);
        date5.setHours((int) (byte) 10);
        int int21 = date5.getYear();
        java.lang.String str22 = date5.toLocaleString();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 04 10:00:00 GMT+00:00 8039");
        org.junit.Assert.assertEquals(date13.toString(), "Fri Mar 25 01:00:00 GMT+00:00 8039");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6139 + "'", int21 == 6139);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Feb 4, 8039 10:00:00 AM" + "'", str22, "Feb 4, 8039 10:00:00 AM");
    }

    @Test
    public void test04739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04739");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 17);
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusWeeks(4);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Calendar calendar15 = dateTime13.toCalendar(locale14);
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = locale14.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeField dateTimeField28 = chronology27.halfdayOfDay();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DurationField durationField30 = chronology27.years();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType18.getField(chronology27);
        java.util.Locale locale35 = new java.util.Locale("", "hi!");
        java.lang.String str36 = dateTimeField31.getAsShortText(10L, locale35);
        java.lang.String str37 = locale14.getDisplayName(locale35);
        java.lang.String str38 = locale14.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter3.withLocale(locale14);
        java.util.Locale locale40 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant42 = org.joda.time.Instant.parse("PT718.262S", dateTimeFormatter41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "AM" + "'", str36, "AM");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNull(locale40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
    }

    @Test
    public void test04740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04740");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate localDate5 = localDate3.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.LocalDate.Property property8 = localDate5.monthOfYear();
        org.joda.time.LocalDate localDate9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = localDate9.plusDays((int) '4');
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime19 = dateTime14.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTime21.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = dateTime21.toDateTime(dateTimeZone25);
        int int27 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        boolean boolean38 = interval36.isAfter((long) 10);
        org.joda.time.Duration duration39 = interval36.toDuration();
        org.joda.time.Duration duration41 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration39, (int) '4');
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean45 = dateTimeZone44.isFixed();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 2, dateTimeZone44);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeUtils.getZone(dateTimeZone44);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = dateTime21.withZoneRetainFields(dateTimeZone48);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int52 = dateTime50.get(dateTimeFieldType51);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = localDate9.get(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2186 + "'", int52 == 2186);
    }

    @Test
    public void test04741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04741");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("99", "");
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Locale locale10 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale11);
        java.lang.String str13 = locale10.getDisplayScript(locale11);
        java.lang.String str14 = locale7.getDisplayScript(locale11);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale7);
        java.util.Locale locale16 = java.util.Locale.PRC;
        java.lang.String str17 = locale7.getDisplayLanguage(locale16);
        java.util.Locale locale18 = locale7.stripExtensions();
        java.util.Locale.Builder builder19 = builder6.setLocale(locale18);
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder21 = builder6.setLocale(locale20);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455539168,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=53654,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=52,MILLISECOND=822,ZONE_OFFSET=53654,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test04742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04742");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusWeeks((int) (byte) 100);
        int int17 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfEra(21);
        org.joda.time.LocalDateTime.Property property20 = localDateTime13.dayOfMonth();
        int int21 = localDateTime13.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 14 + "'", int17 == 14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
    }

    @Test
    public void test04743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04743");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(1);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((int) (short) -1, 2, 14, (int) (short) 1, 31, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMonths(53623795);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test04744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04744");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        timeZone18.setRawOffset(10);
        java.util.TimeZone.setDefault(timeZone18);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test04745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04745");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays(6);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMinutes((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = localDateTime17.toString(dateTimeFormatter19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfEvenCopy();
        java.lang.String str23 = property21.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0014-05-12T21:40:01.893" + "'", str20, "0014-05-12T21:40:01.893");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Property[weekyear]" + "'", str23, "Property[weekyear]");
    }

    @Test
    public void test04746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04746");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.lang.Object obj2 = dateFormatSymbols1.clone();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols4 = new java.text.DateFormatSymbols(locale3);
        java.text.DateFormatSymbols dateFormatSymbols5 = java.text.DateFormatSymbols.getInstance(locale3);
        dateFormatSymbols5.setLocalPatternChars("hi!");
        java.lang.String[] strArray8 = dateFormatSymbols5.getShortWeekdays();
        dateFormatSymbols1.setShortWeekdays(strArray8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        java.lang.String str14 = interval12.toString();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTime(dateTimeZone29);
        int int31 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        org.joda.time.Duration duration45 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '4');
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration37);
        mutableInterval15.setDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval48 = interval12.overlap((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.DateTime dateTime49 = interval12.getEnd();
        boolean boolean50 = dateFormatSymbols1.equals((java.lang.Object) dateTime49);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property53 = dateTime52.era();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period58 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime59 = dateTime54.plus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.weekyear();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekyear();
        long long65 = dateTimeField63.roundFloor((long) 53623795);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder66.setLanguage("minutes");
        java.util.Locale locale69 = builder66.build();
        java.util.Locale locale72 = new java.util.Locale("", "hi!");
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale73);
        java.lang.String str75 = locale72.getDisplayScript(locale73);
        java.lang.String str76 = locale69.getDisplayCountry(locale72);
        int int77 = dateTimeField63.getMaximumTextLength(locale69);
        java.text.DateFormatSymbols dateFormatSymbols78 = new java.text.DateFormatSymbols(locale69);
        java.lang.String[] strArray79 = dateFormatSymbols78.getMonths();
        java.lang.String[][] strArray80 = dateFormatSymbols78.getZoneStrings();
        java.lang.String[] strArray81 = dateFormatSymbols78.getWeekdays();
        dateFormatSymbols1.setAmPmStrings(strArray81);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z" + "'", str14, "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-259200000L) + "'", long65 == (-259200000L));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "minutes");
        org.junit.Assert.assertEquals(locale72.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 9 + "'", int77 == 9);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertNotNull(strArray81);
    }

    @Test
    public void test04747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04747");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy((int) 'x');
        int int16 = property11.getMinimumValueOverall();
        org.joda.time.LocalTime localTime17 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime18 = property11.roundCeilingCopy();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.DateTime dateTime33 = dateTime22.withDurationAdded((org.joda.time.ReadableDuration) duration31, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = dateTime33.get(dateTimeFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType34.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = localTime18.get(dateTimeFieldType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNull(durationFieldType36);
    }

    @Test
    public void test04748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04748");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal(426L);
        boolean boolean3 = dateTimeZone0.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 426L + "'", long2 == 426L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test04749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04749");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime6 = dateTime3.toLocalTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withField(dateTimeFieldType13, 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int21 = localDateTime12.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime12.plusYears(7);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime12.minusWeeks((int) (short) 10);
        int int26 = localDateTime12.getWeekOfWeekyear();
        int int27 = localDateTime12.getEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime12.plusMonths(53917266);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localDateTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test04750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04750");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfDay(53623795);
        int int23 = localDateTime18.getYearOfCentury();
        int int24 = localDateTime18.getWeekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.minusYears((int) (byte) 100);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 14 + "'", int23 == 14);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test04751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04751");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("weeks");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime10 = dateTime5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime18 = dateTime13.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology19);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.LocalTime localTime26 = localTime22.withMillisOfSecond(4);
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) localTime22, (long) 0);
        org.joda.time.DateTimeField dateTimeField29 = chronology19.weekyearOfCentury();
        long long31 = dateTimeField29.roundFloor(100L);
        java.lang.String str33 = dateTimeField29.getAsShortText((long) (byte) 100);
        long long36 = dateTimeField29.add((long) (short) 1, (long) 53623795);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(35L, chronology38);
        int int40 = dateTimeField29.getMinimumValue((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime47 = dateTime44.toLocalTime();
        int int48 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localTime47);
        org.joda.time.LocalTime localTime50 = localTime47.plusMillis(3);
        int int51 = localTime50.getSecondOfMinute();
        boolean boolean52 = languageRange1.equals((java.lang.Object) int51);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "weeks" + "'", str2, "weeks");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "70" + "'", str33, "70");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1692203524934400001L + "'", long36 == 1692203524934400001L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 99 + "'", int48 == 99);
        org.junit.Assert.assertNotNull(localTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test04752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04752");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration21);
        boolean boolean32 = interval30.isBefore((long) (byte) 100);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime.Property property38 = dateTime36.millisOfDay();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period34, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean40 = interval30.isAfter((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Interval interval41 = interval30.toInterval();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime48 = dateTime42.withDate(6, (int) (short) 1, 4);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval51 = interval30.withEnd((org.joda.time.ReadableInstant) dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test04753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04753");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.Interval interval8 = interval6.toInterval();
        boolean boolean10 = interval6.contains((long) 1970);
        org.joda.time.Interval interval11 = interval6.toInterval();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        boolean boolean16 = interval14.isAfter((long) 10);
        boolean boolean17 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        org.joda.time.Interval interval22 = interval20.toInterval();
        boolean boolean24 = interval20.contains((long) 1970);
        org.joda.time.Interval interval25 = interval20.toInterval();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        boolean boolean31 = interval25.abuts((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Interval interval32 = interval28.toInterval();
        org.joda.time.Interval interval34 = interval28.withStartMillis(99L);
        boolean boolean35 = interval11.abuts((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Interval interval36 = interval2.gap((org.joda.time.ReadableInterval) interval28);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = interval36.getStartMillis();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(interval36);
    }

    @Test
    public void test04754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04754");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("YearWeekDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"YearWeekDay\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04755");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(3);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((-1964L), dateTimeZone9);
        java.util.Locale locale13 = new java.util.Locale("2022-02-21T14:54:21.370Z/2022-02-21T14:54:21.370Z");
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.lang.String str15 = dateTimeZone9.getName(29L, locale13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(53773647, 53140, 245, 2833, 100, 53633080, 20, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2833 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals(locale13.toString(), "2022-02-21t14:54:21.370z/2022-02-21t14:54:21.370z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-21t14:54:21.370z/2022-02-21t14:54:21.370z" + "'", str14, "2022-02-21t14:54:21.370z/2022-02-21t14:54:21.370z");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+03:00" + "'", str15, "+03:00");
    }

    @Test
    public void test04756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04756");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withDefaultYear(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.parse("1988-01-04T00:00:00.000Z", dateTimeFormatter5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test04757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04757");
        org.joda.time.ReadablePartial readablePartial0 = null;
        java.util.Date date4 = new java.util.Date((int) (byte) 100, 32772, 893);
        java.lang.String str5 = date4.toLocaleString();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromDateFields(date4);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = period8.toDurationFrom(readableInstant9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean15 = interval13.isAfter((long) 10);
        org.joda.time.Duration duration16 = interval13.toDuration();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.Duration duration24 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration22, (int) '4');
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTime(dateTimeZone29);
        int int31 = dateTime30.getCenturyOfEra();
        org.joda.time.Interval interval32 = duration22.toIntervalTo((org.joda.time.ReadableInstant) dateTime30);
        int int33 = duration10.compareTo((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration34 = duration22.toDuration();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime6.plus((org.joda.time.ReadableDuration) duration22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period36 = new org.joda.time.Period(readablePartial0, (org.joda.time.ReadablePartial) localDateTime6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date4.toString(), "Sun Jun 11 00:00:00 UTC 4733");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Jun 11, 4733 12:00:00 AM" + "'", str5, "Jun 11, 4733 12:00:00 AM");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 19 + "'", int31 == 19);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test04758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04758");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        int int3 = property1.getMaximumValueOverall();
        int int4 = property1.getMinimumValueOverall();
        org.joda.time.DateTime dateTime5 = property1.getDateTime();
        org.joda.time.DateTime dateTime6 = property1.withMaximumValue();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Interval interval13 = interval11.toInterval();
        boolean boolean15 = interval11.contains((long) 1970);
        org.joda.time.Interval interval16 = interval11.toInterval();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Interval interval18 = interval16.withEnd(readableInstant17);
        boolean boolean19 = interval8.isAfter((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology20 = interval8.getChronology();
        org.joda.time.Interval interval21 = interval8.toInterval();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test04759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04759");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration13 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) '4');
        org.joda.time.Duration duration15 = duration5.withMillis((long) (short) -1);
        long long16 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime23 = dateTime20.toLocalTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.DateTime dateTime31 = dateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration29, 0);
        org.joda.time.Duration duration34 = duration29.withDurationAdded(100L, 21);
        org.joda.time.Period period35 = duration34.toPeriod();
        boolean boolean36 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Seconds seconds37 = duration15.toStandardSeconds();
        org.joda.time.Duration duration38 = duration15.toDuration();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(duration38);
    }

    @Test
    public void test04760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04760");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        java.lang.String str17 = chronology14.toString();
        org.joda.time.DurationField durationField18 = chronology14.days();
        org.joda.time.DurationField durationField19 = chronology14.weeks();
        java.lang.String str20 = durationField19.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str17, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DurationField[weeks]" + "'", str20, "DurationField[weeks]");
    }

    @Test
    public void test04761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04761");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 2, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        java.util.TimeZone timeZone7 = dateTimeZone5.toTimeZone();
        timeZone7.setRawOffset(74);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7);
        java.util.TimeZone.setDefault(timeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645455539940,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=74,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=0,MILLISECOND=14,ZONE_OFFSET=74,DST_OFFSET=0]");
    }

    @Test
    public void test04762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04762");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 99);
        org.joda.time.LocalDate localDate2 = localDateTime1.toLocalDate();
        org.junit.Assert.assertNotNull(localDate2);
    }

    @Test
    public void test04763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04763");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        int int19 = durationField16.getDifference((long) 2, (long) (-1));
        int int22 = durationField16.getDifference(10L, (long) (short) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField16.getType();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.Chronology chronology33 = interval29.getChronology();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology33);
        org.joda.time.Period period36 = org.joda.time.Period.seconds(99);
        long long39 = chronology33.add((org.joda.time.ReadablePeriod) period36, (long) 53657, 0);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 1, chronology33);
        org.joda.time.DurationField durationField41 = durationFieldType23.getField(chronology33);
        long long44 = durationField41.getDifferenceAsLong((long) 16, (-61851081600000L));
        long long46 = durationField41.getValueAsLong((long) 1164);
        // The following exception was thrown during execution in test generation
        try {
            long long49 = durationField41.subtract((long) 'u', 53764795);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -5376479500");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 53657L + "'", long39 == 53657L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 19L + "'", long44 == 19L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
    }

    @Test
    public void test04764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04764");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        boolean boolean5 = interval2.containsNow();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) (byte) 100);
        boolean boolean12 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime13 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        java.lang.String str15 = property14.getAsString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2" + "'", str15, "2");
    }

    @Test
    public void test04765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04765");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks(4);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        java.lang.String str15 = locale13.getVariant();
        java.lang.String str16 = locale13.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType17.getField(chronology26);
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.lang.String str35 = dateTimeField30.getAsShortText(10L, locale34);
        java.lang.String str36 = locale13.getDisplayName(locale34);
        java.lang.String str37 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withLocale(locale13);
        java.lang.Integer int39 = dateTimeFormatter38.getPivotYear();
        java.io.Writer writer40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property44 = dateTime42.millisOfDay();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime45, (org.joda.time.ReadablePartial) localTime46, periodType47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime55 = dateTime49.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime57 = dateTime55.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime58 = localTime45.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        int int59 = dateTime58.getDayOfMonth();
        int int60 = property44.compareTo((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime63 = dateTime58.withDurationAdded((long) 2067, 53785992);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter38.printTo(writer40, (org.joda.time.ReadableInstant) dateTime58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AM" + "'", str35, "AM");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test04766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04766");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime6 = dateTime3.toLocalTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = interval9.isAfter((long) 10);
        org.joda.time.Duration duration12 = interval9.toDuration();
        org.joda.time.DateTime dateTime14 = dateTime3.withDurationAdded((org.joda.time.ReadableDuration) duration12, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusWeeks((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.withMillis((long) 12);
        org.joda.time.DateTime dateTime22 = dateTime18.minus(4633898112000007L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test04767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04767");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) localTime4, periodType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime13 = dateTime10.toLocalTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.DateTime dateTime21 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 0);
        org.joda.time.DateTime dateTime22 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime33 = dateTime28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyear();
        org.joda.time.DateTime dateTime37 = dateTime24.toDateTime(chronology34);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime45 = dateTime42.toLocalTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = interval48.isAfter((long) 10);
        org.joda.time.Duration duration51 = interval48.toDuration();
        org.joda.time.DateTime dateTime53 = dateTime42.withDurationAdded((org.joda.time.ReadableDuration) duration51, 0);
        org.joda.time.Instant instant54 = instant1.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        int int58 = dateTime55.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = dateTime55.toDateTime(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusYears((int) (byte) -1);
        org.joda.time.Period period63 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime65 = dateTime62.withMinuteOfHour(334);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 334 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(instant54);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period63);
    }

    @Test
    public void test04768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04768");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 16);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(20986);
        org.joda.time.LocalTime localTime5 = localTime1.plusMinutes(866);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test04769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04769");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        boolean boolean6 = interval4.isAfter((long) 10);
        org.joda.time.Duration duration7 = interval4.toDuration();
        org.joda.time.Chronology chronology8 = interval4.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime11, (org.joda.time.ReadablePartial) localTime12, periodType13);
        org.joda.time.LocalTime localTime16 = localTime11.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime18, periodType19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime27 = dateTime24.toLocalTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime24.withDurationAdded((org.joda.time.ReadableDuration) duration33, 0);
        org.joda.time.DateTime dateTime36 = localTime18.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType39 = periodType37.getFieldType((int) (byte) 0);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime11, (org.joda.time.ReadablePartial) localTime18, periodType37);
        int[] intArray43 = chronology8.get((org.joda.time.ReadablePeriod) period40, (long) 365, (long) 32769);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime49 = dateTime44.plus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property51 = dateTime50.era();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Period period56 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime57 = dateTime52.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime59 = dateTime44.toDateTime(chronology58);
        org.joda.time.DurationField durationField60 = chronology58.centuries();
        int int63 = durationField60.getDifference((long) 2, (long) (-1));
        long long66 = durationField60.add((-36732196798107L), (-2016L));
        org.joda.time.DurationFieldType durationFieldType67 = durationField60.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period69 = period40.withFieldAdded(durationFieldType67, 53878);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'centuries'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 32, 404]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-6398613719998107L) + "'", long66 == (-6398613719998107L));
        org.junit.Assert.assertNotNull(durationFieldType67);
    }

    @Test
    public void test04770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04770");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(69);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationFrom(readableInstant7);
        int int9 = period6.getHours();
        org.joda.time.Period period11 = period6.withYears(0);
        org.joda.time.LocalDate localDate13 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period6, (int) (short) 10);
        org.joda.time.LocalDate localDate15 = localDate13.withWeekyear((int) 'x');
        org.joda.time.LocalDate localDate17 = localDate13.plusDays(0);
        org.joda.time.LocalDate localDate19 = localDate13.minusDays((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        long long25 = dateTimeZone21.adjustOffset((long) 'x', true);
        org.joda.time.DateTime dateTime26 = localDate13.toDateTimeAtStartOfDay(dateTimeZone21);
        int int27 = dateTime26.getWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 120L + "'", long25 == 120L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
    }

    @Test
    public void test04771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04771");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Iterator<java.lang.String> strItor6 = strSet4.iterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("minutes", strMap8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strSet12);
        boolean boolean14 = strSet4.removeAll((java.util.Collection<java.lang.String>) strSet12);
        java.util.Locale locale17 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols18 = new java.text.DateFormatSymbols(locale17);
        java.lang.String[] strArray20 = new java.lang.String[] { "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        dateFormatSymbols18.setAmPmStrings(strArray20);
        java.lang.String[] strArray22 = dateFormatSymbols18.getAmPmStrings();
        java.lang.String[] strArray23 = dateFormatSymbols18.getShortWeekdays();
        java.io.Serializable[] serializableArray24 = strSet12.toArray((java.io.Serializable[]) strArray23);
        boolean boolean25 = strSet12.isEmpty();
        java.lang.String[] strArray30 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        boolean boolean36 = strSet31.containsAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.stream.Stream<java.lang.String> strStream37 = strSet35.parallelStream();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days40 = duration39.toStandardDays();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime49 = dateTime44.plus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        int int54 = dateTime51.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTime(dateTimeZone55);
        int int57 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        boolean boolean62 = interval60.isAfter((long) 10);
        org.joda.time.Duration duration63 = interval60.toDuration();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean68 = interval66.isAfter((long) 10);
        org.joda.time.Duration duration69 = interval66.toDuration();
        org.joda.time.Duration duration71 = duration63.withDurationAdded((org.joda.time.ReadableDuration) duration69, (int) '4');
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration63);
        mutableInterval41.setDurationAfterStart((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Days days74 = duration63.toStandardDays();
        org.joda.time.Days[] daysArray75 = new org.joda.time.Days[] { days40, days74 };
        org.joda.time.Days[] daysArray76 = strSet35.toArray(daysArray75);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime78);
        int int80 = dateTime77.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = dateTime77.toDateTime(dateTimeZone81);
        org.joda.time.DateTime dateTime84 = dateTime77.withMillisOfSecond(9);
        boolean boolean85 = strSet35.contains((java.lang.Object) dateTime77);
        java.util.Spliterator<java.lang.String> strSpliterator86 = strSet35.spliterator();
        boolean boolean87 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet35);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(serializableArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(days74);
        org.junit.Assert.assertNotNull(daysArray75);
        org.junit.Assert.assertNotNull(daysArray76);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSpliterator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test04772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04772");
        java.util.Locale locale2 = new java.util.Locale("", "hi!");
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale3);
        java.lang.String str5 = locale2.getDisplayScript(locale3);
        java.lang.String str6 = locale3.getVariant();
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleAttributes();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfWeek();
        org.joda.time.LocalDate localDate12 = property10.addWrapFieldToCopy(5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDate12.getFieldTypes();
        org.joda.time.LocalDate localDate15 = localDate12.withWeekyear(99);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.stream.Stream<java.lang.String> strStream17 = strSet16.stream();
        boolean boolean18 = localDate15.equals((java.lang.Object) strSet16);
        boolean boolean19 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet16);
        org.junit.Assert.assertEquals(locale2.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test04773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04773");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withField(dateTimeFieldType15, 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int23 = localDateTime22.getSecondOfMinute();
        int int24 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withField(dateTimeFieldType33, 100);
        org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime26, (org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.minusMonths((int) 'u');
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Duration duration43 = period41.toDurationFrom(readableInstant42);
        long long44 = duration43.getMillis();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime26.minus((org.joda.time.ReadableDuration) duration43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date46 = localDateTime26.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -181 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 35L + "'", long44 == 35L);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test04774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04774");
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16, periodType17);
        org.joda.time.Period period19 = period18.negated();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weeks();
        int int21 = period18.get(durationFieldType20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime28 = dateTime23.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime36 = dateTime31.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = dateTime23.toDateTime(chronology37);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime39, (org.joda.time.ReadablePartial) localTime40, periodType41);
        org.joda.time.LocalTime localTime44 = localTime40.withMillisOfSecond(4);
        int[] intArray46 = chronology37.get((org.joda.time.ReadablePartial) localTime40, (long) 0);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(0L, chronology37);
        org.joda.time.DateTimeField dateTimeField48 = chronology37.millisOfSecond();
        boolean boolean49 = durationFieldType20.isSupported(chronology37);
        boolean boolean50 = periodType14.isSupported(durationFieldType20);
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, periodType14);
        org.joda.time.PeriodType periodType52 = periodType14.withDaysRemoved();
        org.joda.time.Period period53 = new org.joda.time.Period(378691200010L, (long) 1970, periodType14);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property56 = dateTime55.era();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Period period61 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime62 = dateTime57.plus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Chronology chronology63 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology63);
        org.joda.time.DurationField durationField65 = chronology63.minutes();
        org.joda.time.DateTimeField dateTimeField66 = chronology63.millisOfDay();
        org.joda.time.Period period67 = new org.joda.time.Period(3155695920000L, periodType14, chronology63);
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Interval interval73 = interval71.toInterval();
        boolean boolean75 = interval71.contains((long) 1970);
        org.joda.time.Interval interval76 = interval71.toInterval();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime78);
        boolean boolean81 = interval79.isAfter((long) 10);
        boolean boolean82 = interval76.abuts((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Chronology chronology83 = interval79.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.weekyears();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.monthOfYear();
        org.joda.time.DateTimeField dateTimeField86 = chronology83.minuteOfHour();
        org.joda.time.DurationField durationField87 = durationFieldType68.getField(chronology83);
        org.joda.time.Period period88 = new org.joda.time.Period(1645488000000L, 0L, periodType14, chronology83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period89 = new org.joda.time.Period(1164, 53785992, (-18092558), (-736377), 53786271, 21091854, 12, 885, periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
    }

    @Test
    public void test04775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04775");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = localTime2.withSecondOfMinute(68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 68 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04776");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime10 = dateTime7.toLocalTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean15 = interval13.isAfter((long) 10);
        org.joda.time.Duration duration16 = interval13.toDuration();
        org.joda.time.DateTime dateTime18 = dateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration16, 0);
        org.joda.time.DateTime dateTime19 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter((long) 10);
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.Duration duration33 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) '4');
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime34.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTime(dateTimeZone38);
        int int40 = dateTime39.getCenturyOfEra();
        org.joda.time.Interval interval41 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Minutes minutes42 = duration31.toStandardMinutes();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) minutes42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property45 = dateTime44.era();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period50 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime51 = dateTime46.plus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        int int56 = dateTime53.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = dateTime53.toDateTime(dateTimeZone57);
        int int59 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = interval62.isAfter((long) 10);
        org.joda.time.Duration duration65 = interval62.toDuration();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = interval68.isAfter((long) 10);
        org.joda.time.Duration duration71 = interval68.toDuration();
        org.joda.time.Duration duration73 = duration65.withDurationAdded((org.joda.time.ReadableDuration) duration71, (int) '4');
        org.joda.time.DateTime dateTime74 = dateTime46.minus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime.Property property75 = dateTime74.weekOfWeekyear();
        boolean boolean76 = interval43.isAfter((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean79 = dateTimeZone78.isFixed();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) 2, dateTimeZone78);
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime(dateTimeZone78);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeUtils.getZone(dateTimeZone78);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone82);
        java.util.TimeZone timeZone84 = dateTimeZone82.toTimeZone();
        java.lang.String str86 = dateTimeZone82.getName(1645455232776L);
        long long89 = dateTimeZone82.adjustOffset(892L, false);
        boolean boolean90 = dateTime74.equals((java.lang.Object) 892L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate91 = new org.joda.time.LocalDate((java.lang.Object) boolean90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 19 + "'", int40 == 19);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 892L + "'", long89 == 892L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test04777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04777");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        int int2 = strSet1.size();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        boolean boolean7 = interval5.isAfter((long) 10);
        boolean boolean8 = interval5.containsNow();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (byte) 100);
        boolean boolean15 = interval5.isAfter((org.joda.time.ReadableInstant) dateTime12);
        boolean boolean16 = strSet1.equals((java.lang.Object) interval5);
        boolean boolean18 = interval5.isBefore(5044L);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        boolean boolean23 = interval21.isBeforeNow();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime24, (org.joda.time.ReadablePartial) localTime25, periodType26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime34 = dateTime31.toLocalTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = interval37.isAfter((long) 10);
        org.joda.time.Duration duration40 = interval37.toDuration();
        org.joda.time.DateTime dateTime42 = dateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration40, 0);
        org.joda.time.DateTime dateTime43 = localTime25.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property48 = dateTime47.era();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period53 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime54 = dateTime49.plus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Chronology chronology55 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekyear();
        org.joda.time.DateTime dateTime58 = dateTime45.toDateTime(chronology55);
        boolean boolean59 = interval21.contains((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = interval62.isAfter((long) 10);
        org.joda.time.Duration duration65 = interval62.toDuration();
        org.joda.time.Chronology chronology66 = interval62.getChronology();
        boolean boolean67 = interval21.isBefore((org.joda.time.ReadableInterval) interval62);
        org.joda.time.MutableInterval mutableInterval68 = interval21.toMutableInterval();
        org.joda.time.Interval interval69 = interval5.overlap((org.joda.time.ReadableInterval) mutableInterval68);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(mutableInterval68);
        org.junit.Assert.assertNull(interval69);
    }

    @Test
    public void test04778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04778");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear((int) 'x');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withField(dateTimeFieldType30, 893);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.withYearOfCentury(2);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(10L, chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        int int41 = dateTime39.get(dateTimeFieldType40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean43 = dateTime39.isSupported(dateTimeFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType42.getDurationType();
        java.lang.String str45 = durationFieldType44.getName();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.withFieldAdded(durationFieldType44, 11);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime26.plusMinutes((int) 'u');
        int int50 = localDateTime26.getDayOfYear();
        int int51 = localDateTime26.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "minutes" + "'", str45, "minutes");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 120 + "'", int50 == 120);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
    }

    @Test
    public void test04779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04779");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = property19.getAsText(locale20);
        org.joda.time.LocalDateTime localDateTime22 = property19.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = property19.roundHalfFloorCopy();
        int int24 = localDateTime23.getYear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusSeconds(21097938);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2" + "'", str21, "2");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test04780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04780");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.DateTime.Property property5 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone6.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) dateTime4, dateTimeZone6);
        long long14 = dateTimeZone6.convertLocalToUTC(35L, false, 1L);
        java.lang.String str16 = dateTimeZone6.getName((long) 12);
        int int18 = dateTimeZone6.getStandardOffset(100001L);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 29, dateTimeZone6);
        long long21 = dateTimeZone6.previousTransition((long) 32770);
        long long24 = dateTimeZone6.convertLocalToUTC(56752L, false);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 378691200010L + "'", long9 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 32770L + "'", long21 == 32770L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 56752L + "'", long24 == 56752L);
    }

    @Test
    public void test04781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04781");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear((int) 'x');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withField(dateTimeFieldType30, 893);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.withYearOfCentury(2);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property42 = dateTime40.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        boolean boolean44 = localDateTime36.isSupported(dateTimeFieldType43);
        int int45 = localDateTime36.getHourOfDay();
        org.joda.time.LocalDateTime.Property property46 = localDateTime36.secondOfMinute();
        java.util.Locale locale51 = new java.util.Locale("15:59:00.999", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "months");
        java.lang.String str52 = locale51.getDisplayCountry();
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.util.Locale locale55 = locale53.stripExtensions();
        java.lang.String str56 = locale51.getDisplayName(locale55);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale55);
        java.lang.String str58 = locale55.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime59 = property46.setCopy("centuries", locale55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"centuries\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20 + "'", int45 == 20);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals(locale51.toString(), "15:59:00.999_2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z_months");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" + "'", str52, "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)" + "'", str56, "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645455540983,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=74,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=1,MILLISECOND=57,ZONE_OFFSET=74,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test04782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04782");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks(4);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        java.lang.String str15 = locale13.getVariant();
        java.lang.String str16 = locale13.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType17.getField(chronology26);
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.lang.String str35 = dateTimeField30.getAsShortText(10L, locale34);
        java.lang.String str36 = locale13.getDisplayName(locale34);
        java.lang.String str37 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withLocale(locale13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withPivotYear((java.lang.Integer) 32770);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter38.withDefaultYear(59);
        java.lang.Integer int43 = dateTimeFormatter42.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter42.withDefaultYear(86399999);
        java.io.Writer writer46 = null;
        org.joda.time.ReadablePartial readablePartial47 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter45.printTo(writer46, readablePartial47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AM" + "'", str35, "AM");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNull(int43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test04783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04783");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.getDefault(category5);
        java.util.Calendar.Builder builder8 = builder0.setLocale(locale7);
        java.util.Calendar.Builder builder13 = builder0.setTimeOfDay(56752, 41, 160, 35);
        java.util.Calendar.Builder builder17 = builder13.setDate((int) (short) 1, (int) ' ', 21098599);
        java.util.Calendar.Builder builder21 = builder17.setWeekDate(14, 32772, 1978);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder23 = builder17.setInstant((long) 53771);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test04784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04784");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long31 = dateTimeField28.set(141033701369106000L, "1972");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1972 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test04785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04785");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime4, (org.joda.time.ReadablePartial) localTime5, periodType6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime8.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime17 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property18 = dateTime14.year();
        boolean boolean19 = instant1.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Instant instant21 = instant1.withMillis(0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(instant21);
    }

    @Test
    public void test04786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04786");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(10L, chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = dateTime23.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusWeeks(4);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Calendar calendar29 = dateTime27.toCalendar(locale28);
        java.util.TimeZone timeZone30 = calendar29.getTimeZone();
        int int32 = calendar29.getGreatestMinimum(10);
        calendar29.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int41 = calendar29.getMinimum((int) (short) 1);
        java.time.Instant instant42 = calendar29.toInstant();
        java.util.Date date43 = calendar29.getTime();
        java.util.Date date47 = new java.util.Date(893, (int) (byte) -1, (int) (byte) 10);
        int int48 = date47.getYear();
        java.lang.String str49 = date47.toLocaleString();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromDateFields(date47);
        calendar29.setTime(date47);
        calendar20.setTime(date47);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = calendar20.getMinimum(53633080);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53633080");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=25969507199926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2792,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=344,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=926,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=25969507199926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2792,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=344,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=926,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(date43);
        org.junit.Assert.assertEquals(date43.toString(), "Mon Oct 11 14:53:10 UTC 1");
        org.junit.Assert.assertEquals(date47.toString(), "Thu Dec 10 00:00:00 UTC 2792");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 892 + "'", int48 == 892);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Dec 10, 2792 12:00:00 AM" + "'", str49, "Dec 10, 2792 12:00:00 AM");
        org.junit.Assert.assertNotNull(localTime50);
    }

    @Test
    public void test04787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04787");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("99", "");
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder6.setRegion("1970-01-01T00:00:02.186");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 1970-01-01T00:00:02.186 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test04788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04788");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        java.util.Calendar.Builder builder13 = builder8.setTimeOfDay(51, 21095878, 365, 8454);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test04789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04789");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        boolean boolean8 = interval6.isAfter((long) 10);
        org.joda.time.Duration duration9 = interval6.toDuration();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.Duration duration17 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) '4');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getCenturyOfEra();
        org.joda.time.Interval interval25 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime23);
        int int26 = duration3.compareTo((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period27 = duration15.toPeriod();
        org.joda.time.Duration duration30 = duration15.withDurationAdded((long) 'a', 52);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = interval35.isAfter((long) 10);
        org.joda.time.Duration duration38 = interval35.toDuration();
        org.joda.time.Chronology chronology39 = interval35.getChronology();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(chronology41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime48 = dateTime43.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property50 = dateTime49.era();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Period period55 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime56 = dateTime51.plus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime58 = dateTime43.toDateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime43.withWeekOfWeekyear(11);
        org.joda.time.DateTime dateTime62 = dateTime60.plusSeconds(86399999);
        org.joda.time.DateTime dateTime63 = localTime42.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Interval interval64 = duration30.toIntervalTo((org.joda.time.ReadableInstant) dateTime63);
        long long65 = duration30.getMillis();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = interval68.isAfter((long) 10);
        org.joda.time.Duration duration71 = interval68.toDuration();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime73);
        boolean boolean76 = interval74.isAfter((long) 10);
        org.joda.time.Duration duration77 = interval74.toDuration();
        org.joda.time.Duration duration79 = duration71.withDurationAdded((org.joda.time.ReadableDuration) duration77, (int) '4');
        long long80 = duration79.getStandardMinutes();
        boolean boolean81 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration79);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 5044L + "'", long65 == 5044L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test04790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04790");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.minusDays(10);
        org.joda.time.Duration duration6 = period3.toStandardDuration();
        org.joda.time.Duration duration8 = org.joda.time.Duration.millis((long) (short) -1);
        long long9 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration8);
        long long10 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = duration6.minus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = dateTime12.toDateTime(chronology26);
        org.joda.time.DurationField durationField28 = chronology26.centuries();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        boolean boolean30 = duration6.equals((java.lang.Object) dateTimeField29);
        long long33 = dateTimeField29.add(100L, 99);
        boolean boolean34 = dateTimeField29.isSupported();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withField(dateTimeFieldType41, 100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime40.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int49 = localDateTime40.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.DateTime dateTime52 = localDateTime40.toDateTime(dateTimeZone50);
        long long54 = dateTimeZone50.convertUTCToLocal((long) 893);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((java.lang.Object) boolean34, dateTimeZone50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 59875200100L + "'", long33 == 59875200100L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 893L + "'", long54 == 893L);
    }

    @Test
    public void test04791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04791");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale8, locale10, locale12, locale13, locale14, locale15 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList17, filteringMode19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale24, locale26, locale28, locale29, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.util.Locale>) localeList33, filteringMode35);
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList20, filteringMode35);
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream41 = strSet40.parallelStream();
        java.lang.String str42 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet40);
        boolean boolean43 = strSet2.retainAll((java.util.Collection<java.lang.String>) strSet40);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList45 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Locale locale55 = java.util.Locale.JAPAN;
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale49, locale51, locale53, locale54, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList58, filteringMode60);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale locale65 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale65);
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.util.Locale locale71 = java.util.Locale.JAPAN;
        java.util.Locale locale72 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale65, locale67, locale69, locale70, locale71, locale72 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList74, filteringMode76);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter(languageRangeList45, (java.util.Collection<java.util.Locale>) localeList61, filteringMode76);
        java.util.Locale locale80 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream82 = strSet81.parallelStream();
        java.lang.String str83 = java.util.Locale.lookupTag(languageRangeList45, (java.util.Collection<java.lang.String>) strSet81);
        boolean boolean84 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet81);
        boolean boolean85 = strSet2.isEmpty();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode35.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList36);
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(languageRangeList45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode60.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode76.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(strStream82);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test04792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04792");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime10 = dateTime7.toLocalTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean15 = interval13.isAfter((long) 10);
        org.joda.time.Duration duration16 = interval13.toDuration();
        org.joda.time.DateTime dateTime18 = dateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration16, 0);
        org.joda.time.DateTime dateTime19 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter((long) 10);
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.Duration duration33 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration31, (int) '4');
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime34.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = dateTime34.toDateTime(dateTimeZone38);
        int int40 = dateTime39.getCenturyOfEra();
        org.joda.time.Interval interval41 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Minutes minutes42 = duration31.toStandardMinutes();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) minutes42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean46 = dateTimeZone45.isFixed();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 2, dateTimeZone45);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeUtils.getZone(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(dateTimeZone49);
        boolean boolean51 = interval43.isBefore((org.joda.time.ReadableInstant) dateTime50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval53 = interval43.withStartMillis((long) 59392155);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 19 + "'", int40 == 19);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(minutes42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test04793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04793");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) 'x');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withWeekyear(536);
        int int29 = localDateTime28.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
    }

    @Test
    public void test04794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04794");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(56752, 15, (-292275054), 37, 2924789, 2924789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04795");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        int int4 = period1.getHours();
        org.joda.time.Period period6 = period1.withYears(0);
        org.joda.time.Period period8 = period6.minusWeeks(22);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test04796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04796");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        boolean boolean9 = interval7.isAfter((long) 10);
        org.joda.time.Duration duration10 = interval7.toDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        boolean boolean16 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadableDuration) duration14);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime2.toGregorianCalendar();
        java.lang.String str19 = gregorianCalendar18.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str19, "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04797");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property3 = dateTime1.millisOfDay();
        int int4 = dateTime1.getYearOfEra();
        org.joda.time.DateTime.Property property5 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(100);
        org.joda.time.DateTime.Property property8 = dateTime1.dayOfYear();
        org.joda.time.DateTime.Property property9 = dateTime1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property9.addToCopy((-62104147200000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -62104147200000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test04798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04798");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration13 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) '4');
        org.joda.time.Duration duration15 = duration5.withMillis((long) (short) -1);
        long long16 = duration5.getMillis();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime17.plus((org.joda.time.ReadablePeriod) period21);
        boolean boolean24 = dateTime17.equals((java.lang.Object) "en_CA");
        org.joda.time.DateTime.Property property25 = dateTime17.monthOfYear();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        boolean boolean32 = interval29.containsNow();
        boolean boolean33 = periodType26.equals((java.lang.Object) boolean32);
        org.joda.time.Period period34 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17, periodType26);
        org.joda.time.MutablePeriod mutablePeriod35 = period34.toMutablePeriod();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
    }

    @Test
    public void test04799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04799");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("00:48:44.789", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04800");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        long long8 = dateTimeZone2.convertLocalToUTC((long) 10, false, (long) 1);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) -1, dateTimeZone2);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Locale locale14 = new java.util.Locale("", "hi!");
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale15);
        java.lang.String str17 = locale14.getDisplayScript(locale15);
        java.lang.String str18 = locale11.getDisplayScript(locale15);
        java.lang.String str19 = dateTimeZone2.getName(0L, locale15);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = localDate20.withDayOfMonth(625);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 625 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 10L + "'", long8 == 10L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
    }

    @Test
    public void test04801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04801");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(69);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationFrom(readableInstant7);
        int int9 = period6.getHours();
        org.joda.time.Period period11 = period6.withYears(0);
        org.joda.time.LocalDate localDate13 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period6, (int) (short) 10);
        org.joda.time.LocalDate localDate15 = localDate13.withWeekyear((int) 'x');
        org.joda.time.LocalDate localDate17 = localDate13.plusDays(0);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.centuryOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test04802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04802");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration13 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) '4');
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime14.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTime(dateTimeZone18);
        int int20 = dateTime19.getCenturyOfEra();
        org.joda.time.Interval interval21 = duration11.toIntervalTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = interval21.toPeriod();
        org.joda.time.Period period24 = period22.minusSeconds(53765);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.PeriodType periodType26 = period24.getPeriodType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test04803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04803");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        boolean boolean6 = interval4.isAfter((long) 10);
        org.joda.time.Duration duration7 = interval4.toDuration();
        org.joda.time.Chronology chronology8 = interval4.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = dateTime12.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime12.withWeekOfWeekyear(11);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds(86399999);
        org.joda.time.DateTime dateTime32 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalTime.Property property33 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime35 = property33.addCopy(4460054926L);
        org.joda.time.LocalTime localTime36 = property33.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime38 = property33.setCopy("January");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"January\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test04804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04804");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (-10));
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int7 = dateTimeFormatter4.getPivotYear();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime24 = dateTime9.toDateTime(chronology23);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime25, (org.joda.time.ReadablePartial) localTime26, periodType27);
        org.joda.time.LocalTime localTime30 = localTime26.withMillisOfSecond(4);
        int[] intArray32 = chronology23.get((org.joda.time.ReadablePartial) localTime26, (long) 0);
        org.joda.time.Chronology chronology33 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfYear();
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Locale locale38 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols39 = new java.text.DateFormatSymbols(locale38);
        java.lang.String str40 = locale35.getDisplayVariant(locale38);
        int int41 = dateTimeField34.getMaximumTextLength(locale35);
        java.lang.String str42 = locale8.getDisplayLanguage(locale35);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder43.setLanguage("minutes");
        java.util.Locale.Builder builder46 = builder43.clear();
        java.util.Locale locale47 = builder43.build();
        java.lang.String str48 = locale8.getDisplayScript(locale47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter4.withLocale(locale47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean52 = dateTimeZone51.isFixed();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 2, dateTimeZone51);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeUtils.getZone(dateTimeZone51);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        boolean boolean57 = dateTimeZone55.isFixed();
        int int59 = dateTimeZone55.getStandardOffset((long) (short) 10);
        java.lang.String str60 = dateTimeZone55.getID();
        int int62 = dateTimeZone55.getOffsetFromLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter49.withZone(dateTimeZone55);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = localTime1.toString(dateTimeFormatter49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(int7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese" + "'", str42, "Chinese");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Etc/UTC" + "'", str60, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
    }

    @Test
    public void test04805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04805");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology14 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.LocalTime localTime18 = localTime16.minusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        java.lang.String str21 = dateTimeField20.getName();
        long long24 = dateTimeField20.add((long) 100, 9);
        int int25 = dateTimeField20.getMaximumValue();
        java.lang.String str26 = dateTimeField20.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "yearOfEra" + "'", str21, "yearOfEra");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 283996800100L + "'", long24 == 283996800100L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DateTimeField[yearOfEra]" + "'", str26, "DateTimeField[yearOfEra]");
    }

    @Test
    public void test04806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04806");
        java.util.Date date3 = new java.util.Date((int) (byte) 100, 32772, 893);
        long long4 = date3.getTime();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromDateFields(date3);
        java.lang.String str6 = date3.toString();
        org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 11 00:00:00 UTC 4733");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 87205766399926L + "'", long4 == 87205766399926L);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Sun Jun 11 00:00:00 UTC 4733" + "'", str6, "Sun Jun 11 00:00:00 UTC 4733");
    }

    @Test
    public void test04807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04807");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyear();
        org.joda.time.DurationField durationField13 = chronology9.centuries();
        org.joda.time.DurationField durationField14 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.yearOfCentury();
        long long18 = dateTimeField15.add(0L, 245100L);
        int int19 = dateTimeField15.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 7734608956800000L + "'", long18 == 7734608956800000L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
    }

    @Test
    public void test04808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04808");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime16 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property11.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField18 = property11.getField();
        org.joda.time.DateTimeField dateTimeField19 = property11.getField();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test04809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04809");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.Period period6 = org.joda.time.Period.years(2922789);
        org.joda.time.LocalDate localDate7 = localDate1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalDate localDate9 = localDate1.minusWeeks(53773);
        org.joda.time.LocalDate localDate11 = localDate1.minusWeeks(51120);
        int int12 = localDate1.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
    }

    @Test
    public void test04810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04810");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean23 = interval21.isAfter((long) 10);
        org.joda.time.Duration duration24 = interval21.toDuration();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean29 = interval27.isAfter((long) 10);
        org.joda.time.Duration duration30 = interval27.toDuration();
        org.joda.time.Duration duration32 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) '4');
        boolean boolean33 = localDateTime18.equals((java.lang.Object) duration30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime18.minusSeconds(6);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime18.plusHours(893);
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime18.minus((org.joda.time.ReadableDuration) duration41);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = localDateTime18.getValue((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test04811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04811");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone14);
        int int16 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.Duration duration30 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) '4');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration22);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        long long33 = mutableInterval0.getEndMillis();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval0.setInterval(164096150400000L, (long) 32769);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test04812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04812");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(2154, 29, 663);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2154 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04813");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime0.minusSeconds((int) (short) 100);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period7.toDurationFrom(readableInstant8);
        int int10 = period7.getHours();
        org.joda.time.LocalTime localTime11 = localTime5.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(2922789);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) 14);
        java.lang.String str17 = localTime16.toString();
        org.joda.time.Chronology chronology18 = localTime16.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) localTime13, chronology18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "00:00:00.014" + "'", str17, "00:00:00.014");
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test04814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04814");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        long long8 = dateTimeZone5.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((java.lang.Object) dateTime3, dateTimeZone5);
        long long13 = dateTimeZone5.convertLocalToUTC(35L, false, 1L);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(dateTimeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        int int17 = dateTimeZone5.getOffset(1645455248808L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 378691200010L + "'", long8 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test04815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04815");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale5 = new java.util.Locale("", "hi!");
        java.lang.String str8 = nameProvider0.getName(locale5, "halfdays", "DurationField[weeks]");
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str12 = nameProvider0.getShortName(locale9, "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]", "+00:00:00.001");
        java.lang.String str13 = locale9.getDisplayName();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test04816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04816");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withField(dateTimeFieldType15, 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int23 = localDateTime22.getSecondOfMinute();
        int int24 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withField(dateTimeFieldType33, 100);
        org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime26, (org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime26.minusMonths((int) 'u');
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Duration duration43 = period41.toDurationFrom(readableInstant42);
        long long44 = duration43.getMillis();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime26.minus((org.joda.time.ReadableDuration) duration43);
        int int46 = localDateTime26.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 35L + "'", long44 == 35L);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
    }

    @Test
    public void test04817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04817");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int20 = calendar8.getMinimum((int) (short) 1);
        java.time.Instant instant21 = calendar8.toInstant();
        java.util.Date date22 = calendar8.getTime();
        java.util.Date date26 = new java.util.Date(893, (int) (byte) -1, (int) (byte) 10);
        int int27 = date26.getYear();
        java.lang.String str28 = date26.toLocaleString();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromDateFields(date26);
        calendar8.setTime(date26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(10L, chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = dateTime33.get(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusWeeks(4);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        java.util.TimeZone timeZone40 = calendar39.getTimeZone();
        int int42 = calendar39.getGreatestMinimum(10);
        calendar39.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int51 = calendar39.getMinimum((int) (short) 1);
        calendar39.roll(7, false);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period59 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime60 = dateTime55.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.era();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period67 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime68 = dateTime63.plus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Chronology chronology69 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime70 = dateTime55.toDateTime(chronology69);
        org.joda.time.DurationField durationField71 = chronology69.centuries();
        int int74 = durationField71.getDifference((long) 2, (long) (-1));
        int int77 = durationField71.getDifference((long) (byte) 10, (long) 53633080);
        long long78 = durationField71.getUnitMillis();
        boolean boolean79 = calendar39.before((java.lang.Object) durationField71);
        calendar39.set(6, 53775186);
        int int83 = calendar8.compareTo(calendar39);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=25969507199926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2792,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=344,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=926,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Mon Oct 11 14:53:10 UTC 1");
        org.junit.Assert.assertEquals(date26.toString(), "Thu Dec 10 00:00:00 UTC 2792");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 892 + "'", int27 == 892);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dec 10, 2792 12:00:00 AM" + "'", str28, "Dec 10, 2792 12:00:00 AM");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=53775186,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=10,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 3155695200000L + "'", long78 == 3155695200000L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test04818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04818");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyear();
        long long14 = dateTimeField12.roundFloor((long) 53623795);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.setLanguage("minutes");
        java.util.Locale locale18 = builder15.build();
        java.util.Locale locale21 = new java.util.Locale("", "hi!");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale21.getDisplayScript(locale22);
        java.lang.String str25 = locale18.getDisplayCountry(locale21);
        int int26 = dateTimeField12.getMaximumTextLength(locale18);
        java.text.DateFormatSymbols dateFormatSymbols27 = new java.text.DateFormatSymbols(locale18);
        java.lang.String[] strArray28 = dateFormatSymbols27.getMonths();
        java.lang.String[][] strArray29 = dateFormatSymbols27.getZoneStrings();
        java.lang.String[] strArray30 = dateFormatSymbols27.getWeekdays();
        java.lang.String[] strArray31 = dateFormatSymbols27.getShortMonths();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-259200000L) + "'", long14 == (-259200000L));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "minutes");
        org.junit.Assert.assertEquals(locale21.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
    }

    @Test
    public void test04819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04819");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet4);
        boolean boolean6 = strSet4.isEmpty();
        boolean boolean7 = strSet4.isEmpty();
        int int8 = strSet4.size();
        strSet4.clear();
        java.util.stream.Stream<java.lang.String> strStream10 = strSet4.parallelStream();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(strStream10);
    }

    @Test
    public void test04820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04820");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 2, dateTimeZone32);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeUtils.getZone(dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime9.withZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime9.withYear(32769);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property44 = dateTime42.millisOfDay();
        int int45 = dateTime42.getYearOfEra();
        org.joda.time.DateTime.Property property46 = dateTime42.centuryOfEra();
        org.joda.time.DateTime dateTime48 = dateTime42.plusWeeks(100);
        boolean boolean49 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime50, (org.joda.time.ReadablePartial) localTime51, periodType52);
        org.joda.time.Period period55 = period53.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime62 = dateTime56.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime64 = dateTime62.plus((long) (byte) 10);
        org.joda.time.Period period66 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Duration duration68 = period66.toDurationFrom(readableInstant67);
        org.joda.time.Seconds seconds69 = duration68.toStandardSeconds();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration68);
        org.joda.time.Period period71 = period55.minus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.MutablePeriod mutablePeriod72 = period55.toMutablePeriod();
        int int73 = period55.size();
        org.joda.time.Period period74 = period55.negated();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property79 = dateTime78.era();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime();
        org.joda.time.Interval interval82 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Period period84 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime85 = dateTime80.plus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.Chronology chronology86 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.LocalTime localTime87 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology86);
        org.joda.time.DateTimeField dateTimeField88 = chronology86.weekyearOfCentury();
        org.joda.time.Chronology chronology89 = chronology86.withUTC();
        org.joda.time.Period period90 = new org.joda.time.Period((long) '4', (long) '#', chronology86);
        org.joda.time.Period period91 = period74.withFields((org.joda.time.ReadablePeriod) period90);
        int int92 = period74.size();
        org.joda.time.DateTime dateTime94 = dateTime42.withPeriodAdded((org.joda.time.ReadablePeriod) period74, 68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime96 = dateTime42.withDayOfMonth((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(seconds69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test04821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04821");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        boolean boolean4 = instant1.isAfter((long) (short) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Instant instant7 = instant1.plus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Instant instant9 = instant1.minus(1692203524934400001L);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(35L);
        long long12 = instant11.getMillis();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = dateTime24.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTime(dateTimeZone28);
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = interval33.isAfter((long) 10);
        org.joda.time.Duration duration36 = interval33.toDuration();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = interval39.isAfter((long) 10);
        org.joda.time.Duration duration42 = interval39.toDuration();
        org.joda.time.Duration duration44 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) '4');
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration36);
        mutableInterval14.setDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Days days47 = duration36.toStandardDays();
        org.joda.time.Instant instant49 = instant11.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (short) -1);
        org.joda.time.Duration duration51 = org.joda.time.Duration.millis((long) (short) -1);
        long long52 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration51);
        long long53 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.toDuration();
        org.joda.time.Duration duration55 = duration36.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Instant instant57 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration51, 70);
        org.joda.time.Duration duration59 = duration51.plus(0L);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.DateTime dateTime65 = dateTime63.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime67 = dateTime65.plusMonths(8);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property71 = dateTime70.era();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period76 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime77 = dateTime72.plus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Chronology chronology78 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology78);
        org.joda.time.DateTimeField dateTimeField80 = chronology78.weekyear();
        org.joda.time.DateTimeField dateTimeField81 = chronology78.weekyear();
        org.joda.time.Period period82 = new org.joda.time.Period((-2016L), chronology78);
        org.joda.time.DateTime dateTime83 = dateTime67.withChronology(chronology78);
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime(chronology78);
        org.joda.time.Period period85 = duration59.toPeriod(chronology78);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test04822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04822");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property5 = dateTime3.millisOfDay();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutablePeriod mutablePeriod7 = period1.toMutablePeriod();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutablePeriod7);
    }

    @Test
    public void test04823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04823");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.DurationField durationField7 = property6.getLeapDurationField();
        org.joda.time.DateTime dateTime8 = property6.roundHalfFloorCopy();
        org.joda.time.Interval interval9 = property6.toInterval();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test04824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04824");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = interval7.isBefore(readableInstant8);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime18 = dateTime13.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime20.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTime(dateTimeZone24);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = interval35.isAfter((long) 10);
        org.joda.time.Duration duration38 = interval35.toDuration();
        org.joda.time.Duration duration40 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) '4');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration32);
        mutableInterval10.setDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval10.copy();
        boolean boolean44 = interval7.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime45, (org.joda.time.ReadablePartial) localTime46, periodType47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.DateTime dateTime54 = dateTime52.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime55 = dateTime52.toLocalTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime57);
        boolean boolean60 = interval58.isAfter((long) 10);
        org.joda.time.Duration duration61 = interval58.toDuration();
        org.joda.time.DateTime dateTime63 = dateTime52.withDurationAdded((org.joda.time.ReadableDuration) duration61, 0);
        org.joda.time.DateTime dateTime64 = localTime46.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = dateTime64.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property69 = dateTime68.era();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Period period74 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime75 = dateTime70.plus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Chronology chronology76 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.LocalTime localTime77 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology76);
        org.joda.time.DateTimeField dateTimeField78 = chronology76.weekyear();
        org.joda.time.DateTime dateTime79 = dateTime66.toDateTime(chronology76);
        boolean boolean80 = mutableInterval43.isAfter((org.joda.time.ReadableInstant) dateTime79);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval43.setEndMillis((-110449267099999L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test04825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04825");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = dateTime3.withWeekyear(1);
        org.joda.time.Duration duration9 = org.joda.time.Duration.millis((long) (short) -1);
        long long10 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration9);
        long long11 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration9.toDuration();
        org.joda.time.DateTime dateTime13 = dateTime7.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTime dateTime14 = dateTime13.withLaterOffsetAtOverlap();
        org.joda.time.LocalDateTime localDateTime15 = dateTime14.toLocalDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test04826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04826");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone14);
        int int16 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.Duration duration30 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) '4');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration22);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval0.copy();
        org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.Duration duration35 = mutableInterval33.toDuration();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(10L, chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(10L, chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        int int43 = dateTime41.get(dateTimeFieldType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean45 = dateTime41.isSupported(dateTimeFieldType44);
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType44.getDurationType();
        boolean boolean47 = dateTime38.equals((java.lang.Object) durationFieldType46);
        org.joda.time.DateTime dateTime49 = dateTime38.plusMillis(762);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDay();
        int int52 = periodType51.size();
        org.joda.time.Period period53 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49, periodType51);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime60 = dateTime54.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime62 = dateTime60.plus((long) (byte) 10);
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Duration duration66 = period64.toDurationFrom(readableInstant65);
        org.joda.time.Seconds seconds67 = duration66.toStandardSeconds();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration70 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration66, 110);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(readableInterval34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(seconds67);
        org.junit.Assert.assertNotNull(duration70);
    }

    @Test
    public void test04827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04827");
        org.joda.time.Period period7 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime9.millisOfDay();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTime(dateTimeZone27);
        int int29 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        org.joda.time.Duration duration35 = interval32.toDuration();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = interval38.isAfter((long) 10);
        org.joda.time.Duration duration41 = interval38.toDuration();
        org.joda.time.Duration duration43 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration41, (int) '4');
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration35);
        mutableInterval13.setDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutableInterval mutableInterval46 = mutableInterval13.copy();
        org.joda.time.MutableInterval mutableInterval47 = mutableInterval13.copy();
        org.joda.time.DateTime dateTime48 = mutableInterval47.getStart();
        int int49 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = dateTime9.minusDays(53764795);
        org.joda.time.DateTime dateTime53 = dateTime9.withYearOfEra(31);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime54, (org.joda.time.ReadablePartial) localTime55, periodType56);
        org.joda.time.LocalTime localTime59 = localTime54.minusSeconds((int) (short) 100);
        org.joda.time.Period period61 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Duration duration63 = period61.toDurationFrom(readableInstant62);
        int int64 = period61.getHours();
        org.joda.time.LocalTime localTime65 = localTime59.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.LocalTime localTime67 = localTime65.plusHours((int) 'x');
        org.joda.time.LocalTime.Property property68 = localTime65.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(478, 15);
        org.joda.time.DateTime dateTime72 = localTime65.toDateTimeToday(dateTimeZone71);
        org.joda.time.DateTime dateTime73 = dateTime9.withZone(dateTimeZone71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((-1113137280), 6554, 53654, 0, 56741057, 25, dateTimeZone71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56741057 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertNotNull(mutableInterval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test04828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04828");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("53661");
        java.util.Date date7 = new java.util.Date(31, 4, 51120, 1979, 4);
        boolean boolean8 = timeZone1.inDaylightTime(date7);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals(date7.toString(), "Mon Jul 06 11:04:00 UTC 2071");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test04829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04829");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime(chronology21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localTime24, periodType25);
        org.joda.time.LocalTime localTime28 = localTime24.withMillisOfSecond(4);
        int[] intArray30 = chronology21.get((org.joda.time.ReadablePartial) localTime24, (long) 0);
        org.joda.time.Chronology chronology31 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfYear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols37 = new java.text.DateFormatSymbols(locale36);
        java.lang.String str38 = locale33.getDisplayVariant(locale36);
        int int39 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str40 = locale6.getDisplayLanguage(locale33);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setLanguage("minutes");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale locale45 = builder41.build();
        java.lang.String str46 = locale6.getDisplayScript(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withLocale(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter2.withLocale(locale50);
        java.text.DateFormatSymbols dateFormatSymbols52 = java.text.DateFormatSymbols.getInstance(locale50);
        java.lang.String str53 = dateFormatSymbols52.getLocalPatternChars();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateFormatSymbols52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str53, "GyMdkHmsSEDFwWahKzZ");
    }

    @Test
    public void test04830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04830");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(3540);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04831");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime3, periodType4);
        org.joda.time.LocalTime localTime7 = localTime2.minusSeconds((int) (short) 100);
        boolean boolean8 = localTime1.equals((java.lang.Object) (short) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime15 = dateTime12.toLocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16);
        int int18 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime16);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localTime20, periodType21);
        org.joda.time.LocalTime localTime24 = localTime19.minusSeconds((int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = localTime19.toString(dateTimeFormatter25);
        int int27 = localTime16.compareTo((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DurationField durationField30 = property29.getLeapDurationField();
        int int31 = property29.getMaximumValueOverall();
        int int32 = property29.getMinimumValueOverall();
        org.joda.time.DateTime dateTime33 = property29.roundFloorCopy();
        boolean boolean34 = dateTime33.isAfterNow();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime42 = dateTime38.withWeekyear(1);
        int int43 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property44 = dateTime42.yearOfEra();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime.Property property48 = dateTime46.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property48.getFieldType();
        java.lang.String str50 = dateTimeFieldType49.getName();
        org.joda.time.DateTime.Property property51 = dateTime42.property(dateTimeFieldType49);
        org.joda.time.LocalTime.Property property52 = localTime16.property(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "00:00:02.186" + "'", str26, "00:00:02.186");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNull(durationField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "millisOfDay" + "'", str50, "millisOfDay");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test04832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04832");
        org.joda.time.Period period1 = org.joda.time.Period.millis(72000967);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04833");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-1L), dateTimeZone2);
        int int6 = localDate5.getYearOfEra();
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtMidnight();
        boolean boolean8 = dateTime7.isEqualNow();
        org.joda.time.DateTime dateTime10 = dateTime7.withMinuteOfHour(18);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test04834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04834");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        long long3 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        org.joda.time.Duration duration4 = duration1.toDuration();
        long long5 = duration4.getMillis();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DurationField durationField8 = property7.getLeapDurationField();
        int int9 = property7.getMaximumValueOverall();
        int int10 = property7.getMinimumValueOverall();
        org.joda.time.DateTime dateTime11 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withField(dateTimeFieldType18, 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime17.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int26 = localDateTime17.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean28 = dateTimeZone27.isFixed();
        org.joda.time.DateTime dateTime29 = localDateTime17.toDateTime(dateTimeZone27);
        long long31 = dateTimeZone27.convertUTCToLocal((long) 893);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime11.toMutableDateTime(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime33 = dateTime11.toLocalDateTime();
        org.joda.time.DateTime dateTime35 = dateTime11.minusSeconds(885);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 893L + "'", long31 == 893L);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test04835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04835");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(53661);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04836");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-1L), dateTimeZone2);
        int int6 = localDate5.getYearOfEra();
        java.util.Date date7 = localDate5.toDate();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromDateFields(date7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        calendar17.set(0, (int) ' ', 4);
        calendar17.setTimeInMillis((long) 0);
        java.util.Date date24 = calendar17.getTime();
        boolean boolean25 = date7.after(date24);
        date24.setHours((int) '4');
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Dec 31 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Jan 03 04:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04837");
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((-1113137280), 896, 3540, 53654, 0, 132, 866, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53654 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04838");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        long long5 = property4.remainder();
        org.joda.time.LocalDate localDate6 = property4.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths(894);
        java.util.Locale locale10 = null;
        java.lang.String str11 = localDate6.toString("53636902", locale10);
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate14 = localDate6.withYear(536);
        org.joda.time.ReadablePartial readablePartial15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = localDate6.isEqual(readablePartial15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "53636902" + "'", str11, "53636902");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test04839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04839");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        long long8 = dateTimeZone5.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((java.lang.Object) dateTime3, dateTimeZone5);
        long long13 = dateTimeZone5.convertLocalToUTC(35L, false, 1L);
        java.lang.String str15 = dateTimeZone5.getName((long) 12);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillis((long) 53131701);
        int int19 = dateTime16.getMinuteOfDay();
        org.joda.time.Instant instant20 = dateTime16.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 378691200010L + "'", long8 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35L + "'", long13 == 35L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(instant20);
    }

    @Test
    public void test04840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04840");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime10 = dateTime7.toLocalTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean15 = interval13.isAfter((long) 10);
        org.joda.time.Duration duration16 = interval13.toDuration();
        org.joda.time.DateTime dateTime18 = dateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration16, 0);
        org.joda.time.DateTime dateTime19 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime20, (org.joda.time.ReadablePartial) localTime21, periodType22);
        org.joda.time.Period period25 = period23.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime32 = dateTime26.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime34 = dateTime32.plus((long) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Duration duration38 = period36.toDurationFrom(readableInstant37);
        org.joda.time.Seconds seconds39 = duration38.toStandardSeconds();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period41 = period25.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period43 = period25.minusDays(53661);
        org.joda.time.DateTime dateTime44 = dateTime18.minus((org.joda.time.ReadablePeriod) period43);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test04841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04841");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        boolean boolean7 = interval5.isAfter((long) 10);
        org.joda.time.Duration duration8 = interval5.toDuration();
        org.joda.time.Chronology chronology9 = interval5.getChronology();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology9);
        org.joda.time.Period period12 = org.joda.time.Period.seconds(99);
        long long15 = chronology9.add((org.joda.time.ReadablePeriod) period12, (long) 53657, 0);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 1, chronology9);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.era();
        org.joda.time.DurationField durationField18 = dateTimeField17.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 53657L + "'", long15 == 53657L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNull(durationField18);
    }

    @Test
    public void test04842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04842");
        java.lang.Object obj0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(obj0);
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        long long4 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration3);
        long long5 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.toDuration();
        long long7 = duration6.getMillis();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 10, chronology9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime10, periodType11);
        org.joda.time.DateTime dateTime14 = dateTime10.withMillisOfSecond(2);
        org.joda.time.DateTime.Property property15 = dateTime10.millisOfDay();
        org.joda.time.DateTime dateTime16 = property15.getDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        org.joda.time.DateTime dateTime18 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime24 = dateTime19.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime.Property property25 = dateTime19.millisOfDay();
        org.joda.time.DateTime dateTime27 = property25.addToCopy((long) 2);
        org.joda.time.DateTime dateTime28 = property25.roundFloorCopy();
        org.joda.time.DateTime dateTime29 = property25.getDateTime();
        org.joda.time.DateTime dateTime30 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test04843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04843");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone14);
        int int16 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.Duration duration30 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) '4');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration22);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate36 = localDate34.withDayOfMonth(21);
        int int37 = localDate36.getMonthOfYear();
        org.joda.time.DateTime dateTime38 = localDate36.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime39 = localDate36.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(478, 15);
        org.joda.time.DateMidnight dateMidnight43 = localDate36.toDateMidnight(dateTimeZone42);
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.MutableInterval mutableInterval45 = mutableInterval0.copy();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime46.getMinuteOfDay();
        int int50 = dateTime46.getYearOfCentury();
        int int51 = dateTime46.getDayOfMonth();
// flaky:         mutableInterval0.setStart((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.format.DateTimePrinter dateTimePrinter53 = null;
        org.joda.time.format.DateTimeParser dateTimeParser54 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter53, dateTimeParser54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter55.withPivotYear((java.lang.Integer) 17);
        boolean boolean58 = dateTimeFormatter55.isParser();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(10L, chronology60);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyear();
        int int63 = dateTime61.get(dateTimeFieldType62);
        org.joda.time.DateTime dateTime65 = dateTime61.plusWeeks(4);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.util.Calendar calendar67 = dateTime65.toCalendar(locale66);
        java.lang.String str68 = locale66.getVariant();
        java.lang.String str69 = locale66.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property72 = dateTime71.era();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Period period77 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime78 = dateTime73.plus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTimeField dateTimeField80 = chronology79.halfdayOfDay();
        org.joda.time.DurationField durationField81 = chronology79.minutes();
        org.joda.time.DurationField durationField82 = chronology79.years();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType70.getField(chronology79);
        java.util.Locale locale87 = new java.util.Locale("", "hi!");
        java.lang.String str88 = dateTimeField83.getAsShortText(10L, locale87);
        java.lang.String str89 = locale66.getDisplayName(locale87);
        java.lang.String str90 = locale66.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter55.withLocale(locale66);
        java.util.Locale locale92 = dateTimeFormatter55.getLocale();
        org.joda.time.Chronology chronology93 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = dateTimeFormatter55.withChronology(chronology93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str95 = dateTime46.toString(dateTimeFormatter55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(mutableInterval45);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 70 + "'", int50 == 70);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertEquals(locale87.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "AM" + "'", str88, "AM");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
        org.junit.Assert.assertNull(locale92);
        org.junit.Assert.assertNotNull(dateTimeFormatter94);
    }

    @Test
    public void test04844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04844");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTime dateTime6 = dateTime3.minus(1645455229061L);
        boolean boolean7 = dateTime6.isAfterNow();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfMonth(21);
        org.joda.time.LocalDate localDate13 = localDate11.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.LocalDate.Property property16 = localDate13.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate localDate19 = localDate13.withField(dateTimeFieldType17, 59);
        org.joda.time.DateTime dateTime21 = dateTime6.withField(dateTimeFieldType17, 52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval22 = new org.joda.time.Interval((java.lang.Object) dateTime6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test04845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04845");
        org.joda.time.Period period1 = org.joda.time.Period.years(0);
        org.joda.time.PeriodType periodType2 = period1.getPeriodType();
        int int3 = period1.getMonths();
        org.joda.time.Period period5 = period1.withMillis(2922789);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test04846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04846");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.lang.Object obj2 = dateFormatSymbols1.clone();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols1.setMonths(strArray9);
        java.lang.Object obj11 = dateFormatSymbols1.clone();
        dateFormatSymbols1.setLocalPatternChars("65");
        java.lang.String[] strArray14 = dateFormatSymbols1.getMonths();
        java.lang.String[] strArray15 = dateFormatSymbols1.getAmPmStrings();
        java.lang.String[] strArray16 = dateFormatSymbols1.getShortWeekdays();
        dateFormatSymbols1.setLocalPatternChars("Etc/UTC");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
    }

    @Test
    public void test04847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04847");
        java.util.Date date5 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        int int6 = date5.getTimezoneOffset();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) date5);
        date5.setDate(2074);
        org.junit.Assert.assertEquals(date5.toString(), "Wed Oct 05 01:10:00 UTC 8044");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test04848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04848");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.clear(16);
        boolean boolean14 = calendar8.isWeekDateSupported();
        calendar8.setLenient(true);
        int int17 = calendar8.getWeekYear();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        boolean boolean19 = calendar8.isWeekDateSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test04849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04849");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 2, dateTimeZone1);
        int int4 = dateTime3.getSecondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean6 = dateTime3.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withField(dateTimeFieldType13, 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int21 = localDateTime20.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.Chronology chronology30 = interval26.getChronology();
        boolean boolean31 = durationFieldType23.isSupported(chronology30);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int38 = localDateTime37.getEra();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withYear(2);
        long long42 = chronology30.set((org.joda.time.ReadablePartial) localDateTime40, (long) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.minusWeeks(893);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.DateTime dateTime50 = dateTime48.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(10L, chronology52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekyear();
        int int55 = dateTime53.get(dateTimeFieldType54);
        org.joda.time.DateTime.Property property56 = dateTime50.property(dateTimeFieldType54);
        int int57 = localDateTime40.get(dateTimeFieldType54);
        int int58 = localDateTime20.get(dateTimeFieldType54);
        org.joda.time.DateTime.Property property59 = dateTime3.property(dateTimeFieldType54);
        org.joda.time.DateTime dateTime61 = dateTime3.withWeekyear(3);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-62092691280000L) + "'", long42 == (-62092691280000L));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 14 + "'", int58 == 14);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test04850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04850");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withField(dateTimeFieldType15, 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int23 = localDateTime22.getSecondOfMinute();
        int int24 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withField(dateTimeFieldType33, 100);
        org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime26, (org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime26.minuteOfHour();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#');
        int int41 = period39.getValue(0);
        org.joda.time.Period period42 = period39.normalizedStandard();
        org.joda.time.Period period43 = period42.normalizedStandard();
        int int44 = period43.size();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime26.minus((org.joda.time.ReadablePeriod) period43);
        java.lang.String str46 = localDateTime45.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0014-05-12T20:00:01.858" + "'", str46, "0014-05-12T20:00:01.858");
    }

    @Test
    public void test04851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04851");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int6 = dateTimeFormatter3.getPivotYear();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = dateTime8.toDateTime(chronology22);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime24, (org.joda.time.ReadablePartial) localTime25, periodType26);
        org.joda.time.LocalTime localTime29 = localTime25.withMillisOfSecond(4);
        int[] intArray31 = chronology22.get((org.joda.time.ReadablePartial) localTime25, (long) 0);
        org.joda.time.Chronology chronology32 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfYear();
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Locale locale37 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols38 = new java.text.DateFormatSymbols(locale37);
        java.lang.String str39 = locale34.getDisplayVariant(locale37);
        int int40 = dateTimeField33.getMaximumTextLength(locale34);
        java.lang.String str41 = locale7.getDisplayLanguage(locale34);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder42.setLanguage("minutes");
        java.util.Locale.Builder builder45 = builder42.clear();
        java.util.Locale locale46 = builder42.build();
        java.lang.String str47 = locale7.getDisplayScript(locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter3.withLocale(locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter3.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.parse("PT0.012S", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese" + "'", str41, "Chinese");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
    }

    @Test
    public void test04852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04852");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        org.joda.time.tz.NameProvider nameProvider3 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider3);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider3);
        java.util.Locale locale8 = new java.util.Locale("", "hi!");
        java.lang.String str11 = nameProvider3.getName(locale8, "halfdays", "DurationField[weeks]");
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int17 = dateTimeFormatter14.getPivotYear();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime24 = dateTime19.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime32 = dateTime27.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime34 = dateTime19.toDateTime(chronology33);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime35, (org.joda.time.ReadablePartial) localTime36, periodType37);
        org.joda.time.LocalTime localTime40 = localTime36.withMillisOfSecond(4);
        int[] intArray42 = chronology33.get((org.joda.time.ReadablePartial) localTime36, (long) 0);
        org.joda.time.Chronology chronology43 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfYear();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale locale48 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols49 = new java.text.DateFormatSymbols(locale48);
        java.lang.String str50 = locale45.getDisplayVariant(locale48);
        int int51 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str52 = locale18.getDisplayLanguage(locale45);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.setLanguage("minutes");
        java.util.Locale.Builder builder56 = builder53.clear();
        java.util.Locale locale57 = builder53.build();
        java.lang.String str58 = locale18.getDisplayScript(locale57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter14.withLocale(locale57);
        java.lang.String str62 = nameProvider3.getName(locale57, "Canada", "Feb 4, 8039 10:00:00 AM");
        java.lang.String str63 = locale0.getDisplayCountry(locale57);
        java.util.Locale locale65 = new java.util.Locale("2022-02-21T14:54:21.370Z/2022-02-21T14:54:21.370Z");
        java.lang.String str66 = locale65.getDisplayLanguage();
        java.lang.String str67 = locale0.getDisplayScript(locale65);
        java.lang.String str68 = locale0.getDisplayScript();
        boolean boolean69 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(nameProvider3);
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(int17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese" + "'", str52, "Chinese");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Canada" + "'", str63, "Canada");
        org.junit.Assert.assertEquals(locale65.toString(), "2022-02-21t14:54:21.370z/2022-02-21t14:54:21.370z");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-21t14:54:21.370z/2022-02-21t14:54:21.370z" + "'", str66, "2022-02-21t14:54:21.370z/2022-02-21t14:54:21.370z");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test04853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04853");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 2, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 8);
        org.joda.time.DateTime dateTime10 = dateTime7.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType13 = periodType11.getFieldType((int) (byte) 0);
        int int14 = period9.indexOf(durationFieldType13);
        org.joda.time.Period period16 = period9.minusMonths((int) (short) -1);
        int int17 = period16.getHours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test04854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04854");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int19 = calendar8.getWeeksInWeekYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime20, (org.joda.time.ReadablePartial) localTime21, periodType22);
        org.joda.time.LocalTime localTime25 = localTime20.minusSeconds((int) (short) 100);
        boolean boolean26 = calendar8.before((java.lang.Object) localTime25);
        calendar8.set(31, (int) (byte) 100, 365);
        java.util.TimeZone timeZone31 = calendar8.getTimeZone();
        java.time.ZoneId zoneId32 = timeZone31.toZoneId();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale37);
        java.lang.String str39 = locale36.getDisplayScript(locale37);
        java.lang.String str40 = locale33.getDisplayScript(locale37);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale33);
        calendar41.clear(12);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(10L, chronology45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyear();
        int int48 = dateTime46.get(dateTimeFieldType47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusWeeks(4);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Calendar calendar52 = dateTime50.toCalendar(locale51);
        java.util.Date date53 = calendar52.getTime();
        java.util.Calendar.Builder builder54 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder58 = builder54.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder62 = builder58.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(10L, chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekyear();
        int int67 = dateTime65.get(dateTimeFieldType66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusWeeks(4);
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.util.Calendar calendar71 = dateTime69.toCalendar(locale70);
        java.util.TimeZone timeZone72 = calendar71.getTimeZone();
        java.util.Calendar.Builder builder73 = builder58.setTimeZone(timeZone72);
        timeZone72.setID("65");
        calendar52.setTimeZone(timeZone72);
        java.util.TimeZone timeZone77 = calendar52.getTimeZone();
        calendar41.setTimeZone(timeZone77);
        boolean boolean79 = timeZone31.hasSameRules(timeZone77);
        java.lang.Object obj80 = timeZone77.clone();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=100,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=365,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=893,SECOND=10,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=?,SECOND=3,MILLISECOND=490,ZONE_OFFSET=74,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date53);
        org.junit.Assert.assertEquals(date53.toString(), "Thu Jan 29 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test04855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04855");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(21);
        org.joda.time.Period period3 = period1.plusMonths((-1));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test04856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04856");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.LocalTime localTime25 = localTime17.minusMinutes(9);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        int int27 = localTime25.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(chronology26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
    }

    @Test
    public void test04857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04857");
        org.joda.time.Period period1 = new org.joda.time.Period(0L);
        int int2 = period1.getMonths();
        org.joda.time.Days days3 = period1.toStandardDays();
        org.joda.time.Period period5 = period1.multipliedBy(58);
        org.joda.time.Duration duration6 = period5.toStandardDuration();
        org.joda.time.Period period8 = period5.minusWeeks(53878);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(days3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test04858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04858");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalTime localTime14 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = property11.getLocalTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTime(dateTimeZone29);
        int int31 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        org.joda.time.Duration duration45 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '4');
        org.joda.time.DateTime dateTime46 = dateTime18.minus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime dateTime47 = dateTime46.withEarlierOffsetAtOverlap();
        int int48 = property11.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalTime localTime49 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime50 = property11.getLocalTime();
        org.joda.time.LocalTime localTime51 = property11.withMinimumValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
    }

    @Test
    public void test04859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04859");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime0.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime7, periodType8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = dateTime13.toLocalTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime24 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration22, 0);
        org.joda.time.DateTime dateTime25 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType28 = periodType26.getFieldType((int) (byte) 0);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime7, periodType26);
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = period29.getFieldTypes();
        org.joda.time.Period period32 = period29.minusMinutes((int) 'u');
        org.joda.time.Hours hours33 = period29.toStandardHours();
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(hours33);
    }

    @Test
    public void test04860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04860");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(72000967, 132, (int) '#', 53139974, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53139974 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04861");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(10L, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean9 = dateTime5.isSupported(dateTimeFieldType8);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getDurationType();
        boolean boolean11 = dateTime2.equals((java.lang.Object) durationFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime2.plusMillis(762);
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test04862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04862");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(35099L, 21068276L);
    }

    @Test
    public void test04863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04863");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale5, locale7, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList14, filteringMode16);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale21, locale23, locale25, locale26, locale27, locale28 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList17, filteringMode32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.parse("minutes", strMap36);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.parse("und");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale45);
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Locale locale51 = java.util.Locale.JAPAN;
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray53 = new java.util.Locale[] { locale45, locale47, locale49, locale50, locale51, locale52 };
        java.util.ArrayList<java.util.Locale> localeList54 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList54, localeArray53);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList54, filteringMode56);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale61);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Locale locale67 = java.util.Locale.JAPAN;
        java.util.Locale locale68 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale61, locale63, locale65, locale66, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList70, filteringMode72);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter(languageRangeList41, (java.util.Collection<java.util.Locale>) localeList57, filteringMode72);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter(languageRangeList39, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale79);
        java.util.Locale locale81 = java.util.Locale.ROOT;
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale84 = java.util.Locale.getDefault();
        java.util.Locale locale85 = java.util.Locale.JAPAN;
        java.util.Locale locale86 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray87 = new java.util.Locale[] { locale79, locale81, locale83, locale84, locale85, locale86 };
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.Locale.FilteringMode filteringMode90 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.util.Locale>) localeList88, filteringMode90);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter(languageRangeList37, (java.util.Collection<java.util.Locale>) localeList75, filteringMode90);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList75);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode72.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + filteringMode90 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode90.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(localeList93);
    }

    @Test
    public void test04864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04864");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long3 = mutableInterval2.toDurationMillis();
        mutableInterval2.setInterval((long) 14, (long) '4');
        boolean boolean8 = mutableInterval2.contains((long) 53633080);
        java.lang.Object obj9 = null;
        boolean boolean10 = mutableInterval2.equals(obj9);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime11, (org.joda.time.ReadablePartial) localTime12, periodType13);
        org.joda.time.Period period16 = period14.minusDays(10);
        org.joda.time.Period period18 = period14.minusHours(0);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(10L, chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = dateTime23.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusWeeks(4);
        boolean boolean28 = periodType20.equals((java.lang.Object) dateTime27);
        int int29 = periodType20.size();
        org.joda.time.PeriodType periodType30 = periodType20.withMillisRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 12, periodType20);
        org.joda.time.PeriodType periodType32 = periodType20.withDaysRemoved();
        org.joda.time.Period period33 = period14.withPeriodType(periodType20);
        org.joda.time.Period period34 = mutableInterval2.toPeriod(periodType20);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval2.setEndMillis((long) (-180));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 426L + "'", long3 == 426L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test04865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04865");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        long long9 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        java.lang.String str14 = interval12.toString();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTime(dateTimeZone29);
        int int31 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        org.joda.time.Duration duration45 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '4');
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration37);
        mutableInterval15.setDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval48 = interval12.overlap((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.Period period49 = mutableInterval15.toPeriod();
        org.joda.time.DateTime dateTime51 = dateTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period49, 59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime2.withTime(53782845, 107, 29, 86399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53782845 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2186L + "'", long9 == 2186L);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z" + "'", str14, "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNull(interval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test04866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04866");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withDefaultYear(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = dateTimeFormatter6.print((long) 1008);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test04867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04867");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("99", "");
        java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("Sun");
        java.util.Locale.Builder builder9 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setExtension('x', "2022-02-21T15:45:33.737Z/2022-02-21T15:45:33.737Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 21T15:45:33.737Z/2022 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04868");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        org.joda.time.DateTime.Property property5 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone6.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) dateTime4, dateTimeZone6);
        long long14 = dateTimeZone6.convertLocalToUTC(35L, false, 1L);
        java.lang.String str16 = dateTimeZone6.getName((long) 12);
        int int18 = dateTimeZone6.getStandardOffset(100001L);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 29, dateTimeZone6);
        boolean boolean20 = dateTime19.isEqualNow();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 378691200010L + "'", long9 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35L + "'", long14 == 35L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04869");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.Period period5 = period1.plusDays((int) '#');
        int[] intArray6 = period1.getValues();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DurationField durationField9 = property8.getLeapDurationField();
        int int10 = property8.getMaximumValueOverall();
        int int11 = property8.getMinimumValueOverall();
        org.joda.time.DateTime dateTime12 = property8.getDateTime();
        org.joda.time.DateTime dateTime13 = property8.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime.Property property16 = dateTime14.monthOfYear();
        boolean boolean17 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.plus(readableDuration18);
        org.joda.time.DateTime.Property property20 = dateTime14.minuteOfDay();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period1, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period23 = period1.plusSeconds(37);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test04870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04870");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Calendar.Builder builder9 = builder4.set(10, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder11 = builder4.setCalendarType("January");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: January");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04871");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        int int4 = localTime1.getMillisOfDay();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols6 = new java.text.DateFormatSymbols(locale5);
        boolean boolean7 = localTime1.equals((java.lang.Object) locale5);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        int int11 = period9.getValue(0);
        org.joda.time.Period period12 = period9.normalizedStandard();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Period period14 = period12.plus(readablePeriod13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(10L, chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime17.isSupported(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getDurationType();
        java.lang.String str23 = durationFieldType22.getName();
        boolean boolean24 = period14.isSupported(durationFieldType22);
        org.joda.time.LocalTime localTime26 = localTime1.withFieldAdded(durationFieldType22, 672);
        int int27 = localTime26.size();
        org.joda.time.LocalTime.Property property28 = localTime26.millisOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime33.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        org.joda.time.Chronology chronology42 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.weekyear();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfDay();
        int int46 = dateTimeField44.getLeapAmount(21L);
        int int48 = dateTimeField44.getMinimumValue(35099L);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(35L, chronology50);
        org.joda.time.LocalTime localTime53 = localTime51.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        org.joda.time.LocalTime localTime57 = localTime51.withFieldAdded(durationFieldType55, (-1));
        org.joda.time.LocalTime localTime59 = localTime57.plusHours(53633080);
        org.joda.time.LocalTime.Property property60 = localTime59.millisOfSecond();
        java.util.Calendar.Builder builder62 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder66 = builder62.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale69 = new java.util.Locale("", "hi!");
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale70);
        java.lang.String str72 = locale69.getDisplayScript(locale70);
        java.util.Calendar.Builder builder73 = builder66.setLocale(locale69);
        org.joda.time.LocalTime localTime74 = property60.setCopy("70", locale69);
        org.joda.time.LocalTime localTime75 = property60.roundHalfFloorCopy();
        java.util.Locale.Builder builder77 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder79 = builder77.setLanguage("minutes");
        java.util.Locale.Builder builder80 = builder77.clear();
        java.util.Locale locale81 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder82 = builder80.setLocale(locale81);
        java.util.Set<java.lang.String> strSet83 = locale81.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet84 = locale81.getExtensionKeys();
        java.lang.String str85 = dateTimeField44.getAsShortText((org.joda.time.ReadablePartial) localTime75, (int) (byte) 100, locale81);
        java.text.DateFormatSymbols dateFormatSymbols86 = new java.text.DateFormatSymbols(locale81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime87 = property28.setCopy("fr-CA", locale81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"fr-CA\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2186 + "'", int4 == 2186);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "minutes" + "'", str23, "minutes");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(charSet84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "100" + "'", str85, "100");
    }

    @Test
    public void test04872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04872");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime6 = dateTime3.toLocalTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime7);
        int int9 = localTime6.getSecondOfMinute();
        int int10 = localTime6.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = localTime6.withMillisOfSecond(53773);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53773 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 186 + "'", int10 == 186);
    }

    @Test
    public void test04873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04873");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime13 = property11.getLocalTime();
        int int14 = localTime13.getHourOfDay();
        org.joda.time.LocalTime localTime16 = localTime13.withMillisOfSecond(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = localTime13.withHourOfDay(32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test04874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04874");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.DateTimeUtils.getPeriodType(periodType0);
        org.joda.time.PeriodType periodType2 = periodType1.withMonthsRemoved();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test04875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04875");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime6 = dateTime3.toLocalTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime7);
        int int9 = period8.getHours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = period8.plusDays(6139);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test04876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04876");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate localDate5 = localDate3.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.LocalDate.Property property8 = localDate5.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withField(dateTimeFieldType9, 59);
        org.joda.time.LocalDate localDate13 = localDate5.plusMonths(40);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test04877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04877");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean23 = interval21.isAfter((long) 10);
        org.joda.time.Duration duration24 = interval21.toDuration();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean29 = interval27.isAfter((long) 10);
        org.joda.time.Duration duration30 = interval27.toDuration();
        org.joda.time.Duration duration32 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) '4');
        boolean boolean33 = localDateTime18.equals((java.lang.Object) duration30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime18.minusSeconds(6);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime18.plusHours(893);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withDayOfWeek(1721700000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1721700000 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
    }

    @Test
    public void test04878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04878");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        long long3 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        org.joda.time.Duration duration4 = duration1.toDuration();
        long long5 = duration4.getMillis();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 10, chronology7);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime dateTime12 = dateTime8.withMillisOfSecond(2);
        org.joda.time.DateTime.Property property13 = dateTime8.millisOfDay();
        org.joda.time.DateTime dateTime15 = property13.setCopy(53633080);
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        java.util.Locale locale20 = new java.util.Locale("", "clockhourOfHalfday");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = property16.setCopy("2074-04-14T05:51:41.438Z/2074-04-14T05:51:41.438Z", locale20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2074-04-14T05:51:41.438Z/2074-04-14T05:51:41.438Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals(locale20.toString(), "_CLOCKHOUROFHALFDAY");
    }

    @Test
    public void test04879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04879");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((-61977518064550L));
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property28 = dateTime27.era();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime34 = dateTime29.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Chronology chronology35 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime36 = dateTime21.toDateTime(chronology35);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime37, (org.joda.time.ReadablePartial) localTime38, periodType39);
        org.joda.time.LocalTime localTime42 = localTime38.withMillisOfSecond(4);
        int[] intArray44 = chronology35.get((org.joda.time.ReadablePartial) localTime38, (long) 0);
        org.joda.time.Chronology chronology45 = chronology35.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfYear();
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.util.Locale locale50 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols51 = new java.text.DateFormatSymbols(locale50);
        java.lang.String str52 = locale47.getDisplayVariant(locale50);
        int int53 = dateTimeField46.getMaximumTextLength(locale47);
        java.lang.String str54 = locale20.getDisplayLanguage(locale47);
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder55.setLanguage("minutes");
        java.util.Locale.Builder builder58 = builder55.clear();
        java.util.Locale locale59 = builder55.build();
        java.lang.String str60 = locale20.getDisplayScript(locale59);
        java.lang.String str61 = locale59.getDisplayLanguage();
        java.lang.String str62 = locale59.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) localDate18, 14, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 14");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals(locale50.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese" + "'", str54, "Chinese");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "und" + "'", str62, "und");
    }

    @Test
    public void test04880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04880");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(5);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withField(dateTimeFieldType24, 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusMonths(5);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfYear();
        org.joda.time.LocalDateTime localDateTime37 = property35.addToCopy(478);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYearOfCentury(1);
        int int40 = localDateTime39.getMonthOfYear();
        boolean boolean41 = localDateTime17.equals((java.lang.Object) int40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime17.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 9 + "'", int40 == 9);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test04881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04881");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths(1);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusHours(364);
        int int19 = localDateTime15.getYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
    }

    @Test
    public void test04882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04882");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Interval interval14 = interval10.toInterval();
        long long15 = interval10.getEndMillis();
        org.joda.time.Interval interval17 = interval10.withStartMillis((long) 8);
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter21.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int24 = dateTimeFormatter21.getPivotYear();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period30 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime31 = dateTime26.plus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime39 = dateTime34.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime41 = dateTime26.toDateTime(chronology40);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime42, (org.joda.time.ReadablePartial) localTime43, periodType44);
        org.joda.time.LocalTime localTime47 = localTime43.withMillisOfSecond(4);
        int[] intArray49 = chronology40.get((org.joda.time.ReadablePartial) localTime43, (long) 0);
        org.joda.time.Chronology chronology50 = chronology40.withUTC();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.dayOfYear();
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Locale locale55 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols56 = new java.text.DateFormatSymbols(locale55);
        java.lang.String str57 = locale52.getDisplayVariant(locale55);
        int int58 = dateTimeField51.getMaximumTextLength(locale52);
        java.lang.String str59 = locale25.getDisplayLanguage(locale52);
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder60.setLanguage("minutes");
        java.util.Locale.Builder builder63 = builder60.clear();
        java.util.Locale locale64 = builder60.build();
        java.lang.String str65 = locale25.getDisplayScript(locale64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter21.withLocale(locale64);
        org.joda.time.Chronology chronology67 = dateTimeFormatter66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean70 = dateTimeZone69.isFixed();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 2, dateTimeZone69);
        long long75 = dateTimeZone69.convertLocalToUTC((long) 10, false, (long) 1);
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone69);
        boolean boolean77 = dateTimeZone69.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter66.withZone(dateTimeZone69);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = dateTime18.toString(dateTimeFormatter66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2186L + "'", long15 == 2186L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals(locale55.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Chinese" + "'", str59, "Chinese");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 10L + "'", long75 == 10L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
    }

    @Test
    public void test04883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04883");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale4);
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        java.lang.String str7 = locale0.getDisplayScript(locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale0);
        calendar8.clear(12);
        calendar8.setMinimalDaysInFirstWeek(6);
        calendar8.setLenient(false);
        java.time.Instant instant15 = calendar8.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = calendar8.getActualMinimum((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645452004310,areFieldsSet=true,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=74,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=6,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=?,SECOND=4,MILLISECOND=384,ZONE_OFFSET=74,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test04884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04884");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate localDate5 = localDate1.withCenturyOfEra(1969);
        org.joda.time.LocalDate.Property property6 = localDate1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        long long10 = dateTimeField7.add((long) 72000032, 0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 72000032L + "'", long10 == 72000032L);
    }

    @Test
    public void test04885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04885");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.setRegion("967");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder3.setScript("Thu");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Thu [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test04886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04886");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("Fri Feb 04 01:10:00 UTC 8039");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'Fri Feb 04 01:10:00 UTC 8039' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04887");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(478);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfCentury(1);
        java.util.Locale locale24 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols25 = new java.text.DateFormatSymbols(locale24);
        boolean boolean26 = locale24.hasExtensions();
        java.util.Locale locale27 = locale24.stripExtensions();
        boolean boolean28 = localDateTime19.equals((java.lang.Object) locale24);
        org.joda.time.LocalDateTime.Property property29 = localDateTime19.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime19.minusSeconds(72000967);
        int int32 = localDateTime19.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime19.withSecondOfMinute(186);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 186 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
    }

    @Test
    public void test04888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04888");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfDay(53623795);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra(2022);
        int int25 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withField(dateTimeFieldType32, 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime31.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int40 = localDateTime31.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime43 = localDateTime31.toDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime31.withSecondOfMinute(8);
        int int46 = localDateTime31.getYear();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType49 = periodType47.getFieldType((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        java.lang.String str52 = durationFieldType51.toString();
        boolean boolean53 = periodType47.isSupported(durationFieldType51);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime22, (org.joda.time.ReadablePartial) localDateTime31, periodType47);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime31.plusSeconds(79);
        int int57 = localDateTime56.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 14 + "'", int46 == 14);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "minutes" + "'", str52, "minutes");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 132 + "'", int57 == 132);
    }

    @Test
    public void test04889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04889");
        java.util.Date date3 = new java.util.Date(2022, 1970, (int) (short) 100);
        int int4 = date3.getTimezoneOffset();
        date3.setHours(10);
        date3.setTime((long) 53648193);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone14);
        int int16 = dateTime15.getCenturyOfEra();
        org.joda.time.DateTime.Property property17 = dateTime15.monthOfYear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        long long27 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime20);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.text.DateFormatSymbols dateFormatSymbols29 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale28);
        int int30 = property17.getMaximumShortTextLength(locale28);
        org.joda.time.DateTime dateTime31 = property17.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 2, dateTimeZone34);
        long long40 = dateTimeZone34.convertLocalToUTC((long) 10, false, (long) 1);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) -1, dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        int int43 = localDate41.get(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType42.getField(chronology44);
        boolean boolean46 = dateTime31.isSupported(dateTimeFieldType42);
        boolean boolean47 = localDate9.isSupported(dateTimeFieldType42);
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 14:54:08 UTC 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10L + "'", long40 == 10L);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1969 + "'", int43 == 1969);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test04890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04890");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime.Property property11 = dateTime5.property(dateTimeFieldType9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime5.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime.Property property14 = dateTime5.centuryOfEra();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears(2922789);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear(2023);
        java.util.GregorianCalendar gregorianCalendar20 = dateTime19.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime19.withWeekOfWeekyear(2186);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2186 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
    }

    @Test
    public void test04891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04891");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("English (United States)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"English (United States)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04892");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime0.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime7, periodType8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = dateTime13.toLocalTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime24 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration22, 0);
        org.joda.time.DateTime dateTime25 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType28 = periodType26.getFieldType((int) (byte) 0);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime7, periodType26);
        org.joda.time.Chronology chronology30 = localTime7.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.yearOfCentury();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.DateTime dateTime38 = dateTime36.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime39 = dateTime36.toLocalTime();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime();
        org.joda.time.Period period41 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime39, (org.joda.time.ReadablePartial) localTime40);
        int int42 = localTime39.getSecondOfMinute();
        int int43 = localTime39.getHourOfDay();
        org.joda.time.LocalTime localTime45 = localTime39.plusSeconds(53630161);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Period period51 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime52 = dateTime47.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.era();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period59 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime60 = dateTime55.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Chronology chronology61 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime62 = dateTime47.toDateTime(chronology61);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime63, (org.joda.time.ReadablePartial) localTime64, periodType65);
        org.joda.time.LocalTime localTime68 = localTime64.withMillisOfSecond(4);
        int[] intArray70 = chronology61.get((org.joda.time.ReadablePartial) localTime64, (long) 0);
        org.joda.time.Chronology chronology71 = chronology61.withUTC();
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime(chronology71);
        org.joda.time.Period period74 = org.joda.time.Period.seconds(99);
        org.joda.time.Period period76 = period74.multipliedBy(478);
        int[] intArray78 = chronology71.get((org.joda.time.ReadablePeriod) period74, 0L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField32.addWrapPartial((org.joda.time.ReadablePartial) localTime45, 53792, intArray78, 17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53792");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(period41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test04893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04893");
        java.util.Date date3 = new java.util.Date((int) (byte) 100, 32772, 893);
        java.lang.String str4 = date3.toLocaleString();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromDateFields(date3);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period7.toDurationFrom(readableInstant8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.Duration duration23 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) '4');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = dateTime24.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTime(dateTimeZone28);
        int int30 = dateTime29.getCenturyOfEra();
        org.joda.time.Interval interval31 = duration21.toIntervalTo((org.joda.time.ReadableInstant) dateTime29);
        int int32 = duration9.compareTo((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration33 = duration21.toDuration();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMinuteOfHour(48);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withField(dateTimeFieldType43, 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime42.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int51 = localDateTime50.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withField(dateTimeFieldType58, 100);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime57.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.minusMonths(5);
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.dayOfYear();
        org.joda.time.Duration duration71 = org.joda.time.Duration.millis((long) (short) -1);
        long long72 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration71);
        long long73 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration74 = duration71.toDuration();
        long long75 = duration74.getMillis();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime65.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime50.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime36.plus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Hours hours79 = duration74.toStandardHours();
        org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 11 00:00:00 UTC 4733");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jun 11, 4733 12:00:00 AM" + "'", str4, "Jun 11, 4733 12:00:00 AM");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(hours79);
    }

    @Test
    public void test04894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04894");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.DateTime dateTime5 = interval2.getEnd();
        org.joda.time.Period period7 = org.joda.time.Period.seconds(53661);
        org.joda.time.DateTime dateTime9 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period7, 99);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfSecond(16);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test04895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04895");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        timeZone18.setRawOffset((int) '4');
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder26 = builder22.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder30 = builder26.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(10L, chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = dateTime33.get(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusWeeks(4);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        java.util.TimeZone timeZone40 = calendar39.getTimeZone();
        java.util.Calendar.Builder builder41 = builder26.setTimeZone(timeZone40);
        timeZone40.setRawOffset((int) '4');
        boolean boolean44 = timeZone18.hasSameRules(timeZone40);
        int int45 = timeZone18.getRawOffset();
        java.util.TimeZone.setDefault(timeZone18);
        java.lang.String str47 = timeZone18.getDisplayName();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Coordinated Universal Time" + "'", str47, "Coordinated Universal Time");
    }

    @Test
    public void test04896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04896");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-21T15:45:33.737Z/2022-02-21T15:45:33.737Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T15:45:33.737Z/2022-02-21T15:45:33.737Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04897");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("PeriodType[Standard]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=periodtype[standard]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04898");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-62092691280000L));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYear(6139);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        boolean boolean8 = interval6.isAfter((long) 10);
        boolean boolean9 = interval6.containsNow();
        long long10 = interval6.toDurationMillis();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(10L, chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusWeeks(4);
        boolean boolean20 = periodType12.equals((java.lang.Object) dateTime19);
        int int21 = periodType12.size();
        org.joda.time.PeriodType periodType22 = periodType12.withMillisRemoved();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 12, periodType12);
        org.joda.time.Interval interval24 = interval6.withPeriodAfterStart((org.joda.time.ReadablePeriod) period23);
        int int25 = period23.getDays();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period23, (int) '4');
        org.joda.time.LocalDateTime.Property property28 = localDateTime1.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property31 = dateTime30.era();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime37 = dateTime32.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = dateTime32.toDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            long long42 = property28.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test04899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04899");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DurationField durationField3 = property2.getLeapDurationField();
        int int4 = property2.getMaximumValueOverall();
        int int5 = property2.getMinimumValueOverall();
        org.joda.time.DateTime dateTime6 = property2.getDateTime();
        org.joda.time.DateTime dateTime7 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        org.joda.time.Period period13 = interval10.toPeriod(periodType11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) 1721700000, periodType11);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNull(durationField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test04900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04900");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int6 = localDateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear(2);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTime(dateTimeZone23);
        int int25 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.Duration duration39 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) '4');
        org.joda.time.DateTime dateTime40 = dateTime12.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime8.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime8.plusMonths(762);
        org.joda.time.LocalDateTime.Property property44 = localDateTime8.dayOfYear();
        org.joda.time.LocalDateTime localDateTime46 = property44.addWrapFieldToCopy((int) (short) 10);
        int int47 = localDateTime46.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test04901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04901");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime(chronology21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localTime24, periodType25);
        org.joda.time.LocalTime localTime28 = localTime24.withMillisOfSecond(4);
        int[] intArray30 = chronology21.get((org.joda.time.ReadablePartial) localTime24, (long) 0);
        org.joda.time.Chronology chronology31 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfYear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols37 = new java.text.DateFormatSymbols(locale36);
        java.lang.String str38 = locale33.getDisplayVariant(locale36);
        int int39 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str40 = locale6.getDisplayLanguage(locale33);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setLanguage("minutes");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale locale45 = builder41.build();
        java.lang.String str46 = locale6.getDisplayScript(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withLocale(locale45);
        boolean boolean48 = dateTimeFormatter2.isPrinter();
        int int49 = dateTimeFormatter2.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime51 = dateTimeFormatter2.parseLocalTime("May");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2000 + "'", int49 == 2000);
    }

    @Test
    public void test04902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04902");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        boolean boolean9 = interval7.isAfter((long) 10);
        org.joda.time.Duration duration10 = interval7.toDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        boolean boolean16 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadableDuration) duration14);
        java.util.GregorianCalendar gregorianCalendar18 = dateTime2.toGregorianCalendar();
        java.time.Instant instant19 = gregorianCalendar18.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar18.add(292278993, 79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test04903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04903");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("99", "");
        java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("Sun");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder10 = builder8.clearExtensions();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime16 = dateTime11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime24 = dateTime19.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime26 = dateTime11.toDateTime(chronology25);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime27, (org.joda.time.ReadablePartial) localTime28, periodType29);
        org.joda.time.LocalTime localTime32 = localTime28.withMillisOfSecond(4);
        int[] intArray34 = chronology25.get((org.joda.time.ReadablePartial) localTime28, (long) 0);
        org.joda.time.Chronology chronology35 = chronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.dayOfYear();
        java.util.Locale locale38 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = locale39.getLanguage();
        java.lang.String str43 = dateTimeField36.getAsShortText(0, locale39);
        java.util.Locale.Builder builder44 = builder10.setLocale(locale39);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("");
        java.lang.String str47 = locale39.getDisplayVariant(locale46);
        java.lang.String str48 = locale39.getDisplayName();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test04904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04904");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale1);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = calendar3.getActualMaximum(32772);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 32772");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455545041,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=5,MILLISECOND=93,ZONE_OFFSET=52,DST_OFFSET=0]");
    }

    @Test
    public void test04905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04905");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.weekyearOfCentury();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime25, (org.joda.time.ReadablePartial) localTime26, periodType27);
        org.joda.time.LocalTime localTime30 = localTime25.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime31, (org.joda.time.ReadablePartial) localTime32, periodType33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime41 = dateTime38.toLocalTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = interval44.isAfter((long) 10);
        org.joda.time.Duration duration47 = interval44.toDuration();
        org.joda.time.DateTime dateTime49 = dateTime38.withDurationAdded((org.joda.time.ReadableDuration) duration47, 0);
        org.joda.time.DateTime dateTime50 = localTime32.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType53 = periodType51.getFieldType((int) (byte) 0);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime25, (org.joda.time.ReadablePartial) localTime32, periodType51);
        int int55 = localTime25.getMillisOfSecond();
        int int56 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localTime25);
        java.lang.String str58 = dateTimeField24.getAsText(528L);
        long long61 = dateTimeField24.addWrapField(4645296000000L, 132);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(durationFieldType53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 186 + "'", int55 == 186);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "70" + "'", str58, "70");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 5655139200000L + "'", long61 == 5655139200000L);
    }

    @Test
    public void test04906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04906");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.Date date9 = calendar8.getTime();
        calendar8.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = calendar8.getActualMaximum(21093276);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 21093276");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 29 00:00:00 UTC 1970");
    }

    @Test
    public void test04907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04907");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField19 = chronology14.era();
        java.lang.String str20 = dateTimeField19.getName();
        long long22 = dateTimeField19.roundHalfFloor(53131701L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "era" + "'", str20, "era");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-62135596800000L) + "'", long22 == (-62135596800000L));
    }

    @Test
    public void test04908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04908");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((-1));
        int int19 = localDateTime16.getMinuteOfHour();
        int int20 = localDateTime16.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withYearOfCentury(21098599);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21098599 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
    }

    @Test
    public void test04909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04909");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfMonth(21);
        int int9 = localDate8.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths(334);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime15 = dateTime10.plusDays(53661);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test04910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04910");
        java.util.Date date3 = new java.util.Date(893, (int) (byte) -1, (int) (byte) 10);
        int int4 = date3.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((java.lang.Object) int4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Thu Dec 10 00:00:00 UTC 2792");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 892 + "'", int4 == 892);
    }

    @Test
    public void test04911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04911");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale.Builder builder3 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setLanguageTag("P22YT0.020S");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: P22YT0.020S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test04912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04912");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Interval interval14 = interval10.toInterval();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.millisOfDay();
        org.joda.time.DateTime.Property property19 = dateTime16.weekyear();
        boolean boolean20 = interval14.isAfter((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.Interval interval25 = interval23.toInterval();
        org.joda.time.Period period26 = interval23.toPeriod();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        boolean boolean33 = interval23.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime34, (org.joda.time.ReadablePartial) localTime35, periodType36);
        org.joda.time.Period period38 = period37.negated();
        org.joda.time.Interval interval39 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Interval interval40 = interval14.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.MutableInterval mutableInterval41 = interval14.toMutableInterval();
        org.joda.time.Duration duration42 = mutableInterval41.toDuration();
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval41.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval43.setStartMillis(1646260110509L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(mutableInterval43);
    }

    @Test
    public void test04913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04913");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        long long5 = property4.remainder();
        org.joda.time.LocalDate localDate6 = property4.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths(894);
        int int9 = localDate8.getDayOfWeek();
        int int10 = localDate8.getEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test04914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04914");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        java.lang.String str17 = chronology14.toString();
        long long21 = chronology14.add(0L, (long) 4, 132);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField23 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology14.clockhourOfHalfday();
        org.joda.time.tz.NameProvider nameProvider26 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider26);
        java.util.Locale locale31 = new java.util.Locale("", "hi!");
        java.lang.String str34 = nameProvider26.getName(locale31, "halfdays", "DurationField[weeks]");
        java.lang.String str35 = dateTimeField24.getAsShortText(53775186, locale31);
        org.joda.time.DurationField durationField36 = dateTimeField24.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration37 = new org.joda.time.Duration((java.lang.Object) dateTimeField24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str17, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 528L + "'", long21 == 528L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(nameProvider26);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53775186" + "'", str35, "53775186");
        org.junit.Assert.assertNull(durationField36);
    }

    @Test
    public void test04915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04915");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.LocalDate localDate6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate7 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate8 = property4.roundFloorCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDate8.getValue(70);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 70");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test04916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04916");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime0.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime7, periodType8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = dateTime13.toLocalTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime24 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration22, 0);
        org.joda.time.DateTime dateTime25 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType28 = periodType26.getFieldType((int) (byte) 0);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime7, periodType26);
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = period29.getFieldTypes();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.forFields(durationFieldTypeArray30);
        org.joda.time.PeriodType periodType32 = periodType31.withDaysRemoved();
        org.joda.time.PeriodType periodType33 = periodType31.withHoursRemoved();
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test04917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04917");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusWeeks(4);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setLanguage("minutes");
        java.util.Locale locale13 = builder10.build();
        java.lang.String str14 = locale8.getDisplayLanguage(locale13);
        java.lang.String str15 = locale0.getDisplayVariant(locale13);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime30 = dateTime25.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = dateTime17.toDateTime(chronology31);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime33, (org.joda.time.ReadablePartial) localTime34, periodType35);
        org.joda.time.LocalTime localTime38 = localTime34.withMillisOfSecond(4);
        int[] intArray40 = chronology31.get((org.joda.time.ReadablePartial) localTime34, (long) 0);
        org.joda.time.Chronology chronology41 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfYear();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Locale locale46 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols47 = new java.text.DateFormatSymbols(locale46);
        java.lang.String str48 = locale43.getDisplayVariant(locale46);
        int int49 = dateTimeField42.getMaximumTextLength(locale43);
        java.lang.String str50 = locale16.getDisplayLanguage(locale43);
        java.lang.String str51 = locale43.getLanguage();
        boolean boolean52 = locale43.hasExtensions();
        java.lang.String str53 = locale43.getCountry();
        java.lang.String str54 = locale13.getDisplayScript(locale43);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime(35L, chronology56);
        org.joda.time.LocalTime localTime59 = localTime57.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getDurationType();
        org.joda.time.LocalTime localTime63 = localTime57.withFieldAdded(durationFieldType61, (-1));
        org.joda.time.LocalTime localTime65 = localTime63.plusHours(53633080);
        org.joda.time.LocalTime.Property property66 = localTime65.millisOfSecond();
        org.joda.time.LocalTime localTime68 = property66.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime70 = property66.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime71 = property66.roundHalfEvenCopy();
        java.util.Locale locale74 = new java.util.Locale("", "2022-02-21T14:53:48.428Z/2022-02-21T14:53:48.428Z");
        java.util.Locale.setDefault(locale74);
        java.lang.String str76 = property66.getAsText(locale74);
        java.lang.String str77 = locale43.getDisplayCountry(locale74);
        java.text.DateFormatSymbols dateFormatSymbols78 = java.text.DateFormatSymbols.getInstance(locale74);
        java.lang.String str79 = dateFormatSymbols78.getLocalPatternChars();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "minutes");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals(locale46.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese" + "'", str50, "Chinese");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertEquals(locale74.toString(), "_2022-02-21T14:53:48.428Z/2022-02-21T14:53:48.428Z");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "35" + "'", str76, "35");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str79, "GyMdkHmsSEDFwWahKzZ");
    }

    @Test
    public void test04918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04918");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        long long10 = dateTimeZone6.adjustOffset((long) 'x', true);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(32772, 59, 21093276, (-292275054), 2922789, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 120L + "'", long10 == 120L);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test04919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04919");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test04920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04920");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter2.getParser();
        boolean boolean7 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(10L, chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        int int12 = dateTime10.get(dateTimeFieldType11);
        org.joda.time.DateTime dateTime14 = dateTime10.plusWeeks(4);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.util.Calendar calendar16 = dateTime14.toCalendar(locale15);
        java.util.Date date17 = calendar16.getTime();
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder22 = builder18.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder26 = builder22.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = dateTime29.plusWeeks(4);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Calendar calendar35 = dateTime33.toCalendar(locale34);
        java.util.TimeZone timeZone36 = calendar35.getTimeZone();
        java.util.Calendar.Builder builder37 = builder22.setTimeZone(timeZone36);
        timeZone36.setID("65");
        calendar16.setTimeZone(timeZone36);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.fromCalendarFields(calendar16);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        long long48 = dateTimeZone44.adjustOffset((long) 'x', true);
        org.joda.time.DateTime dateTime49 = localDate42.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.DateTime dateTime50 = localDate41.toDateTimeAtStartOfDay(dateTimeZone44);
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now(dateTimeZone44);
        boolean boolean53 = dateTimeZone44.isStandardOffset((-36732196798107L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter2.withDefaultYear(53788450);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeFormatter56.getZone();
        java.io.Writer writer58 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime64.withField(dateTimeFieldType65, 100);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime64.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int73 = localDateTime64.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime64.plusYears(7);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plusDays((-1));
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.minusHours((int) (byte) 0);
        java.lang.String str80 = localDateTime75.toString();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter56.printTo(writer58, (org.joda.time.ReadablePartial) localDateTime75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Thu Jan 29 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 120L + "'", long48 == 120L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "0021-05-12T14:12:00.000" + "'", str80, "0021-05-12T14:12:00.000");
    }

    @Test
    public void test04921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04921");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        java.lang.String str16 = dateTimeField15.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField15.getType();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DateTimeField[dayOfWeek]" + "'", str16, "DateTimeField[dayOfWeek]");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
    }

    @Test
    public void test04922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04922");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationFrom(readableInstant22);
        org.joda.time.Seconds seconds24 = duration23.toStandardSeconds();
        boolean boolean25 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime26 = dateTime11.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval31.isAfter((long) 10);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.Chronology chronology35 = interval31.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology35);
        org.joda.time.Period period37 = duration23.toPeriod(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) calendar8, chronology35);
        int int39 = localDate38.getYear();
        int int40 = localDate38.getDayOfMonth();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property43 = localDate42.dayOfWeek();
        org.joda.time.LocalDate localDate45 = localDate42.plusWeeks(69);
        org.joda.time.LocalDate localDate47 = localDate42.withCenturyOfEra(8);
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        int int49 = localDate47.getDayOfMonth();
        boolean boolean50 = localDate38.isBefore((org.joda.time.ReadablePartial) localDate47);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 29 + "'", int40 == 29);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test04923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04923");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.minusDays(10);
        org.joda.time.Period period7 = period3.minusHours(0);
        org.joda.time.Period period9 = period7.plusSeconds(18);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test04924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04924");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 17);
        boolean boolean6 = dateTimeFormatter3.isParser();
        org.joda.time.Chronology chronology7 = dateTimeFormatter3.getChronolgy();
        java.util.Locale locale10 = new java.util.Locale("", "hi!");
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale11);
        java.lang.String str13 = locale10.getDisplayScript(locale11);
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = locale11.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter3.withLocale(locale11);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.era();
        org.joda.time.DateTime dateTime20 = property18.setCopy("AD");
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime27 = dateTime24.toLocalTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.DateTime dateTime35 = dateTime24.withDurationAdded((org.joda.time.ReadableDuration) duration33, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        int int37 = dateTime35.get(dateTimeFieldType36);
        int int38 = dateTime35.getDayOfWeek();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period43 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime44 = dateTime39.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime.Property property45 = dateTime39.millisOfDay();
        org.joda.time.DateTime dateTime46 = dateTime39.withEarlierOffsetAtOverlap();
        int int47 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime49 = dateTime35.plus((long) 0);
        org.joda.time.DateTime dateTime51 = dateTime35.minusDays(894);
        org.joda.time.DateTime dateTime52 = dateTime51.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter16.withChronology(chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant55 = org.joda.time.Instant.parse("PeriodType[Standard]", dateTimeFormatter54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
    }

    @Test
    public void test04925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04925");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 2, dateTimeZone1);
        int int5 = dateTimeZone1.getStandardOffset(87379516799948L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Interval interval12 = interval10.toInterval();
        boolean boolean14 = interval10.contains((long) 1970);
        org.joda.time.Interval interval15 = interval10.toInterval();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        boolean boolean21 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Chronology chronology22 = interval18.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.minuteOfHour();
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Locale locale30 = locale28.stripExtensions();
        java.lang.String str31 = dateTimeField25.getAsText((int) (byte) 10, locale30);
        java.lang.String str32 = dateTimeZone1.getShortName((long) 104, locale30);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "10" + "'", str31, "10");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
    }

    @Test
    public void test04926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04926");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        boolean boolean8 = interval6.isAfter((long) 10);
        org.joda.time.Duration duration9 = interval6.toDuration();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.Duration duration17 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) '4');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getCenturyOfEra();
        org.joda.time.Interval interval25 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime23);
        int int26 = duration3.compareTo((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period27 = duration15.toPeriod();
        org.joda.time.Duration duration30 = duration15.withDurationAdded((long) 'a', 52);
        org.joda.time.Duration duration31 = duration15.toDuration();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        boolean boolean34 = duration15.isEqual((org.joda.time.ReadableDuration) duration33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = duration15.toPeriodFrom(readableInstant35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = period36.normalizedStandard(periodType37);
        org.joda.time.Period period43 = new org.joda.time.Period((int) (byte) 1, (int) (byte) 0, 6, 22);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType46 = periodType44.getFieldType((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        java.lang.String str49 = durationFieldType48.toString();
        boolean boolean50 = periodType44.isSupported(durationFieldType48);
        org.joda.time.Period period52 = period43.withField(durationFieldType48, 51120);
        int int53 = period36.get(durationFieldType48);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 19 + "'", int24 == 19);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "minutes" + "'", str49, "minutes");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test04927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04927");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusDays(29);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        int int5 = localDate1.getYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
    }

    @Test
    public void test04928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04928");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int6 = localDateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear(2);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTime(dateTimeZone23);
        int int25 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.Duration duration39 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) '4');
        org.joda.time.DateTime dateTime40 = dateTime12.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime8.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime8.plusMonths(762);
        org.joda.time.LocalDateTime.Property property44 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime46 = property44.addToCopy((int) '#');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusMinutes(58);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMonths(104);
        int int52 = localDateTime50.getValue(0);
        int int53 = localDateTime50.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 28 + "'", int52 == 28);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 14 + "'", int53 == 14);
    }

    @Test
    public void test04929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04929");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.text.DateFormatSymbols dateFormatSymbols2 = java.text.DateFormatSymbols.getInstance();
        java.lang.String[] strArray3 = dateFormatSymbols2.getMonths();
        java.util.Locale locale6 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols7 = new java.text.DateFormatSymbols(locale6);
        java.lang.String[] strArray9 = new java.lang.String[] { "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        dateFormatSymbols7.setAmPmStrings(strArray9);
        dateFormatSymbols2.setEras(strArray9);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols13 = new java.text.DateFormatSymbols(locale12);
        java.lang.Object obj14 = dateFormatSymbols13.clone();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols13.setMonths(strArray21);
        java.lang.String[][] strArray23 = new java.lang.String[][] {};
        dateFormatSymbols13.setZoneStrings(strArray23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols26 = new java.text.DateFormatSymbols(locale25);
        java.lang.Object obj27 = dateFormatSymbols26.clone();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols26.setMonths(strArray34);
        dateFormatSymbols13.setEras(strArray34);
        dateFormatSymbols2.setShortWeekdays(strArray34);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols39 = new java.text.DateFormatSymbols(locale38);
        java.lang.Object obj40 = dateFormatSymbols39.clone();
        java.lang.String[] strArray47 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols39.setMonths(strArray47);
        java.lang.String[][] strArray49 = new java.lang.String[][] {};
        dateFormatSymbols39.setZoneStrings(strArray49);
        dateFormatSymbols2.setZoneStrings(strArray49);
        java.lang.String[][] strArray52 = strSet1.toArray(strArray49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.parse("minutes", strMap54);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags(languageRangeList55, (java.util.Collection<java.lang.String>) strSet58);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleKeys();
        java.util.Locale locale63 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        boolean boolean65 = strSet62.addAll((java.util.Collection<java.lang.String>) strSet64);
        boolean boolean66 = strSet58.containsAll((java.util.Collection<java.lang.String>) strSet62);
        java.lang.Object[] objArray67 = strSet62.toArray();
        strSet62.clear();
        java.util.Iterator<java.lang.String> strItor69 = strSet62.iterator();
        java.util.stream.Stream<java.lang.String> strStream70 = strSet62.stream();
        boolean boolean71 = strSet1.addAll((java.util.Collection<java.lang.String>) strSet62);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(dateFormatSymbols2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertEquals(locale6.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertNotNull(strStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test04930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04930");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.lang.String[] strArray6 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        boolean boolean12 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet11);
        java.util.stream.Stream<java.lang.String> strStream13 = strSet7.stream();
        boolean boolean14 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet7);
        strSet7.clear();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test04931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04931");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 20);
        long long2 = duration1.getMillis();
        java.lang.String str3 = duration1.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 20000L + "'", long2 == 20000L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT20S" + "'", str3, "PT20S");
    }

    @Test
    public void test04932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04932");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 15);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test04933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04933");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfDay(53623795);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra(2022);
        int int25 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMonths(30);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test04934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04934");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("PeriodType[YearDayTime]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: PeriodType[YearDayTime] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04935");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        int int3 = property1.getMaximumValueOverall();
        int int4 = property1.getMinimumValueOverall();
        org.joda.time.DateTime dateTime5 = property1.getDateTime();
        org.joda.time.DateTime dateTime6 = property1.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime.Property property9 = dateTime7.monthOfYear();
        boolean boolean10 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.plus(readableDuration11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime13, (org.joda.time.ReadablePartial) localTime14, periodType15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime23 = dateTime17.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime26 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        int int27 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime7.plusSeconds(2922789);
        int int30 = dateTime7.getYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
    }

    @Test
    public void test04936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04936");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.lang.String[] strArray2 = java.util.Locale.getISOCountries();
        dateFormatSymbols1.setShortWeekdays(strArray2);
        java.lang.String str4 = dateFormatSymbols1.getLocalPatternChars();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GyMdkHmsSEDFwWahKzZ" + "'", str4, "GyMdkHmsSEDFwWahKzZ");
    }

    @Test
    public void test04937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04937");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1 Jan 1970 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1 Jan 1970 00:00:00 GMT\" is malformed at \" Jan 1970 00:00:00 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04938");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) (-1), 1415750453654L);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime6 = interval5.getEnd();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime13 = dateTime7.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime15 = dateTime13.plus((long) (byte) 10);
        int int16 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime15);
        mutableInterval2.setEnd((org.joda.time.ReadableInstant) dateTime6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime6.withSecondOfMinute(53640079);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53640079 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test04939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04939");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        long long5 = property4.remainder();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.LocalDate localDate7 = property4.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate8 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate10 = localDate8.withWeekyear(892);
        org.joda.time.DateMidnight dateMidnight11 = localDate10.toDateMidnight();
        org.joda.time.LocalDate localDate13 = localDate10.withWeekyear(53918190);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test04940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04940");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusYears((int) (byte) -1);
        long long8 = dateTime5.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime5.withSecondOfMinute(245);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 245 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 2186L + "'", long8 == 2186L);
    }

    @Test
    public void test04941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04941");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zho" + "'", str1, "zho");
    }

    @Test
    public void test04942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04942");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.minusDays(10);
        org.joda.time.Period period7 = period5.withMonths((int) 'a');
        org.joda.time.Period period9 = period7.withMillis((int) 'a');
        org.joda.time.Period period11 = period7.plusMinutes((int) '4');
        int int12 = period7.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType14 = period7.getFieldType(53764795);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04943");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        boolean boolean5 = interval2.containsNow();
        long long6 = interval2.toDurationMillis();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        boolean boolean16 = periodType8.equals((java.lang.Object) dateTime15);
        int int17 = periodType8.size();
        org.joda.time.PeriodType periodType18 = periodType8.withMillisRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 12, periodType8);
        org.joda.time.Interval interval20 = interval2.withPeriodAfterStart((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Interval interval26 = interval24.toInterval();
        boolean boolean28 = interval24.contains((long) 1970);
        org.joda.time.Interval interval29 = interval24.toInterval();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        boolean boolean35 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Chronology chronology36 = interval32.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.weekyears();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Interval interval39 = interval20.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField40.getType();
        long long43 = dateTimeField40.roundFloor((long) 20);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
    }

    @Test
    public void test04944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04944");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        boolean boolean5 = interval3.isAfter((long) 10);
        org.joda.time.Duration duration6 = interval3.toDuration();
        org.joda.time.Chronology chronology7 = interval3.getChronology();
        boolean boolean8 = durationFieldType0.isSupported(chronology7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime10, periodType11);
        org.joda.time.Period period14 = period12.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime15.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime23 = dateTime21.plus((long) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period30 = period14.minus((org.joda.time.ReadablePeriod) period29);
        int int31 = period30.getWeeks();
        int int32 = period30.size();
        int[] intArray35 = chronology7.get((org.joda.time.ReadablePeriod) period30, (long) 52, (long) 893);
        org.joda.time.Chronology chronology36 = chronology7.withUTC();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.millisOfDay();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, 0, 841]");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test04945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04945");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        int int4 = localDate3.getMonthOfYear();
        int int5 = localDate3.getEra();
        org.joda.time.LocalDate localDate7 = localDate3.minusYears(2074);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str9 = dateTimeFieldType8.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDate3.get(dateTimeFieldType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "minuteOfDay" + "'", str9, "minuteOfDay");
    }

    @Test
    public void test04946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04946");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(478);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfCentury(1);
        java.util.Locale locale24 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols25 = new java.text.DateFormatSymbols(locale24);
        boolean boolean26 = locale24.hasExtensions();
        java.util.Locale locale27 = locale24.stripExtensions();
        boolean boolean28 = localDateTime19.equals((java.lang.Object) locale24);
        boolean boolean29 = locale24.hasExtensions();
        java.text.DateFormatSymbols dateFormatSymbols30 = new java.text.DateFormatSymbols(locale24);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test04947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04947");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0, 932, 896);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 932 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04948");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
        org.joda.time.LocalDate localDate7 = localDate1.withYearOfEra((int) '#');
        org.joda.time.LocalDate.Property property8 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate10 = localDate1.withYear(53654);
        org.joda.time.LocalDate localDate12 = localDate1.plusMonths(53654);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        int int17 = period15.getValue(0);
        org.joda.time.Period period18 = period15.normalizedStandard();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period21 = period15.withField(durationFieldType19, 478);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Chronology chronology28 = interval24.getChronology();
        org.joda.time.DurationField durationField29 = durationFieldType19.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType13.getField(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = localDate1.withField(dateTimeFieldType13, 53633080);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test04949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04949");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration13 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) '4');
        long long14 = duration13.getStandardMinutes();
        long long15 = duration13.getStandardMinutes();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType17 = periodType16.withHoursRemoved();
        org.joda.time.PeriodType periodType18 = periodType16.withHoursRemoved();
        org.joda.time.Period period19 = duration13.toPeriod(periodType18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime33 = dateTime28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime35 = dateTime20.toDateTime(chronology34);
        org.joda.time.DurationField durationField36 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfWeek();
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getChronology(chronology34);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime40, (org.joda.time.ReadablePartial) localTime41, periodType42);
        org.joda.time.Period period44 = period43.negated();
        org.joda.time.Period period46 = period44.withWeeks(49);
        long long49 = chronology38.add((org.joda.time.ReadablePeriod) period44, 32770L, (-51));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((java.lang.Object) period19, chronology38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32770L + "'", long49 == 32770L);
    }

    @Test
    public void test04950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04950");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(10L, chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        int int6 = dateTime4.get(dateTimeFieldType5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(4);
        boolean boolean9 = periodType1.equals((java.lang.Object) dateTime8);
        int int10 = periodType1.size();
        org.joda.time.PeriodType periodType11 = periodType1.withMillisRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 12, periodType1);
        org.joda.time.PeriodType periodType13 = periodType1.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType15 = periodType13.getFieldType(793);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 793");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test04951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04951");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.DurationField durationField25 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology14.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test04952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04952");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.stream();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withField(dateTimeFieldType8, 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int16 = localDateTime7.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean18 = dateTimeZone17.isFixed();
        org.joda.time.DateTime dateTime19 = localDateTime7.toDateTime(dateTimeZone17);
        boolean boolean20 = false; // flaky: strSet0.contains((java.lang.Object) dateTime19);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.setLanguage("minutes");
        java.util.Locale locale24 = builder21.build();
        java.util.Locale.Builder builder27 = builder21.setUnicodeLocaleKeyword("99", "");
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale locale31 = new java.util.Locale("", "hi!");
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale32);
        java.lang.String str34 = locale31.getDisplayScript(locale32);
        java.lang.String str35 = locale28.getDisplayScript(locale32);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale28);
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = locale28.getDisplayLanguage(locale37);
        java.util.Locale locale39 = locale28.stripExtensions();
        java.util.Locale.Builder builder40 = builder27.setLocale(locale39);
        java.util.Set<java.lang.Character> charSet41 = locale39.getExtensionKeys();
        boolean boolean42 = strSet0.equals((java.lang.Object) charSet41);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455546895,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=6,MILLISECOND=947,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(charSet41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test04953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04953");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(10L, chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyear();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusWeeks(4);
        boolean boolean12 = periodType4.equals((java.lang.Object) dateTime11);
        org.joda.time.DateTime dateTime13 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalTime.Property property14 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime16 = property14.addWrapFieldToCopy(53661);
        org.joda.time.DurationField durationField17 = property14.getRangeDurationField();
        long long19 = durationField17.getMillis(53784736);
        long long22 = durationField17.add(141033701369106000L, 1645455251732L);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 193625049600000L + "'", long19 == 193625049600000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 6064672607604306000L + "'", long22 == 6064672607604306000L);
    }

    @Test
    public void test04954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04954");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        long long3 = interval2.getStartMillis();
        org.joda.time.Interval interval4 = interval2.toInterval();
        java.lang.String str5 = interval4.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2186L + "'", long3 == 2186L);
        org.junit.Assert.assertNotNull(interval4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z" + "'", str5, "1970-01-01T00:00:02.186Z/1970-01-01T00:00:02.186Z");
    }

    @Test
    public void test04955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04955");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime(chronology21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localTime24, periodType25);
        org.joda.time.LocalTime localTime28 = localTime24.withMillisOfSecond(4);
        int[] intArray30 = chronology21.get((org.joda.time.ReadablePartial) localTime24, (long) 0);
        org.joda.time.Chronology chronology31 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfYear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols37 = new java.text.DateFormatSymbols(locale36);
        java.lang.String str38 = locale33.getDisplayVariant(locale36);
        int int39 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str40 = locale6.getDisplayLanguage(locale33);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setLanguage("minutes");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale locale45 = builder41.build();
        java.lang.String str46 = locale6.getDisplayScript(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withLocale(locale45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean50 = dateTimeZone49.isFixed();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 2, dateTimeZone49);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeUtils.getZone(dateTimeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        boolean boolean55 = dateTimeZone53.isFixed();
        int int57 = dateTimeZone53.getStandardOffset((long) (short) 10);
        java.lang.String str58 = dateTimeZone53.getID();
        int int60 = dateTimeZone53.getOffsetFromLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter47.withZone(dateTimeZone53);
        boolean boolean62 = dateTimeFormatter47.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter63 = dateTimeFormatter47.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime65 = dateTimeFormatter47.parseLocalDateTime("PT926M99S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Etc/UTC" + "'", str58, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(dateTimePrinter63);
    }

    @Test
    public void test04956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04956");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 'a');
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = period3.toDurationFrom(readableInstant4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        boolean boolean16 = interval14.isAfter((long) 10);
        org.joda.time.Duration duration17 = interval14.toDuration();
        org.joda.time.Duration duration19 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) '4');
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime20.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTime(dateTimeZone24);
        int int26 = dateTime25.getCenturyOfEra();
        org.joda.time.Interval interval27 = duration17.toIntervalTo((org.joda.time.ReadableInstant) dateTime25);
        int int28 = duration5.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period29 = duration17.toPeriod();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime36 = dateTime30.withDate(6, (int) (short) 1, 4);
        org.joda.time.Period period37 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean38 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property40 = dateTime39.era();
        org.joda.time.Duration duration42 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime43 = dateTime39.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.months();
        org.joda.time.Period period45 = duration42.toPeriod(periodType44);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime46, (org.joda.time.ReadablePartial) localTime47, periodType48);
        org.joda.time.Period period51 = period49.minusDays(10);
        org.joda.time.Duration duration52 = period49.toStandardDuration();
        org.joda.time.Duration duration54 = org.joda.time.Duration.millis((long) (short) -1);
        long long55 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration54);
        long long56 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration52.minus((org.joda.time.ReadableDuration) duration54);
        long long58 = duration52.getStandardDays();
        boolean boolean59 = duration42.isEqual((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration60 = org.joda.time.Duration.ZERO;
        boolean boolean61 = duration52.isEqual((org.joda.time.ReadableDuration) duration60);
        long long62 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration52);
        long long63 = duration52.getStandardHours();
        org.joda.time.Duration duration65 = new org.joda.time.Duration(1416096053654L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.millis(1613191507200015L);
        boolean boolean68 = duration65.isEqual((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration69 = duration52.plus((org.joda.time.ReadableDuration) duration65);
        boolean boolean70 = duration17.isEqual((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration72 = duration17.plus((long) 53654);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-1L) + "'", long56 == (-1L));
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration72);
    }

    @Test
    public void test04957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04957");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.Date date9 = calendar8.getTime();
        calendar8.clear();
        calendar8.setMinimalDaysInFirstWeek(645);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = calendar8.get((-180));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -180");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=645,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 29 00:00:00 UTC 1970");
    }

    @Test
    public void test04958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04958");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalTime localTime14 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = property11.getLocalTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTime(dateTimeZone29);
        int int31 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        org.joda.time.Duration duration45 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '4');
        org.joda.time.DateTime dateTime46 = dateTime18.minus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime dateTime47 = dateTime46.withEarlierOffsetAtOverlap();
        int int48 = property11.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalTime localTime49 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime50 = property11.getLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localTime50.get(dateTimeFieldType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
    }

    @Test
    public void test04959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04959");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.text.DateFormatSymbols dateFormatSymbols2 = java.text.DateFormatSymbols.getInstance(locale0);
        dateFormatSymbols2.setLocalPatternChars("hi!");
        java.lang.String[] strArray5 = dateFormatSymbols2.getShortWeekdays();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols7 = new java.text.DateFormatSymbols(locale6);
        java.lang.Object obj8 = dateFormatSymbols7.clone();
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols7.setMonths(strArray15);
        dateFormatSymbols2.setWeekdays(strArray15);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols19 = new java.text.DateFormatSymbols(locale18);
        java.text.DateFormatSymbols dateFormatSymbols20 = java.text.DateFormatSymbols.getInstance(locale18);
        dateFormatSymbols20.setLocalPatternChars("hi!");
        java.lang.String[] strArray23 = dateFormatSymbols20.getShortWeekdays();
        dateFormatSymbols2.setWeekdays(strArray23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols26 = new java.text.DateFormatSymbols(locale25);
        java.lang.Object obj27 = dateFormatSymbols26.clone();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols26.setMonths(strArray34);
        java.lang.Object obj36 = dateFormatSymbols26.clone();
        dateFormatSymbols26.setLocalPatternChars("65");
        java.lang.String[] strArray39 = dateFormatSymbols26.getMonths();
        java.lang.String[] strArray40 = dateFormatSymbols26.getAmPmStrings();
        java.lang.String[] strArray41 = dateFormatSymbols26.getShortWeekdays();
        dateFormatSymbols2.setEras(strArray41);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols44 = new java.text.DateFormatSymbols(locale43);
        java.text.DateFormatSymbols dateFormatSymbols45 = java.text.DateFormatSymbols.getInstance(locale43);
        dateFormatSymbols45.setLocalPatternChars("hi!");
        java.lang.String[] strArray48 = dateFormatSymbols45.getShortWeekdays();
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols50 = new java.text.DateFormatSymbols(locale49);
        java.lang.Object obj51 = dateFormatSymbols50.clone();
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols50.setMonths(strArray58);
        dateFormatSymbols45.setWeekdays(strArray58);
        java.util.Locale locale61 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols62 = new java.text.DateFormatSymbols(locale61);
        java.text.DateFormatSymbols dateFormatSymbols63 = java.text.DateFormatSymbols.getInstance(locale61);
        dateFormatSymbols63.setLocalPatternChars("hi!");
        java.lang.String[] strArray66 = dateFormatSymbols63.getShortWeekdays();
        dateFormatSymbols45.setWeekdays(strArray66);
        dateFormatSymbols2.setMonths(strArray66);
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols70 = new java.text.DateFormatSymbols(locale69);
        java.lang.Object obj71 = dateFormatSymbols70.clone();
        java.lang.String[] strArray78 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols70.setMonths(strArray78);
        java.util.Locale locale81 = java.util.Locale.forLanguageTag("2022-02-21T14:54:24.218Z/2022-02-21T14:54:24.218Z");
        boolean boolean82 = dateFormatSymbols70.equals((java.lang.Object) locale81);
        java.util.Locale locale85 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols86 = new java.text.DateFormatSymbols(locale85);
        java.lang.String[] strArray88 = new java.lang.String[] { "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        dateFormatSymbols86.setAmPmStrings(strArray88);
        java.lang.String[] strArray90 = dateFormatSymbols86.getAmPmStrings();
        dateFormatSymbols70.setAmPmStrings(strArray90);
        dateFormatSymbols2.setMonths(strArray90);
        java.lang.String[] strArray93 = dateFormatSymbols2.getShortMonths();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols45);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols63);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals(locale85.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray93);
    }

    @Test
    public void test04960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04960");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        int int16 = dateTime0.getSecondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime0.minuteOfHour();
        org.joda.time.Instant instant18 = new org.joda.time.Instant((java.lang.Object) dateTime0);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime25 = dateTime19.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime27 = dateTime25.plus((long) (byte) 10);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = period29.toDurationFrom(readableInstant30);
        org.joda.time.Seconds seconds32 = duration31.toStandardSeconds();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period34 = duration31.toPeriod();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.Period period38 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35, periodType36);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) 893);
        org.joda.time.Period period41 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.Instant instant45 = instant40.withDurationAdded((org.joda.time.ReadableDuration) duration43, 86399);
        org.joda.time.Instant instant47 = instant18.withDurationAdded((org.joda.time.ReadableDuration) duration43, 22);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(seconds32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant47);
    }

    @Test
    public void test04961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04961");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear((int) 'x');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withField(dateTimeFieldType30, 893);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType39 = localDateTime34.getFieldType(53765);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53765");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test04962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04962");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("_HI!", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=_hi!");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04963");
        org.joda.time.Period period1 = org.joda.time.Period.months(9);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test04964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04964");
        org.joda.time.Period period1 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.Period period3 = period1.plusYears(1969);
        org.joda.time.Period period5 = period3.withSeconds(9);
        org.joda.time.Period period7 = period5.minusWeeks(53654);
        org.joda.time.Period period9 = period7.withSeconds(2);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(10L, chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyear();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Duration duration20 = interval17.toDuration();
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationFrom(readableInstant23);
        org.joda.time.Seconds seconds25 = duration24.toStandardSeconds();
        boolean boolean26 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime27 = dateTime12.plus((org.joda.time.ReadableDuration) duration24);
        java.util.GregorianCalendar gregorianCalendar28 = dateTime12.toGregorianCalendar();
        java.time.Instant instant29 = gregorianCalendar28.toInstant();
        gregorianCalendar28.set(49, 22, 30, 15, 49, 365);
        boolean boolean37 = period9.equals((java.lang.Object) 365);
        int int38 = period9.getMonths();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test04965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04965");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.Date date9 = calendar8.getTime();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder14 = builder10.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder18 = builder14.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(10L, chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        int int23 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusWeeks(4);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        java.util.TimeZone timeZone28 = calendar27.getTimeZone();
        java.util.Calendar.Builder builder29 = builder14.setTimeZone(timeZone28);
        timeZone28.setID("65");
        calendar8.setTimeZone(timeZone28);
        java.util.TimeZone timeZone33 = calendar8.getTimeZone();
        calendar8.clear();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        int int37 = calendar8.getWeekYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 29 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
    }

    @Test
    public void test04966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04966");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("99", "");
        java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("Sun");
        java.util.Locale.Builder builder9 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setExtension('x', "DurationField[weekyears]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: DurationField[weekyears] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test04967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04967");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayVariant();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale1);
        // The following exception was thrown during execution in test generation
        try {
            calendar5.roll(645, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645455547496,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=7,MILLISECOND=548,ZONE_OFFSET=52,DST_OFFSET=0]");
    }

    @Test
    public void test04968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04968");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.plus((long) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(762);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime6.getZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.secondOfMinute();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime12.getFields();
        int int15 = localDateTime12.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withYearOfCentury(226);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 226 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test04969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04969");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime16 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property11.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField18 = property11.getField();
        org.joda.time.LocalTime localTime19 = property11.getLocalTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime20.getDayOfWeek();
        org.joda.time.DateTime dateTime25 = dateTime20.minusMinutes(53633080);
        org.joda.time.Period period27 = org.joda.time.Period.seconds(99);
        org.joda.time.Period period29 = period27.multipliedBy(478);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime25.getZone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Period period36 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime37 = dateTime32.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property39 = dateTime38.era();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime45 = dateTime40.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime47 = dateTime32.toDateTime(chronology46);
        org.joda.time.DateTime dateTime48 = dateTime25.toDateTime(chronology46);
        long long49 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime48);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 3218042337849L + "'", long49 == 3218042337849L);
    }

    @Test
    public void test04970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04970");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("January");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04971");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = strSet4.add("Greenwich Mean Time");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "French (Canada)" + "'", str3, "French (Canada)");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test04972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04972");
        org.joda.time.DateTimeUtils.setCurrentMillisFixed(86399004L);
    }

    @Test
    public void test04973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04973");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime9.isSupported(dateTimeFieldType12);
        int int14 = dateTime5.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime16 = dateTime5.plusMillis(7);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        long long22 = dateTimeField19.addWrapField((long) 21093276, 35);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeField19.set(1645455377861L, "years");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"years\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1439 + "'", int3 == 1439);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 21068276L + "'", long22 == 21068276L);
    }

    @Test
    public void test04974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04974");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks(4);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        java.lang.String str15 = locale13.getVariant();
        java.lang.String str16 = locale13.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType17.getField(chronology26);
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.lang.String str35 = dateTimeField30.getAsShortText(10L, locale34);
        java.lang.String str36 = locale13.getDisplayName(locale34);
        java.lang.String str37 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withLocale(locale13);
        java.util.Locale locale39 = dateTimeFormatter2.getLocale();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withChronology(chronology40);
        java.io.Writer writer42 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withField(dateTimeFieldType49, 100);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime48.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int57 = localDateTime48.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime48.plusYears(7);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks(20);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusMonths(53654);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withWeekyear(99);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter41.printTo(writer42, (org.joda.time.ReadablePartial) localDateTime65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AM" + "'", str35, "AM");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test04975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04975");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        timeZone18.setID("65");
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.era();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Period period30 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime31 = dateTime26.plus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyear();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) calendar22, chronology32);
        org.joda.time.DateTime.Property property36 = dateTime35.secondOfMinute();
        org.joda.time.DateTime dateTime38 = dateTime35.withWeekyear((int) (byte) 10);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.millisOfDay();
        org.joda.time.Chronology chronology41 = chronology39.withUTC();
        org.joda.time.DurationField durationField42 = chronology39.centuries();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645455547627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=59,SECOND=7,MILLISECOND=627,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test04976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04976");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(378691253010L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 378691253010 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04977");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks(4);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        java.lang.String str15 = locale13.getVariant();
        java.lang.String str16 = locale13.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType17.getField(chronology26);
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.lang.String str35 = dateTimeField30.getAsShortText(10L, locale34);
        java.lang.String str36 = locale13.getDisplayName(locale34);
        java.lang.String str37 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withLocale(locale13);
        java.lang.Integer int39 = dateTimeFormatter38.getPivotYear();
        boolean boolean40 = dateTimeFormatter38.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = dateTimeFormatter38.parseLocalDate("PT-1H");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AM" + "'", str35, "AM");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test04978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04978");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(193625049600000L, chronology1);
    }

    @Test
    public void test04979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04979");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.minusDays(10);
        org.joda.time.Duration duration6 = period3.toStandardDuration();
        org.joda.time.Duration duration8 = org.joda.time.Duration.millis((long) (short) -1);
        long long9 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration8);
        long long10 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = duration6.minus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = dateTime12.toDateTime(chronology26);
        org.joda.time.DurationField durationField28 = chronology26.centuries();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        boolean boolean30 = duration6.equals((java.lang.Object) dateTimeField29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = interval33.isAfter((long) 10);
        org.joda.time.Duration duration36 = interval33.toDuration();
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = period38.toDurationFrom(readableInstant39);
        org.joda.time.Seconds seconds41 = duration40.toStandardSeconds();
        boolean boolean42 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration40);
        boolean boolean43 = duration6.isEqual((org.joda.time.ReadableDuration) duration36);
        long long44 = duration36.getMillis();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(seconds41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test04980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04980");
        java.lang.String[] strArray4 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        boolean boolean10 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.stream.Stream<java.lang.String> strStream11 = strSet9.parallelStream();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days14 = duration13.toStandardDays();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTime(dateTimeZone29);
        int int31 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        org.joda.time.Duration duration45 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '4');
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration37);
        mutableInterval15.setDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Days days48 = duration37.toStandardDays();
        org.joda.time.Days[] daysArray49 = new org.joda.time.Days[] { days14, days48 };
        org.joda.time.Days[] daysArray50 = strSet9.toArray(daysArray49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        int int54 = dateTime51.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime51.withMillisOfSecond(9);
        boolean boolean59 = strSet9.contains((java.lang.Object) dateTime51);
        int int60 = dateTime51.getMillisOfDay();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((java.lang.Object) dateTime51);
        org.joda.time.LocalTime.Property property62 = localTime61.minuteOfHour();
        org.joda.time.LocalTime localTime63 = property62.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1439 + "'", int28 == 1439);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(daysArray49);
        org.junit.Assert.assertNotNull(daysArray50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1439 + "'", int54 == 1439);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 86399004 + "'", int60 == 86399004);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localTime63);
    }

    @Test
    public void test04981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04981");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone14);
        int int16 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.Duration duration30 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) '4');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration22);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval0.copy();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval0.copy();
        org.joda.time.DateTime dateTime35 = mutableInterval34.getStart();
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = period37.toDurationFrom(readableInstant38);
        int int40 = period37.getHours();
        mutableInterval34.setPeriodAfterStart((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Duration duration42 = mutableInterval34.toDuration();
        org.joda.time.Period period44 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime.Property property48 = dateTime46.millisOfDay();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period44, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property52 = dateTime51.era();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Period period57 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime58 = dateTime53.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology59 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTime60.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTime(dateTimeZone64);
        int int66 = dateTime53.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = interval69.isAfter((long) 10);
        org.joda.time.Duration duration72 = interval69.toDuration();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime74);
        boolean boolean77 = interval75.isAfter((long) 10);
        org.joda.time.Duration duration78 = interval75.toDuration();
        org.joda.time.Duration duration80 = duration72.withDurationAdded((org.joda.time.ReadableDuration) duration78, (int) '4');
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableDuration) duration72);
        mutableInterval50.setDurationAfterStart((org.joda.time.ReadableDuration) duration72);
        org.joda.time.MutableInterval mutableInterval83 = mutableInterval50.copy();
        org.joda.time.MutableInterval mutableInterval84 = mutableInterval50.copy();
        org.joda.time.DateTime dateTime85 = mutableInterval84.getStart();
        int int86 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime88 = dateTime46.withMillisOfDay(86399);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval34.setStart((org.joda.time.ReadableInstant) dateTime88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1439 + "'", int63 == 1439);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(mutableInterval83);
        org.junit.Assert.assertNotNull(mutableInterval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test04982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04982");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime9 = dateTime4.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTimeField dateTimeField11 = chronology10.halfdayOfDay();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DurationField durationField13 = chronology10.years();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval(892L, 793L, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test04983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04983");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.withHourOfDay(0);
        int int16 = localDateTime5.getYearOfEra();
        int int17 = localDateTime5.getYear();
        int int18 = localDateTime5.getSecondOfMinute();
        int int19 = localDateTime5.getCenturyOfEra();
        java.lang.String str20 = localDateTime5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime5.withTime(893, 56739, (-1963), 663);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 893 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 14 + "'", int17 == 14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "0014-05-12T14:12:00.000" + "'", str20, "0014-05-12T14:12:00.000");
    }

    @Test
    public void test04984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04984");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        java.time.Instant instant19 = calendar8.toInstant();
        int int20 = calendar8.getWeeksInWeekYear();
        calendar8.set(365, 892, 69);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=365,MONTH=892,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=69,DAY_OF_YEAR=285,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=10,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
    }

    @Test
    public void test04985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04985");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(0L);
    }

    @Test
    public void test04986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04986");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.Chronology chronology24 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.hourOfDay();
        org.joda.time.DurationField durationField27 = chronology24.centuries();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.halfdayOfDay();
        org.joda.time.Period period30 = org.joda.time.Period.hours((int) '#');
        boolean boolean32 = period30.equals((java.lang.Object) "2022-02-21T14:56:10.501Z/2022-02-21T14:56:10.501Z");
        int[] intArray35 = chronology24.get((org.joda.time.ReadablePeriod) period30, (long) 13, 349200000L);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(4165862400008L, chronology24);
        boolean boolean37 = durationFieldType10.isSupported(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval38 = new org.joda.time.Interval((java.lang.Object) dateTimeField9, chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 4, 0, 59, 59, 987]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test04987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04987");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        boolean boolean6 = interval4.isAfter((long) 10);
        org.joda.time.Duration duration7 = interval4.toDuration();
        org.joda.time.Chronology chronology8 = interval4.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100, chronology8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localDateTime10.getValue(266);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 266");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test04988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04988");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationFrom(readableInstant22);
        org.joda.time.Seconds seconds24 = duration23.toStandardSeconds();
        boolean boolean25 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime26 = dateTime11.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval31.isAfter((long) 10);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.Chronology chronology35 = interval31.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology35);
        org.joda.time.Period period37 = duration23.toPeriod(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) calendar8, chronology35);
        org.joda.time.LocalDate.Property property39 = localDate38.weekOfWeekyear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(35L, chronology42);
        org.joda.time.LocalTime localTime45 = localTime43.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        org.joda.time.LocalTime localTime49 = localTime43.withFieldAdded(durationFieldType47, (-1));
        org.joda.time.LocalTime localTime51 = localTime49.plusHours(53633080);
        org.joda.time.LocalTime.Property property52 = localTime51.millisOfSecond();
        java.util.Calendar.Builder builder54 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder58 = builder54.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale61 = new java.util.Locale("", "hi!");
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale62);
        java.lang.String str64 = locale61.getDisplayScript(locale62);
        java.util.Calendar.Builder builder65 = builder58.setLocale(locale61);
        org.joda.time.LocalTime localTime66 = property52.setCopy("70", locale61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = localDate38.toString("YearDayTime", locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertEquals(locale61.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(localTime66);
    }

    @Test
    public void test04989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04989");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfDay();
        int int14 = dateTimeField12.getLeapAmount(100L);
        java.lang.String str16 = dateTimeField12.getAsShortText((long) 53878);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
    }

    @Test
    public void test04990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04990");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime0.minusSeconds((int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime0.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property9 = localTime0.hourOfDay();
        int int10 = localTime0.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:59:59.004" + "'", str7, "23:59:59.004");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
    }

    @Test
    public void test04991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04991");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.minusDays(10);
        org.joda.time.Period period7 = period5.withMonths((int) 'a');
        org.joda.time.Period period9 = period7.withMillis((int) 'a');
        org.joda.time.Period period11 = period7.plusMinutes((int) '4');
        org.joda.time.format.PeriodFormatter periodFormatter12 = null;
        java.lang.String str13 = period7.toString(periodFormatter12);
        org.joda.time.format.PeriodFormatter periodFormatter14 = null;
        java.lang.String str15 = period7.toString(periodFormatter14);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "P97M-10D" + "'", str13, "P97M-10D");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P97M-10D" + "'", str15, "P97M-10D");
    }

    @Test
    public void test04992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04992");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        long long3 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        org.joda.time.Duration duration4 = duration1.toDuration();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime15.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTime(dateTimeZone19);
        int int21 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.Duration duration35 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) '4');
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration27);
        mutableInterval5.setDurationAfterStart((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Days days38 = duration27.toStandardDays();
        boolean boolean39 = duration1.isEqual((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean43 = dateTimeZone42.isFixed();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 2, dateTimeZone42);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeUtils.getZone(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeUtils.getZone(dateTimeZone46);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 99, dateTimeZone48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        long long54 = dateTimeZone51.convertUTCToLocal((long) 20);
        org.joda.time.DateTime dateTime55 = localTime49.toDateTimeToday(dateTimeZone51);
        org.joda.time.Interval interval56 = duration27.toIntervalFrom((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime();
        int int58 = dateTime57.getDayOfWeek();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1439 + "'", int18 == 1439);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 21L + "'", long54 == 21L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
    }

    @Test
    public void test04993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04993");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withField(dateTimeFieldType15, 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int23 = localDateTime22.getSecondOfMinute();
        int int24 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withField(dateTimeFieldType33, 100);
        org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime26, (org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime26.minuteOfHour();
        java.lang.String str38 = property37.getAsString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(10L, chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        int int44 = dateTime42.get(dateTimeFieldType43);
        org.joda.time.DateTime dateTime46 = dateTime42.plusWeeks(4);
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.util.Calendar calendar48 = dateTime46.toCalendar(locale47);
        org.joda.time.DateTime dateTime50 = dateTime46.plusMillis(22);
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Duration duration54 = period52.toDurationFrom(readableInstant53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean59 = interval57.isAfter((long) 10);
        org.joda.time.Duration duration60 = interval57.toDuration();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = interval63.isAfter((long) 10);
        org.joda.time.Duration duration66 = interval63.toDuration();
        org.joda.time.Duration duration68 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) '4');
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableInstant) dateTime70);
        int int72 = dateTime69.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = dateTime69.toDateTime(dateTimeZone73);
        int int75 = dateTime74.getCenturyOfEra();
        org.joda.time.Interval interval76 = duration66.toIntervalTo((org.joda.time.ReadableInstant) dateTime74);
        int int77 = duration54.compareTo((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTime dateTime78 = dateTime50.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Chronology chronology79 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(58L, chronology79);
        boolean boolean81 = property37.equals((java.lang.Object) chronology79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime83 = property37.setCopy(53140);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53140 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1439 + "'", int72 == 1439);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 19 + "'", int75 == 19);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test04994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04994");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.Period period4 = period1.normalizedStandard();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period7 = period1.withField(durationFieldType5, 478);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        org.joda.time.Duration duration13 = interval10.toDuration();
        org.joda.time.Chronology chronology14 = interval10.getChronology();
        org.joda.time.DurationField durationField15 = durationFieldType5.getField(chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        boolean boolean21 = interval18.containsNow();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths((int) (byte) 100);
        boolean boolean28 = interval18.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime29 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property30 = dateTime29.secondOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime37 = dateTime31.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime39 = dateTime37.plus((long) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime37.withYear(762);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime37.getZone();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime29.toDateTime(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withField(dateTimeFieldType51, 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime50.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.minusMonths(5);
        org.joda.time.LocalDateTime.Property property62 = localDateTime58.dayOfYear();
        org.joda.time.Duration duration64 = org.joda.time.Duration.millis((long) (short) -1);
        long long65 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration64);
        long long66 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration67 = duration64.toDuration();
        long long68 = duration67.getMillis();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime58.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime58.withDayOfYear((int) 'x');
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(10L, chronology73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.weekyear();
        int int76 = dateTime74.get(dateTimeFieldType75);
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType75.getDurationType();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime71.withField(dateTimeFieldType75, 893);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime71.withYearOfCentury(2);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime71.plusWeeks((int) (short) 10);
        boolean boolean84 = dateTimeZone42.isLocalDateTimeGap(localDateTime71);
        org.joda.time.Chronology chronology85 = chronology14.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField86 = chronology14.secondOfDay();
        org.joda.time.DateTimeField dateTimeField87 = chronology14.hourOfHalfday();
        int int89 = dateTimeField87.get(9223372036854775807L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1970 + "'", int76 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 7 + "'", int89 == 7);
    }

    @Test
    public void test04995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04995");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        int int5 = dateTime0.getCenturyOfEra();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Chronology chronology12 = interval8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        org.joda.time.DurationField durationField14 = chronology12.eras();
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology12);
        org.joda.time.LocalDate localDate16 = dateTime0.toLocalDate();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test04996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04996");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTime.Property property7 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime8 = property7.roundFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withField(dateTimeFieldType16, 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int24 = localDateTime23.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.property(dateTimeFieldType26);
        boolean boolean28 = dateTime9.isSupported(dateTimeFieldType26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Period period33 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime34 = dateTime29.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property36 = dateTime35.era();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime37.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Chronology chronology43 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime44 = dateTime29.toDateTime(chronology43);
        org.joda.time.DurationField durationField45 = chronology43.centuries();
        java.lang.String str46 = chronology43.toString();
        org.joda.time.DurationField durationField47 = chronology43.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime9.toMutableDateTime(chronology43);
        org.joda.time.DateTimeField dateTimeField50 = chronology43.yearOfEra();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1439 + "'", int3 == 1439);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str46, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test04997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04997");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.lang.String str3 = locale1.getDisplayName();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test04998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04998");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period4 = period3.negated();
        int int5 = period3.size();
        int int6 = period3.getMillis();
        org.joda.time.Period period7 = period3.toPeriod();
        org.joda.time.Period period9 = period7.minusWeeks(6);
        org.joda.time.MutablePeriod mutablePeriod10 = period7.toMutablePeriod();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
    }

    @Test
    public void test04999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test04999");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        int int7 = dateTime6.getYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property11 = dateTime9.millisOfDay();
        boolean boolean12 = dateTime6.isBefore((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfMinute();
        org.joda.time.DateTime dateTime16 = dateTime13.plusHours((-9));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test05000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest9.test05000");
        java.lang.Object obj0 = null;
        org.joda.time.Period period1 = new org.joda.time.Period(obj0);
        org.joda.time.Period period3 = period1.plusWeeks((int) (byte) 1);
        int int4 = period3.getHours();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }
}

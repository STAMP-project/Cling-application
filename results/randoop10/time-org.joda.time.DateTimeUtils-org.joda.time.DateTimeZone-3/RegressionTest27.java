import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest27 {

    public static boolean debug = false;

    @Test
    public void test13501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13501");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
        org.joda.time.LocalDate localDate7 = localDate1.withDayOfMonth(15);
        org.joda.time.Interval interval8 = localDate7.toInterval();
        java.lang.Class<?> wildcardClass9 = localDate7.getClass();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test13502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13502");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("1970-01-01T00:00:00.893Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 1970-01-01T00:00:00.893Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13503");
        java.util.Locale locale1 = new java.util.Locale("Feb");
        org.junit.Assert.assertEquals(locale1.toString(), "feb");
    }

    @Test
    public void test13504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13504");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime(chronology21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localTime24, periodType25);
        org.joda.time.LocalTime localTime28 = localTime24.withMillisOfSecond(4);
        int[] intArray30 = chronology21.get((org.joda.time.ReadablePartial) localTime24, (long) 0);
        org.joda.time.Chronology chronology31 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfYear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols37 = new java.text.DateFormatSymbols(locale36);
        java.lang.String str38 = locale33.getDisplayVariant(locale36);
        int int39 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str40 = locale6.getDisplayLanguage(locale33);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setLanguage("minutes");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale locale45 = builder41.build();
        java.lang.String str46 = locale6.getDisplayScript(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withLocale(locale45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean50 = dateTimeZone49.isFixed();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 2, dateTimeZone49);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeUtils.getZone(dateTimeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        boolean boolean55 = dateTimeZone53.isFixed();
        int int57 = dateTimeZone53.getStandardOffset((long) (short) 10);
        java.lang.String str58 = dateTimeZone53.getID();
        int int60 = dateTimeZone53.getOffsetFromLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter47.withZone(dateTimeZone53);
        boolean boolean62 = dateTimeFormatter47.isOffsetParsed();
        boolean boolean63 = dateTimeFormatter47.isParser();
        // The following exception was thrown during execution in test generation
        try {
            long long65 = dateTimeFormatter47.parseMillis("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.001" + "'", str58, "+00:00:00.001");
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test13505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13505");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int20 = calendar8.getMinimum((int) (short) 1);
        java.time.Instant instant21 = calendar8.toInstant();
        java.util.Date date22 = calendar8.getTime();
        java.util.Date date26 = new java.util.Date(893, (int) (byte) -1, (int) (byte) 10);
        int int27 = date26.getYear();
        java.lang.String str28 = date26.toLocaleString();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromDateFields(date26);
        calendar8.setTime(date26);
        date26.setTime((-61977484799991L));
        int int33 = date26.getTimezoneOffset();
        java.lang.String str34 = date26.toLocaleString();
        int int35 = date26.getHours();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=25969507199993,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2792,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=344,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=994,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Mon Oct 11 14:53:10 GMT+00:00 1");
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Thu Jan 07 00:00:00 GMT+00:00 6");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 892 + "'", int27 == 892);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Dec 10, 2792 12:00:00 AM" + "'", str28, "Dec 10, 2792 12:00:00 AM");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Jan 7, 0006 12:00:00 AM" + "'", str34, "Jan 7, 0006 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test13506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13506");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime9.isSupported(dateTimeFieldType12);
        int int14 = dateTime5.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime15.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime23 = dateTime21.plus((long) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration27);
        long long31 = duration27.getStandardHours();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 969 + "'", int3 == 969);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test13507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13507");
        java.util.Date date5 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        int int6 = date5.getMinutes();
        int int7 = date5.getSeconds();
        java.lang.Object obj8 = date5.clone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.Interval interval13 = interval11.toInterval();
        org.joda.time.Period period14 = interval11.toPeriod();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Duration duration20 = interval17.toDuration();
        boolean boolean21 = interval11.abuts((org.joda.time.ReadableInterval) interval17);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.Chronology chronology30 = interval26.getChronology();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology30);
        org.joda.time.Chronology chronology32 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval31);
        org.joda.time.Interval interval33 = interval11.withChronology(chronology32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(obj8, chronology32);
        org.joda.time.DateTime.Property property35 = dateTime34.secondOfDay();
        org.joda.time.Instant instant36 = dateTime34.toInstant();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "Fri Feb 04 01:10:00 GMT+00:00 8039");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(instant36);
    }

    @Test
    public void test13508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13508");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(99);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withField(dateTimeFieldType27, 100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfWeek();
        org.joda.time.Interval interval36 = property35.toInterval();
        org.joda.time.LocalDateTime localDateTime38 = property35.addToCopy(99L);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withField(dateTimeFieldType45, 100);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withField(dateTimeFieldType54, 100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime53.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int62 = localDateTime61.getSecondOfMinute();
        int int63 = localDateTime47.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.withField(dateTimeFieldType72, 100);
        org.joda.time.Period period75 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime65, (org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime38.withPeriodAdded((org.joda.time.ReadablePeriod) period75, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime17.minus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime17.withCenturyOfEra(15);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime17.plusYears(24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date83 = localDateTime17.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -114 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test13509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13509");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime4, (org.joda.time.ReadablePartial) localTime5, periodType6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime8.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime17 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property18 = dateTime14.year();
        boolean boolean19 = instant1.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime21 = dateTime14.minusDays(364);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Interval interval26 = interval24.toInterval();
        org.joda.time.Period period27 = interval24.toPeriod();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        boolean boolean34 = interval24.abuts((org.joda.time.ReadableInterval) interval30);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime35, (org.joda.time.ReadablePartial) localTime36, periodType37);
        org.joda.time.Period period39 = period38.negated();
        org.joda.time.Interval interval40 = interval24.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime41, (org.joda.time.ReadablePartial) localTime42, periodType43);
        org.joda.time.Period period46 = period44.minusDays(10);
        org.joda.time.Period period48 = period46.withMonths((int) 'a');
        org.joda.time.Period period50 = period48.withMillis((int) 'a');
        org.joda.time.Interval interval51 = interval40.withPeriodAfterStart((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period53 = period50.withHours(2);
        int int54 = period53.size();
        org.joda.time.Period period56 = period53.plusDays(5);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadablePeriod) period53);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test13510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13510");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime28 = dateTime23.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyear();
        org.joda.time.DurationField durationField33 = chronology29.centuries();
        org.joda.time.Chronology chronology34 = chronology29.withUTC();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.DateTime.Property property39 = dateTime38.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone40.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((java.lang.Object) dateTime38, dateTimeZone40);
        long long48 = dateTimeZone40.convertLocalToUTC(35L, false, 1L);
        org.joda.time.Chronology chronology49 = chronology34.withZone(dateTimeZone40);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime50, (org.joda.time.ReadablePartial) localTime51, periodType52);
        org.joda.time.LocalTime localTime55 = localTime50.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime56, (org.joda.time.ReadablePartial) localTime57, periodType58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.DateTime dateTime65 = dateTime63.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime66 = dateTime63.toLocalTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = interval69.isAfter((long) 10);
        org.joda.time.Duration duration72 = interval69.toDuration();
        org.joda.time.DateTime dateTime74 = dateTime63.withDurationAdded((org.joda.time.ReadableDuration) duration72, 0);
        org.joda.time.DateTime dateTime75 = localTime57.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType78 = periodType76.getFieldType((int) (byte) 0);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime50, (org.joda.time.ReadablePartial) localTime57, periodType76);
        int int80 = period79.getMinutes();
        org.joda.time.PeriodType periodType81 = period79.getPeriodType();
        int[] intArray84 = chronology34.get((org.joda.time.ReadablePeriod) period79, (-2016L), (long) 54);
        java.util.Calendar.Builder builder85 = builder4.setFields(intArray84);
        java.util.Calendar calendar86 = builder4.build();
        calendar86.set((int) (short) -1, 52, 11);
        calendar86.setFirstDayOfWeek(74);
        calendar86.clear();
        calendar86.clear();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 378691200010L + "'", long43 == 378691200010L);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 34L + "'", long48 == 34L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 2, 70]");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(calendar86);
// flaky:         org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=74,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test13511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13511");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-1L), dateTimeZone2);
        int int6 = localDate5.getYearOfEra();
        org.joda.time.LocalDate.Property property7 = localDate5.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.withMinimumValue();
        java.util.Locale locale11 = new java.util.Locale("", "hi!");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale11.getDisplayScript(locale12);
        boolean boolean15 = locale12.hasExtensions();
        java.lang.String str16 = locale12.getDisplayName();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType17.getField(chronology26);
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.lang.String str35 = dateTimeField30.getAsShortText(10L, locale34);
        java.lang.String str36 = locale12.getDisplayCountry(locale34);
        int int37 = property7.getMaximumShortTextLength(locale12);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter40.withOffsetParsed();
        java.util.Calendar.Builder builder42 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder46 = builder42.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale49 = new java.util.Locale("", "hi!");
        java.util.Locale locale50 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale50);
        java.lang.String str52 = locale49.getDisplayScript(locale50);
        java.util.Calendar.Builder builder53 = builder46.setLocale(locale49);
        java.util.Set<java.lang.String> strSet54 = locale49.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter41.withLocale(locale49);
        java.lang.String str56 = locale12.getDisplayName(locale49);
        java.text.DateFormatSymbols dateFormatSymbols57 = java.text.DateFormatSymbols.getInstance(locale49);
        java.util.Locale locale58 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        java.lang.String str61 = locale49.getDisplayCountry(locale59);
        java.text.DateFormatSymbols dateFormatSymbols62 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale49);
        java.util.Locale locale63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = locale49.getDisplayCountry(locale63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals(locale11.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AM" + "'", str35, "AM");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals(locale49.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "HI!" + "'", str61, "HI!");
        org.junit.Assert.assertNotNull(dateFormatSymbols62);
    }

    @Test
    public void test13512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13512");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks(4);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        java.lang.String str15 = locale13.getVariant();
        java.lang.String str16 = locale13.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType17.getField(chronology26);
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.lang.String str35 = dateTimeField30.getAsShortText(10L, locale34);
        java.lang.String str36 = locale13.getDisplayName(locale34);
        java.lang.String str37 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withLocale(locale13);
        java.lang.Integer int39 = dateTimeFormatter38.getPivotYear();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Locale locale43 = new java.util.Locale("", "hi!");
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale44);
        java.lang.String str46 = locale43.getDisplayScript(locale44);
        java.lang.String str47 = locale40.getDisplayScript(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter38.withLocale(locale40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter48.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser50 = dateTimeFormatter48.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter48.withDefaultYear(896);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter52.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser54 = dateTimeFormatter52.getParser();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.DateTime.Property property60 = dateTime59.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        long long64 = dateTimeZone61.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((java.lang.Object) dateTime59, dateTimeZone61);
        long long69 = dateTimeZone61.convertLocalToUTC(35L, false, 1L);
        java.lang.String str71 = dateTimeZone61.getName((long) 12);
        int int73 = dateTimeZone61.getStandardOffset(100001L);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 29, dateTimeZone61);
        long long77 = dateTimeZone61.convertLocalToUTC(10L, true);
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter52.withZone(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AM" + "'", str35, "AM");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals(locale43.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(dateTimeParser50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNull(dateTimeParser54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 378691200010L + "'", long64 == 378691200010L);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 34L + "'", long69 == 34L);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.001" + "'", str71, "+00:00:00.001");
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 9L + "'", long77 == 9L);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
    }

    @Test
    public void test13513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13513");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.months();
        org.joda.time.Period period6 = duration3.toPeriod(periodType5);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) localTime8, periodType9);
        org.joda.time.Period period12 = period10.minusDays(10);
        org.joda.time.Duration duration13 = period10.toStandardDuration();
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis((long) (short) -1);
        long long16 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        long long17 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = duration13.minus((org.joda.time.ReadableDuration) duration15);
        long long19 = duration13.getStandardDays();
        boolean boolean20 = duration3.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        boolean boolean22 = duration13.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        boolean boolean30 = interval26.contains((long) 1970);
        org.joda.time.Interval interval31 = interval26.toInterval();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        boolean boolean37 = interval31.abuts((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Chronology chronology38 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfDay();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.LocalTime localTime42 = localTime40.minusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology43 = localTime42.getChronology();
        org.joda.time.Period period44 = duration13.toPeriod(periodType23, chronology43);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(10L, chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        int int50 = dateTime48.get(dateTimeFieldType49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusWeeks(4);
        boolean boolean53 = periodType45.equals((java.lang.Object) dateTime52);
        int int54 = dateTime52.getDayOfYear();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(10L, chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyear();
        int int60 = dateTime58.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusWeeks(4);
        boolean boolean63 = periodType55.equals((java.lang.Object) dateTime62);
        int int64 = periodType55.size();
        org.joda.time.PeriodType periodType65 = periodType55.withMillisRemoved();
        org.joda.time.PeriodType periodType66 = periodType55.withHoursRemoved();
        org.joda.time.Period period67 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52, periodType55);
        org.joda.time.Period period69 = period67.plusDays(86399999);
        java.lang.String str70 = period69.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 29 + "'", int54 == 29);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "P86399999D" + "'", str70, "P86399999D");
    }

    @Test
    public void test13514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13514");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 893);
        org.joda.time.Instant instant3 = instant1.minus((long) 22);
        org.joda.time.Instant instant5 = instant3.plus((long) (short) 0);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTime(dateTimeZone20);
        int int22 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval31.isAfter((long) 10);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.Duration duration36 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) '4');
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration28);
        mutableInterval6.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval6.copy();
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Duration duration41 = mutableInterval39.toDuration();
        org.joda.time.Duration duration43 = duration41.minus((long) 59);
        org.joda.time.Instant instant45 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration43, 1);
        org.joda.time.Period period46 = duration43.toPeriod();
        org.joda.time.Duration duration48 = duration43.plus((-40960944000000L));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 969 + "'", int19 == 969);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test13515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13515");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.centuryOfEra();
        java.lang.String str29 = dateTimeField27.getAsShortText(97L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "19" + "'", str29, "19");
    }

    @Test
    public void test13516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13516");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        calendar8.set(0, (int) ' ', 4);
        calendar8.setTimeInMillis((long) 0);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        calendar8.setFirstDayOfWeek(8);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = calendar8.get(36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=8,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test13517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13517");
        org.joda.time.Period period4 = new org.joda.time.Period((int) (byte) 1, (int) (byte) 0, 6, 22);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType7 = periodType5.getFieldType((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        java.lang.String str10 = durationFieldType9.toString();
        boolean boolean11 = periodType5.isSupported(durationFieldType9);
        org.joda.time.Period period13 = period4.withField(durationFieldType9, 51120);
        int[] intArray14 = period13.getValues();
        org.joda.time.Period period16 = period13.plusDays(53658501);
        org.joda.time.Period period18 = period13.withMonths(25059574);
        org.joda.time.Period period19 = period13.negated();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "minutes" + "'", str10, "minutes");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 1, 51120, 6, 22]");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test13518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13518");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        long long3 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        org.joda.time.Duration duration4 = duration1.toDuration();
        long long5 = duration4.getMillis();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 10, chronology7);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean14 = dateTimeZone13.isFixed();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 2, dateTimeZone13);
        long long19 = dateTimeZone13.convertLocalToUTC((long) 10, false, (long) 1);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) -1, dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        int int22 = localDate20.get(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime8.property(dateTimeFieldType21);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Locale locale27 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols28 = new java.text.DateFormatSymbols(locale27);
        java.lang.String str29 = locale24.getDisplayVariant(locale27);
        java.lang.String str30 = locale24.getDisplayLanguage();
        java.lang.String str31 = property23.getAsText(locale24);
        org.joda.time.DateTime dateTime33 = property23.setCopy(172);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime33.withSecondOfMinute(66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 66 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test13519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13519");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType4 = periodType2.getFieldType((int) (byte) 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime10 = dateTime5.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime18 = dateTime13.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime(chronology19);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) localTime22, periodType23);
        org.joda.time.LocalTime localTime26 = localTime22.withMillisOfSecond(4);
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) localTime22, (long) 0);
        org.joda.time.Chronology chronology29 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfYear();
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getChronology(chronology29);
        org.joda.time.Period period32 = new org.joda.time.Period(120L, (-1639349041000L), periodType2, chronology31);
        org.joda.time.Period period34 = period32.minusMillis(0);
        org.joda.time.Period period36 = period34.minusSeconds(32463639);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
    }

    @Test
    public void test13520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13520");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(4);
        java.lang.String str2 = period1.toString();
        int int3 = period1.getSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT4M" + "'", str2, "PT4M");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test13521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13521");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate7 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(45);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withField(dateTimeFieldType16, 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusMonths(5);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.dayOfYear();
        org.joda.time.Duration duration29 = org.joda.time.Duration.millis((long) (short) -1);
        long long30 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration29);
        long long31 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration29.toDuration();
        long long33 = duration32.getMillis();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime23.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime23.withDayOfYear((int) 'x');
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(10L, chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        int int41 = dateTime39.get(dateTimeFieldType40);
        org.joda.time.DurationFieldType durationFieldType42 = dateTimeFieldType40.getDurationType();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime36.withField(dateTimeFieldType40, 893);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime36.withYearOfCentury(2);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property52 = dateTime50.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        boolean boolean54 = localDateTime46.isSupported(dateTimeFieldType53);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = localDate7.get(dateTimeFieldType53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-1L) + "'", long33 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test13522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13522");
        java.lang.String[] strArray4 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        boolean boolean10 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet9);
        java.lang.Object[] objArray11 = strSet9.toArray();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime14, (org.joda.time.ReadablePartial) localTime15, periodType16);
        org.joda.time.LocalTime localTime19 = localTime14.minusSeconds((int) (short) 100);
        boolean boolean20 = localTime13.equals((java.lang.Object) (short) 100);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = interval23.getEnd();
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime27 = dateTime24.toLocalTime();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime();
        org.joda.time.Period period29 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime27, (org.joda.time.ReadablePartial) localTime28);
        int int30 = localTime13.compareTo((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.LocalTime.Property property31 = localTime28.minuteOfHour();
        boolean boolean32 = strSet9.remove((java.lang.Object) property31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime34 = property31.setCopy(2101);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2101 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test13523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13523");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone14);
        int int16 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.Duration duration30 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) '4');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration22);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableInterval mutableInterval33 = mutableInterval0.copy();
        org.joda.time.MutableInterval mutableInterval34 = mutableInterval0.copy();
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = mutableInterval0.isBefore(readableInstant35);
        org.joda.time.MutableInterval mutableInterval37 = mutableInterval0.copy();
        long long38 = mutableInterval37.toDurationMillis();
        boolean boolean39 = mutableInterval37.isBeforeNow();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        int int44 = dateTime41.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = dateTime41.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusYears((int) (byte) -1);
        long long49 = dateTime46.getMillis();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        boolean boolean54 = interval52.isAfter((long) 10);
        org.joda.time.Duration duration55 = interval52.toDuration();
        org.joda.time.MutableInterval mutableInterval56 = interval52.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime65 = dateTime60.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime68);
        int int70 = dateTime67.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = dateTime67.toDateTime(dateTimeZone71);
        int int73 = dateTime60.compareTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime();
        org.joda.time.Interval interval76 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime75);
        boolean boolean78 = interval76.isAfter((long) 10);
        org.joda.time.Duration duration79 = interval76.toDuration();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime();
        org.joda.time.Interval interval82 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = interval82.isAfter((long) 10);
        org.joda.time.Duration duration85 = interval82.toDuration();
        org.joda.time.Duration duration87 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration85, (int) '4');
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableDuration) duration79);
        mutableInterval57.setDurationAfterStart((org.joda.time.ReadableDuration) duration79);
        org.joda.time.MutableInterval mutableInterval90 = mutableInterval57.copy();
        org.joda.time.MutableInterval mutableInterval91 = mutableInterval57.copy();
        boolean boolean92 = interval52.isAfter((org.joda.time.ReadableInterval) mutableInterval91);
        boolean boolean93 = dateTime46.equals((java.lang.Object) mutableInterval91);
        mutableInterval37.setInterval(readableInstant40, (org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 969 + "'", int13 == 969);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutableInterval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 969 + "'", int44 == 969);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645459782311L + "'", long49 == 1645459782311L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(mutableInterval56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 969 + "'", int70 == 969);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(mutableInterval90);
        org.junit.Assert.assertNotNull(mutableInterval91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test13524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13524");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.Date date9 = calendar8.getTime();
        java.lang.String str10 = date9.toGMTString();
        int int11 = date9.getMinutes();
        int int12 = date9.getHours();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(10L, chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusWeeks(4);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Calendar calendar21 = dateTime19.toCalendar(locale20);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        int int24 = calendar21.getGreatestMinimum(10);
        calendar21.set((-1), 21, 11, (int) (short) 0, 893, 10);
        java.time.Instant instant32 = calendar21.toInstant();
        int int33 = calendar21.getWeeksInWeekYear();
        java.util.Date date34 = calendar21.getTime();
        boolean boolean35 = date9.before(date34);
        java.util.Date date37 = new java.util.Date(1645455232776L);
        boolean boolean38 = date34.after(date37);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromDateFields(date34);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 29 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "29 Jan 1970 00:00:00 GMT" + "'", str10, "29 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-62142800809990,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=285,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=10,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Oct 11 14:53:10 GMT+00:00 1");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Mon Feb 21 14:53:52 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localTime39);
    }

    @Test
    public void test13525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13525");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((-1));
        int int19 = localDateTime16.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.era();
        org.joda.time.LocalDateTime.Property property21 = localDateTime16.hourOfDay();
        int int22 = property21.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property21.withMaximumValue();
        java.lang.String str24 = property21.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "14" + "'", str24, "14");
    }

    @Test
    public void test13526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13526");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        boolean boolean5 = interval2.containsNow();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) (byte) 100);
        boolean boolean12 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime9.withDayOfMonth((int) (short) 1);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.weekyearOfCentury();
        org.joda.time.Chronology chronology29 = chronology26.withUTC();
        org.joda.time.Period period30 = new org.joda.time.Period((long) '4', (long) '#', chronology26);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.DateTime dateTime32 = dateTime9.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.hourOfDay();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test13527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13527");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(8);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime36 = dateTime31.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekyear();
        org.joda.time.Period period41 = new org.joda.time.Period((-2016L), chronology37);
        org.joda.time.DateTime dateTime42 = dateTime26.withChronology(chronology37);
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.fromMillisOfDay(1645455233666L, chronology37);
        org.joda.time.DateTime dateTime44 = dateTime16.toDateTime(chronology37);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(chronology37);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test13528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13528");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime4.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime13 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int int14 = localTime0.getHourOfDay();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16, periodType17);
        org.joda.time.Period period20 = period18.minusDays(10);
        org.joda.time.LocalTime localTime21 = localTime0.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.LocalTime localTime23 = localTime0.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalTime localTime25 = localTime0.minusMillis(75180);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test13529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13529");
        java.util.Date date3 = new java.util.Date((int) (byte) 100, 32772, 893);
        java.lang.String str4 = date3.toLocaleString();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromDateFields(date3);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period7.toDurationFrom(readableInstant8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.Duration duration23 = duration15.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) '4');
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = dateTime24.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTime(dateTimeZone28);
        int int30 = dateTime29.getCenturyOfEra();
        org.joda.time.Interval interval31 = duration21.toIntervalTo((org.joda.time.ReadableInstant) dateTime29);
        int int32 = duration9.compareTo((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration33 = duration21.toDuration();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withMinuteOfHour(48);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withField(dateTimeFieldType43, 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime42.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int51 = localDateTime50.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withField(dateTimeFieldType58, 100);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime57.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.minusMonths(5);
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.dayOfYear();
        org.joda.time.Duration duration71 = org.joda.time.Duration.millis((long) (short) -1);
        long long72 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration71);
        long long73 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration74 = duration71.toDuration();
        long long75 = duration74.getMillis();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime65.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime50.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime36.plus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.LocalDateTime.Property property79 = localDateTime36.year();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime36.withWeekyear(154975);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 11 00:00:00 GMT+00:00 4733");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "4733-06-11 00:00:00" + "'", str4, "4733-06-11 00:00:00");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 969 + "'", int27 == 969);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test13530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13530");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        long long5 = property4.remainder();
        org.joda.time.LocalDate localDate6 = property4.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths(894);
        java.util.Locale locale10 = null;
        java.lang.String str11 = localDate6.toString("53636902", locale10);
        org.joda.time.DateTime dateTime12 = localDate6.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate14 = localDate6.withYear(536);
        org.joda.time.Interval interval15 = localDate14.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "53636902" + "'", str11, "53636902");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
    }

    @Test
    public void test13531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13531");
        java.util.Date date5 = new java.util.Date(32772, 1970, (int) (byte) 100, 53623795, 32769);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromDateFields(date5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withWeekyear(457070);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Nov 14 13:09:00 GMT+00:00 40953");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test13532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13532");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean6 = dateTime2.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) dateTime2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate7.withYearOfCentury(53960478);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53960478 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test13533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13533");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 17);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.dayOfYear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.era();
        org.joda.time.DateTimeField dateTimeField5 = localDateTime1.getField(0);
        int int7 = dateTimeField5.getMinimumValue(7734608956800000L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-292275054) + "'", int7 == (-292275054));
    }

    @Test
    public void test13534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13534");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        int int3 = property1.getMaximumValueOverall();
        int int4 = property1.getMinimumValueOverall();
        org.joda.time.DateTime dateTime5 = property1.roundFloorCopy();
        java.lang.String str6 = property1.getAsShortText();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols8 = new java.text.DateFormatSymbols(locale7);
        java.text.DateFormatSymbols dateFormatSymbols9 = java.text.DateFormatSymbols.getInstance(locale7);
        java.lang.String str10 = property1.getAsText(locale7);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths(12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(10L, chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = dateTime23.get(dateTimeFieldType24);
        org.joda.time.DateTime.Property property26 = dateTime20.property(dateTimeFieldType24);
        org.joda.time.LocalDate localDate28 = localDate14.withField(dateTimeFieldType24, 1970);
        int int29 = localDate28.getDayOfYear();
        int int30 = property1.compareTo((org.joda.time.ReadablePartial) localDate28);
        int int31 = localDate28.getMonthOfYear();
        org.joda.time.LocalDate localDate33 = localDate28.withWeekyear(57550035);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.Period period37 = period35.plusYears(1969);
        org.joda.time.Period period39 = period37.withSeconds(9);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime45 = dateTime40.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime.Property property46 = dateTime40.millisOfDay();
        org.joda.time.DateTime dateTime47 = property46.withMinimumValue();
        org.joda.time.Duration duration48 = period37.toDurationTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.millis((long) (short) -1);
        long long51 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration50);
        long long52 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = duration50.toDuration();
        long long54 = duration53.getMillis();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 10, chronology56);
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime57, periodType58);
        org.joda.time.DateTime dateTime61 = dateTime57.withMillisOfSecond(2);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period63 = duration48.toPeriodTo((org.joda.time.ReadableInstant) dateTime61, periodType62);
        org.joda.time.DateTime dateTime64 = localDate28.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ap. J.-C." + "'", str6, "ap. J.-C.");
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateFormatSymbols9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ap. J.-C." + "'", str10, "ap. J.-C.");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 365 + "'", int29 == 365);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test13535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13535");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        int int3 = property1.getMaximumValueOverall();
        int int4 = property1.getMinimumValueOverall();
        org.joda.time.DateTime dateTime5 = property1.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int20 = localDateTime11.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.DateTime dateTime23 = localDateTime11.toDateTime(dateTimeZone21);
        long long25 = dateTimeZone21.convertUTCToLocal((long) 893);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime5.toMutableDateTime(dateTimeZone21);
        boolean boolean28 = dateTime5.isAfter((long) 5);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTimeField dateTimeField30 = chronology29.era();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 894L + "'", long25 == 894L);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test13536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13536");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(7741930904428642000L);
    }

    @Test
    public void test13537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13537");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        long long5 = dateTimeZone1.adjustOffset((long) 'x', true);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = localTime6.withField(dateTimeFieldType7, 53969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53969 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 120L + "'", long5 == 120L);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
    }

    @Test
    public void test13538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13538");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 7);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        long long3 = instant1.getMillis();
        org.joda.time.Instant instant5 = instant1.withMillis(1516546593459L);
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime7 = instant1.toDateTime();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 7L + "'", long3 == 7L);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test13539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13539");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusMillis(22);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Duration duration20 = interval17.toDuration();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean25 = interval23.isAfter((long) 10);
        org.joda.time.Duration duration26 = interval23.toDuration();
        org.joda.time.Duration duration28 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) '4');
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime29.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTime(dateTimeZone33);
        int int35 = dateTime34.getCenturyOfEra();
        org.joda.time.Interval interval36 = duration26.toIntervalTo((org.joda.time.ReadableInstant) dateTime34);
        int int37 = duration14.compareTo((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTime dateTime38 = dateTime10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean45 = interval43.isAfter((long) 10);
        org.joda.time.Duration duration46 = interval43.toDuration();
        org.joda.time.Chronology chronology47 = interval43.getChronology();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology47);
        org.joda.time.Period period50 = org.joda.time.Period.seconds(99);
        long long53 = chronology47.add((org.joda.time.ReadablePeriod) period50, (long) 53657, 0);
        org.joda.time.Period period55 = new org.joda.time.Period((long) '#');
        int int57 = period55.getValue(0);
        org.joda.time.Period period58 = period55.normalizedStandard();
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period61 = period55.withField(durationFieldType59, 478);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime63);
        boolean boolean66 = interval64.isAfter((long) 10);
        org.joda.time.Duration duration67 = interval64.toDuration();
        org.joda.time.Chronology chronology68 = interval64.getChronology();
        org.joda.time.DurationField durationField69 = durationFieldType59.getField(chronology68);
        int int70 = period50.indexOf(durationFieldType59);
        org.joda.time.DateTime dateTime72 = dateTime38.withFieldAdded(durationFieldType59, 53968315);
        org.joda.time.DateTime dateTime74 = dateTime38.minus(0L);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMonths(496);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 969 + "'", int32 == 969);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 20 + "'", int35 == 20);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 53657L + "'", long53 == 53657L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test13540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13540");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime0.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = dateTime0.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime.Property property16 = dateTime10.millisOfDay();
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime17);
        mutableInterval18.setStartMillis((long) (short) -1);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime29 = dateTime24.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology30);
        org.joda.time.DurationField durationField32 = chronology30.weeks();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.secondOfDay();
        org.joda.time.DurationField durationField35 = chronology30.centuries();
        org.joda.time.DateTimeField dateTimeField36 = chronology30.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = chronology30.hourOfHalfday();
        mutableInterval18.setChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField39 = chronology30.hourOfHalfday();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 969 + "'", int3 == 969);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test13541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13541");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withDefaultYear(0);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 852);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronology();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime18 = dateTime13.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology19.centuries();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter9.withChronology(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test13542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13542");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(10L, chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyear();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime.Property property15 = dateTime9.property(dateTimeFieldType13);
        org.joda.time.LocalDate localDate17 = localDate3.withField(dateTimeFieldType13, 1970);
        org.joda.time.DateTime dateTime18 = localDate3.toDateTimeAtMidnight();
        int int19 = localDate3.size();
        java.util.Date date20 = localDate3.toDate();
        org.joda.time.LocalDate localDate22 = localDate3.minusWeeks(53956707);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Wed Jan 01 00:00:00 GMT+00:00 1969");
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test13543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13543");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.withHourOfDay(0);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime.Property property22 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime23 = property22.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int30 = localDateTime29.getEra();
        int int31 = property22.compareTo((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime15, (org.joda.time.ReadablePartial) localDateTime29, periodType32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusDays((int) 'a');
        int int36 = localDateTime35.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds(53);
        int int39 = localDateTime35.getSecondOfMinute();
        java.util.Date date45 = new java.util.Date(335, (int) (short) 0, 17, 53623795, 53640079);
        date45.setDate(100);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromDateFields(date45);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate52 = localDate50.withDayOfMonth(21);
        org.joda.time.LocalDate localDate54 = localDate52.minusDays(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        int int56 = localDate54.indexOf(dateTimeFieldType55);
        int int57 = localDate54.getYear();
        boolean boolean58 = localDate48.isAfter((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.LocalDate localDate60 = localDate48.withYearOfEra(20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime35, (org.joda.time.ReadablePartial) localDate60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Sat Aug 08 20:19:00 GMT+00:00 8454");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test13544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13544");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = dateTime2.toDateTime(chronology16);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime18, (org.joda.time.ReadablePartial) localTime19, periodType20);
        org.joda.time.LocalTime localTime23 = localTime19.withMillisOfSecond(4);
        int[] intArray25 = chronology16.get((org.joda.time.ReadablePartial) localTime19, (long) 0);
        org.joda.time.Period period26 = new org.joda.time.Period((long) 10, 35L, chronology16);
        int int27 = period26.getDays();
        org.joda.time.Period period29 = period26.minusMinutes(365);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        java.lang.String str32 = durationFieldType31.toString();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime39 = dateTime34.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period46 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime47 = dateTime42.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime49 = dateTime34.toDateTime(chronology48);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime50, (org.joda.time.ReadablePartial) localTime51, periodType52);
        org.joda.time.LocalTime localTime55 = localTime51.withMillisOfSecond(4);
        int[] intArray57 = chronology48.get((org.joda.time.ReadablePartial) localTime51, (long) 0);
        org.joda.time.Chronology chronology58 = chronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfYear();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) 10, chronology58);
        org.joda.time.DateTimeField dateTimeField61 = chronology58.clockhourOfDay();
        org.joda.time.DurationField durationField62 = durationFieldType31.getField(chronology58);
        int int63 = period29.indexOf(durationFieldType31);
        org.joda.time.Period period65 = period29.plusMillis(124);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "minutes" + "'", str32, "minutes");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test13545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13545");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfYear();
        org.joda.time.DurationField durationField28 = chronology24.seconds();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test13546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13546");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
        org.joda.time.LocalDate localDate7 = localDate1.withYearOfEra((int) '#');
        org.joda.time.LocalDate.Property property8 = localDate1.monthOfYear();
        org.joda.time.LocalDate localDate10 = localDate1.withYear(53654);
        org.joda.time.LocalDate.Property property11 = localDate10.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = property11.addToCopy(53773647);
        int int14 = localDate13.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = localDate13.getField(475200000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 475200000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1084244 + "'", int14 == 1084244);
    }

    @Test
    public void test13547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13547");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalTime localTime14 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = property11.getLocalTime();
        org.joda.time.LocalTime localTime17 = localTime15.plusMinutes(292278993);
        org.joda.time.LocalTime localTime19 = localTime17.plusHours(72000967);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test13548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13548");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.Chronology chronology2 = dateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.hourOfHalfday();
        org.joda.time.DurationField durationField4 = chronology2.minutes();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test13549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13549");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime3, periodType4);
        org.joda.time.LocalTime localTime7 = localTime2.minusSeconds((int) (short) 100);
        boolean boolean8 = localTime1.equals((java.lang.Object) (short) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime15 = dateTime12.toLocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16);
        int int18 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime16);
        org.joda.time.LocalTime localTime20 = localTime16.minusMillis((int) (short) 100);
        org.joda.time.LocalTime localTime22 = localTime20.plusMinutes(354);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test13550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13550");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        java.util.Calendar.Builder builder13 = builder4.setTimeOfDay((-51), 12, 53764795, 926);
        java.util.Locale locale17 = new java.util.Locale("15:59:00.999", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "months");
        java.lang.String str18 = locale17.getDisplayCountry();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = locale19.stripExtensions();
        java.lang.String str22 = locale17.getDisplayName(locale21);
        java.lang.String str23 = locale17.getLanguage();
        java.util.Calendar.Builder builder24 = builder13.setLocale(locale17);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals(locale17.toString(), "15:59:00.999_2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z_months");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" + "'", str18, "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)" + "'", str22, "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "15:59:00.999" + "'", str23, "15:59:00.999");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test13551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13551");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(478);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(53);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(52);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusYears(405);
        int int26 = localDateTime25.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 72001053 + "'", int26 == 72001053);
    }

    @Test
    public void test13552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13552");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withField(dateTimeFieldType8, 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withHourOfDay(0);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime.Property property24 = dateTime18.millisOfDay();
        org.joda.time.DateTime dateTime25 = property24.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int32 = localDateTime31.getEra();
        int int33 = property24.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime17, (org.joda.time.ReadablePartial) localDateTime31, periodType34);
        org.joda.time.Period period36 = new org.joda.time.Period((long) 21, (long) 2, periodType34);
        int int37 = period36.getWeeks();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime43 = dateTime38.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property46 = dateTime45.era();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Period period51 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime52 = dateTime47.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime54.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime54.toDateTime(dateTimeZone58);
        int int60 = dateTime47.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = interval63.isAfter((long) 10);
        org.joda.time.Duration duration66 = interval63.toDuration();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = interval69.isAfter((long) 10);
        org.joda.time.Duration duration72 = interval69.toDuration();
        org.joda.time.Duration duration74 = duration66.withDurationAdded((org.joda.time.ReadableDuration) duration72, (int) '4');
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration66);
        mutableInterval44.setDurationAfterStart((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Days days77 = duration66.toStandardDays();
        org.joda.time.DateTime dateTime79 = dateTime43.withPeriodAdded((org.joda.time.ReadablePeriod) days77, (int) ' ');
        org.joda.time.DateTime dateTime81 = dateTime43.minusMillis(56739);
        org.joda.time.Duration duration82 = period36.toDurationTo((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 969 + "'", int57 == 969);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(days77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(duration82);
    }

    @Test
    public void test13553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13553");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(readableInstant0, readableDuration1);
    }

    @Test
    public void test13554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13554");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-61977518064550L));
        org.joda.time.LocalDate.Property property2 = localDate1.weekOfWeekyear();
        org.joda.time.LocalDate localDate3 = property2.withMaximumValue();
        int int4 = property2.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test13555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13555");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        timeZone18.setRawOffset((int) '4');
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder26 = builder22.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder30 = builder26.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(10L, chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = dateTime33.get(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusWeeks(4);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        java.util.TimeZone timeZone40 = calendar39.getTimeZone();
        java.util.Calendar.Builder builder41 = builder26.setTimeZone(timeZone40);
        timeZone40.setRawOffset((int) '4');
        boolean boolean44 = timeZone18.hasSameRules(timeZone40);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone18);
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale47 = java.util.Locale.ROOT;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        java.util.Locale.setDefault(locale46);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone18, locale46);
        boolean boolean51 = timeZone18.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone18);
        java.lang.Object obj53 = timeZone18.clone();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645455791003,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=11,MILLISECOND=55,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645455791003,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=11,MILLISECOND=55,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj53);
// flaky:         org.junit.Assert.assertEquals(obj53.toString(), "java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test13556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13556");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((-1));
        org.joda.time.Duration duration20 = org.joda.time.Duration.millis((long) (short) -1);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration20);
        long long22 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration20);
        long long23 = duration20.getMillis();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) (byte) 1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime28 = property26.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test13557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13557");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        int int19 = durationField16.getDifference((long) 2, (long) (-1));
        long long22 = durationField16.add((-36732196798107L), (-2016L));
        // The following exception was thrown during execution in test generation
        try {
            long long25 = durationField16.subtract((long) 839403, 1641600135L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -164160013500");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-6398613719998107L) + "'", long22 == (-6398613719998107L));
    }

    @Test
    public void test13558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13558");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale7 = new java.util.Locale("", "hi!");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale8);
        java.lang.String str10 = locale7.getDisplayScript(locale8);
        java.util.Calendar.Builder builder11 = builder4.setLocale(locale7);
        java.util.Set<java.lang.String> strSet12 = locale7.getUnicodeLocaleKeys();
        java.lang.String str13 = locale7.getCountry();
        java.util.Set<java.lang.String> strSet14 = locale7.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withField(dateTimeFieldType21, 100);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withField(dateTimeFieldType30, 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime29.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int38 = localDateTime37.getSecondOfMinute();
        int int39 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.withField(dateTimeFieldType48, 100);
        org.joda.time.Period period51 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime41, (org.joda.time.ReadablePartial) localDateTime50);
        int int52 = localDateTime41.getDayOfYear();
        org.joda.time.LocalDateTime.Property property53 = localDateTime41.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime55 = property53.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime56 = property53.roundHalfEvenCopy();
        boolean boolean57 = strSet14.contains((java.lang.Object) localDateTime56);
        org.joda.time.Chronology chronology58 = localDateTime56.getChronology();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "HI!" + "'", str13, "HI!");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 132 + "'", int52 == 132);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
    }

    @Test
    public void test13559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13559");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.lang.Object obj2 = dateFormatSymbols1.clone();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols1.setMonths(strArray9);
        java.lang.String[][] strArray11 = new java.lang.String[][] {};
        dateFormatSymbols1.setZoneStrings(strArray11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols14 = new java.text.DateFormatSymbols(locale13);
        java.lang.String[] strArray15 = dateFormatSymbols14.getMonths();
        java.lang.String[] strArray16 = dateFormatSymbols14.getAmPmStrings();
        dateFormatSymbols1.setShortWeekdays(strArray16);
        java.text.DateFormatSymbols dateFormatSymbols18 = java.text.DateFormatSymbols.getInstance();
        java.lang.String[] strArray19 = dateFormatSymbols18.getMonths();
        java.lang.String[] strArray20 = dateFormatSymbols18.getMonths();
        java.lang.String[] strArray21 = dateFormatSymbols18.getAmPmStrings();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols23 = new java.text.DateFormatSymbols(locale22);
        java.lang.Object obj24 = dateFormatSymbols23.clone();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols23.setMonths(strArray31);
        java.lang.String[] strArray33 = dateFormatSymbols23.getWeekdays();
        java.lang.String[][] strArray34 = dateFormatSymbols23.getZoneStrings();
        dateFormatSymbols18.setZoneStrings(strArray34);
        dateFormatSymbols1.setZoneStrings(strArray34);
        java.lang.String[][] strArray37 = dateFormatSymbols1.getZoneStrings();
        java.lang.String[] strArray38 = dateFormatSymbols1.getWeekdays();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(dateFormatSymbols18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
    }

    @Test
    public void test13560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13560");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime4.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime12 = dateTime10.plus((long) (byte) 10);
        int int13 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime12);
        boolean boolean15 = dateTime12.isBefore((-1L));
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfYear();
        int int17 = dateTime12.getMinuteOfHour();
        org.joda.time.DateTime.Property property18 = dateTime12.dayOfYear();
        org.joda.time.Chronology chronology19 = dateTime12.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test13561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13561");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTime.Property property7 = dateTime5.monthOfYear();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.setLanguage("minutes");
        java.util.Locale locale11 = builder8.build();
        java.util.Locale locale14 = new java.util.Locale("", "hi!");
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale15);
        java.lang.String str17 = locale14.getDisplayScript(locale15);
        java.lang.String str18 = locale11.getDisplayCountry(locale14);
        java.lang.String str19 = property7.getAsShortText(locale11);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale11);
        calendar20.setLenient(true);
        java.lang.String str23 = calendar20.getCalendarType();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromCalendarFields(calendar20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField26 = localTime24.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 969 + "'", int3 == 969);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "minutes");
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Feb" + "'", str19, "Feb");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645455791111,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=11,MILLISECOND=163,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "gregory" + "'", str23, "gregory");
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test13562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13562");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(99);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes(53657);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withYearOfEra(1920);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test13563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13563");
        org.joda.time.Period period1 = org.joda.time.Period.millis(251);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test13564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13564");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period4 = period3.negated();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.weeks();
        int int6 = period3.get(durationFieldType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.Interval interval11 = interval9.toInterval();
        boolean boolean13 = interval9.contains((long) 1970);
        org.joda.time.Interval interval14 = interval9.toInterval();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        boolean boolean20 = interval14.abuts((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Chronology chronology21 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.DurationField durationField24 = durationFieldType5.getField(chronology21);
        java.lang.String str25 = durationField24.toString();
        java.lang.String str26 = durationField24.getName();
        boolean boolean27 = durationField24.isSupported();
        long long28 = durationField24.getUnitMillis();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DurationField[weeks]" + "'", str25, "DurationField[weeks]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weeks" + "'", str26, "weeks");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 604800000L + "'", long28 == 604800000L);
    }

    @Test
    public void test13565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13565");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder17 = builder13.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale20 = new java.util.Locale("", "hi!");
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale20.getDisplayScript(locale21);
        java.util.Calendar.Builder builder24 = builder17.setLocale(locale20);
        org.joda.time.LocalTime localTime25 = property11.setCopy("70", locale20);
        org.joda.time.LocalTime localTime26 = property11.roundCeilingCopy();
        org.joda.time.LocalTime.Property property27 = localTime26.secondOfMinute();
        int int28 = localTime26.getHourOfDay();
        org.joda.time.LocalTime localTime30 = localTime26.withHourOfDay(18);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalTime localTime32 = localTime30.plus(readablePeriod31);
        org.joda.time.LocalTime localTime34 = localTime32.plusHours(104);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test13566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13566");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(69);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationFrom(readableInstant7);
        int int9 = period6.getHours();
        org.joda.time.Period period11 = period6.withYears(0);
        org.joda.time.LocalDate localDate13 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period6, (int) (short) 10);
        org.joda.time.LocalDate localDate15 = localDate13.withWeekyear((int) 'x');
        org.joda.time.LocalDate localDate17 = localDate13.plusDays(0);
        org.joda.time.LocalDate localDate19 = localDate13.minusDays((int) (short) -1);
        org.joda.time.LocalDate localDate21 = localDate13.plusWeeks(536);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = localDate13.withEra(248086830);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 248086830 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test13567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13567");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime12 = dateTime6.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime14 = dateTime12.plus((long) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period21 = period5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutablePeriod mutablePeriod22 = period5.toMutablePeriod();
        int int23 = period5.size();
        org.joda.time.Period period24 = period5.negated();
        org.joda.time.Period period26 = period24.withWeeks(0);
        int int27 = period24.size();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
    }

    @Test
    public void test13568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13568");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime(chronology21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localTime24, periodType25);
        org.joda.time.LocalTime localTime28 = localTime24.withMillisOfSecond(4);
        int[] intArray30 = chronology21.get((org.joda.time.ReadablePartial) localTime24, (long) 0);
        org.joda.time.Chronology chronology31 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfYear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols37 = new java.text.DateFormatSymbols(locale36);
        java.lang.String str38 = locale33.getDisplayVariant(locale36);
        int int39 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str40 = locale6.getDisplayLanguage(locale33);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setLanguage("minutes");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale locale45 = builder41.build();
        java.lang.String str46 = locale6.getDisplayScript(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withLocale(locale45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean50 = dateTimeZone49.isFixed();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 2, dateTimeZone49);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeUtils.getZone(dateTimeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        boolean boolean55 = dateTimeZone53.isFixed();
        int int57 = dateTimeZone53.getStandardOffset((long) (short) 10);
        java.lang.String str58 = dateTimeZone53.getID();
        int int60 = dateTimeZone53.getOffsetFromLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter47.withZone(dateTimeZone53);
        boolean boolean62 = dateTimeFormatter47.isOffsetParsed();
        boolean boolean63 = dateTimeFormatter47.isParser();
        java.lang.Integer int64 = dateTimeFormatter47.getPivotYear();
        org.joda.time.format.DateTimeParser dateTimeParser65 = dateTimeFormatter47.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(intArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.001" + "'", str58, "+00:00:00.001");
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(int64);
        org.junit.Assert.assertNull(dateTimeParser65);
    }

    @Test
    public void test13569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13569");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property3 = dateTime1.millisOfDay();
        int int4 = dateTime1.getYearOfEra();
        org.joda.time.DateTime.Property property5 = dateTime1.centuryOfEra();
        org.joda.time.DateTime dateTime7 = dateTime1.plusWeeks(100);
        org.joda.time.DateTime.Property property8 = dateTime1.secondOfMinute();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime10 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfWeek();
        org.joda.time.LocalDate localDate15 = localDate12.plusWeeks(69);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = period17.toDurationFrom(readableInstant18);
        int int20 = period17.getHours();
        org.joda.time.Period period22 = period17.withYears(0);
        org.joda.time.LocalDate localDate24 = localDate12.withPeriodAdded((org.joda.time.ReadablePeriod) period17, (int) (short) 10);
        org.joda.time.LocalDate localDate26 = localDate24.withWeekyear((int) 'x');
        org.joda.time.LocalDate localDate28 = localDate24.plusDays(0);
        org.joda.time.LocalDate localDate30 = localDate24.plusMonths(52);
        java.lang.Object obj31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(obj31);
        org.joda.time.Period period34 = period32.plusWeeks((int) (byte) 1);
        org.joda.time.Period period36 = period34.plusWeeks(335);
        org.joda.time.LocalDate localDate38 = localDate30.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 866);
        org.joda.time.Period period40 = period34.withWeeks(57540999);
        org.joda.time.Period period42 = period34.withMillis(28);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) period42);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test13570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13570");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        int int18 = dateTimeField17.getMinimumValue();
        java.lang.String str20 = dateTimeField17.getAsText(1645455374571L);
        long long22 = dateTimeField17.roundHalfCeiling(2272131059529600000L);
        long long24 = dateTimeField17.roundFloor(4249396800000L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "8" + "'", str20, "8");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2272131059529599999L + "'", long22 == 2272131059529599999L);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4249065599999L + "'", long24 == 4249065599999L);
    }

    @Test
    public void test13571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13571");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        boolean boolean7 = interval5.isAfter((long) 10);
        org.joda.time.Duration duration8 = interval5.toDuration();
        org.joda.time.Chronology chronology9 = interval5.getChronology();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology9);
        org.joda.time.Period period12 = org.joda.time.Period.seconds(99);
        long long15 = chronology9.add((org.joda.time.ReadablePeriod) period12, (long) 53657, 0);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 1, chronology9);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withField(dateTimeFieldType24, 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int32 = localDateTime31.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime35 = property33.addWrapFieldToCopy(99);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property38.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime41 = localTime17.withField(dateTimeFieldType39, 294);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 53657L + "'", long15 == 53657L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
    }

    @Test
    public void test13572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13572");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int20 = calendar8.getMinimum((int) (short) 1);
        calendar8.roll(7, false);
        int int24 = calendar8.getWeekYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-62142887209990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=284,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=10,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test13573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13573");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalTime localTime14 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = property11.getLocalTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTime(dateTimeZone29);
        int int31 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        org.joda.time.Duration duration45 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '4');
        org.joda.time.DateTime dateTime46 = dateTime18.minus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime dateTime47 = dateTime46.withEarlierOffsetAtOverlap();
        int int48 = property11.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalTime localTime49 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime50 = property11.withMinimumValue();
        org.joda.time.LocalTime localTime52 = property11.addWrapFieldToCopy(3);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType54 = periodType53.withMillisRemoved();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.millis();
        int int56 = periodType53.indexOf(durationFieldType55);
        org.joda.time.LocalTime localTime58 = localTime52.withFieldAdded(durationFieldType55, 2154);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval59 = new org.joda.time.Interval((java.lang.Object) localTime58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 969 + "'", int28 == 969);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(localTime58);
    }

    @Test
    public void test13574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13574");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(10L, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTime dateTime9 = dateTime5.plusWeeks(4);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Calendar calendar11 = dateTime9.toCalendar(locale10);
        java.lang.String str12 = locale10.getVariant();
        java.lang.String str13 = locale10.getDisplayLanguage();
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str17 = nameProvider0.getShortName(locale14, "Property[era]", "Etc/UTC");
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Period period23 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime24 = dateTime19.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.era();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime32 = dateTime27.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime34 = dateTime19.toDateTime(chronology33);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime35, (org.joda.time.ReadablePartial) localTime36, periodType37);
        org.joda.time.LocalTime localTime40 = localTime36.withMillisOfSecond(4);
        int[] intArray42 = chronology33.get((org.joda.time.ReadablePartial) localTime36, (long) 0);
        org.joda.time.Chronology chronology43 = chronology33.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfYear();
        int int46 = dateTimeField44.getLeapAmount(378691200010L);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(10L, chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        int int51 = dateTime49.get(dateTimeFieldType50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusWeeks(4);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Calendar calendar55 = dateTime53.toCalendar(locale54);
        java.lang.String str56 = locale54.getDisplayVariant();
        java.util.Set<java.lang.String> strSet57 = locale54.getUnicodeLocaleKeys();
        int int58 = dateTimeField44.getMaximumTextLength(locale54);
        java.util.Locale.setDefault(category18, locale54);
        java.lang.String str62 = nameProvider0.getName(locale54, "2022-02-21T14:53:58.179Z/2022-02-21T14:53:58.179Z", "secondOfDay");
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder65 = builder63.setLanguage("minutes");
        java.util.Locale.Builder builder66 = builder63.clear();
        java.util.Locale locale67 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder68 = builder66.setLocale(locale67);
        java.util.Locale locale69 = builder68.build();
        java.lang.String str70 = locale69.getISO3Language();
        java.lang.String str73 = nameProvider0.getName(locale69, "PT0.035S", "86399999");
        java.lang.String str74 = locale69.getDisplayName();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "zho" + "'", str70, "zho");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Chinese (China)" + "'", str74, "Chinese (China)");
    }

    @Test
    public void test13575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13575");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.clear(16);
        long long14 = calendar8.getTimeInMillis();
        int int16 = calendar8.getMinimum(7);
        java.time.Instant instant17 = calendar8.toInstant();
        calendar8.set(0, 723, 349, 75241893, 0, (-18092558));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=723,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=349,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=75241893,MINUTE=0,SECOND=-18092558,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2419200010L + "'", long14 == 2419200010L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(instant17);
    }

    @Test
    public void test13576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13576");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime.Property property11 = dateTime5.property(dateTimeFieldType9);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime5.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.DateTime.Property property18 = dateTime17.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        long long22 = dateTimeZone19.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) dateTime17, dateTimeZone19);
        long long27 = dateTimeZone19.convertLocalToUTC(35L, false, 1L);
        java.lang.String str29 = dateTimeZone19.getName((long) 12);
        org.joda.time.DateTime dateTime30 = dateTime5.toDateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property31 = dateTime5.dayOfMonth();
        java.lang.String str32 = property31.toString();
        org.joda.time.DateTime dateTime33 = property31.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis(21093251);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 378691200010L + "'", long22 == 378691200010L);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 34L + "'", long27 == 34L);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.001" + "'", str29, "+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[dayOfMonth]" + "'", str32, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test13577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13577");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(53960, 74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53960 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13578");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType1 = periodType0.withHoursRemoved();
        org.joda.time.PeriodType periodType2 = periodType0.withHoursRemoved();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime5.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = dateTime5.minusMinutes(53633080);
        org.joda.time.Period period12 = org.joda.time.Period.seconds(99);
        org.joda.time.Period period14 = period12.multipliedBy(478);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime10.getZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime30 = dateTime25.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = dateTime17.toDateTime(chronology31);
        org.joda.time.DateTime dateTime33 = dateTime10.toDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.Period period35 = new org.joda.time.Period(27424253L, (-61977571197804L), chronology31);
        org.joda.time.DateTimeField dateTimeField36 = chronology31.dayOfYear();
        org.joda.time.DateTimeField dateTimeField37 = chronology31.weekOfWeekyear();
        boolean boolean38 = periodType2.equals((java.lang.Object) dateTimeField37);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test13579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13579");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfYear();
        org.joda.time.DurationField durationField28 = chronology24.seconds();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.clockhourOfHalfday();
        long long32 = dateTimeField29.add(1728000002L, (-259200000L));
        java.lang.String str33 = dateTimeField29.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-933118271999998L) + "'", long32 == (-933118271999998L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DateTimeField[clockhourOfHalfday]" + "'", str33, "DateTimeField[clockhourOfHalfday]");
    }

    @Test
    public void test13580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13580");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone14);
        int int16 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.Duration duration30 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) '4');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration22);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        long long33 = mutableInterval0.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean36 = dateTimeZone35.isFixed();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 2, dateTimeZone35);
        long long41 = dateTimeZone35.convertLocalToUTC((long) 10, false, (long) 1);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone35);
        boolean boolean43 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Interval interval48 = interval46.toInterval();
        boolean boolean50 = interval46.contains((long) 1970);
        org.joda.time.Interval interval51 = interval46.toInterval();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = interval54.isAfter((long) 10);
        boolean boolean57 = interval51.abuts((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Interval interval58 = interval54.toInterval();
        long long59 = interval54.getStartMillis();
        org.joda.time.Interval interval60 = interval54.toInterval();
        boolean boolean61 = mutableInterval0.isAfter((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Interval interval63 = interval60.withStartMillis((long) 11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval65 = interval60.withEndMillis(1645455618280L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 969 + "'", int13 == 969);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 9L + "'", long41 == 9L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645459782311L + "'", long59 == 1645459782311L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval63);
    }

    @Test
    public void test13581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13581");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        long long3 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        org.joda.time.Duration duration4 = duration1.toDuration();
        long long5 = duration4.getMillis();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 10, chronology7);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime dateTime12 = dateTime8.withMillisOfSecond(2);
        org.joda.time.DateTime dateTime14 = dateTime8.withDayOfYear(335);
        org.joda.time.DateTime.Property property15 = dateTime8.dayOfMonth();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test13582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13582");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int6 = localDateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear(2);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTime(dateTimeZone23);
        int int25 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.Duration duration39 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) '4');
        org.joda.time.DateTime dateTime40 = dateTime12.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime8.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime.Property property42 = localDateTime8.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime44 = property42.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 969 + "'", int22 == 969);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test13583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13583");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
    }

    @Test
    public void test13584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13584");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime.Property property12 = localTime10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalTime localTime14 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property12.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime16 = property12.withMaximumValue();
        int int17 = property12.getLeapAmount();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test13585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13585");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 57540045);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test13586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13586");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Interval interval14 = interval10.toInterval();
        long long15 = interval10.getStartMillis();
        org.joda.time.Interval interval16 = interval10.toInterval();
        org.joda.time.DateTime dateTime17 = interval10.getStart();
        org.joda.time.tz.NameProvider nameProvider18 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = new java.util.Locale("", "hi!");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale21.getDisplayScript(locale22);
        boolean boolean25 = locale22.hasExtensions();
        java.text.DateFormatSymbols dateFormatSymbols26 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale22);
        java.lang.String str29 = nameProvider18.getShortName(locale22, "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]", "53651546");
        boolean boolean30 = interval10.equals((java.lang.Object) locale22);
        java.lang.String str31 = locale22.getISO3Country();
        java.lang.String str32 = locale22.getDisplayVariant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645459782311L + "'", long15 == 1645459782311L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(nameProvider18);
        org.junit.Assert.assertEquals(locale21.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateFormatSymbols26);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test13587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13587");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.secondOfMinute();
        boolean boolean9 = dateTimeField7.isLeap(1645455391425L);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = dateTimeField7.getDifference((-61977517238262L), 1645455581275L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -63622972819");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test13588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13588");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        java.util.Calendar.Builder builder20 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder24 = builder20.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder28 = builder24.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(10L, chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusWeeks(4);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        java.util.TimeZone timeZone38 = calendar37.getTimeZone();
        java.util.Calendar.Builder builder39 = builder24.setTimeZone(timeZone38);
        int int40 = timeZone38.getRawOffset();
        java.lang.String str41 = timeZone38.getID();
        java.util.Calendar.Builder builder42 = builder4.setTimeZone(timeZone38);
        int int44 = timeZone38.getOffset(52L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId45 = timeZone38.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: +00:00:00.001");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.001" + "'", str41, "+00:00:00.001");
        org.junit.Assert.assertNotNull(builder42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test13589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13589");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        java.lang.String str4 = interval2.toString();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime15.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTime(dateTimeZone19);
        int int21 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.Duration duration35 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) '4');
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration27);
        mutableInterval5.setDurationAfterStart((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval38 = interval2.overlap((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTime dateTime39 = interval2.getEnd();
        int int40 = dateTime39.getDayOfYear();
        org.joda.time.DateTime dateTime42 = dateTime39.minusMinutes(53661);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        long long46 = dateTimeZone44.convertUTCToLocal(426L);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime47, (org.joda.time.ReadablePartial) localTime48, periodType49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime57 = dateTime51.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime59 = dateTime57.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime60 = localTime47.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime.Property property61 = dateTime57.year();
        org.joda.time.DateTime dateTime62 = property61.withMinimumValue();
        org.joda.time.DateTime.Property property63 = dateTime62.millisOfDay();
        boolean boolean64 = dateTimeZone44.equals((java.lang.Object) dateTime62);
        long long66 = dateTimeZone44.nextTransition((long) 15);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(99L, dateTimeZone44);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime67);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001" + "'", str4, "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 969 + "'", int18 == 969);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 52 + "'", int40 == 52);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 427L + "'", long46 == 427L);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 15L + "'", long66 == 15L);
    }

    @Test
    public void test13590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13590");
        org.joda.time.Period period1 = org.joda.time.Period.years(0);
        org.joda.time.PeriodType periodType2 = period1.getPeriodType();
        java.lang.String str3 = periodType2.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PeriodType[Standard]" + "'", str3, "PeriodType[Standard]");
    }

    @Test
    public void test13591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13591");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        int int20 = property19.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = property19.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test13592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13592");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.Period period5 = period1.plusDays((int) '#');
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period7 = period5.normalizedStandard(periodType6);
        int int8 = period5.getHours();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test13593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13593");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.years();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime19 = dateTime14.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime22.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime29 = dateTime14.toDateTime(chronology28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime30, (org.joda.time.ReadablePartial) localTime31, periodType32);
        org.joda.time.LocalTime localTime35 = localTime31.withMillisOfSecond(4);
        int[] intArray37 = chronology28.get((org.joda.time.ReadablePartial) localTime31, (long) 0);
        org.joda.time.DateTimeField dateTimeField38 = chronology28.weekyearOfCentury();
        long long40 = dateTimeField38.roundFloor(100L);
        java.lang.String str42 = dateTimeField38.getAsShortText((long) (byte) 100);
        long long45 = dateTimeField38.add((long) (short) 1, (long) 53623795);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(35L, chronology47);
        int int49 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) localTime48);
        org.joda.time.LocalTime localTime51 = localTime48.withHourOfDay((int) (byte) 0);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localTime48, locale52);
        int int54 = localTime48.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L) + "'", long40 == (-1L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "70" + "'", str42, "70");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1692203524934400001L + "'", long45 == 1692203524934400001L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "AM" + "'", str53, "AM");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test13594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13594");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType2 = periodType1.withYearsRemoved();
        org.joda.time.Period period3 = new org.joda.time.Period(66788236813948L, periodType2);
        java.lang.String str4 = periodType2.toString();
        org.joda.time.PeriodType periodType5 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PeriodType[Days]" + "'", str4, "PeriodType[Days]");
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test13595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13595");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withField(dateTimeFieldType21, 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusMonths(5);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfYear();
        org.joda.time.Duration duration34 = org.joda.time.Duration.millis((long) (short) -1);
        long long35 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration34);
        long long36 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.toDuration();
        long long38 = duration37.getMillis();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime28.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime13.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime40);
        int int42 = localDateTime41.getDayOfWeek();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localDateTime41.getFieldTypes();
        org.joda.time.Duration duration45 = org.joda.time.Duration.millis((long) (short) -1);
        long long46 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration45);
        long long47 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime53 = dateTime48.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Period period55 = period52.plusMonths(16);
        org.joda.time.PeriodType periodType56 = period55.getPeriodType();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = interval59.getEnd();
        org.joda.time.Interval interval61 = interval59.toInterval();
        org.joda.time.Period period62 = interval59.toPeriod();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        boolean boolean67 = interval65.isAfter((long) 10);
        org.joda.time.Duration duration68 = interval65.toDuration();
        boolean boolean69 = interval59.abuts((org.joda.time.ReadableInterval) interval65);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime73);
        boolean boolean76 = interval74.isAfter((long) 10);
        org.joda.time.Duration duration77 = interval74.toDuration();
        org.joda.time.Chronology chronology78 = interval74.getChronology();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology78);
        org.joda.time.Chronology chronology80 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval79);
        org.joda.time.Interval interval81 = interval59.withChronology(chronology80);
        org.joda.time.DurationField durationField82 = chronology80.centuries();
        org.joda.time.Period period83 = duration45.toPeriod(periodType56, chronology80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime41.minus((org.joda.time.ReadableDuration) duration45);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1L) + "'", long38 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(localDateTime84);
    }

    @Test
    public void test13596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13596");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("99", "");
        java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("Sun");
        java.util.Locale.Builder builder9 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.removeUnicodeLocaleAttribute("15:02:12.396");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 15:02:12.396 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test13597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13597");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(69);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationFrom(readableInstant7);
        int int9 = period6.getHours();
        org.joda.time.Period period11 = period6.withYears(0);
        org.joda.time.LocalDate localDate13 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period6, (int) (short) 10);
        org.joda.time.LocalDate localDate15 = localDate13.withWeekyear((int) 'x');
        org.joda.time.LocalDate localDate17 = localDate13.plusDays(0);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        int int19 = localDate17.getWeekyear();
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property21 = localDate17.weekyear();
        java.lang.String str22 = property21.getAsText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970" + "'", str22, "1970");
    }

    @Test
    public void test13598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13598");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) localDateTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test13599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13599");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.MutableInterval mutableInterval6 = interval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.toDateTime(dateTimeZone21);
        int int23 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        org.joda.time.Duration duration35 = interval32.toDuration();
        org.joda.time.Duration duration37 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) '4');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration29);
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval7.copy();
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval7.copy();
        boolean boolean42 = interval2.isAfter((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long46 = mutableInterval45.toDurationMillis();
        mutableInterval45.setInterval((long) 14, (long) '4');
        mutableInterval41.setInterval((org.joda.time.ReadableInterval) mutableInterval45);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(10L, chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(10L, chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        int int58 = dateTime56.get(dateTimeFieldType57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean60 = dateTime56.isSupported(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getDurationType();
        boolean boolean62 = dateTime53.equals((java.lang.Object) durationFieldType61);
        org.joda.time.DateTime dateTime64 = dateTime53.plusMillis(762);
        boolean boolean65 = mutableInterval45.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property66 = dateTime53.secondOfDay();
        org.joda.time.DateTime dateTime67 = property66.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 969 + "'", int20 == 969);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 426L + "'", long46 == 426L);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test13600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13600");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.MutableInterval mutableInterval6 = interval2.toMutableInterval();
        boolean boolean7 = mutableInterval6.containsNow();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = interval10.getEnd();
        org.joda.time.Interval interval12 = interval10.toInterval();
        boolean boolean14 = interval10.contains((long) 1970);
        org.joda.time.Interval interval15 = interval10.toInterval();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.Period period21 = period19.minusDays(10);
        org.joda.time.Duration duration22 = period19.toStandardDuration();
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis((long) (short) -1);
        long long25 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration24);
        long long26 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = duration22.minus((org.joda.time.ReadableDuration) duration24);
        long long28 = duration22.getStandardDays();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType30 = periodType29.withHoursRemoved();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property32 = dateTime31.era();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime33.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTimeField dateTimeField40 = chronology39.halfdayOfDay();
        org.joda.time.DurationField durationField41 = chronology39.minutes();
        org.joda.time.DurationField durationField42 = chronology39.years();
        org.joda.time.Period period43 = duration22.toPeriod(periodType30, chronology39);
        int int44 = periodType30.size();
        org.joda.time.Period period45 = interval15.toPeriod(periodType30);
        java.util.Date date51 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        int int52 = date51.getMinutes();
        int int53 = date51.getSeconds();
        java.lang.Object obj54 = date51.clone();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = interval57.getEnd();
        org.joda.time.Interval interval59 = interval57.toInterval();
        org.joda.time.Period period60 = interval57.toPeriod();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = interval63.isAfter((long) 10);
        org.joda.time.Duration duration66 = interval63.toDuration();
        boolean boolean67 = interval57.abuts((org.joda.time.ReadableInterval) interval63);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime();
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = interval72.isAfter((long) 10);
        org.joda.time.Duration duration75 = interval72.toDuration();
        org.joda.time.Chronology chronology76 = interval72.getChronology();
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology76);
        org.joda.time.Chronology chronology78 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval77);
        org.joda.time.Interval interval79 = interval57.withChronology(chronology78);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(obj54, chronology78);
        boolean boolean81 = periodType30.equals((java.lang.Object) dateTime80);
        org.joda.time.PeriodType periodType82 = periodType30.withWeeksRemoved();
        org.joda.time.PeriodType periodType83 = periodType82.withMonthsRemoved();
        org.joda.time.Period period84 = mutableInterval6.toPeriod(periodType82);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(period45);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(obj54);
// flaky:         org.junit.Assert.assertEquals(obj54.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "Fri Feb 04 01:10:00 GMT+00:00 8039");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period84);
    }

    @Test
    public void test13601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13601");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property3 = dateTime2.era();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime9 = dateTime4.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyear();
        boolean boolean14 = dateTimeFieldType0.isSupported(chronology10);
        org.joda.time.DurationField durationField15 = chronology10.hours();
        long long16 = durationField15.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3600000L + "'", long16 == 3600000L);
    }

    @Test
    public void test13602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13602");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 17);
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.parse("53625817-02-22T14:59:24.796Z/53625817-02-22T14:59:24.796Z", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
    }

    @Test
    public void test13603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13603");
        java.util.Locale locale1 = new java.util.Locale("Mon Jun 10 05:00:00 UTC 4086");
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "mon jun 10 05:00:00 utc 4086");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test13604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13604");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.plus((long) (byte) 10);
        org.joda.time.DateTime.Property property9 = dateTime8.monthOfYear();
        long long10 = dateTime8.getMillis();
        int int11 = dateTime8.getDayOfMonth();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        boolean boolean16 = interval14.isAfter((long) 10);
        boolean boolean17 = interval14.containsNow();
        long long18 = interval14.toDurationMillis();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(10L, chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = dateTime23.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusWeeks(4);
        boolean boolean28 = periodType20.equals((java.lang.Object) dateTime27);
        int int29 = periodType20.size();
        org.joda.time.PeriodType periodType30 = periodType20.withMillisRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 12, periodType20);
        org.joda.time.Interval interval32 = interval14.withPeriodAfterStart((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime8.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period38 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime39 = dateTime34.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period46 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime47 = dateTime42.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime49 = dateTime34.toDateTime(chronology48);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime50, (org.joda.time.ReadablePartial) localTime51, periodType52);
        org.joda.time.LocalTime localTime55 = localTime51.withMillisOfSecond(4);
        int[] intArray57 = chronology48.get((org.joda.time.ReadablePartial) localTime51, (long) 0);
        org.joda.time.Chronology chronology58 = chronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfYear();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 8);
        long long64 = chronology58.add((org.joda.time.ReadablePeriod) period61, (long) 17, 11);
        org.joda.time.Period period65 = period31.plus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period67 = period61.minusDays((int) (short) 10);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-61977513017679L) + "'", long10 == (-61977513017679L));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 105L + "'", long64 == 105L);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    public void test13605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13605");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Calendar.Builder builder6 = builder0.setLocale(locale5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime(chronology21);
        org.joda.time.DurationField durationField23 = chronology21.centuries();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int32 = localDateTime31.getEra();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withYear(2);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfWeek();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property37 = dateTime36.era();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime43 = dateTime38.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime45.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTime(dateTimeZone49);
        int int51 = dateTime38.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = interval54.isAfter((long) 10);
        org.joda.time.Duration duration57 = interval54.toDuration();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        boolean boolean62 = interval60.isAfter((long) 10);
        org.joda.time.Duration duration63 = interval60.toDuration();
        org.joda.time.Duration duration65 = duration57.withDurationAdded((org.joda.time.ReadableDuration) duration63, (int) '4');
        org.joda.time.DateTime dateTime66 = dateTime38.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime34.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusMonths(53640079);
        java.util.Locale locale70 = java.util.Locale.US;
        java.lang.String str71 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime67, locale70);
        java.lang.String str72 = locale5.getDisplayLanguage(locale70);
        java.lang.String str73 = locale70.getCountry();
        java.util.Set<java.lang.String> strSet74 = locale70.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 969 + "'", int48 == 969);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Sun" + "'", str71, "Sun");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Chinese" + "'", str72, "Chinese");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "US" + "'", str73, "US");
        org.junit.Assert.assertNotNull(strSet74);
    }

    @Test
    public void test13606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13606");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.weekyear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekyear();
        org.joda.time.Period period22 = new org.joda.time.Period((-2016L), chronology18);
        org.joda.time.DateTime dateTime23 = dateTime7.withChronology(chronology18);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = dateTime24.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime24.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int33 = dateTime24.get(dateTimeFieldType32);
        int int34 = dateTime23.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime36 = dateTime23.plusDays((int) (short) 0);
        org.joda.time.DateTime dateTime37 = dateTime36.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime39 = dateTime37.plusYears(49);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 969 + "'", int27 == 969);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test13607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13607");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("P0W");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"P0W\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13608");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        boolean boolean6 = locale4.hasExtensions();
        java.util.Locale.Builder builder7 = builder2.setLocale(locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setUnicodeLocaleKeyword("Property[minuteOfHour]", "+03:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Property[minuteOfHour] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test13609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13609");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        boolean boolean5 = interval2.containsNow();
        long long6 = interval2.toDurationMillis();
        org.joda.time.DateTime dateTime7 = interval2.getEnd();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths(12);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(10L, chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        int int22 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime17.property(dateTimeFieldType21);
        org.joda.time.LocalDate localDate25 = localDate11.withField(dateTimeFieldType21, 1970);
        org.joda.time.Interval interval26 = localDate25.toInterval();
        boolean boolean28 = interval26.contains(1893L);
        long long29 = interval26.getStartMillis();
        org.joda.time.Interval interval30 = interval2.overlap((org.joda.time.ReadableInterval) interval26);
        org.joda.time.DateTime dateTime31 = interval2.getStart();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-86400001L) + "'", long29 == (-86400001L));
        org.junit.Assert.assertNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test13610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13610");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale4);
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        java.lang.String str7 = locale0.getDisplayScript(locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale0);
        java.lang.String str9 = calendar8.getCalendarType();
        long long10 = calendar8.getTimeInMillis();
        int int11 = calendar8.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455792196,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=12,MILLISECOND=248,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "gregory" + "'", str9, "gregory");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645455792196L + "'", long10 == 1645455792196L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test13611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13611");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(132);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        java.util.Locale locale7 = new java.util.Locale("15:59:00.999", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "months");
        java.lang.String str8 = locale7.getDisplayCountry();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale locale11 = locale9.stripExtensions();
        java.lang.String str12 = locale7.getDisplayName(locale11);
        java.lang.String str13 = dateTimeZone2.getName(24L, locale7);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals(locale7.toString(), "15:59:00.999_2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z_months");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" + "'", str8, "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)" + "'", str12, "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+132:00" + "'", str13, "+132:00");
    }

    @Test
    public void test13612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13612");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 10, chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes((int) (byte) 0);
        long long5 = dateTime2.getMillis();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime2.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 10L + "'", long5 == 10L);
        org.junit.Assert.assertNotNull(yearMonthDay6);
    }

    @Test
    public void test13613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13613");
        org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-21T14:56:21.131Z/2022-02-21T14:56:21.131Z");
        org.junit.Assert.assertNotNull(interval1);
    }

    @Test
    public void test13614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13614");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar calendar5 = builder4.build();
        calendar5.setTimeInMillis(100001L);
        calendar5.setLenient(true);
        java.time.Instant instant10 = calendar5.toInstant();
        java.lang.Object obj11 = calendar5.clone();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=100001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=40,MILLISECOND=53,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "java.util.GregorianCalendar[time=100001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=40,MILLISECOND=53,ZONE_OFFSET=52,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "java.util.GregorianCalendar[time=100001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=40,MILLISECOND=53,ZONE_OFFSET=52,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "java.util.GregorianCalendar[time=100001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=40,MILLISECOND=53,ZONE_OFFSET=52,DST_OFFSET=0]");
    }

    @Test
    public void test13615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13615");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet0.clear();
        java.util.Collection<java.lang.String> strCollection2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = strSet0.containsAll(strCollection2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
    }

    @Test
    public void test13616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13616");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.years();
        int int1 = periodType0.size();
        org.joda.time.PeriodType periodType2 = periodType0.withHoursRemoved();
        java.lang.String str3 = periodType0.toString();
        org.joda.time.PeriodType periodType4 = periodType0.withMinutesRemoved();
        int int5 = periodType0.size();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PeriodType[Years]" + "'", str3, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test13617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13617");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        int int4 = localDate3.getMonthOfYear();
        int int5 = localDate3.getEra();
        org.joda.time.LocalDate localDate7 = localDate3.minusYears(2074);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate7.withYearOfCentury(21096493);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21096493 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test13618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13618");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = property17.addToCopy(478);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMillisOfSecond(53);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusMonths(1970);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((-61977571199980L));
        org.joda.time.Instant instant26 = instant25.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = instant26.get(dateTimeFieldType27);
        boolean boolean29 = localDateTime19.isSupported(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test13619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13619");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(643486165, 50, 21688072, 53131, 47478131, 53786271);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53131 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13620");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.clear(16);
        boolean boolean14 = calendar8.isWeekDateSupported();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime15.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime23 = dateTime21.plus((long) (byte) 10);
        org.joda.time.DateTime.Property property24 = dateTime23.monthOfYear();
        org.joda.time.DurationField durationField25 = property24.getLeapDurationField();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(10L, chronology27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        int int30 = dateTime28.get(dateTimeFieldType29);
        org.joda.time.DateTime dateTime32 = dateTime28.plusWeeks(4);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Calendar calendar34 = dateTime32.toCalendar(locale33);
        java.lang.String str35 = locale33.toLanguageTag();
        java.lang.String str36 = locale33.getCountry();
        java.lang.String str37 = property24.getAsShortText(locale33);
        boolean boolean38 = calendar8.after((java.lang.Object) locale33);
        calendar8.add(12, (int) (short) 0);
        calendar8.setFirstDayOfWeek(171);
        long long44 = calendar8.getTimeInMillis();
        calendar8.setMinimalDaysInFirstWeek(190);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=171,minimalDaysInFirstWeek=190,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Jan" + "'", str37, "Jan");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2419200010L + "'", long44 == 2419200010L);
    }

    @Test
    public void test13621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13621");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) localTime4, periodType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime13 = dateTime10.toLocalTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.DateTime dateTime21 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 0);
        org.joda.time.DateTime dateTime22 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime33 = dateTime28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyear();
        org.joda.time.DateTime dateTime37 = dateTime24.toDateTime(chronology34);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfDay();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period46 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime47 = dateTime42.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property49 = dateTime48.era();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period54 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime55 = dateTime50.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime57 = dateTime42.toDateTime(chronology56);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime58, (org.joda.time.ReadablePartial) localTime59, periodType60);
        org.joda.time.LocalTime localTime63 = localTime59.withMillisOfSecond(4);
        int[] intArray65 = chronology56.get((org.joda.time.ReadablePartial) localTime59, (long) 0);
        org.joda.time.Chronology chronology66 = chronology56.withUTC();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.dayOfYear();
        org.joda.time.Chronology chronology68 = org.joda.time.DateTimeUtils.getChronology(chronology66);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology66.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField72 = chronology66.yearOfEra();
        int int73 = dateTime41.get(dateTimeField72);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
    }

    @Test
    public void test13622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13622");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear(16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(53657);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test13623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13623");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("99", "");
        java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("Sun");
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setScript("kor");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: kor [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test13624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13624");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-1L), dateTimeZone2);
        int int6 = localDate5.getYearOfEra();
        org.joda.time.LocalDate.Property property7 = localDate5.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfWeek();
        java.lang.String str11 = property10.getName();
        org.joda.time.LocalDate localDate12 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "dayOfWeek" + "'", str11, "dayOfWeek");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test13625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13625");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(32, 346, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13626");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(10L, chronology4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.weekyear();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean9 = dateTime5.isSupported(dateTimeFieldType8);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getDurationType();
        boolean boolean11 = dateTime2.equals((java.lang.Object) durationFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime2.plusMillis(762);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property15 = dateTime13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test13627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13627");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        long long19 = dateTimeField17.remainder(0L);
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.lang.String str24 = locale21.getVariant();
        boolean boolean25 = locale21.hasExtensions();
        java.lang.String str26 = dateTimeField17.getAsShortText((long) 163, locale21);
        int int28 = dateTimeField17.getLeapAmount(53623795L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 259200001L + "'", long19 == 259200001L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test13628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13628");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.DateTime dateTime30 = dateTime2.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        int int32 = dateTime30.getDayOfYear();
        int int33 = dateTime30.getCenturyOfEra();
        org.joda.time.DateTime dateTime35 = dateTime30.withWeekyear(100);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime37.plus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property44 = dateTime43.era();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Period period49 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime50 = dateTime45.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Chronology chronology51 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime52 = dateTime37.toDateTime(chronology51);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime53, (org.joda.time.ReadablePartial) localTime54, periodType55);
        org.joda.time.LocalTime localTime58 = localTime54.withMillisOfSecond(4);
        int[] intArray60 = chronology51.get((org.joda.time.ReadablePartial) localTime54, (long) 0);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(0L, chronology51);
        org.joda.time.DateTimeField dateTimeField62 = chronology51.millisOfSecond();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime67 = interval66.getEnd();
        org.joda.time.DateTime.Property property68 = dateTime67.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        long long72 = dateTimeZone69.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((java.lang.Object) dateTime67, dateTimeZone69);
        long long77 = dateTimeZone69.convertLocalToUTC(35L, false, 1L);
        java.lang.String str79 = dateTimeZone69.getName((long) 12);
        int int81 = dateTimeZone69.getStandardOffset(100001L);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) 29, dateTimeZone69);
        long long85 = dateTimeZone69.convertLocalToUTC(10L, true);
        org.joda.time.Chronology chronology86 = chronology51.withZone(dateTimeZone69);
        org.joda.time.DateTime dateTime87 = dateTime30.withZone(dateTimeZone69);
        org.joda.time.DateTime dateTime89 = dateTime87.plusMillis(625);
        org.joda.time.LocalTime localTime90 = dateTime87.toLocalTime();
        org.joda.time.LocalTime localTime92 = localTime90.withMillisOfDay(53640079);
        org.joda.time.LocalTime localTime94 = localTime92.minusMillis(866);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 969 + "'", int12 == 969);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(intArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 378691200010L + "'", long72 == 378691200010L);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 34L + "'", long77 == 34L);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.001" + "'", str79, "+00:00:00.001");
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 9L + "'", long85 == 9L);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertNotNull(localTime94);
    }

    @Test
    public void test13629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13629");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("Property[hourOfDay]");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test13630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13630");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        boolean boolean5 = interval2.containsNow();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) (byte) 100);
        boolean boolean12 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime13 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        org.joda.time.DateTime dateTime16 = dateTime13.withDayOfMonth(19);
        boolean boolean18 = dateTime13.isBefore((long) 2101);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test13631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13631");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMillisOfDay(24);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withField(dateTimeFieldType28, 100);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int36 = localDateTime27.getEra();
        int int37 = localDateTime27.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime27);
        int int39 = localDateTime27.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
    }

    @Test
    public void test13632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13632");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("months");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("weeks");
        java.util.Locale.LanguageRange languageRange5 = new java.util.Locale.LanguageRange("months");
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange3, languageRange5 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setLanguage("minutes");
        java.util.Locale.Builder builder12 = builder9.clear();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder14 = builder12.setLocale(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet15);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("minutes", strMap18);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        boolean boolean29 = strSet26.addAll((java.util.Collection<java.lang.String>) strSet28);
        boolean boolean30 = strSet22.containsAll((java.util.Collection<java.lang.String>) strSet26);
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet26);
        java.util.Set<java.lang.String> strSet32 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet32.spliterator();
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap35);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeList36);
    }

    @Test
    public void test13633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13633");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("millisOfSecond");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"millisOfSecond\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13634");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(10L, chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        int int6 = dateTime4.get(dateTimeFieldType5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(4);
        boolean boolean9 = periodType1.equals((java.lang.Object) dateTime8);
        int int10 = periodType1.size();
        org.joda.time.PeriodType periodType11 = periodType1.withMillisRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period(86400000L, periodType1);
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test13635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13635");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(69);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationFrom(readableInstant7);
        int int9 = period6.getHours();
        org.joda.time.Period period11 = period6.withYears(0);
        org.joda.time.LocalDate localDate13 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period6, (int) (short) 10);
        org.joda.time.LocalDate localDate15 = localDate13.withWeekyear((int) 'x');
        org.joda.time.LocalDate localDate17 = localDate13.plusDays(0);
        org.joda.time.LocalDate localDate19 = localDate13.plusMonths(52);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test13636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13636");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 893);
        org.joda.time.Instant instant3 = instant1.minus((long) 22);
        org.joda.time.Instant instant5 = instant3.plus((long) (short) 0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getDurationType();
        boolean boolean12 = instant3.isSupported(dateTimeFieldType9);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter((long) 10);
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.DateTime dateTime27 = dateTime16.withDurationAdded((org.joda.time.ReadableDuration) duration25, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusWeeks((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.withMillis((long) 12);
        org.joda.time.DateTime dateTime34 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime36 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology37 = dateTime31.getChronology();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test13637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13637");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale9 = new java.util.Locale("", "hi!");
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale10);
        java.lang.String str12 = locale9.getDisplayScript(locale10);
        boolean boolean13 = locale10.hasExtensions();
        java.lang.String str14 = locale10.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withLocale(locale10);
        boolean boolean16 = dateTimeFormatter15.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withDefaultYear(7);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter18.getParser();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.parse("100");
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Interval interval26 = interval24.toInterval();
        boolean boolean28 = interval24.contains((long) 1970);
        org.joda.time.Interval interval29 = interval24.toInterval();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.Interval interval34 = interval32.toInterval();
        boolean boolean36 = interval32.contains((long) 1970);
        org.joda.time.Interval interval37 = interval32.toInterval();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        boolean boolean43 = interval37.abuts((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Chronology chronology44 = interval40.getChronology();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime45.getMinuteOfDay();
        int int49 = dateTime45.getYearOfCentury();
        org.joda.time.Interval interval50 = interval40.withStart((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Interval interval51 = interval24.gap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) interval51);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.DateTime.Property property57 = dateTime56.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        long long61 = dateTimeZone58.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((java.lang.Object) dateTime56, dateTimeZone58);
        long long66 = dateTimeZone58.convertLocalToUTC(35L, false, 1L);
        java.lang.String str68 = dateTimeZone58.getName((long) 12);
        int int70 = dateTimeZone58.getStandardOffset(100001L);
        org.joda.time.Chronology chronology71 = chronology52.withZone(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime21.toMutableDateTime(chronology52);
        // The following exception was thrown during execution in test generation
        try {
            int int75 = dateTimeFormatter18.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime72, "dayOfMonth", 71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 969 + "'", int48 == 969);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNull(interval51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 378691200010L + "'", long61 == 378691200010L);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 34L + "'", long66 == 34L);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.001" + "'", str68, "+00:00:00.001");
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
    }

    @Test
    public void test13638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13638");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime6 = dateTime3.toLocalTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.Period period8 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime7);
        org.joda.time.LocalTime localTime10 = localTime7.plusSeconds(53640079);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime11.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime11.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int20 = dateTime11.get(dateTimeFieldType19);
        boolean boolean21 = localTime7.equals((java.lang.Object) dateTime11);
        org.joda.time.DateTime dateTime22 = localTime7.toDateTimeToday();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean25 = dateTimeZone24.isFixed();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 2, dateTimeZone24);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeUtils.getZone(dateTimeZone24);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeUtils.getZone(dateTimeZone28);
        long long32 = dateTimeZone30.nextTransition((-61977549748226L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) localTime7, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 969 + "'", int14 == 969);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-61977549748226L) + "'", long32 == (-61977549748226L));
    }

    @Test
    public void test13639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13639");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime0.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = dateTime0.get(dateTimeFieldType8);
        org.joda.time.DateTime.Property property10 = dateTime0.secondOfMinute();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 969 + "'", int3 == 969);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test13640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13640");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.DurationField durationField24 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField25 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology26 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.dayOfWeek();
        org.joda.time.DurationField durationField28 = chronology26.days();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test13641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13641");
        java.util.Locale locale2 = new java.util.Locale("", "hi!");
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale3);
        java.lang.String str5 = locale2.getDisplayScript(locale3);
        boolean boolean6 = locale3.hasExtensions();
        java.text.DateFormatSymbols dateFormatSymbols7 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale3);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols9 = new java.text.DateFormatSymbols(locale8);
        java.lang.Object obj10 = dateFormatSymbols9.clone();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols9.setMonths(strArray17);
        java.lang.Object obj19 = dateFormatSymbols9.clone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime22.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        int int32 = dateTime29.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = dateTime29.toDateTime(dateTimeZone33);
        int int35 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = interval38.isAfter((long) 10);
        org.joda.time.Duration duration41 = interval38.toDuration();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = interval44.isAfter((long) 10);
        org.joda.time.Duration duration47 = interval44.toDuration();
        org.joda.time.Duration duration49 = duration41.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) '4');
        org.joda.time.DateTime dateTime50 = dateTime22.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        int int52 = dateTime50.getDayOfYear();
        int int53 = dateTime50.getCenturyOfEra();
        org.joda.time.DateTime dateTime55 = dateTime50.withWeekyear(100);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = interval58.getEnd();
        org.joda.time.DateTime dateTime61 = dateTime59.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(10L, chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        int int66 = dateTime64.get(dateTimeFieldType65);
        org.joda.time.DateTime.Property property67 = dateTime61.property(dateTimeFieldType65);
        org.joda.time.DateTime dateTime68 = property67.roundHalfFloorCopy();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime.Property property70 = dateTime68.secondOfMinute();
        int int71 = dateTime68.getMinuteOfHour();
        boolean boolean72 = dateFormatSymbols9.equals((java.lang.Object) dateTime68);
        java.lang.String[] strArray73 = dateFormatSymbols9.getShortWeekdays();
        dateFormatSymbols7.setEras(strArray73);
        org.junit.Assert.assertEquals(locale2.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateFormatSymbols7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 969 + "'", int32 == 969);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 20 + "'", int53 == 20);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test13642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13642");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withField(dateTimeFieldType15, 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int23 = localDateTime22.getSecondOfMinute();
        int int24 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusMinutes(53657);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime22.withYearOfCentury(41);
        int[] intArray31 = localDateTime22.getValues();
        org.joda.time.LocalDateTime.Property property32 = localDateTime22.era();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(10L, chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        int int37 = dateTime35.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime39 = dateTime35.plusWeeks(4);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Calendar calendar41 = dateTime39.toCalendar(locale40);
        java.lang.String str42 = locale40.getVariant();
        java.lang.String str43 = locale40.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property46 = dateTime45.era();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Period period51 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime52 = dateTime47.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Chronology chronology53 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeField dateTimeField54 = chronology53.halfdayOfDay();
        org.joda.time.DurationField durationField55 = chronology53.minutes();
        org.joda.time.DurationField durationField56 = chronology53.years();
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType44.getField(chronology53);
        java.util.Locale locale61 = new java.util.Locale("", "hi!");
        java.lang.String str62 = dateTimeField57.getAsShortText(10L, locale61);
        java.lang.String str63 = locale40.getDisplayName(locale61);
        java.lang.String str64 = locale61.getVariant();
        java.lang.String str65 = property32.getAsText(locale61);
        org.joda.time.LocalDateTime localDateTime67 = property32.setCopy(1);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[14, 5, 12, 72001893]");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals(locale61.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "AM" + "'", str62, "AM");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "AD" + "'", str65, "AD");
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test13643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13643");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("100");
        int int2 = dateTime1.getEra();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.era();
        org.joda.time.Duration duration6 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime3.plus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withField(dateTimeFieldType14, 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusMonths(5);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfYear();
        org.joda.time.Duration duration27 = org.joda.time.Duration.millis((long) (short) -1);
        long long28 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration27);
        long long29 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = duration27.toDuration();
        long long31 = duration30.getMillis();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime21.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Duration duration36 = period34.toDurationFrom(readableInstant35);
        long long37 = duration36.getMillis();
        org.joda.time.Duration duration38 = duration30.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period40 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Duration duration42 = period40.toDurationFrom(readableInstant41);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean47 = interval45.isAfter((long) 10);
        org.joda.time.Duration duration48 = interval45.toDuration();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        boolean boolean53 = interval51.isAfter((long) 10);
        org.joda.time.Duration duration54 = interval51.toDuration();
        org.joda.time.Duration duration56 = duration48.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) '4');
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime57.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = dateTime57.toDateTime(dateTimeZone61);
        int int63 = dateTime62.getCenturyOfEra();
        org.joda.time.Interval interval64 = duration54.toIntervalTo((org.joda.time.ReadableInstant) dateTime62);
        int int65 = duration42.compareTo((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration66 = duration54.toDuration();
        int int67 = duration36.compareTo((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime71 = interval70.getEnd();
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.months();
        java.lang.String str73 = periodType72.getName();
        org.joda.time.Period period74 = duration66.toPeriodFrom((org.joda.time.ReadableInstant) dateTime71, periodType72);
        org.joda.time.PeriodType periodType75 = org.joda.time.DateTimeUtils.getPeriodType(periodType72);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime7, periodType72);
        org.joda.time.DateTime dateTime78 = dateTime1.plusWeeks(1920);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 35L + "'", long37 == 35L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 969 + "'", int60 == 969);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 20 + "'", int63 == 20);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Months" + "'", str73, "Months");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test13644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13644");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property4.withMinimumValue();
        int int7 = localDate6.getDayOfMonth();
        int int8 = localDate6.getWeekyear();
        org.joda.time.LocalDate localDate10 = localDate6.withWeekyear(53657);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getOffsetFromLocal(378691200010L);
        org.joda.time.DateMidnight dateMidnight14 = localDate6.toDateMidnight(dateTimeZone11);
        java.util.TimeZone timeZone15 = dateTimeZone11.toTimeZone();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test13645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13645");
        org.joda.time.Period period4 = new org.joda.time.Period(0, 0, 52, 496);
    }

    @Test
    public void test13646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13646");
        java.util.Date date0 = new java.util.Date();
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromDateFields(date0);
        org.joda.time.LocalDate localDate3 = localDate1.minusDays(71995893);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 21 15:03:12 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test13647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13647");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Interval interval14 = interval10.toInterval();
        long long15 = interval10.getStartMillis();
        org.joda.time.Interval interval16 = interval10.toInterval();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.Duration duration30 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) '4');
        long long31 = duration30.getStandardMinutes();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime32.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = dateTime32.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime32.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean41 = dateTimeZone40.isFixed();
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTime(dateTimeZone40);
        org.joda.time.Interval interval43 = duration30.toIntervalFrom((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = interval16.contains((org.joda.time.ReadableInterval) interval43);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withField(dateTimeFieldType51, 100);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withField(dateTimeFieldType60, 100);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime59.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int68 = localDateTime67.getSecondOfMinute();
        int int69 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.withField(dateTimeFieldType78, 100);
        org.joda.time.Period period81 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime71, (org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime71.minuteOfHour();
        org.joda.time.Period period84 = new org.joda.time.Period((long) '#');
        int int86 = period84.getValue(0);
        org.joda.time.Period period87 = period84.normalizedStandard();
        org.joda.time.Period period88 = period87.normalizedStandard();
        int int89 = period88.size();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime71.minus((org.joda.time.ReadablePeriod) period88);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime71.withYearOfEra(4);
        org.joda.time.LocalDateTime.Property property93 = localDateTime71.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime94 = property93.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime95 = property93.roundHalfCeilingCopy();
        boolean boolean96 = interval16.equals((java.lang.Object) property93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime98 = property93.setCopy(795);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 795 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645459782311L + "'", long15 == 1645459782311L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 969 + "'", int35 == 969);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test13648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13648");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime.Property property6 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((long) 2);
        org.joda.time.DateTime dateTime9 = property6.roundFloorCopy();
        int int10 = property6.getMaximumValueOverall();
        org.joda.time.DateTime dateTime11 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField12 = property6.getField();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86399999 + "'", int10 == 86399999);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test13649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13649");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((-61977521700000L));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test13650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13650");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime12 = dateTime6.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime14 = dateTime12.plus((long) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period21 = period5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.MutablePeriod mutablePeriod22 = period5.toMutablePeriod();
        int int23 = period5.size();
        org.joda.time.Period period24 = period5.negated();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str26 = durationFieldType25.toString();
        org.joda.time.Period period28 = period5.withField(durationFieldType25, 14);
        org.joda.time.Period period30 = period5.multipliedBy(0);
        org.joda.time.PeriodType periodType31 = period5.getPeriodType();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "minutes" + "'", str26, "minutes");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
    }

    @Test
    public void test13651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13651");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime16 = property11.roundHalfEvenCopy();
        java.lang.String str17 = property11.getAsShortText();
        java.lang.String str18 = property11.toString();
        org.joda.time.DateTimeField dateTimeField19 = property11.getField();
        org.joda.time.LocalTime localTime20 = property11.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localTime20.getFieldTypes();
        boolean boolean22 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localTime20);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "36" + "'", str17, "36");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[millisOfSecond]" + "'", str18, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test13652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13652");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        boolean boolean6 = interval4.isAfter((long) 10);
        org.joda.time.DateTime dateTime7 = interval4.getEnd();
        org.joda.time.Chronology chronology8 = interval4.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getChronology(chronology8);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((-87L), 48980883673763L, chronology8);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test13653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13653");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime16 = property11.roundHalfEvenCopy();
        org.joda.time.Period period18 = org.joda.time.Period.months(53);
        org.joda.time.LocalTime localTime20 = localTime16.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 16);
        org.joda.time.LocalTime localTime22 = localTime20.minusSeconds(2922789);
        org.joda.time.LocalTime.Property property23 = localTime20.secondOfMinute();
        org.joda.time.LocalTime localTime24 = property23.getLocalTime();
        org.joda.time.LocalTime localTime25 = property23.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test13654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13654");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        int int20 = timeZone18.getRawOffset();
        java.lang.String str21 = timeZone18.getID();
        boolean boolean22 = timeZone18.observesDaylightTime();
        java.lang.String str23 = timeZone18.getID();
        java.util.Date date29 = new java.util.Date(266, 8, 15, 53775186, (int) (byte) 0);
        boolean boolean30 = timeZone18.inDaylightTime(date29);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.001" + "'", str21, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.001" + "'", str23, "+00:00:00.001");
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Wed May 08 18:00:00 GMT+00:00 8301");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test13655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13655");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        boolean boolean8 = interval6.isAfter((long) 10);
        org.joda.time.Duration duration9 = interval6.toDuration();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.Duration duration17 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) '4');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getCenturyOfEra();
        org.joda.time.Interval interval25 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime23);
        int int26 = duration3.compareTo((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period27 = duration15.toPeriod();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime34 = dateTime28.withDate(6, (int) (short) 1, 4);
        org.joda.time.Period period35 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime37 = dateTime28.withMillis(1645455248808L);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period40 = new org.joda.time.Period((long) '#');
        int int42 = period40.getValue(0);
        org.joda.time.Period period43 = period40.normalizedStandard();
        org.joda.time.DateTime dateTime44 = dateTime37.plus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime46 = dateTime44.withMillis(0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 969 + "'", int21 == 969);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test13656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13656");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withDefaultYear(0);
        boolean boolean7 = dateTimeFormatter6.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime9 = dateTimeFormatter6.parseMutableDateTime("53878045");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test13657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13657");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean6 = dateTime2.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) dateTime2);
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.DateMidnight dateMidnight9 = localDate7.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = localDate7.toString("Property[dayOfMonth]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test13658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13658");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime.Property property11 = dateTime5.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = property11.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property11.addToCopy(363);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test13659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13659");
        java.util.Date date5 = new java.util.Date(53654, 0, (-1113137279), 36, 32471856);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Dec 19 09:36:00 GMT+00:00 2991990");
    }

    @Test
    public void test13660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13660");
        java.lang.String[] strArray4 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        boolean boolean10 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet9);
        boolean boolean11 = strSet5.isEmpty();
        java.lang.String[] strArray16 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        boolean boolean22 = strSet17.containsAll((java.util.Collection<java.lang.String>) strSet21);
        boolean boolean23 = strSet17.isEmpty();
        boolean boolean24 = strSet5.addAll((java.util.Collection<java.lang.String>) strSet17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.parse("minutes", strMap26);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet30);
        java.lang.String[] strArray36 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        boolean boolean42 = strSet37.containsAll((java.util.Collection<java.lang.String>) strSet41);
        boolean boolean43 = strSet37.isEmpty();
        java.lang.String[] strArray48 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        boolean boolean54 = strSet49.containsAll((java.util.Collection<java.lang.String>) strSet53);
        boolean boolean55 = strSet49.isEmpty();
        boolean boolean56 = strSet37.addAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags(languageRangeList27, (java.util.Collection<java.lang.String>) strSet37, filteringMode57);
        boolean boolean59 = strSet17.addAll((java.util.Collection<java.lang.String>) strSet37);
        java.lang.String[] strArray64 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet65 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet65, strArray64);
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        boolean boolean70 = strSet65.containsAll((java.util.Collection<java.lang.String>) strSet69);
        boolean boolean71 = strSet69.isEmpty();
        java.util.Iterator<java.lang.String> strItor72 = strSet69.iterator();
        java.util.Locale locale73 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleAttributes();
        boolean boolean75 = strSet69.removeAll((java.util.Collection<java.lang.String>) strSet74);
        strSet74.clear();
        boolean boolean77 = strSet17.addAll((java.util.Collection<java.lang.String>) strSet74);
        java.util.Locale locale78 = java.util.Locale.ROOT;
        java.text.DateFormatSymbols dateFormatSymbols79 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale78);
        boolean boolean80 = locale78.hasExtensions();
        java.lang.String str81 = locale78.getDisplayCountry();
        java.util.Set<java.lang.String> strSet82 = locale78.getUnicodeLocaleKeys();
        boolean boolean83 = strSet82.isEmpty();
        boolean boolean84 = strSet74.addAll((java.util.Collection<java.lang.String>) strSet82);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode57.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "");
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test13661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13661");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-1L), dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfWeek(2);
        int int8 = localDate5.getYear();
        java.lang.String str9 = localDate5.toString();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = localDate5.toDateMidnight(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test13662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13662");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology14 = interval10.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime18, periodType19);
        boolean boolean21 = localTime16.equals((java.lang.Object) period20);
        org.joda.time.Interval interval22 = interval10.withPeriodAfterStart((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 10, chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime25.plusMinutes((int) (short) 0);
        boolean boolean32 = interval22.isBefore((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean34 = interval22.isBefore(1692203524934400001L);
        org.joda.time.MutableInterval mutableInterval35 = interval22.toMutableInterval();
        long long36 = interval22.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(mutableInterval35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645459782311L + "'", long36 == 1645459782311L);
    }

    @Test
    public void test13663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13663");
        org.joda.time.Instant instant3 = new org.joda.time.Instant(35L);
        long long4 = instant3.getMillis();
        org.joda.time.Chronology chronology5 = instant3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval(1516805793459L, (long) 53773647, chronology5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 35L + "'", long4 == 35L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test13664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13664");
        java.util.Locale locale2 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols3 = new java.text.DateFormatSymbols(locale2);
        java.lang.String[] strArray5 = new java.lang.String[] { "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        dateFormatSymbols3.setAmPmStrings(strArray5);
        java.text.DateFormatSymbols dateFormatSymbols7 = java.text.DateFormatSymbols.getInstance();
        java.lang.String[] strArray8 = dateFormatSymbols7.getMonths();
        java.lang.String[] strArray9 = dateFormatSymbols7.getMonths();
        dateFormatSymbols3.setShortWeekdays(strArray9);
        java.lang.String[] strArray11 = dateFormatSymbols3.getEras();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols13 = new java.text.DateFormatSymbols(locale12);
        boolean boolean14 = locale12.hasExtensions();
        java.util.Set<java.lang.Character> charSet15 = locale12.getExtensionKeys();
        java.text.DateFormatSymbols dateFormatSymbols16 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale12);
        java.lang.String[] strArray17 = dateFormatSymbols16.getShortWeekdays();
        dateFormatSymbols3.setWeekdays(strArray17);
        org.junit.Assert.assertEquals(locale2.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(dateFormatSymbols7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(dateFormatSymbols16);
        org.junit.Assert.assertNotNull(strArray17);
    }

    @Test
    public void test13665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13665");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) localTime4, periodType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime13 = dateTime10.toLocalTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.DateTime dateTime21 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 0);
        org.joda.time.DateTime dateTime22 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime33 = dateTime28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyear();
        org.joda.time.DateTime dateTime37 = dateTime24.toDateTime(chronology34);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime45 = dateTime42.toLocalTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = interval48.isAfter((long) 10);
        org.joda.time.Duration duration51 = interval48.toDuration();
        org.joda.time.DateTime dateTime53 = dateTime42.withDurationAdded((org.joda.time.ReadableDuration) duration51, 0);
        org.joda.time.Instant instant54 = instant1.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.ReadableInstant readableInstant55 = null;
        boolean boolean56 = instant1.isEqual(readableInstant55);
        long long57 = instant1.getMillis();
        org.joda.time.Instant instant59 = instant1.plus(1645455363870L);
        org.joda.time.Instant instant60 = instant1.toInstant();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 35L + "'", long57 == 35L);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(instant60);
    }

    @Test
    public void test13666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13666");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        calendar8.set(0, (int) ' ', 4);
        calendar8.setTimeInMillis((long) 0);
        java.util.Date date15 = calendar8.getTime();
        java.util.Date date19 = new java.util.Date((int) (byte) 100, 32772, 893);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.fromDateFields(date19);
        date19.setYear(58);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.fromDateFields(date19);
        calendar8.setTime(date19);
        int int25 = date19.getTimezoneOffset();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-364780800007,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1958,MONTH=5,WEEK_OF_YEAR=24,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=161,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=994,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Jun 11 00:00:00 GMT+00:00 1958");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test13667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13667");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale4);
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        java.lang.String str7 = locale0.getDisplayScript(locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale0);
        calendar8.setMinimalDaysInFirstWeek(762);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(10L, chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        boolean boolean22 = interval20.isAfter((long) 10);
        org.joda.time.Duration duration23 = interval20.toDuration();
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        boolean boolean29 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime30 = dateTime15.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(10L, chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = dateTime33.get(dateTimeFieldType34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean37 = dateTime33.isSupported(dateTimeFieldType36);
        org.joda.time.DateTime.Property property38 = dateTime30.property(dateTimeFieldType36);
        int int39 = property38.getMaximumValue();
        int int40 = property38.get();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(10L, chronology42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        int int45 = dateTime43.get(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = dateTime43.plusWeeks(4);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = dateTime47.toCalendar(locale48);
        java.lang.String str50 = locale48.getVariant();
        java.lang.String str51 = locale48.getDisplayLanguage();
        java.util.Locale locale52 = locale48.stripExtensions();
        java.lang.String str53 = property38.getAsShortText(locale52);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder54.setLanguage("minutes");
        java.util.Locale locale57 = builder54.build();
        java.lang.String str58 = locale52.getDisplayCountry(locale57);
        java.util.Locale.setDefault(locale57);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap60 = calendar8.getDisplayNames(945, 672, locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455793210,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=762,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=13,MILLISECOND=217,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 59 + "'", int39 == 59);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "minutes");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test13668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13668");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(3);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.lang.String str4 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+03:00" + "'", str4, "+03:00");
    }

    @Test
    public void test13669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13669");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate localDate5 = localDate3.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTimeAtMidnight(dateTimeZone6);
        org.joda.time.LocalDate.Property property8 = localDate5.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate localDate11 = localDate5.withField(dateTimeFieldType9, 59);
        java.util.Date date12 = localDate5.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate5.withDayOfMonth(53956818);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53956818 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Jan 09 00:00:00 GMT+00:00 1970");
    }

    @Test
    public void test13670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13670");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("1");
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test13671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13671");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.property(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusSeconds(53658501);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DurationField durationField22 = property21.getLeapDurationField();
        int int23 = property21.getMaximumValueOverall();
        int int24 = property21.getMinimumValueOverall();
        org.joda.time.DateTime dateTime25 = property21.roundFloorCopy();
        boolean boolean26 = dateTime25.isAfterNow();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime34 = dateTime30.withWeekyear(1);
        int int35 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property36 = dateTime34.yearOfEra();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime.Property property40 = dateTime38.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property40.getFieldType();
        java.lang.String str42 = dateTimeFieldType41.getName();
        org.joda.time.DateTime.Property property43 = dateTime34.property(dateTimeFieldType41);
        int int44 = localDateTime19.get(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime19.minusWeeks(2696739);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "millisOfDay" + "'", str42, "millisOfDay");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 67900893 + "'", int44 == 67900893);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test13672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13672");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths(1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMillis(5);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test13673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13673");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 893);
        org.joda.time.Instant instant3 = instant1.minus((long) 22);
        org.joda.time.Instant instant5 = instant3.plus((long) (short) 0);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTime(dateTimeZone20);
        int int22 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval31.isAfter((long) 10);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.Duration duration36 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) '4');
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration28);
        mutableInterval6.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval6.copy();
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Duration duration41 = mutableInterval39.toDuration();
        org.joda.time.Duration duration43 = duration41.minus((long) 59);
        org.joda.time.Instant instant45 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration43, 1);
        org.joda.time.DateTime dateTime46 = instant45.toDateTimeISO();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1149 + "'", int19 == 1149);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test13674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13674");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.withMinutes((int) '#');
        org.joda.time.Period period7 = period3.minusSeconds(275335702);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = dateTime8.toDateTime(chronology22);
        org.joda.time.DurationField durationField24 = chronology22.centuries();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        org.joda.time.DurationField durationField26 = chronology22.years();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.dayOfYear();
        org.joda.time.DurationField durationField28 = chronology22.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((java.lang.Object) 275335702, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test13675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13675");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.era();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test13676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13676");
        java.util.Date date1 = new java.util.Date((long) 10);
        int int2 = date1.getMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        long long7 = dateTimeZone4.adjustOffset(378691200010L, false);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(0L, dateTimeZone4);
        long long11 = dateTimeZone4.adjustOffset((long) 53131701, true);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) date1, dateTimeZone4);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 378691200010L + "'", long7 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 53131701L + "'", long11 == 53131701L);
    }

    @Test
    public void test13677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13677");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        boolean boolean5 = interval2.containsNow();
        long long6 = interval2.toDurationMillis();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        boolean boolean16 = periodType8.equals((java.lang.Object) dateTime15);
        int int17 = periodType8.size();
        org.joda.time.PeriodType periodType18 = periodType8.withMillisRemoved();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 12, periodType8);
        org.joda.time.Interval interval20 = interval2.withPeriodAfterStart((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Interval interval26 = interval24.toInterval();
        boolean boolean28 = interval24.contains((long) 1970);
        org.joda.time.Interval interval29 = interval24.toInterval();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        boolean boolean35 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Chronology chronology36 = interval32.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.weekyears();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology36);
        org.joda.time.Interval interval39 = interval20.withChronology(chronology36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Interval interval44 = interval42.toInterval();
        boolean boolean46 = interval42.contains((long) 1970);
        org.joda.time.Interval interval47 = interval42.toInterval();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = interval50.isAfter((long) 10);
        boolean boolean53 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        org.joda.time.Interval interval54 = interval50.toInterval();
        boolean boolean55 = interval20.isAfter((org.joda.time.ReadableInterval) interval50);
        boolean boolean57 = interval20.isBefore((long) 0);
        java.util.Date date63 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        int int64 = date63.getTimezoneOffset();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((java.lang.Object) date63);
        boolean boolean66 = interval20.isAfter((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test13678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13678");
        java.lang.Object obj7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = dateTime8.toDateTime(chronology22);
        org.joda.time.DurationField durationField24 = chronology22.centuries();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.dayOfWeek();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj7, chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((-1), 663, 53960786, 1969, 1253, 536258, 0, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test13679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13679");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withField(dateTimeFieldType14, 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = interval35.isAfter((long) 10);
        org.joda.time.Duration duration38 = interval35.toDuration();
        org.joda.time.Duration duration40 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) '4');
        boolean boolean41 = localDateTime26.equals((java.lang.Object) duration38);
        int[] intArray43 = chronology6.get((org.joda.time.ReadablePartial) localDateTime26, (long) 22);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime26.minusYears(2022);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusHours(23);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMonths(72001893);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.plusHours(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusSeconds(1253);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 10800022]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test13680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13680");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology14 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime16.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime22, (org.joda.time.ReadablePartial) localTime23, periodType24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime32 = dateTime29.toLocalTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = interval35.isAfter((long) 10);
        org.joda.time.Duration duration38 = interval35.toDuration();
        org.joda.time.DateTime dateTime40 = dateTime29.withDurationAdded((org.joda.time.ReadableDuration) duration38, 0);
        org.joda.time.DateTime dateTime41 = localTime23.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType44 = periodType42.getFieldType((int) (byte) 0);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime23, periodType42);
        org.joda.time.Chronology chronology46 = localTime23.getChronology();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime53 = dateTime48.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property55 = dateTime54.era();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period60 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime61 = dateTime56.plus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Chronology chronology62 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime63 = dateTime48.toDateTime(chronology62);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime64, (org.joda.time.ReadablePartial) localTime65, periodType66);
        org.joda.time.LocalTime localTime69 = localTime65.withMillisOfSecond(4);
        int[] intArray71 = chronology62.get((org.joda.time.ReadablePartial) localTime65, (long) 0);
        int[] intArray73 = dateTimeField15.addWrapField((org.joda.time.ReadablePartial) localTime23, 1, intArray71, (-1));
        long long76 = dateTimeField15.add((long) (short) 1, (long) 100);
        int int78 = dateTimeField15.getLeapAmount((long) (short) 100);
        long long81 = dateTimeField15.addWrapField((long) 99, (int) '#');
        boolean boolean82 = dateTimeField15.isSupported();
        int int84 = dateTimeField15.getMaximumValue(1645455771381L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[3, 86399, 0, 0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[3, 86399, 0, 0]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 100001L + "'", long76 == 100001L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 35099L + "'", long81 == 35099L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 86399 + "'", int84 == 86399);
    }

    @Test
    public void test13681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13681");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        int int4 = localDate3.getMonthOfYear();
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(334);
        org.joda.time.DateTime dateTime9 = dateTime5.plusHours(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test13682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13682");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime11 = dateTime6.plus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime19 = dateTime14.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime21 = dateTime6.toDateTime(chronology20);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime22, (org.joda.time.ReadablePartial) localTime23, periodType24);
        org.joda.time.LocalTime localTime27 = localTime23.withMillisOfSecond(4);
        int[] intArray29 = chronology20.get((org.joda.time.ReadablePartial) localTime23, (long) 0);
        org.joda.time.Chronology chronology30 = chronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.dayOfYear();
        int int33 = dateTimeField31.getLeapAmount(378691200010L);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(10L, chronology35);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.weekyear();
        int int38 = dateTime36.get(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = dateTime36.plusWeeks(4);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Calendar calendar42 = dateTime40.toCalendar(locale41);
        java.lang.String str43 = locale41.getDisplayVariant();
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleKeys();
        int int45 = dateTimeField31.getMaximumTextLength(locale41);
        java.lang.String str46 = locale41.getDisplayName();
        java.util.Locale.Builder builder47 = builder5.setLocale(locale41);
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder51 = builder47.setUnicodeLocaleKeyword("en_GB", "zho");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: en_GB [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[3, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1970 + "'", int38 == 1970);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:00\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test13683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13683");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 2, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = dateTime8.withTimeAtStartOfDay();
        boolean boolean11 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        boolean boolean16 = interval14.isAfter((long) 10);
        boolean boolean17 = interval14.containsNow();
        long long18 = interval14.toDurationMillis();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(10L, chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = dateTime23.get(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusWeeks(4);
        boolean boolean28 = periodType20.equals((java.lang.Object) dateTime27);
        int int29 = periodType20.size();
        org.joda.time.PeriodType periodType30 = periodType20.withMillisRemoved();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 12, periodType20);
        org.joda.time.Interval interval32 = interval14.withPeriodAfterStart((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Interval interval38 = interval36.toInterval();
        boolean boolean40 = interval36.contains((long) 1970);
        org.joda.time.Interval interval41 = interval36.toInterval();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = interval44.isAfter((long) 10);
        boolean boolean47 = interval41.abuts((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Chronology chronology48 = interval44.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.weekyears();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (-1), chronology48);
        org.joda.time.Interval interval51 = interval32.withChronology(chronology48);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        int int55 = dateTime52.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = dateTime52.toDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime52.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime dateTime61 = dateTime59.minusMonths(0);
        org.joda.time.DateTime dateTime63 = dateTime61.withYearOfCentury((int) (short) 10);
        boolean boolean65 = dateTime63.isBefore((-62092691280000L));
        boolean boolean66 = interval51.isAfter((org.joda.time.ReadableInstant) dateTime63);
        int int67 = dateTime63.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(interval51);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1149 + "'", int55 == 1149);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 311 + "'", int67 == 311);
    }

    @Test
    public void test13684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13684");
        java.util.Date date3 = new java.util.Date(2022, 1970, (int) (short) 100);
        int int4 = date3.getTimezoneOffset();
        date3.setHours(10);
        date3.setTime((long) 53648193);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.LocalDate.Property property10 = localDate9.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int25 = localDateTime24.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property26 = localDateTime24.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime28 = property26.addWrapFieldToCopy(99);
        org.joda.time.LocalDateTime localDateTime29 = property26.withMaximumValue();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime33 = interval32.getEnd();
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(10L, chronology37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        int int40 = dateTime38.get(dateTimeFieldType39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean42 = dateTime38.isSupported(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType41.getDurationType();
        boolean boolean44 = dateTime35.isSupported(dateTimeFieldType41);
        int int45 = localDateTime29.indexOf(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime29.withWeekyear(53623795);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.months();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withFieldAdded(durationFieldType48, 1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusMillis(926);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property57 = dateTime55.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = property57.getFieldType();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime53.withField(dateTimeFieldType58, 2000);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime53.withDayOfMonth((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = localDate9.compareTo((org.joda.time.ReadablePartial) localDateTime62);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 14:54:08 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "months" + "'", str49, "months");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test13685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13685");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        int int7 = dateTime6.getYear();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime6.getZone();
        org.joda.time.Chronology chronology9 = dateTime6.getChronology();
        org.joda.time.DateTime.Property property10 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test13686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13686");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean33 = dateTimeZone32.isFixed();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 2, dateTimeZone32);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeUtils.getZone(dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = dateTime9.withZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTime dateTime40 = dateTime9.withYear(32769);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property44 = dateTime42.millisOfDay();
        int int45 = dateTime42.getYearOfEra();
        org.joda.time.DateTime.Property property46 = dateTime42.centuryOfEra();
        org.joda.time.DateTime dateTime48 = dateTime42.plusWeeks(100);
        boolean boolean49 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime42);
        java.lang.String str51 = dateTime42.toString("45");
        org.joda.time.DateTime.Property property52 = dateTime42.year();
        org.joda.time.DateTime dateTime54 = property52.addWrapFieldToCopy(56733);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1149 + "'", int12 == 1149);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "45" + "'", str51, "45");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test13687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13687");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(2126);
        int int3 = dateTimeZone1.getOffset((long) 120);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2126 + "'", int3 == 2126);
    }

    @Test
    public void test13688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13688");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        boolean boolean9 = interval7.isBefore((long) 53969);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) 893);
        org.joda.time.Instant instant13 = instant11.minus((long) 22);
        org.joda.time.Instant instant15 = instant13.plus((long) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(10L, chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType19.getDurationType();
        boolean boolean22 = instant13.isSupported(dateTimeFieldType19);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime29 = dateTime26.toLocalTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        org.joda.time.Duration duration35 = interval32.toDuration();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((org.joda.time.ReadableDuration) duration35, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.weekyear();
        int int39 = dateTime37.get(dateTimeFieldType38);
        org.joda.time.DateTime dateTime41 = dateTime37.plusWeeks((int) '4');
        org.joda.time.DateTime dateTime43 = dateTime41.withMillis((long) 12);
        org.joda.time.DateTime dateTime44 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant13, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(10L, chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        int int51 = dateTime49.get(dateTimeFieldType50);
        org.joda.time.DateTime dateTime53 = dateTime49.plusWeeks(4);
        boolean boolean54 = periodType46.equals((java.lang.Object) dateTime53);
        boolean boolean55 = mutableInterval45.contains((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Interval interval56 = interval7.overlap((org.joda.time.ReadableInterval) mutableInterval45);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(interval56);
    }

    @Test
    public void test13689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13689");
        org.joda.time.Period period8 = new org.joda.time.Period(21095878, 51120, 663, 818585, 56, 53788450, 35, 16);
    }

    @Test
    public void test13690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13690");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((java.lang.Object) "1970-01-01T00:00:00.081Z");
    }

    @Test
    public void test13691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13691");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.DateTime dateTime30 = dateTime2.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 2, dateTimeZone33);
        long long39 = dateTimeZone33.convertLocalToUTC((long) 10, false, (long) 1);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) -1, dateTimeZone33);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Locale locale45 = new java.util.Locale("", "hi!");
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale46);
        java.lang.String str48 = locale45.getDisplayScript(locale46);
        java.lang.String str49 = locale42.getDisplayScript(locale46);
        java.lang.String str50 = dateTimeZone33.getName(0L, locale46);
        java.util.Calendar calendar51 = dateTime30.toCalendar(locale46);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        boolean boolean58 = interval56.isAfter((long) 10);
        org.joda.time.Duration duration59 = interval56.toDuration();
        org.joda.time.Chronology chronology60 = interval56.getChronology();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.hourOfHalfday();
        int int63 = dateTimeField62.getMinimumValue();
        int int64 = dateTime30.get(dateTimeField62);
        java.lang.String str66 = dateTimeField62.getAsText(86L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1149 + "'", int12 == 1149);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-10799990L) + "'", long39 == (-10799990L));
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals(locale45.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+03:00" + "'", str50, "+03:00");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645459782311,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:00\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=9,SECOND=42,MILLISECOND=311,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 7 + "'", int64 == 7);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "3" + "'", str66, "3");
    }

    @Test
    public void test13692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13692");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withField(dateTimeFieldType14, 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = interval35.isAfter((long) 10);
        org.joda.time.Duration duration38 = interval35.toDuration();
        org.joda.time.Duration duration40 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) '4');
        boolean boolean41 = localDateTime26.equals((java.lang.Object) duration38);
        int[] intArray43 = chronology6.get((org.joda.time.ReadablePartial) localDateTime26, (long) 22);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime26.minusYears(2022);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusHours(23);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.hourOfDay();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 10800022]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test13693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13693");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds(2922789);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test13694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13694");
        java.util.Date date6 = new java.util.Date((int) 'x', (int) (short) 1, (int) (byte) 10, 762, 1969, 86399999);
        int int7 = date6.getMinutes();
        int int8 = date6.getMinutes();
        date6.setSeconds(3540);
        java.lang.String str11 = date6.toLocaleString();
        long long12 = date6.getTime();
        date6.setDate(53792);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 11 03:47:00 GMT+00:00 2170");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 48 + "'", int7 == 48);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 48 + "'", int8 == 48);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Dec 9, 2022 3:47:00 AM" + "'", str11, "Dec 9, 2022 3:47:00 AM");
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1670557619993L + "'", long12 == 1670557619993L);
    }

    @Test
    public void test13695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13695");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear((int) 'x');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withField(dateTimeFieldType30, 893);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.withYearOfCentury(2);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime.Property property42 = dateTime40.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = property42.getFieldType();
        boolean boolean44 = localDateTime36.isSupported(dateTimeFieldType43);
        int int45 = localDateTime36.getHourOfDay();
        org.joda.time.LocalDateTime.Property property46 = localDateTime36.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime48 = property46.addWrapFieldToCopy(0);
        org.joda.time.LocalDateTime localDateTime50 = property46.addToCopy(894);
        org.joda.time.DurationField durationField51 = property46.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20 + "'", int45 == 20);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNull(durationField51);
    }

    @Test
    public void test13696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13696");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        long long3 = dateTimeZone1.previousTransition(100001L);
        java.lang.String str5 = dateTimeZone1.getNameKey(1645454731563L);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100001L + "'", long3 == 100001L);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test13697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13697");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        int int16 = dateTime0.getSecondOfDay();
        org.joda.time.Chronology chronology17 = dateTime0.getChronology();
        org.joda.time.DateTime.Property property18 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime19 = property18.roundCeilingCopy();
        int int20 = dateTime19.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 68982 + "'", int16 == 68982);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test13698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13698");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime9.isSupported(dateTimeFieldType12);
        int int14 = dateTime5.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime16 = dateTime5.plusMillis(7);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        int int18 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusDays(672);
        org.joda.time.DateTime dateTime22 = dateTime16.withYear(86);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1149 + "'", int3 == 1149);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 68982 + "'", int18 == 68982);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test13699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13699");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(1970);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime10, periodType11);
        org.joda.time.Period period14 = period12.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime15.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime23 = dateTime21.plus((long) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationFrom(readableInstant26);
        org.joda.time.Seconds seconds28 = duration27.toStandardSeconds();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period30 = period14.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.MutablePeriod mutablePeriod31 = period29.toMutablePeriod();
        org.joda.time.DateTime dateTime32 = dateTime8.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime34 = dateTime8.plusYears(32770);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime8.withCenturyOfEra(21685368);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21685368 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test13700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13700");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate localDate5 = localDate1.withCenturyOfEra(1969);
        org.joda.time.LocalDate localDate7 = localDate1.withDayOfWeek(7);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths(0);
        org.joda.time.LocalDate.Property property10 = localDate9.era();
        java.lang.String str12 = localDate9.toString("79");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "79" + "'", str12, "79");
    }

    @Test
    public void test13701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13701");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        boolean boolean5 = strSet2.addAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Iterator<java.lang.String> strItor6 = strSet4.iterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("minutes", strMap8);
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags(languageRangeList9, (java.util.Collection<java.lang.String>) strSet12);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        boolean boolean19 = strSet16.addAll((java.util.Collection<java.lang.String>) strSet18);
        boolean boolean20 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet16);
        java.lang.Object[] objArray21 = strSet16.toArray();
        boolean boolean22 = strSet4.remove((java.lang.Object) strSet16);
        java.lang.Object[] objArray23 = strSet4.toArray();
        java.util.stream.Stream<java.lang.String> strStream24 = strSet4.stream();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(strStream24);
    }

    @Test
    public void test13702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13702");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.Period period27 = new org.joda.time.Period((long) 8);
        long long30 = chronology24.add((org.joda.time.ReadablePeriod) period27, (long) 17, 11);
        org.joda.time.DateTimeField dateTimeField31 = chronology24.hourOfDay();
        long long34 = dateTimeField31.getDifferenceAsLong(1613191507200015L, 21095060L);
        java.lang.String str36 = dateTimeField31.getAsShortText((long) (short) 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[3, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 105L + "'", long30 == 105L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 448108746L + "'", long34 == 448108746L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
    }

    @Test
    public void test13703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13703");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) localTime4, periodType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime13 = dateTime10.toLocalTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.DateTime dateTime21 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 0);
        org.joda.time.DateTime dateTime22 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime33 = dateTime28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyear();
        org.joda.time.DateTime dateTime37 = dateTime24.toDateTime(chronology34);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime45 = dateTime42.toLocalTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = interval48.isAfter((long) 10);
        org.joda.time.Duration duration51 = interval48.toDuration();
        org.joda.time.DateTime dateTime53 = dateTime42.withDurationAdded((org.joda.time.ReadableDuration) duration51, 0);
        org.joda.time.Instant instant54 = instant1.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Instant instant55 = instant54.toInstant();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant55);
    }

    @Test
    public void test13704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13704");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime.Property property8 = dateTime6.dayOfYear();
        org.joda.time.DateTime dateTime9 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime11 = dateTime9.plusWeeks(21);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.DateTime.Property property13 = dateTime11.era();
        org.joda.time.DateTime dateTime14 = property13.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test13705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13705");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("minutes");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        java.lang.String str4 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "minutes" + "'", str2, "minutes");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "minutes" + "'", str3, "minutes");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "minutes" + "'", str4, "minutes");
    }

    @Test
    public void test13706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13706");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.minusWeeks((int) (short) 10);
        int int19 = localDateTime5.getWeekOfWeekyear();
        int int20 = localDateTime5.getEra();
        org.joda.time.LocalDateTime.Property property21 = localDateTime5.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test13707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13707");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(10L, chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean10 = dateTime6.isSupported(dateTimeFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getDurationType();
        boolean boolean12 = dateTime3.equals((java.lang.Object) durationFieldType11);
        org.joda.time.DateTime dateTime14 = dateTime3.plusMillis(762);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(58443465600019L, chronology15);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test13708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13708");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime3 = property1.setCopy("AD");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime10 = dateTime7.toLocalTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean15 = interval13.isAfter((long) 10);
        org.joda.time.Duration duration16 = interval13.toDuration();
        org.joda.time.DateTime dateTime18 = dateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration16, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = dateTime18.get(dateTimeFieldType19);
        int int21 = dateTime18.getDayOfWeek();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime22.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime.Property property28 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime29 = dateTime22.withEarlierOffsetAtOverlap();
        int int30 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime32 = dateTime18.plus((long) 0);
        org.joda.time.DateTime dateTime34 = dateTime18.minusDays(894);
        org.joda.time.DateTime dateTime35 = dateTime34.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfYear();
        org.joda.time.DurationField durationField38 = chronology36.weeks();
        boolean boolean39 = durationField38.isPrecise();
        long long42 = durationField38.subtract(0L, 54082);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-32708793600000L) + "'", long42 == (-32708793600000L));
    }

    @Test
    public void test13709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13709");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale6 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(163);
        org.joda.time.Instant instant10 = new org.joda.time.Instant(57540999L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = dateTimeFormatter13.parseLocalDateTime("1970-01-02T00:00:00.010Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test13710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13710");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTime(dateTimeZone20);
        int int22 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval31.isAfter((long) 10);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.Duration duration36 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) '4');
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration28);
        mutableInterval6.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Days days39 = duration28.toStandardDays();
        org.joda.time.DateTime dateTime41 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) days39, (int) ' ');
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra(1970);
        org.joda.time.DateTime dateTime45 = dateTime41.plusSeconds(39);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1149 + "'", int19 == 1149);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(days39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test13711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13711");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        boolean boolean5 = interval3.isAfter((long) 10);
        org.joda.time.Duration duration6 = interval3.toDuration();
        org.joda.time.Chronology chronology7 = interval3.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfMinute();
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getChronology(chronology7);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) 89422, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = chronology9.millis();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test13712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13712");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.setLanguage("minutes");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale locale7 = builder6.build();
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str11 = nameProvider0.getName(locale7, "1", "PT14H");
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Locale locale15 = new java.util.Locale("", "hi!");
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale16);
        java.lang.String str18 = locale15.getDisplayScript(locale16);
        java.lang.String str19 = locale12.getDisplayScript(locale16);
        java.lang.String str20 = locale12.getDisplayLanguage();
        java.lang.String str23 = nameProvider0.getShortName(locale12, "1970-01-01T00:00:00.893Z", "GyMdkHmsSEDFwWahKzZ");
        java.util.Locale locale27 = new java.util.Locale("15:59:00.999", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "months");
        java.lang.String str28 = locale27.getDisplayCountry();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.util.Locale locale31 = locale29.stripExtensions();
        java.lang.String str32 = locale27.getDisplayName(locale31);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale31);
        java.lang.String str34 = locale31.getDisplayCountry();
        java.lang.String str37 = nameProvider0.getShortName(locale31, "Days", "DateTimeField[weekyearOfCentury]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals(locale27.toString(), "15:59:00.999_2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z_months");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" + "'", str28, "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)" + "'", str32, "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455794155,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=14,MILLISECOND=162,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test13713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13713");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.minusYears(893);
        org.joda.time.Period period7 = period3.plusMillis((int) (short) -1);
        int int8 = period7.getDays();
        org.joda.time.Period period10 = period7.withWeeks(53658501);
        org.joda.time.Period period12 = period10.plusMillis(53788450);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test13714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13714");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.months();
        org.joda.time.Period period6 = duration3.toPeriod(periodType5);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) localTime8, periodType9);
        org.joda.time.Period period12 = period10.minusDays(10);
        org.joda.time.Duration duration13 = period10.toStandardDuration();
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis((long) (short) -1);
        long long16 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        long long17 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = duration13.minus((org.joda.time.ReadableDuration) duration15);
        long long19 = duration13.getStandardDays();
        boolean boolean20 = duration3.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        boolean boolean22 = duration13.isEqual((org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Interval interval28 = interval26.toInterval();
        boolean boolean30 = interval26.contains((long) 1970);
        org.joda.time.Interval interval31 = interval26.toInterval();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        boolean boolean37 = interval31.abuts((org.joda.time.ReadableInterval) interval34);
        org.joda.time.Chronology chronology38 = interval34.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.secondOfDay();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.LocalTime localTime42 = localTime40.minusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology43 = localTime42.getChronology();
        org.joda.time.Period period44 = duration13.toPeriod(periodType23, chronology43);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(10L, chronology47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyear();
        int int50 = dateTime48.get(dateTimeFieldType49);
        org.joda.time.DateTime dateTime52 = dateTime48.plusWeeks(4);
        boolean boolean53 = periodType45.equals((java.lang.Object) dateTime52);
        int int54 = dateTime52.getDayOfYear();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(10L, chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyear();
        int int60 = dateTime58.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusWeeks(4);
        boolean boolean63 = periodType55.equals((java.lang.Object) dateTime62);
        int int64 = periodType55.size();
        org.joda.time.PeriodType periodType65 = periodType55.withMillisRemoved();
        org.joda.time.PeriodType periodType66 = periodType55.withHoursRemoved();
        org.joda.time.Period period67 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52, periodType55);
        org.joda.time.Period period69 = period67.plusDays(86399999);
        int int70 = period67.getWeeks();
        int[] intArray71 = period67.getValues();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 29 + "'", int54 == 29);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test13715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13715");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Interval interval9 = interval7.toInterval();
        org.joda.time.Period period10 = interval7.toPeriod();
        org.joda.time.DateTime dateTime12 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period10, 20);
        java.lang.String str13 = period10.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0S" + "'", str13, "PT0S");
    }

    @Test
    public void test13716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13716");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int6 = localDateTime5.getEra();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime7.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int16 = dateTime7.get(dateTimeFieldType15);
        int int17 = localDateTime5.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withField(dateTimeFieldType26, 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime25.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusWeeks((int) (byte) 100);
        int int37 = localDateTime33.getWeekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withYearOfEra(21);
        boolean boolean40 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime33);
        int int41 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.Period period43 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Duration duration45 = period43.toDurationFrom(readableInstant44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = interval48.isAfter((long) 10);
        org.joda.time.Duration duration51 = interval48.toDuration();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = interval54.isAfter((long) 10);
        org.joda.time.Duration duration57 = interval54.toDuration();
        org.joda.time.Duration duration59 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) '4');
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTime60.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = dateTime60.toDateTime(dateTimeZone64);
        int int66 = dateTime65.getCenturyOfEra();
        org.joda.time.Interval interval67 = duration57.toIntervalTo((org.joda.time.ReadableInstant) dateTime65);
        int int68 = duration45.compareTo((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period69 = duration57.toPeriod();
        org.joda.time.Duration duration72 = duration57.withDurationAdded((long) 'a', 52);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime5.plus((org.joda.time.ReadableDuration) duration57);
        int int74 = localDateTime73.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime76 = localDateTime73.withEra(53788450);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53788450 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1149 + "'", int10 == 1149);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 14 + "'", int17 == 14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 14 + "'", int37 == 14);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1149 + "'", int63 == 1149);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 20 + "'", int66 == 20);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 12 + "'", int74 == 12);
    }

    @Test
    public void test13717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13717");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("ap. J.-C.");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test13718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13718");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        int int5 = dateTime3.getYearOfCentury();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime.Property property11 = dateTime10.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        long long15 = dateTimeZone12.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((java.lang.Object) dateTime10, dateTimeZone12);
        long long20 = dateTimeZone12.convertLocalToUTC(35L, false, 1L);
        java.lang.String str22 = dateTimeZone12.getName((long) 12);
        int int24 = dateTimeZone12.getStandardOffset(100001L);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(4460054926L, dateTimeZone12);
        java.lang.String str27 = dateTimeZone12.getNameKey(10L);
        org.joda.time.DateTime dateTime28 = dateTime3.withZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Interval interval33 = interval31.toInterval();
        org.joda.time.Period period34 = interval31.toPeriod();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = interval37.isAfter((long) 10);
        org.joda.time.Duration duration40 = interval37.toDuration();
        boolean boolean41 = interval31.abuts((org.joda.time.ReadableInterval) interval37);
        org.joda.time.DateTime dateTime42 = interval31.getStart();
        org.joda.time.Duration duration43 = interval31.toDuration();
        org.joda.time.Duration duration44 = duration43.toDuration();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property46 = dateTime45.era();
        org.joda.time.Duration duration48 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime45.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.months();
        org.joda.time.Period period51 = duration48.toPeriod(periodType50);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime52, (org.joda.time.ReadablePartial) localTime53, periodType54);
        org.joda.time.Period period57 = period55.minusDays(10);
        org.joda.time.Duration duration58 = period55.toStandardDuration();
        org.joda.time.Duration duration60 = org.joda.time.Duration.millis((long) (short) -1);
        long long61 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration60);
        long long62 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration63 = duration58.minus((org.joda.time.ReadableDuration) duration60);
        long long64 = duration58.getStandardDays();
        boolean boolean65 = duration48.isEqual((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration66 = org.joda.time.Duration.ZERO;
        boolean boolean67 = duration58.isEqual((org.joda.time.ReadableDuration) duration66);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType69 = periodType68.withSecondsRemoved();
        org.joda.time.PeriodType periodType70 = periodType69.withMinutesRemoved();
        org.joda.time.Period period71 = new org.joda.time.Period((java.lang.Object) duration58, periodType69);
        org.joda.time.PeriodType periodType72 = periodType69.withWeeksRemoved();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration43, periodType69);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 378691200010L + "'", long15 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-10799965L) + "'", long20 == (-10799965L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+03:00" + "'", str22, "+03:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10800000 + "'", int24 == 10800000);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType72);
    }

    @Test
    public void test13719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13719");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(1);
        boolean boolean7 = dateTimeZone6.isFixed();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((int) (short) -1, 2, 14, (int) (short) 1, 31, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = dateTime11.toString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test13720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13720");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.lang.Object obj2 = dateFormatSymbols1.clone();
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols1.setMonths(strArray9);
        java.util.Locale.LanguageRange languageRange12 = new java.util.Locale.LanguageRange("months");
        java.util.Locale.LanguageRange languageRange14 = new java.util.Locale.LanguageRange("weeks");
        java.util.Locale.LanguageRange languageRange16 = new java.util.Locale.LanguageRange("months");
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] { languageRange12, languageRange14, languageRange16 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.setLanguage("minutes");
        java.util.Locale.Builder builder23 = builder20.clear();
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder25 = builder23.setLocale(locale24);
        java.util.Set<java.lang.String> strSet26 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet26);
        java.lang.String[] strArray32 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        boolean boolean38 = strSet33.containsAll((java.util.Collection<java.lang.String>) strSet37);
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        boolean boolean44 = strSet41.addAll((java.util.Collection<java.lang.String>) strSet43);
        boolean boolean45 = strSet43.isEmpty();
        boolean boolean46 = strSet43.isEmpty();
        boolean boolean47 = strSet33.addAll((java.util.Collection<java.lang.String>) strSet43);
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap49 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList50 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap49);
        java.lang.String[] strArray55 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        java.util.Locale locale59 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleKeys();
        boolean boolean61 = strSet56.containsAll((java.util.Collection<java.lang.String>) strSet60);
        boolean boolean62 = strSet60.isEmpty();
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags(languageRangeList50, (java.util.Collection<java.lang.String>) strSet60);
        boolean boolean64 = dateFormatSymbols1.equals((java.lang.Object) strList63);
        java.lang.String[] strArray65 = dateFormatSymbols1.getAmPmStrings();
        java.lang.Object obj66 = dateFormatSymbols1.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(languageRangeList50);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(obj66);
    }

    @Test
    public void test13721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13721");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        int int4 = dateTime0.getYearOfCentury();
        org.joda.time.DateTime dateTime6 = dateTime0.minusMinutes(21);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMonths(53630161);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime10, periodType11);
        org.joda.time.LocalTime localTime14 = localTime9.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16, periodType17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.DateTime dateTime33 = dateTime22.withDurationAdded((org.joda.time.ReadableDuration) duration31, 0);
        org.joda.time.DateTime dateTime34 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType37 = periodType35.getFieldType((int) (byte) 0);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime9, (org.joda.time.ReadablePartial) localTime16, periodType35);
        org.joda.time.Chronology chronology39 = localTime16.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.months();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField42.getType();
        org.joda.time.Instant instant45 = new org.joda.time.Instant(35L);
        long long46 = instant45.getMillis();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime47, (org.joda.time.ReadablePartial) localTime48, periodType49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime54 = interval53.getEnd();
        org.joda.time.DateTime dateTime56 = dateTime54.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime57 = dateTime54.toLocalTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime59);
        boolean boolean62 = interval60.isAfter((long) 10);
        org.joda.time.Duration duration63 = interval60.toDuration();
        org.joda.time.DateTime dateTime65 = dateTime54.withDurationAdded((org.joda.time.ReadableDuration) duration63, 0);
        org.joda.time.DateTime dateTime66 = localTime48.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property71 = dateTime70.era();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Period period76 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime77 = dateTime72.plus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Chronology chronology78 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology78);
        org.joda.time.DateTimeField dateTimeField80 = chronology78.weekyear();
        org.joda.time.DateTime dateTime81 = dateTime68.toDateTime(chronology78);
        org.joda.time.Chronology chronology82 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant45, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeField dateTimeField83 = chronology82.weekyear();
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType43.getField(chronology82);
        org.joda.time.MutableDateTime mutableDateTime85 = dateTime6.toMutableDateTime(chronology82);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1149 + "'", int3 == 1149);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 35L + "'", long46 == 35L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
    }

    @Test
    public void test13722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13722");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        int int19 = durationField16.getDifference((long) 2, (long) (-1));
        int int22 = durationField16.getDifference(10L, (long) (short) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField16.getType();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.Chronology chronology33 = interval29.getChronology();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology33);
        org.joda.time.Period period36 = org.joda.time.Period.seconds(99);
        long long39 = chronology33.add((org.joda.time.ReadablePeriod) period36, (long) 53657, 0);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 1, chronology33);
        org.joda.time.DurationField durationField41 = durationFieldType23.getField(chronology33);
        java.lang.String str42 = chronology33.toString();
        org.joda.time.DateTimeField dateTimeField43 = chronology33.weekyear();
        org.joda.time.DurationField durationField44 = chronology33.seconds();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 53657L + "'", long39 == 53657L);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[+03:00]" + "'", str42, "ISOChronology[+03:00]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test13723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13723");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long3 = mutableInterval2.toDurationMillis();
        mutableInterval2.setInterval((long) 14, (long) '4');
        boolean boolean8 = mutableInterval2.contains((long) 53633080);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        org.joda.time.DateTime dateTime19 = dateTime15.plusMillis(22);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationFrom(readableInstant22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        org.joda.time.Duration duration35 = interval32.toDuration();
        org.joda.time.Duration duration37 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) '4');
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime38.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTime(dateTimeZone42);
        int int44 = dateTime43.getCenturyOfEra();
        org.joda.time.Interval interval45 = duration35.toIntervalTo((org.joda.time.ReadableInstant) dateTime43);
        int int46 = duration23.compareTo((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTime dateTime47 = dateTime19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.dayTime();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.days();
        int int50 = periodType48.indexOf(durationFieldType49);
        org.joda.time.Period period51 = duration35.toPeriod(periodType48);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetHours(1);
        boolean boolean59 = dateTimeZone58.isFixed();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((int) (short) -1, 2, 14, (int) (short) 1, 31, dateTimeZone58);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime61, (org.joda.time.ReadablePartial) localTime62, periodType63);
        org.joda.time.Period period66 = period64.minusDays(10);
        org.joda.time.Duration duration67 = period64.toStandardDuration();
        org.joda.time.Duration duration69 = org.joda.time.Duration.millis((long) (short) -1);
        long long70 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration69);
        long long71 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration72 = duration67.minus((org.joda.time.ReadableDuration) duration69);
        long long73 = duration67.getStandardDays();
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType75 = periodType74.withHoursRemoved();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property77 = dateTime76.era();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime();
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Period period82 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime83 = dateTime78.plus((org.joda.time.ReadablePeriod) period82);
        org.joda.time.Chronology chronology84 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTimeField dateTimeField85 = chronology84.halfdayOfDay();
        org.joda.time.DurationField durationField86 = chronology84.minutes();
        org.joda.time.DurationField durationField87 = chronology84.years();
        org.joda.time.Period period88 = duration67.toPeriod(periodType75, chronology84);
        int int89 = periodType75.size();
        org.joda.time.Period period90 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60, periodType75);
        org.joda.time.Period period91 = mutableInterval2.toPeriod(periodType75);
        org.joda.time.Period period92 = mutableInterval2.toPeriod();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 426L + "'", long3 == 426L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:00\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1149 + "'", int41 == 1149);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20 + "'", int44 == 20);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(period92);
    }

    @Test
    public void test13724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13724");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(69);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationFrom(readableInstant7);
        int int9 = period6.getHours();
        org.joda.time.Period period11 = period6.withYears(0);
        org.joda.time.LocalDate localDate13 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period6, (int) (short) 10);
        org.joda.time.LocalDate localDate15 = localDate13.withWeekyear((int) 'x');
        org.joda.time.LocalDate localDate17 = localDate13.plusDays(0);
        org.joda.time.DateTime dateTime18 = localDate13.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(457070);
        java.util.Locale locale22 = null;
        java.util.Calendar calendar23 = dateTime21.toCalendar(locale22);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=446270000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:00\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=6,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=57,SECOND=50,MILLISECOND=0,ZONE_OFFSET=10800000,DST_OFFSET=0]");
    }

    @Test
    public void test13725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13725");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval(1598400000L, (-21597814L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13726");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = period26.toDurationFrom(readableInstant27);
        long long29 = duration28.getMillis();
        org.joda.time.Duration duration30 = duration22.plus((org.joda.time.ReadableDuration) duration28);
        java.lang.String str31 = duration30.toString();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Period period36 = mutableInterval34.toPeriod();
        org.joda.time.PeriodType periodType37 = period36.getPeriodType();
        org.joda.time.PeriodType periodType38 = periodType37.withMinutesRemoved();
        org.joda.time.Period period39 = duration30.toPeriod(periodType38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        boolean boolean41 = duration30.isEqual(readableDuration40);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 35L + "'", long29 == 35L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.034S" + "'", str31, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 426L + "'", long35 == 426L);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test13727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13727");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property19 = dateTime17.millisOfDay();
        org.joda.time.DateTime.Property property20 = dateTime17.weekyear();
        org.joda.time.DateTime.Property property21 = dateTime17.weekOfWeekyear();
        boolean boolean22 = interval15.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime.Property property23 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime25 = property23.addToCopy(47354926);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test13728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13728");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale4);
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        java.lang.String str7 = locale0.getDisplayScript(locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale0);
        java.util.Locale locale9 = java.util.Locale.PRC;
        java.lang.String str10 = locale0.getDisplayLanguage(locale9);
        java.text.DateFormatSymbols dateFormatSymbols11 = java.text.DateFormatSymbols.getInstance(locale0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.Chronology chronology24 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.hourOfDay();
        int int28 = dateTimeField26.getLeapAmount(21L);
        int int30 = dateTimeField26.getMinimumValue(35099L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(35L, chronology32);
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getDurationType();
        org.joda.time.LocalTime localTime39 = localTime33.withFieldAdded(durationFieldType37, (-1));
        org.joda.time.LocalTime localTime41 = localTime39.plusHours(53633080);
        org.joda.time.LocalTime.Property property42 = localTime41.millisOfSecond();
        java.util.Calendar.Builder builder44 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder48 = builder44.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale51 = new java.util.Locale("", "hi!");
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale52);
        java.lang.String str54 = locale51.getDisplayScript(locale52);
        java.util.Calendar.Builder builder55 = builder48.setLocale(locale51);
        org.joda.time.LocalTime localTime56 = property42.setCopy("70", locale51);
        org.joda.time.LocalTime localTime57 = property42.roundHalfFloorCopy();
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder59.setLanguage("minutes");
        java.util.Locale.Builder builder62 = builder59.clear();
        java.util.Locale locale63 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder64 = builder62.setLocale(locale63);
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet66 = locale63.getExtensionKeys();
        java.lang.String str67 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localTime57, (int) (byte) 100, locale63);
        java.text.DateFormatSymbols dateFormatSymbols68 = new java.text.DateFormatSymbols(locale63);
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols70 = new java.text.DateFormatSymbols(locale69);
        java.lang.Object obj71 = dateFormatSymbols70.clone();
        java.util.Locale locale74 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols75 = new java.text.DateFormatSymbols(locale74);
        java.lang.String[] strArray77 = new java.lang.String[] { "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        dateFormatSymbols75.setAmPmStrings(strArray77);
        java.lang.String[] strArray79 = dateFormatSymbols75.getAmPmStrings();
        java.util.Locale locale80 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols81 = new java.text.DateFormatSymbols(locale80);
        java.lang.String[] strArray82 = dateFormatSymbols81.getMonths();
        java.text.DateFormatSymbols dateFormatSymbols83 = java.text.DateFormatSymbols.getInstance();
        java.util.Locale locale84 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols85 = new java.text.DateFormatSymbols(locale84);
        java.lang.String[] strArray86 = dateFormatSymbols85.getMonths();
        java.lang.String[] strArray87 = dateFormatSymbols85.getAmPmStrings();
        dateFormatSymbols83.setWeekdays(strArray87);
        dateFormatSymbols81.setEras(strArray87);
        dateFormatSymbols75.setEras(strArray87);
        dateFormatSymbols70.setEras(strArray87);
        java.lang.String[] strArray92 = dateFormatSymbols70.getShortWeekdays();
        java.lang.String[] strArray94 = java.util.TimeZone.getAvailableIDs(893);
        dateFormatSymbols70.setShortMonths(strArray94);
        java.lang.String[] strArray96 = dateFormatSymbols70.getAmPmStrings();
        dateFormatSymbols68.setShortWeekdays(strArray96);
        dateFormatSymbols11.setWeekdays(strArray96);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455794629,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=14,MILLISECOND=636,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals(locale51.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "100" + "'", str67, "100");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(locale74.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(dateFormatSymbols83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray94);
        org.junit.Assert.assertNotNull(strArray96);
    }

    @Test
    public void test13729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13729");
        java.util.Date date3 = new java.util.Date((int) (byte) 100, 32772, 893);
        long long4 = date3.getTime();
        date3.setTime(167693642668800000L);
        java.time.Instant instant7 = date3.toInstant();
        java.util.Date date8 = java.util.Date.from(instant7);
        java.time.Instant instant9 = date8.toInstant();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Dec 29 00:00:00 GMT+00:00 5315969");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 87205766399993L + "'", long4 == 87205766399993L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Mon Dec 29 00:00:00 GMT+00:00 5315969");
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test13730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13730");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        int int19 = durationField16.getDifference((long) 2, (long) (-1));
        int int22 = durationField16.getDifference(10L, (long) (short) 100);
        org.joda.time.DurationFieldType durationFieldType23 = durationField16.getType();
        long long25 = durationField16.getMillis(52);
        long long28 = durationField16.add((long) 51120000, (long) 4);
        long long29 = durationField16.getUnitMillis();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(35L, chronology31);
        org.joda.time.LocalTime localTime34 = localTime32.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        org.joda.time.LocalTime localTime38 = localTime32.withFieldAdded(durationFieldType36, (-1));
        org.joda.time.LocalTime localTime40 = localTime38.plusHours(53633080);
        org.joda.time.LocalTime.Property property41 = localTime40.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property41.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime45 = property41.addWrapFieldToCopy((int) 'x');
        org.joda.time.LocalTime localTime47 = property41.setCopy(16);
        org.joda.time.DateTimeField dateTimeField48 = property41.getField();
        org.joda.time.DurationField durationField49 = dateTimeField48.getRangeDurationField();
        int int50 = durationField16.compareTo(durationField49);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 164096150400000L + "'", long25 == 164096150400000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 12622831920000L + "'", long28 == 12622831920000L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3155695200000L + "'", long29 == 3155695200000L);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test13731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13731");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int19 = calendar8.getWeeksInWeekYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime20, (org.joda.time.ReadablePartial) localTime21, periodType22);
        org.joda.time.LocalTime localTime25 = localTime20.minusSeconds((int) (short) 100);
        boolean boolean26 = calendar8.before((java.lang.Object) localTime25);
        calendar8.set(31, (int) (byte) 100, 365);
        java.util.TimeZone timeZone31 = calendar8.getTimeZone();
        java.time.ZoneId zoneId32 = timeZone31.toZoneId();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone(zoneId32);
        int int34 = timeZone33.getRawOffset();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withField(dateTimeFieldType43, 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime42.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.minusMonths(5);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.dayOfYear();
        org.joda.time.LocalDateTime localDateTime56 = property54.addToCopy(478);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYearOfCentury(1);
        java.util.Locale locale61 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols62 = new java.text.DateFormatSymbols(locale61);
        boolean boolean63 = locale61.hasExtensions();
        java.util.Locale locale64 = locale61.stripExtensions();
        boolean boolean65 = localDateTime56.equals((java.lang.Object) locale61);
        boolean boolean66 = locale61.hasExtensions();
        java.lang.String str67 = locale61.getISO3Language();
        java.lang.String str68 = locale61.getLanguage();
        java.util.Set<java.lang.String> strSet69 = locale61.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = timeZone33.getDisplayName(false, 57540199, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 57540199");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:00\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=31,MONTH=100,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=365,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=3,HOUR_OF_DAY=0,MINUTE=893,SECOND=10,MILLISECOND=10,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertNotNull(zoneId32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10800000 + "'", int34 == 10800000);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertEquals(locale61.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(strSet69);
    }

    @Test
    public void test13732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13732");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DurationField durationField11 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology8);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test13733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13733");
        java.lang.Object obj0 = null;
        org.joda.time.Period period1 = new org.joda.time.Period(obj0);
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.Period period4 = period1.withYears(53764795);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime7.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMonths(0);
        int int17 = dateTime14.getYearOfEra();
        org.joda.time.Period period18 = duration6.toPeriodTo((org.joda.time.ReadableInstant) dateTime14);
        boolean boolean20 = dateTime14.isBefore((long) 51120000);
        org.joda.time.DateTime dateTime22 = dateTime14.plusWeeks(496);
        boolean boolean23 = period4.equals((java.lang.Object) dateTime22);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1149 + "'", int10 == 1149);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test13734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13734");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1970-01-01T00:00:00.000Z/1970-01-01T15:59:00.999Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970-01-01T00:00:00.000Z/1970-01-01T15:59:00.999Z\" is malformed at \"Z/1970-01-01T15:59:00.999Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13735");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = org.joda.time.MutableInterval.parse("86399999");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 86399999");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13736");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder17 = builder13.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale20 = new java.util.Locale("", "hi!");
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale20.getDisplayScript(locale21);
        java.util.Calendar.Builder builder24 = builder17.setLocale(locale20);
        org.joda.time.LocalTime localTime25 = property11.setCopy("70", locale20);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test13737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13737");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.DateTime dateTime5 = interval2.getEnd();
        org.joda.time.Chronology chronology6 = interval2.getChronology();
        org.joda.time.Period period8 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = dateTime10.toDateTime(chronology24);
        org.joda.time.DurationField durationField26 = chronology24.centuries();
        int int29 = durationField26.getDifference((long) 2, (long) (-1));
        int int32 = durationField26.getDifference(10L, (long) (short) 100);
        org.joda.time.DurationFieldType durationFieldType33 = durationField26.getType();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = interval39.isAfter((long) 10);
        org.joda.time.Duration duration42 = interval39.toDuration();
        org.joda.time.Chronology chronology43 = interval39.getChronology();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology43);
        org.joda.time.Period period46 = org.joda.time.Period.seconds(99);
        long long49 = chronology43.add((org.joda.time.ReadablePeriod) period46, (long) 53657, 0);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) 1, chronology43);
        org.joda.time.DurationField durationField51 = durationFieldType33.getField(chronology43);
        java.lang.String str52 = durationFieldType33.getName();
        int int53 = periodType9.indexOf(durationFieldType33);
        org.joda.time.Period period54 = interval2.toPeriod(periodType9);
        org.joda.time.Interval interval56 = interval2.withStartMillis(0L);
        org.joda.time.DateTime dateTime57 = interval2.getEnd();
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime60);
        boolean boolean63 = interval61.isAfter((long) 10);
        org.joda.time.Duration duration64 = interval61.toDuration();
        org.joda.time.Chronology chronology65 = interval61.getChronology();
        boolean boolean66 = durationFieldType58.isSupported(chronology65);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime67, (org.joda.time.ReadablePartial) localTime68, periodType69);
        org.joda.time.Period period72 = period70.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime73, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime79 = dateTime73.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime81 = dateTime79.plus((long) (byte) 10);
        org.joda.time.Period period83 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.Duration duration85 = period83.toDurationFrom(readableInstant84);
        org.joda.time.Seconds seconds86 = duration85.toStandardSeconds();
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableDuration) duration85);
        org.joda.time.Period period88 = period72.minus((org.joda.time.ReadablePeriod) period87);
        int int89 = period88.getWeeks();
        int int90 = period88.size();
        int[] intArray93 = chronology65.get((org.joda.time.ReadablePeriod) period88, (long) 52, (long) 893);
        org.joda.time.Seconds seconds94 = period88.toStandardSeconds();
        org.joda.time.Interval interval95 = interval2.withPeriodAfterStart((org.joda.time.ReadablePeriod) period88);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53657L + "'", long49 == 53657L);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "centuries" + "'", str52, "centuries");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(seconds86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[0, 0, 0, 0, 0, 0, 0, 841]");
        org.junit.Assert.assertNotNull(seconds94);
        org.junit.Assert.assertNotNull(interval95);
    }

    @Test
    public void test13738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13738");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusDays(100);
        int int19 = localDateTime13.getYearOfEra();
        org.joda.time.LocalDateTime.Property property20 = localDateTime13.dayOfYear();
        int int21 = localDateTime13.getYearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(35L, chronology23);
        org.joda.time.LocalTime localTime26 = localTime24.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        org.joda.time.LocalTime localTime30 = localTime24.withFieldAdded(durationFieldType28, (-1));
        org.joda.time.LocalTime localTime32 = localTime30.plusHours(53633080);
        org.joda.time.LocalTime.Property property33 = localTime32.millisOfSecond();
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder39 = builder35.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale42 = new java.util.Locale("", "hi!");
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale43);
        java.lang.String str45 = locale42.getDisplayScript(locale43);
        java.util.Calendar.Builder builder46 = builder39.setLocale(locale42);
        org.joda.time.LocalTime localTime47 = property33.setCopy("70", locale42);
        org.joda.time.LocalTime localTime48 = property33.roundHalfFloorCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray49 = localTime48.getFields();
        // The following exception was thrown during execution in test generation
        try {
            int int50 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 14 + "'", int21 == 14);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldArray49);
    }

    @Test
    public void test13739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13739");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.plus((long) (byte) 10);
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = period10.toDurationFrom(readableInstant11);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateTime dateTime16 = dateTime8.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withField(dateTimeFieldType23, 100);
        int int26 = dateTime16.get(dateTimeFieldType23);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Duration duration30 = org.joda.time.Duration.millis((long) (short) -1);
        long long31 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration30);
        long long32 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime38 = dateTime33.plus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period40 = period37.plusMonths(16);
        org.joda.time.PeriodType periodType41 = period40.getPeriodType();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Interval interval46 = interval44.toInterval();
        org.joda.time.Period period47 = interval44.toPeriod();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = interval50.isAfter((long) 10);
        org.joda.time.Duration duration53 = interval50.toDuration();
        boolean boolean54 = interval44.abuts((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = interval59.isAfter((long) 10);
        org.joda.time.Duration duration62 = interval59.toDuration();
        org.joda.time.Chronology chronology63 = interval59.getChronology();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology63);
        org.joda.time.Chronology chronology65 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.Interval interval66 = interval44.withChronology(chronology65);
        org.joda.time.DurationField durationField67 = chronology65.centuries();
        org.joda.time.Period period68 = duration30.toPeriod(periodType41, chronology65);
        org.joda.time.Period period69 = new org.joda.time.Period(672L, periodType28, chronology65);
        org.joda.time.DateTime dateTime70 = dateTime16.minus((org.joda.time.ReadablePeriod) period69);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 68982321 + "'", int26 == 68982321);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test13740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13740");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.text.DateFormatSymbols dateFormatSymbols2 = java.text.DateFormatSymbols.getInstance(locale0);
        dateFormatSymbols2.setLocalPatternChars("hi!");
        java.lang.String[] strArray5 = dateFormatSymbols2.getShortWeekdays();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols7 = new java.text.DateFormatSymbols(locale6);
        java.lang.Object obj8 = dateFormatSymbols7.clone();
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols7.setMonths(strArray15);
        dateFormatSymbols2.setWeekdays(strArray15);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols19 = new java.text.DateFormatSymbols(locale18);
        java.text.DateFormatSymbols dateFormatSymbols20 = java.text.DateFormatSymbols.getInstance(locale18);
        dateFormatSymbols20.setLocalPatternChars("hi!");
        java.lang.String[] strArray23 = dateFormatSymbols20.getShortWeekdays();
        dateFormatSymbols2.setWeekdays(strArray23);
        java.lang.String[] strArray25 = dateFormatSymbols2.getMonths();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        boolean boolean31 = strSet28.addAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.Iterator<java.lang.String> strItor32 = strSet30.iterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.parse("minutes", strMap34);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags(languageRangeList35, (java.util.Collection<java.lang.String>) strSet38);
        boolean boolean40 = strSet30.removeAll((java.util.Collection<java.lang.String>) strSet38);
        java.util.Locale locale43 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols44 = new java.text.DateFormatSymbols(locale43);
        java.lang.String[] strArray46 = new java.lang.String[] { "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        dateFormatSymbols44.setAmPmStrings(strArray46);
        java.lang.String[] strArray48 = dateFormatSymbols44.getAmPmStrings();
        java.lang.String[] strArray49 = dateFormatSymbols44.getShortWeekdays();
        java.io.Serializable[] serializableArray50 = strSet38.toArray((java.io.Serializable[]) strArray49);
        dateFormatSymbols2.setMonths(strArray49);
        java.lang.String[] strArray52 = dateFormatSymbols2.getEras();
        java.lang.String[] strArray53 = dateFormatSymbols2.getAmPmStrings();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals(locale43.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(serializableArray50);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
    }

    @Test
    public void test13741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13741");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        boolean boolean8 = interval6.isAfter((long) 10);
        org.joda.time.Duration duration9 = interval6.toDuration();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.Duration duration17 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) '4');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getCenturyOfEra();
        org.joda.time.Interval interval25 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime23);
        int int26 = duration3.compareTo((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period27 = duration15.toPeriod();
        org.joda.time.Period period29 = period27.withSeconds(68);
        org.joda.time.Period period31 = period27.plusMonths(7);
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1149 + "'", int21 == 1149);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test13742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13742");
        java.util.Date date3 = new java.util.Date((int) (byte) 100, 32772, 893);
        java.lang.String str4 = date3.toLocaleString();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromDateFields(date3);
        int int6 = date3.getTimezoneOffset();
        date3.setYear(0);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Jun 11 00:00:00 GMT+00:00 1900");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jun 11, 4733 12:00:00 AM" + "'", str4, "Jun 11, 4733 12:00:00 AM");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test13743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13743");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.setLanguage("minutes");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder6 = builder4.setLocale(locale5);
        java.util.Locale locale7 = builder6.build();
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str11 = nameProvider0.getName(locale7, "1", "PT14H");
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setLanguage("minutes");
        java.util.Locale locale15 = builder12.build();
        java.util.Locale locale18 = new java.util.Locale("", "hi!");
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale19);
        java.lang.String str21 = locale18.getDisplayScript(locale19);
        java.lang.String str22 = locale15.getDisplayCountry(locale18);
        java.lang.String str25 = nameProvider0.getShortName(locale18, "99", "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=65,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale18);
        int int27 = calendar26.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "minutes");
        org.junit.Assert.assertEquals(locale18.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645455795002,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=15,MILLISECOND=9,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test13744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13744");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy(5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDate4.getFieldTypes();
        org.joda.time.LocalDate localDate7 = localDate4.withWeekyear(99);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setLanguage("minutes");
        java.util.Locale.Builder builder12 = builder9.clear();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder14 = builder12.setLocale(locale13);
        java.lang.String str15 = localDate7.toString("53636902", locale13);
        org.joda.time.LocalDate localDate17 = localDate7.plusWeeks(762);
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property19 = localDate17.year();
        org.joda.time.LocalDate localDate20 = property19.roundHalfEvenCopy();
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider21);
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.lang.String str26 = locale23.getVariant();
        java.lang.String str29 = nameProvider21.getName(locale23, "0014-05-12T20:00:01.893", "hi!");
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.setLanguage("minutes");
        java.util.Locale.Builder builder35 = builder32.clear();
        java.util.Locale locale36 = builder32.build();
        java.lang.String str37 = locale30.getDisplayName(locale36);
        java.util.Set<java.lang.Character> charSet38 = locale30.getExtensionKeys();
        java.util.Set<java.lang.String> strSet39 = locale30.getUnicodeLocaleKeys();
        java.lang.String str42 = nameProvider21.getName(locale30, "", "DateTimeField[weekyear]");
        boolean boolean43 = localDate20.equals((java.lang.Object) nameProvider21);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "53636902" + "'", str15, "53636902");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test13745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13745");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        int int3 = property1.getMaximumValueOverall();
        int int4 = property1.getMinimumValueOverall();
        org.joda.time.DateTime dateTime5 = property1.withMaximumValue();
        org.joda.time.DateTime dateTime6 = property1.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = property1.setCopy("2022-02-21T15:45:40.931Z/2022-02-21T15:45:40.931Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T15:45:40.931Z/2022-02-21T15:45:40.931Z\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test13746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13746");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime1.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.centuries();
        java.lang.String str18 = chronology15.toString();
        org.joda.time.DurationField durationField19 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType0.getField(chronology15);
        long long24 = dateTimeField22.roundHalfEven(79200000L);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.Chronology chronology33 = interval29.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.eras();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withField(dateTimeFieldType41, 100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime40.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        boolean boolean58 = interval56.isAfter((long) 10);
        org.joda.time.Duration duration59 = interval56.toDuration();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        boolean boolean64 = interval62.isAfter((long) 10);
        org.joda.time.Duration duration65 = interval62.toDuration();
        org.joda.time.Duration duration67 = duration59.withDurationAdded((org.joda.time.ReadableDuration) duration65, (int) '4');
        boolean boolean68 = localDateTime53.equals((java.lang.Object) duration65);
        int[] intArray70 = chronology33.get((org.joda.time.ReadablePartial) localDateTime53, (long) 22);
        org.joda.time.DateTimeField dateTimeField71 = chronology33.yearOfCentury();
        java.util.Locale locale73 = java.util.Locale.ENGLISH;
        java.lang.String str74 = dateTimeField71.getAsShortText((long) 22, locale73);
        java.lang.String str75 = locale73.getDisplayName();
        java.lang.String str76 = locale73.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            long long77 = dateTimeField22.set((long) 47876, "172", locale73);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 172 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+03:00]" + "'", str18, "ISOChronology[+03:00]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 75600000L + "'", long24 == 75600000L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[1970, 1, 1, 10800022]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "70" + "'", str74, "70");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "English" + "'", str75, "English");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "English" + "'", str76, "English");
    }

    @Test
    public void test13747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13747");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        int int5 = dateTime0.getCenturyOfEra();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Chronology chronology12 = interval8.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        org.joda.time.DurationField durationField14 = chronology12.eras();
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(35L, chronology17);
        org.joda.time.LocalTime localTime20 = localTime18.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        org.joda.time.LocalTime localTime24 = localTime18.withFieldAdded(durationFieldType22, (-1));
        org.joda.time.LocalTime localTime26 = localTime24.plusHours(53633080);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfSecond();
        org.joda.time.LocalTime localTime29 = property27.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime31 = property27.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime32 = property27.withMaximumValue();
        java.lang.String str33 = localTime32.toString();
        org.joda.time.LocalTime localTime35 = localTime32.plusMinutes(48);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean37 = localTime32.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType36.getField(chronology38);
        boolean boolean40 = dateTime15.isSupported(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType36.getDurationType();
        java.lang.String str42 = durationFieldType41.getName();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "18:59:00.999" + "'", str33, "18:59:00.999");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "weeks" + "'", str42, "weeks");
    }

    @Test
    public void test13748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13748");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.Duration duration13 = duration5.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) '4');
        org.joda.time.Period period14 = new org.joda.time.Period((java.lang.Object) duration11);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
    }

    @Test
    public void test13749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13749");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(3);
        int int3 = dateTimeZone1.getOffset((long) 53960);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10800000 + "'", int3 == 10800000);
    }

    @Test
    public void test13750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13750");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = interval7.isBefore(readableInstant8);
        org.joda.time.Period period10 = interval7.toPeriod();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.Period period13 = period10.withPeriodType(periodType11);
        org.joda.time.Period period15 = period10.plusMillis(44);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.Period period17 = period15.withFields(readablePeriod16);
        org.joda.time.Period period19 = period17.plusDays(53788450);
        int int20 = period17.getYears();
        org.joda.time.Period period22 = period17.minusYears(210952);
        org.joda.time.Period period24 = period17.plusSeconds(4470008);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test13751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13751");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        java.lang.String str4 = interval2.toString();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime15.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTime(dateTimeZone19);
        int int21 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.Duration duration35 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) '4');
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration27);
        mutableInterval5.setDurationAfterStart((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval38 = interval2.overlap((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.Period period39 = mutableInterval5.toPeriod();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime46 = dateTime43.toLocalTime();
        boolean boolean47 = mutableInterval5.equals((java.lang.Object) dateTime43);
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableInterval5.setDurationBeforeEnd(readableDuration48);
        org.joda.time.Period period50 = mutableInterval5.toPeriod();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T19:09:42.311+03:00/2022-02-21T19:09:42.311+03:00" + "'", str4, "2022-02-21T19:09:42.311+03:00/2022-02-21T19:09:42.311+03:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1149 + "'", int18 == 1149);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test13752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13752");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(1645455389872L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(10L, chronology3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        int int6 = dateTime4.get(dateTimeFieldType5);
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(4);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime16 = dateTime12.withWeekyear(1);
        org.joda.time.Duration duration17 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.LocalTime localTime18 = dateTime4.toLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str20 = dateTimeFieldType19.getName();
        org.joda.time.LocalTime.Property property21 = localTime18.property(dateTimeFieldType19);
        boolean boolean22 = localTime1.isSupported(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "clockhourOfHalfday" + "'", str20, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test13753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13753");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        boolean boolean8 = interval6.isAfter((long) 10);
        org.joda.time.Duration duration9 = interval6.toDuration();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.Duration duration17 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) '4');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getCenturyOfEra();
        org.joda.time.Interval interval25 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime23);
        int int26 = duration3.compareTo((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period27 = duration15.toPeriod();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime34 = dateTime28.withDate(6, (int) (short) 1, 4);
        org.joda.time.Period period35 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property36 = dateTime28.secondOfMinute();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime37.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime45 = dateTime43.plus((long) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime43.withYear(762);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        boolean boolean54 = interval52.isAfter((long) 10);
        org.joda.time.Duration duration55 = interval52.toDuration();
        org.joda.time.Chronology chronology56 = interval52.getChronology();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology56);
        org.joda.time.Chronology chronology58 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.DateTime dateTime59 = dateTime43.withChronology(chronology58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean62 = dateTimeZone61.isFixed();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 2, dateTimeZone61);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeUtils.getZone(dateTimeZone61);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        java.util.TimeZone timeZone67 = dateTimeZone65.toTimeZone();
        java.lang.String str69 = dateTimeZone65.getNameKey((long) 3);
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleAttributes();
        java.lang.String str73 = dateTimeZone65.getName(3155695200000L, locale71);
        org.joda.time.DateTime dateTime74 = dateTime59.withZone(dateTimeZone65);
        int int75 = property36.compareTo((org.joda.time.ReadableInstant) dateTime59);
        java.lang.String str76 = dateTime59.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period77 = new org.joda.time.Period((java.lang.Object) str76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0006-01-04T19:09:42.311+03:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1149 + "'", int21 == 1149);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+03:00" + "'", str73, "+03:00");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "0006-01-04T19:09:42.311+03:00" + "'", str76, "0006-01-04T19:09:42.311+03:00");
    }

    @Test
    public void test13754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13754");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property4.withMinimumValue();
        int int7 = localDate6.getDayOfMonth();
        int int8 = localDate6.getWeekyear();
        org.joda.time.LocalDate localDate10 = localDate6.withWeekyear(53657);
        boolean boolean11 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDate10);
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test13755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13755");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyearOfCentury();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField13.getType();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16, periodType17);
        org.joda.time.LocalTime localTime20 = localTime15.minusSeconds((int) (short) 100);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = period22.toDurationFrom(readableInstant23);
        int int25 = period22.getHours();
        org.joda.time.LocalTime localTime26 = localTime20.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalTime localTime28 = localTime26.plusHours((int) 'x');
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localTime28.getFields();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property33 = dateTime31.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property33.getFieldType();
        org.joda.time.LocalTime.Property property35 = localTime28.property(dateTimeFieldType34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period40 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime41 = dateTime36.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property43 = dateTime42.era();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Period period48 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime49 = dateTime44.plus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime51 = dateTime36.toDateTime(chronology50);
        org.joda.time.DurationField durationField52 = chronology50.centuries();
        int int55 = durationField52.getDifference((long) 2, (long) (-1));
        int int58 = durationField52.getDifference((long) 6, (long) 100);
        org.joda.time.DurationFieldType durationFieldType59 = durationField52.getType();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Interval interval64 = interval62.toInterval();
        boolean boolean66 = interval62.contains((long) 1970);
        org.joda.time.Interval interval67 = interval62.toInterval();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime69);
        boolean boolean72 = interval70.isAfter((long) 10);
        boolean boolean73 = interval67.abuts((org.joda.time.ReadableInterval) interval70);
        org.joda.time.Chronology chronology74 = interval70.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.secondOfDay();
        boolean boolean76 = durationFieldType59.isSupported(chronology74);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType34.getField(chronology74);
        boolean boolean79 = dateTimeFieldType14.isSupported(chronology74);
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType14.getRangeDurationType();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(durationFieldType80);
    }

    @Test
    public void test13756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13756");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-1L), dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfWeek(2);
        org.joda.time.LocalDate localDate9 = localDate5.plusWeeks((int) (short) 10);
        int int10 = localDate5.getYear();
        org.joda.time.LocalDate localDate12 = localDate5.plusDays(32469);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) localDate12, dateTimeZone13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test13757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13757");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime1.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime18, periodType19);
        org.joda.time.LocalTime localTime22 = localTime18.withMillisOfSecond(4);
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) localTime18, (long) 0);
        org.joda.time.Chronology chronology25 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfYear();
        int int28 = dateTimeField26.getLeapAmount(378691200010L);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(10L, chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime31.plusWeeks(4);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar calendar37 = dateTime35.toCalendar(locale36);
        java.lang.String str38 = locale36.getDisplayVariant();
        java.util.Set<java.lang.String> strSet39 = locale36.getUnicodeLocaleKeys();
        int int40 = dateTimeField26.getMaximumTextLength(locale36);
        java.util.Locale.setDefault(category0, locale36);
        java.util.Set<java.lang.String> strSet42 = locale36.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[3, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:00\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(strSet42);
    }

    @Test
    public void test13758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13758");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(32772);
        org.joda.time.Period period2 = period1.toPeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test13759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13759");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime16 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime18 = property11.addNoWrapToCopy(32770);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localTime20, periodType21);
        org.joda.time.Period period24 = period22.minusYears(893);
        org.joda.time.Period period26 = period22.plusMillis((int) (short) -1);
        org.joda.time.LocalTime localTime27 = localTime18.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = period26.withMillis(893);
        org.joda.time.Period period31 = period29.withYears(945);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
    }

    @Test
    public void test13760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13760");
        java.util.Date date3 = new java.util.Date(100, 2, (int) (short) 1);
        date3.setTime((long) 2);
        int int6 = date3.getMonth();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.LocalDate localDate9 = localDate7.plusMonths((-22601));
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test13761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13761");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.plus((long) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(762);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime6.getZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int int14 = dateTimeZone11.getOffsetFromLocal((long) 2000);
        boolean boolean15 = dateTimeZone11.isFixed();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10800000 + "'", int14 == 10800000);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test13762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13762");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusWeeks(4);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis(22);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationFrom(readableInstant14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        int int33 = dateTime30.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTime(dateTimeZone34);
        int int36 = dateTime35.getCenturyOfEra();
        org.joda.time.Interval interval37 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        int int38 = duration15.compareTo((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime39 = dateTime11.plus((org.joda.time.ReadableDuration) duration27);
        long long40 = duration27.getStandardSeconds();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths(8);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Chronology chronology50 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval49);
        org.joda.time.DurationField durationField51 = chronology50.days();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) (-1963), chronology50);
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:00\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1149 + "'", int33 == 1149);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20 + "'", int36 == 20);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test13763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13763");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 1237);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test13764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13764");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        int int3 = period1.getValue(0);
        org.joda.time.Period period4 = period1.normalizedStandard();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period7 = period1.withField(durationFieldType5, 478);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        org.joda.time.Duration duration13 = interval10.toDuration();
        org.joda.time.Chronology chronology14 = interval10.getChronology();
        org.joda.time.DurationField durationField15 = durationFieldType5.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.dayOfWeek();
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getChronology(chronology14);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test13765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13765");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property4.withMinimumValue();
        int int8 = localDate6.getValue((int) (byte) 1);
        java.lang.String str9 = localDate6.toString();
        java.lang.String str10 = localDate6.toString();
        org.joda.time.LocalDate.Property property11 = localDate6.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(86399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969-01-01" + "'", str9, "1969-01-01");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1969-01-01" + "'", str10, "1969-01-01");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test13766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13766");
        java.util.Date date3 = new java.util.Date((int) (byte) 100, 32772, 893);
        java.lang.String str4 = date3.toLocaleString();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks(4);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        java.util.Date date15 = calendar14.getTime();
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder20 = builder16.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder24 = builder20.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(10L, chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = dateTime27.plusWeeks(4);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Calendar calendar33 = dateTime31.toCalendar(locale32);
        java.util.TimeZone timeZone34 = calendar33.getTimeZone();
        java.util.Calendar.Builder builder35 = builder20.setTimeZone(timeZone34);
        timeZone34.setID("65");
        calendar14.setTimeZone(timeZone34);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromCalendarFields(calendar14);
        org.joda.time.LocalDate.Property property40 = localDate39.weekOfWeekyear();
        org.joda.time.LocalDate localDate41 = property40.roundHalfEvenCopy();
        boolean boolean42 = localDate5.equals((java.lang.Object) localDate41);
        org.joda.time.LocalDate.Property property43 = localDate41.weekOfWeekyear();
        org.joda.time.LocalDate.Property property44 = localDate41.monthOfYear();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 11 00:00:00 GMT+00:00 4733");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jun 11, 4733 12:00:00 AM" + "'", str4, "Jun 11, 4733 12:00:00 AM");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"65\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 29 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"65\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test13767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13767");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("0014-05-12T20:00:00.000", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13768");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(99L);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Interval interval23 = interval21.toInterval();
        boolean boolean25 = interval21.contains((long) 1970);
        org.joda.time.Interval interval26 = interval21.toInterval();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        boolean boolean32 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Interval interval33 = interval29.toInterval();
        long long34 = interval29.getEndMillis();
        org.joda.time.Interval interval36 = interval29.withStartMillis((long) 8);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.months();
        java.lang.String str38 = periodType37.getName();
        org.joda.time.Period period39 = interval36.toPeriod(periodType37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime18.minus((org.joda.time.ReadablePeriod) period39);
        int int41 = localDateTime18.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(interval33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645459782311L + "'", long34 == 1645459782311L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Months" + "'", str38, "Months");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
    }

    @Test
    public void test13769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13769");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(1);
        long long5 = dateTimeZone2.convertLocalToUTC(1645455366482L, false);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((-1639349041000L), dateTimeZone2);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645451766482L + "'", long5 == 1645451766482L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test13770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13770");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.withMaximumValue();
        int int6 = localDate5.getDayOfYear();
        org.joda.time.LocalDate.Property property7 = localDate5.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDate localDate10 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate12 = localDate10.withYearOfCentury(0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 335 + "'", int6 == 335);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test13771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13771");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1645455243008L);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test13772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13772");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.months();
        org.joda.time.Period period6 = duration3.toPeriod(periodType5);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) localTime8, periodType9);
        org.joda.time.Period period12 = period10.minusDays(10);
        org.joda.time.Duration duration13 = period10.toStandardDuration();
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis((long) (short) -1);
        long long16 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        long long17 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = duration13.minus((org.joda.time.ReadableDuration) duration15);
        long long19 = duration13.getStandardDays();
        boolean boolean20 = duration3.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        boolean boolean22 = duration13.isEqual((org.joda.time.ReadableDuration) duration21);
        long long23 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(35L, chronology25);
        org.joda.time.LocalTime localTime28 = localTime26.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        org.joda.time.LocalTime localTime32 = localTime26.withFieldAdded(durationFieldType30, (-1));
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime33, (org.joda.time.ReadablePartial) localTime34, periodType35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime37.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime46 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime.Property property47 = dateTime43.year();
        org.joda.time.DateTime dateTime48 = property47.withMinimumValue();
        org.joda.time.DateTime.Property property49 = dateTime48.millisOfDay();
        org.joda.time.DateTime dateTime50 = dateTime48.withLaterOffsetAtOverlap();
        boolean boolean51 = localTime26.equals((java.lang.Object) dateTime48);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days54 = duration53.toStandardDays();
        org.joda.time.Period period55 = duration53.toPeriod();
        org.joda.time.Period period56 = period55.toPeriod();
        org.joda.time.Period period58 = period55.withWeeks(6);
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long62 = mutableInterval61.toDurationMillis();
        mutableInterval61.setInterval((long) 14, (long) '4');
        boolean boolean67 = mutableInterval61.contains((long) 53633080);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period69 = mutableInterval61.toPeriod(periodType68);
        org.joda.time.Period period70 = period55.normalizedStandard(periodType68);
        org.joda.time.Period period71 = duration13.toPeriodTo((org.joda.time.ReadableInstant) dateTime48, periodType68);
        org.joda.time.Period period72 = period71.normalizedStandard();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 426L + "'", long62 == 426L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
    }

    @Test
    public void test13773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13773");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.hourOfDay();
        java.lang.String str18 = property17.getAsShortText();
        java.lang.String str19 = property17.getAsString();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "20" + "'", str18, "20");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "20" + "'", str19, "20");
    }

    @Test
    public void test13774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13774");
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval((long) (-1), 1415750453654L);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = period5.toDurationFrom(readableInstant6);
        long long8 = duration7.getMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.millis((long) (short) -1);
        long long11 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration10);
        long long12 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration13 = duration10.toDuration();
        long long14 = duration13.getMillis();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 10, chronology16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        org.joda.time.Hours hours20 = duration13.toStandardHours();
        org.joda.time.Duration duration23 = duration13.withDurationAdded((long) '#', (int) (byte) 0);
        boolean boolean24 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration23);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period26 = new org.joda.time.Period((java.lang.Object) duration7);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period29 = period26.withFieldAdded(durationFieldType27, (int) (byte) -1);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        org.joda.time.Duration duration35 = interval32.toDuration();
        org.joda.time.Chronology chronology36 = interval32.getChronology();
        boolean boolean37 = durationFieldType27.isSupported(chronology36);
        org.joda.time.Period period38 = new org.joda.time.Period(1645433775366L, chronology36);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekOfWeekyear();
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 35L + "'", long8 == 35L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(hours20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test13775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13775");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(3);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        timeZone2.setID("Thu Jan 20 00:00:00 GMT+00:00 5425");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+03:00");
    }

    @Test
    public void test13776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13776");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate7 = property4.withMinimumValue();
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(45);
        int int10 = localDate9.size();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test13777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13777");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime3, periodType4);
        org.joda.time.LocalTime localTime7 = localTime2.minusSeconds((int) (short) 100);
        boolean boolean8 = localTime1.equals((java.lang.Object) (short) 100);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime15 = dateTime12.toLocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.Period period17 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16);
        int int18 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime16);
        org.joda.time.LocalTime localTime20 = localTime1.plusHours(53137460);
        org.joda.time.LocalTime localTime22 = localTime1.plusHours(825);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test13778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13778");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale5, locale7, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList14, filteringMode16);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale21, locale23, locale25, locale26, locale27, locale28 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList17, filteringMode32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale40);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale40, locale42, locale44, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList49, filteringMode51);
        java.util.Locale locale53 = java.util.Locale.lookup(languageRangeList36, (java.util.Collection<java.util.Locale>) localeList49);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode51.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
    }

    @Test
    public void test13779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13779");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(8920293628L);
    }

    @Test
    public void test13780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13780");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        boolean boolean7 = dateTime0.equals((java.lang.Object) "en_CA");
        org.joda.time.DateTime dateTime9 = dateTime0.minusMinutes(47478);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test13781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13781");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean23 = interval21.isAfter((long) 10);
        org.joda.time.Duration duration24 = interval21.toDuration();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean29 = interval27.isAfter((long) 10);
        org.joda.time.Duration duration30 = interval27.toDuration();
        org.joda.time.Duration duration32 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) '4');
        boolean boolean33 = localDateTime18.equals((java.lang.Object) duration30);
        org.joda.time.Chronology chronology34 = localDateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.era();
        org.joda.time.Period period37 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = period37.toDurationFrom(readableInstant38);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        boolean boolean44 = interval42.isAfter((long) 10);
        org.joda.time.Duration duration45 = interval42.toDuration();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = interval48.isAfter((long) 10);
        org.joda.time.Duration duration51 = interval48.toDuration();
        org.joda.time.Duration duration53 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) '4');
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        int int57 = dateTime54.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = dateTime54.toDateTime(dateTimeZone58);
        int int60 = dateTime59.getCenturyOfEra();
        org.joda.time.Interval interval61 = duration51.toIntervalTo((org.joda.time.ReadableInstant) dateTime59);
        int int62 = duration39.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period63 = duration51.toPeriod();
        org.joda.time.Duration duration66 = duration51.withDurationAdded((long) 'a', 52);
        org.joda.time.Duration duration67 = duration51.toDuration();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        boolean boolean70 = duration51.isEqual((org.joda.time.ReadableDuration) duration69);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Period period72 = duration51.toPeriodFrom(readableInstant71);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = period72.normalizedStandard(periodType73);
        int[] intArray76 = chronology34.get((org.joda.time.ReadablePeriod) period72, (long) 53130794);
        java.lang.String str77 = chronology34.toString();
        org.joda.time.DateTimeField dateTimeField78 = chronology34.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField79 = chronology34.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1149 + "'", int57 == 1149);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 20 + "'", int60 == 20);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 14, 45, 30, 794]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ISOChronology[UTC]" + "'", str77, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test13782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13782");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.withMaximumValue();
        int int6 = localDate5.getDayOfYear();
        org.joda.time.LocalDate.Property property7 = localDate5.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDate localDate10 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate12 = property7.setCopy(29);
        org.joda.time.LocalDate localDate13 = property7.roundHalfCeilingCopy();
        java.util.Date date14 = localDate13.toDate();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property17 = localDate16.dayOfWeek();
        org.joda.time.LocalDate localDate19 = localDate16.plusWeeks(69);
        int int20 = localDate19.getYear();
        boolean boolean21 = localDate13.isAfter((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.DateTime.Property property26 = dateTime25.centuryOfEra();
        org.joda.time.DateTime dateTime28 = dateTime25.minus(1645455229061L);
        boolean boolean29 = dateTime28.isAfterNow();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate33 = localDate31.withDayOfMonth(21);
        org.joda.time.LocalDate localDate35 = localDate33.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTimeAtMidnight(dateTimeZone36);
        org.joda.time.LocalDate.Property property38 = localDate35.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate localDate41 = localDate35.withField(dateTimeFieldType39, 59);
        org.joda.time.DateTime dateTime43 = dateTime28.withField(dateTimeFieldType39, 52);
        int int44 = localDate19.indexOf(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 335 + "'", int6 == 335);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Sat Jan 01 00:00:00 GMT+00:00 2000");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1971 + "'", int20 == 1971);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test13783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13783");
        java.util.Locale locale2 = new java.util.Locale("", "hi!");
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale3);
        java.lang.String str5 = locale2.getDisplayScript(locale3);
        boolean boolean6 = locale3.hasExtensions();
        java.text.DateFormatSymbols dateFormatSymbols7 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale3);
        java.lang.String[] strArray8 = dateFormatSymbols7.getMonths();
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols10 = new java.text.DateFormatSymbols(locale9);
        java.text.DateFormatSymbols dateFormatSymbols11 = java.text.DateFormatSymbols.getInstance(locale9);
        dateFormatSymbols11.setLocalPatternChars("hi!");
        java.lang.String[] strArray14 = dateFormatSymbols11.getShortWeekdays();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols16 = new java.text.DateFormatSymbols(locale15);
        java.lang.Object obj17 = dateFormatSymbols16.clone();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!", "70", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "minutes" };
        dateFormatSymbols16.setMonths(strArray24);
        dateFormatSymbols11.setWeekdays(strArray24);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols28 = new java.text.DateFormatSymbols(locale27);
        java.text.DateFormatSymbols dateFormatSymbols29 = java.text.DateFormatSymbols.getInstance(locale27);
        dateFormatSymbols29.setLocalPatternChars("hi!");
        java.lang.String[] strArray32 = dateFormatSymbols29.getShortWeekdays();
        dateFormatSymbols11.setWeekdays(strArray32);
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols35 = new java.text.DateFormatSymbols(locale34);
        java.lang.String[] strArray36 = dateFormatSymbols35.getMonths();
        java.lang.String[] strArray38 = java.util.TimeZone.getAvailableIDs(53661);
        dateFormatSymbols35.setShortWeekdays(strArray38);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols41 = new java.text.DateFormatSymbols(locale40);
        java.lang.String[] strArray42 = dateFormatSymbols41.getMonths();
        dateFormatSymbols35.setWeekdays(strArray42);
        dateFormatSymbols11.setShortMonths(strArray42);
        java.lang.String[] strArray45 = dateFormatSymbols11.getShortMonths();
        dateFormatSymbols7.setWeekdays(strArray45);
        org.junit.Assert.assertEquals(locale2.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateFormatSymbols7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols29);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray45);
    }

    @Test
    public void test13784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13784");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear((int) 'x');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withField(dateTimeFieldType30, 893);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.withYearOfCentury(2);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime36.centuryOfEra();
        int int40 = localDateTime36.getDayOfYear();
        org.joda.time.LocalDateTime.Property property41 = localDateTime36.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 120 + "'", int40 == 120);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test13785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13785");
        java.util.Date date5 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        java.util.Date date9 = new java.util.Date(2022, 1970, (int) (short) 100);
        int int10 = date9.getSeconds();
        boolean boolean11 = date5.before(date9);
        java.util.Date date15 = new java.util.Date(2022, 1970, (int) (short) 100);
        int int16 = date15.getTimezoneOffset();
        date15.setHours(10);
        date15.setTime((long) 53648193);
        boolean boolean21 = date9.before(date15);
        java.lang.String str22 = date15.toLocaleString();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromDateFields(date15);
        int int24 = date15.getHours();
        date15.setMinutes(248086830);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 04 01:10:00 GMT+00:00 8039");
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Jun 08 00:00:00 GMT+00:00 4086");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Wed Sep 11 02:30:08 GMT+00:00 2441");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Jan 1, 1970 2:54:08 PM" + "'", str22, "Jan 1, 1970 2:54:08 PM");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 14 + "'", int24 == 14);
    }

    @Test
    public void test13786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13786");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime5.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfDay(53623795);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra(2022);
        int int25 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withField(dateTimeFieldType32, 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime31.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int40 = localDateTime31.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean42 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime43 = localDateTime31.toDateTime(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime31.withSecondOfMinute(8);
        int int46 = localDateTime31.getYear();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType49 = periodType47.getFieldType((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        java.lang.String str52 = durationFieldType51.toString();
        boolean boolean53 = periodType47.isSupported(durationFieldType51);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime22, (org.joda.time.ReadablePartial) localDateTime31, periodType47);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime31.plusSeconds(79);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusDays(536258);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 14 + "'", int25 == 14);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 14 + "'", int46 == 14);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "minutes" + "'", str52, "minutes");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test13787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13787");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime28 = dateTime23.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyear();
        org.joda.time.DurationField durationField33 = chronology29.centuries();
        org.joda.time.Chronology chronology34 = chronology29.withUTC();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime38 = interval37.getEnd();
        org.joda.time.DateTime.Property property39 = dateTime38.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone40.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((java.lang.Object) dateTime38, dateTimeZone40);
        long long48 = dateTimeZone40.convertLocalToUTC(35L, false, 1L);
        org.joda.time.Chronology chronology49 = chronology34.withZone(dateTimeZone40);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime50, (org.joda.time.ReadablePartial) localTime51, periodType52);
        org.joda.time.LocalTime localTime55 = localTime50.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime56, (org.joda.time.ReadablePartial) localTime57, periodType58);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.DateTime dateTime65 = dateTime63.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime66 = dateTime63.toLocalTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) dateTime68);
        boolean boolean71 = interval69.isAfter((long) 10);
        org.joda.time.Duration duration72 = interval69.toDuration();
        org.joda.time.DateTime dateTime74 = dateTime63.withDurationAdded((org.joda.time.ReadableDuration) duration72, 0);
        org.joda.time.DateTime dateTime75 = localTime57.toDateTime((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType78 = periodType76.getFieldType((int) (byte) 0);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime50, (org.joda.time.ReadablePartial) localTime57, periodType76);
        int int80 = period79.getMinutes();
        org.joda.time.PeriodType periodType81 = period79.getPeriodType();
        int[] intArray84 = chronology34.get((org.joda.time.ReadablePeriod) period79, (-2016L), (long) 54);
        java.util.Calendar.Builder builder85 = builder4.setFields(intArray84);
        java.util.Calendar.Builder builder89 = builder85.setWeekDate(53786271, 22, 893);
        java.util.Calendar.Builder builder93 = builder85.setDate(1439, 35, 0);
        java.util.Calendar.Builder builder97 = builder85.setWeekDate(828582, 30, 34);
        java.util.Calendar.Builder builder99 = builder85.setLenient(false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+03:00\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 378691200010L + "'", long43 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-10799965L) + "'", long48 == (-10799965L));
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 2, 70]");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test13788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13788");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1));
        int int2 = localTime1.size();
        org.joda.time.LocalTime.Property property3 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime4, (org.joda.time.ReadablePartial) localTime5, periodType6);
        org.joda.time.Period period9 = period7.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime16 = dateTime10.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime18 = dateTime16.plus((long) (byte) 10);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = period20.toDurationFrom(readableInstant21);
        org.joda.time.Seconds seconds23 = duration22.toStandardSeconds();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Period period25 = period9.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.MutablePeriod mutablePeriod26 = period9.toMutablePeriod();
        int int27 = period9.size();
        org.joda.time.Period period28 = period9.negated();
        org.joda.time.Period period30 = period28.minusHours(69);
        org.joda.time.LocalTime localTime31 = localTime1.minus((org.joda.time.ReadablePeriod) period30);
        java.lang.String str32 = period30.toString();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT-69H-35M" + "'", str32, "PT-69H-35M");
    }

    @Test
    public void test13789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13789");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.Date date9 = calendar8.getTime();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder14 = builder10.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder18 = builder14.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(10L, chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        int int23 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusWeeks(4);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        java.util.TimeZone timeZone28 = calendar27.getTimeZone();
        java.util.Calendar.Builder builder29 = builder14.setTimeZone(timeZone28);
        timeZone28.setID("65");
        calendar8.setTimeZone(timeZone28);
        java.util.TimeZone timeZone33 = calendar8.getTimeZone();
        calendar8.clear();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate37 = localDate35.withCenturyOfEra(108195005);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 108195005 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-10800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"65\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 29 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"65\",offset=10800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=10800000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+03:00");
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test13790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13790");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        java.lang.String str17 = chronology14.toString();
        org.joda.time.DurationField durationField18 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.dayOfYear();
        org.joda.time.DurationField durationField20 = chronology14.millis();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime22.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period34 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime35 = dateTime30.plus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology36 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime37 = dateTime22.toDateTime(chronology36);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = chronology36.withZone(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(0L, chronology36);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYearOfEra(885);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusDays(21098599);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plusHours(32769);
        int[] intArray49 = chronology14.get((org.joda.time.ReadablePartial) localDateTime43, (-61977520079990L));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+03:00]" + "'", str17, "ISOChronology[+03:00]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[6, 1, 4, 61920010]");
    }

    @Test
    public void test13791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13791");
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationFrom(readableInstant7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        boolean boolean13 = interval11.isAfter((long) 10);
        org.joda.time.Duration duration14 = interval11.toDuration();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        boolean boolean19 = interval17.isAfter((long) 10);
        org.joda.time.Duration duration20 = interval17.toDuration();
        org.joda.time.Duration duration22 = duration14.withDurationAdded((org.joda.time.ReadableDuration) duration20, (int) '4');
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTime(dateTimeZone27);
        int int29 = dateTime28.getCenturyOfEra();
        org.joda.time.Interval interval30 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateTime28);
        int int31 = duration8.compareTo((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration32 = duration20.toDuration();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime33, (org.joda.time.ReadablePartial) localTime34, periodType35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime43 = dateTime37.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime45 = dateTime43.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime46 = localTime33.toDateTime((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.DateTime dateTime52 = dateTime50.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime53 = dateTime50.toLocalTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime55);
        boolean boolean58 = interval56.isAfter((long) 10);
        org.joda.time.Duration duration59 = interval56.toDuration();
        org.joda.time.DateTime dateTime61 = dateTime50.withDurationAdded((org.joda.time.ReadableDuration) duration59, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyear();
        int int63 = dateTime61.get(dateTimeFieldType62);
        boolean boolean64 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Interval interval65 = duration20.toIntervalFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime67 = dateTime43.plusSeconds(8);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime43.toMutableDateTime();
        org.joda.time.DateTime dateTime69 = dateTime43.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.util.TimeZone timeZone72 = dateTimeZone71.toTimeZone();
        boolean boolean74 = dateTimeZone71.isStandardOffset((long) '4');
        org.joda.time.DateTime dateTime75 = dateTime69.withZone(dateTimeZone71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((int) '4', 534395854, (-1016290), 659, 959, dateTimeZone71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 659 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1149 + "'", int26 == 1149);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2022 + "'", int63 == 2022);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test13792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13792");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime(chronology21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localTime24, periodType25);
        org.joda.time.LocalTime localTime28 = localTime24.withMillisOfSecond(4);
        int[] intArray30 = chronology21.get((org.joda.time.ReadablePartial) localTime24, (long) 0);
        org.joda.time.Chronology chronology31 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfYear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols37 = new java.text.DateFormatSymbols(locale36);
        java.lang.String str38 = locale33.getDisplayVariant(locale36);
        int int39 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str40 = locale6.getDisplayLanguage(locale33);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setLanguage("minutes");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale locale45 = builder41.build();
        java.lang.String str46 = locale6.getDisplayScript(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withLocale(locale45);
        boolean boolean48 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter2.withPivotYear(25058858);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[3, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
    }

    @Test
    public void test13793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13793");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long4 = dateTimeZone1.adjustOffset(378691200010L, false);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        int int6 = localDate5.getYearOfCentury();
        org.joda.time.LocalDate.Property property7 = localDate5.centuryOfEra();
        org.joda.time.LocalDate.Property property8 = localDate5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        int int14 = dateTime11.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = dateTime11.toDateTime(dateTimeZone15);
        int int17 = dateTime16.getCenturyOfEra();
        org.joda.time.DateTime.Property property18 = dateTime16.monthOfYear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period25 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime26 = dateTime21.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21);
        long long28 = property18.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime21);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.text.DateFormatSymbols dateFormatSymbols30 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale29);
        int int31 = property18.getMaximumShortTextLength(locale29);
        java.lang.String str32 = dateTimeField9.getAsText(163, locale29);
        java.lang.String str33 = locale29.getDisplayLanguage();
        java.lang.String str35 = locale29.getExtension('a');
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 378691200010L + "'", long4 == 378691200010L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 70 + "'", int6 == 70);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1149 + "'", int14 == 1149);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "163" + "'", str32, "163");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test13794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13794");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 13, 1646362432994L);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        boolean boolean7 = interval5.isAfter((long) 10);
        org.joda.time.Duration duration8 = interval5.toDuration();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        boolean boolean13 = interval11.isAfter((long) 10);
        org.joda.time.Duration duration14 = interval11.toDuration();
        org.joda.time.Duration duration16 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration14, (int) '4');
        long long17 = duration16.getStandardMinutes();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime18.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean27 = dateTimeZone26.isFixed();
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime(dateTimeZone26);
        org.joda.time.Interval interval29 = duration16.toIntervalFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days32 = duration31.toStandardDays();
        org.joda.time.Duration duration34 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration31, 53654);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        boolean boolean40 = interval38.isAfter((long) 10);
        org.joda.time.Duration duration41 = interval38.toDuration();
        org.joda.time.Chronology chronology42 = interval38.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfMinute();
        org.joda.time.Chronology chronology44 = org.joda.time.DateTimeUtils.getChronology(chronology42);
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay((long) 89422, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.minuteOfDay();
        org.joda.time.Period period47 = duration31.toPeriod(chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.weekyear();
        org.joda.time.Interval interval49 = interval2.withChronology(chronology44);
        org.joda.time.Period period50 = interval49.toPeriod();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1149 + "'", int21 == 1149);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test13795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13795");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((-62092691280000L));
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withYear(6139);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        boolean boolean35 = interval32.containsNow();
        long long36 = interval32.toDurationMillis();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(10L, chronology40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        int int43 = dateTime41.get(dateTimeFieldType42);
        org.joda.time.DateTime dateTime45 = dateTime41.plusWeeks(4);
        boolean boolean46 = periodType38.equals((java.lang.Object) dateTime45);
        int int47 = periodType38.size();
        org.joda.time.PeriodType periodType48 = periodType38.withMillisRemoved();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 12, periodType38);
        org.joda.time.Interval interval50 = interval32.withPeriodAfterStart((org.joda.time.ReadablePeriod) period49);
        int int51 = period49.getDays();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime27.withPeriodAdded((org.joda.time.ReadablePeriod) period49, (int) '4');
        org.joda.time.LocalDateTime.Property property54 = localDateTime27.millisOfDay();
        int int55 = property54.get();
        org.joda.time.LocalDateTime localDateTime57 = property54.setCopy(53775186);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = localTime25.compareTo((org.joda.time.ReadablePartial) localDateTime57);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[3, 0, 0, 0]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 6 + "'", int47 == 6);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 61920000 + "'", int55 == 61920000);
        org.junit.Assert.assertNotNull(localDateTime57);
    }

    @Test
    public void test13796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13796");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(69);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationFrom(readableInstant7);
        int int9 = period6.getHours();
        org.joda.time.Period period11 = period6.withYears(0);
        org.joda.time.LocalDate localDate13 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period6, (int) (short) 10);
        org.joda.time.LocalDate localDate15 = localDate13.withWeekyear((int) 'x');
        org.joda.time.LocalDate localDate17 = localDate13.plusDays(0);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        int int19 = localDate17.getDayOfYear();
        org.joda.time.LocalDate localDate21 = localDate17.minusYears(53772);
        org.joda.time.LocalDate.Property property22 = localDate17.dayOfYear();
        int int23 = localDate17.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test13797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13797");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DurationField durationField16 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.dayOfWeek();
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfWeek();
        java.util.Locale locale23 = new java.util.Locale("", "hi!");
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale24);
        java.lang.String str26 = locale23.getDisplayScript(locale24);
        boolean boolean27 = locale24.hasExtensions();
        java.text.DateFormatSymbols dateFormatSymbols28 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale24);
        int int29 = dateTimeField20.getMaximumTextLength(locale24);
        java.lang.String str30 = dateTimeField20.toString();
        long long33 = dateTimeField20.addWrapField((long) 53633080, 2023);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateFormatSymbols28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DateTimeField[dayOfWeek]" + "'", str30, "DateTimeField[dayOfWeek]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 53633080L + "'", long33 == 53633080L);
    }

    @Test
    public void test13798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13798");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyearOfCentury();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyear();
        long long16 = dateTimeField13.add(8L, (long) 132);
        java.lang.String str17 = dateTimeField13.toString();
        int int20 = dateTimeField13.getDifference(73612800000L, (long) 41);
        long long22 = dateTimeField13.roundHalfEven(3980588163870L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4165862400008L + "'", long16 == 4165862400008L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DateTimeField[weekyear]" + "'", str17, "DateTimeField[weekyear]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3976300800000L + "'", long22 == 3976300800000L);
    }

    @Test
    public void test13799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13799");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("0014-04-30T20:00:01.893");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test13800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13800");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 132);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = localTime1.toString("0014-05-12T21:40:01.893");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        boolean boolean9 = interval7.isAfter((long) 10);
        org.joda.time.Duration duration10 = interval7.toDuration();
        org.joda.time.Chronology chronology11 = interval7.getChronology();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfDay();
        int int16 = dateTime2.get(dateTimeField15);
        org.joda.time.DateTime dateTime17 = dateTime2.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime2);
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.year();
        int int22 = dateTimeField20.get((long) 251);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+03:00]" + "'", str19, "ISOChronology[+03:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
    }

    @Test
    public void test13802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13802");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime0.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime.Property property8 = dateTime0.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime0.minusMillis(132);
        org.joda.time.DateTime dateTime12 = dateTime0.plusSeconds(99);
        org.joda.time.DateTime dateTime14 = dateTime0.withMillisOfDay(29);
        org.joda.time.DateTime dateTime16 = dateTime0.minusYears(56741057);
        org.joda.time.DateTime dateTime18 = dateTime16.plusDays(21093251);
        java.lang.String str20 = dateTime16.toString("4733-06-11 00:00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1149 + "'", int3 == 1149);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "4733-06-11 00:00:00" + "'", str20, "4733-06-11 00:00:00");
    }

    @Test
    public void test13803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13803");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.Period period6 = org.joda.time.Period.hours(21);
        int int7 = period6.getYears();
        org.joda.time.LocalDate localDate8 = localDate3.minus((org.joda.time.ReadablePeriod) period6);
        java.util.Date date9 = localDate3.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromDateFields(date9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -7 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Jan 01 00:00:00 GMT+00:00 1969");
    }

    @Test
    public void test13804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13804");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str1 = durationFieldType0.getName();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "seconds" + "'", str1, "seconds");
    }

    @Test
    public void test13805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13805");
        java.lang.String[] strArray4 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        boolean boolean10 = strSet5.containsAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.stream.Stream<java.lang.String> strStream11 = strSet9.parallelStream();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days14 = duration13.toStandardDays();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime23 = dateTime18.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime25.toDateTime(dateTimeZone29);
        int int31 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        org.joda.time.Duration duration45 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '4');
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration37);
        mutableInterval15.setDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Days days48 = duration37.toStandardDays();
        org.joda.time.Days[] daysArray49 = new org.joda.time.Days[] { days14, days48 };
        org.joda.time.Days[] daysArray50 = strSet9.toArray(daysArray49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        int int54 = dateTime51.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime51.toDateTime(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime51.withMillisOfSecond(9);
        boolean boolean59 = strSet9.contains((java.lang.Object) dateTime51);
        int int60 = dateTime51.getMillisOfDay();
        org.joda.time.DateTime dateTime62 = dateTime51.minusSeconds(0);
        org.joda.time.DateTime dateTime64 = dateTime51.minusYears(11);
        org.joda.time.DateTime dateTime66 = dateTime51.withYear(1439);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1149 + "'", int28 == 1149);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(days48);
        org.junit.Assert.assertNotNull(daysArray49);
        org.junit.Assert.assertNotNull(daysArray50);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1149 + "'", int54 == 1149);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 68982311 + "'", int60 == 68982311);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test13806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13806");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean6 = dateTime2.isSupported(dateTimeFieldType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime7.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16, periodType17);
        org.joda.time.Period period20 = period18.minusDays(10);
        org.joda.time.Duration duration21 = period18.toStandardDuration();
        org.joda.time.Duration duration23 = org.joda.time.Duration.millis((long) (short) -1);
        long long24 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration23);
        long long25 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration26 = duration21.minus((org.joda.time.ReadableDuration) duration23);
        long long27 = duration21.getStandardDays();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime29 = dateTime2.plus((org.joda.time.ReadableDuration) duration21);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1149 + "'", int10 == 1149);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test13807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13807");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((-1));
        int int19 = localDateTime16.getMinuteOfHour();
        int int20 = localDateTime16.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.withYearOfEra(9);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusHours(21);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfDay(21094265);
        int int29 = localDateTime28.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = localDateTime28.getValue(294);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 294");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test13808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13808");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime1.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(1645455248808L, chronology15);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(1);
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        boolean boolean24 = dateTimeZone21.isStandardOffset((long) '4');
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        org.joda.time.Chronology chronology26 = chronology15.withZone(dateTimeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test13809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13809");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.Period period5 = period3.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime12 = dateTime6.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime14 = dateTime12.plus((long) (byte) 10);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = period16.toDurationFrom(readableInstant17);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period21 = period5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period23 = period5.withYears(32772);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str25 = durationFieldType24.getName();
        int int26 = period5.indexOf(durationFieldType24);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.Period period28 = period5.minus(readablePeriod27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(35L, chronology30);
        org.joda.time.LocalTime localTime33 = localTime31.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        org.joda.time.LocalTime localTime37 = localTime31.withFieldAdded(durationFieldType35, (-1));
        org.joda.time.LocalTime localTime39 = localTime37.plusHours(53633080);
        org.joda.time.LocalTime.Property property40 = localTime39.millisOfSecond();
        org.joda.time.LocalTime localTime42 = property40.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime44 = property40.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime45 = property40.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime46, (org.joda.time.ReadablePartial) localTime47, periodType48);
        org.joda.time.Period period51 = period49.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime58 = dateTime52.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime60 = dateTime58.plus((long) (byte) 10);
        org.joda.time.Period period62 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.Duration duration64 = period62.toDurationFrom(readableInstant63);
        org.joda.time.Seconds seconds65 = duration64.toStandardSeconds();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Period period67 = period51.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Period period69 = period51.withYears(32772);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str71 = durationFieldType70.getName();
        int int72 = period51.indexOf(durationFieldType70);
        boolean boolean73 = localTime45.isSupported(durationFieldType70);
        java.lang.String str74 = durationFieldType70.getName();
        int int75 = period5.get(durationFieldType70);
        org.joda.time.Period period77 = period5.withDays(829);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "halfdays" + "'", str25, "halfdays");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(seconds65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "halfdays" + "'", str71, "halfdays");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "halfdays" + "'", str74, "halfdays");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    public void test13810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13810");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withField(dateTimeFieldType15, 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int23 = localDateTime22.getSecondOfMinute();
        int int24 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withField(dateTimeFieldType33, 100);
        org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime26, (org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime26.minuteOfHour();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#');
        int int41 = period39.getValue(0);
        org.joda.time.Period period42 = period39.normalizedStandard();
        org.joda.time.Period period43 = period42.normalizedStandard();
        int int44 = period43.size();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime26.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.withYearOfEra(4);
        org.joda.time.LocalDateTime.Property property48 = localDateTime26.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str50 = durationFieldType49.toString();
        boolean boolean51 = localDateTime26.isSupported(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "weekyears" + "'", str50, "weekyears");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test13811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13811");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        timeZone18.setRawOffset((int) '4');
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Locale locale25 = new java.util.Locale("", "hi!");
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale26);
        java.lang.String str28 = locale25.getDisplayScript(locale26);
        java.lang.String str29 = locale22.getDisplayScript(locale26);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale22);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone18, locale22);
        calendar31.setLenient(false);
        int int34 = calendar31.getFirstDayOfWeek();
        calendar31.clear();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645455796661,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=16,MILLISECOND=668,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test13812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13812");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        int int3 = property1.getMaximumValueOverall();
        int int4 = property1.getMinimumValueOverall();
        org.joda.time.DateTime dateTime5 = property1.getDateTime();
        org.joda.time.DateTime dateTime6 = property1.withMaximumValue();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean11 = dateTimeZone10.isFixed();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 2, dateTimeZone10);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeUtils.getZone(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime15.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(10L, chronology18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.weekyear();
        int int21 = dateTime19.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime23 = dateTime19.plusWeeks(4);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = dateTime23.toCalendar(locale24);
        org.joda.time.DateTime dateTime27 = dateTime23.plusMillis(22);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = period29.toDurationFrom(readableInstant30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        boolean boolean42 = interval40.isAfter((long) 10);
        org.joda.time.Duration duration43 = interval40.toDuration();
        org.joda.time.Duration duration45 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, (int) '4');
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime46.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTime(dateTimeZone50);
        int int52 = dateTime51.getCenturyOfEra();
        org.joda.time.Interval interval53 = duration43.toIntervalTo((org.joda.time.ReadableInstant) dateTime51);
        int int54 = duration31.compareTo((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime dateTime55 = dateTime27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Interval interval57 = interval8.withEnd((org.joda.time.ReadableInstant) dateTime15);
        java.lang.String str58 = interval8.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime65 = dateTime60.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property67 = dateTime66.era();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period72 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime73 = dateTime68.plus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Chronology chronology74 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime75 = dateTime60.toDateTime(chronology74);
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime76, (org.joda.time.ReadablePartial) localTime77, periodType78);
        org.joda.time.LocalTime localTime81 = localTime77.withMillisOfSecond(4);
        int[] intArray83 = chronology74.get((org.joda.time.ReadablePartial) localTime77, (long) 0);
        org.joda.time.Chronology chronology84 = chronology74.withUTC();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.dayOfYear();
        org.joda.time.DateTimeField dateTimeField86 = chronology84.monthOfYear();
        boolean boolean87 = dateTimeFieldType59.isSupported(chronology84);
        org.joda.time.DurationField durationField88 = chronology84.hours();
        org.joda.time.Interval interval89 = interval8.withChronology(chronology84);
        org.joda.time.Period period90 = interval89.toPeriod();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 969 + "'", int49 == 969);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001" + "'", str58, "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertNotNull(period90);
    }

    @Test
    public void test13813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13813");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = period21.toDurationFrom(readableInstant22);
        org.joda.time.Seconds seconds24 = duration23.toStandardSeconds();
        boolean boolean25 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime26 = dateTime11.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval31.isAfter((long) 10);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.Chronology chronology35 = interval31.getChronology();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology35);
        org.joda.time.Period period37 = duration23.toPeriod(chronology35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) calendar8, chronology35);
        org.joda.time.LocalDate.Property property39 = localDate38.weekOfWeekyear();
        org.joda.time.LocalDate localDate40 = property39.roundCeilingCopy();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate44 = localDate42.withDayOfMonth(21);
        org.joda.time.LocalDate localDate46 = localDate44.minusDays(12);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTimeAtMidnight(dateTimeZone47);
        org.joda.time.Interval interval49 = localDate40.toInterval(dateTimeZone47);
        int int50 = localDate40.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
    }

    @Test
    public void test13814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13814");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.withMaximumValue();
        int int6 = localDate5.getDayOfYear();
        org.joda.time.LocalDate.Property property7 = localDate5.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = localDate8.minusYears(89422);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean15 = interval13.isAfter((long) 10);
        boolean boolean16 = interval13.containsNow();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths((int) (byte) 100);
        boolean boolean23 = interval13.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime24 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis(32770);
        org.joda.time.DateTime dateTime28 = localDate8.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime28.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 335 + "'", int6 == 335);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test13815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13815");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean23 = interval21.isAfter((long) 10);
        org.joda.time.Duration duration24 = interval21.toDuration();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        boolean boolean29 = interval27.isAfter((long) 10);
        org.joda.time.Duration duration30 = interval27.toDuration();
        org.joda.time.Duration duration32 = duration24.withDurationAdded((org.joda.time.ReadableDuration) duration30, (int) '4');
        boolean boolean33 = localDateTime18.equals((java.lang.Object) duration30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime18.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime18.minusSeconds(6);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks(16);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime37);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withField(dateTimeFieldType47, 100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime46.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusDays(6);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withWeekOfWeekyear(13);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime37.withFields((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime37.plusSeconds((int) 'u');
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test13816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13816");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyearOfCentury();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyear();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfDay();
        int int16 = dateTimeField14.getLeapAmount(21L);
        int int18 = dateTimeField14.getMinimumValue(35099L);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(35L, chronology20);
        org.joda.time.LocalTime localTime23 = localTime21.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        org.joda.time.LocalTime localTime27 = localTime21.withFieldAdded(durationFieldType25, (-1));
        org.joda.time.LocalTime localTime29 = localTime27.plusHours(53633080);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfSecond();
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder36 = builder32.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale39 = new java.util.Locale("", "hi!");
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = locale39.getDisplayScript(locale40);
        java.util.Calendar.Builder builder43 = builder36.setLocale(locale39);
        org.joda.time.LocalTime localTime44 = property30.setCopy("70", locale39);
        org.joda.time.LocalTime localTime45 = property30.roundHalfFloorCopy();
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.setLanguage("minutes");
        java.util.Locale.Builder builder50 = builder47.clear();
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder52 = builder50.setLocale(locale51);
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet54 = locale51.getExtensionKeys();
        java.lang.String str55 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localTime45, (int) (byte) 100, locale51);
        long long57 = dateTimeField14.remainder((long) 21097938);
        // The following exception was thrown during execution in test generation
        try {
            long long60 = dateTimeField14.add((long) 54082, 66228575184000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 66228575184000000 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "100" + "'", str55, "100");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3097938L + "'", long57 == 3097938L);
    }

    @Test
    public void test13817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13817");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime1.withMillisOfSecond(4);
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(0);
        org.joda.time.Period period12 = new org.joda.time.Period((int) (byte) 1, (int) (byte) 0, 6, 22);
        org.joda.time.LocalTime localTime14 = localTime7.withPeriodAdded((org.joda.time.ReadablePeriod) period12, 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(10L, chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter((long) 10);
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Duration duration29 = period27.toDurationFrom(readableInstant28);
        org.joda.time.Seconds seconds30 = duration29.toStandardSeconds();
        boolean boolean31 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime32 = dateTime17.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(10L, chronology34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        int int37 = dateTime35.get(dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean39 = dateTime35.isSupported(dateTimeFieldType38);
        org.joda.time.DateTime.Property property40 = dateTime32.property(dateTimeFieldType38);
        boolean boolean41 = localTime7.isSupported(dateTimeFieldType38);
        int int42 = localTime7.getHourOfDay();
        int int43 = localTime7.getSecondOfMinute();
        java.util.Calendar.Builder builder45 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder49 = builder45.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale.Category category50 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale51 = java.util.Locale.getDefault(category50);
        java.util.Locale locale52 = java.util.Locale.getDefault(category50);
        java.util.Calendar.Builder builder53 = builder45.setLocale(locale52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = localTime7.toString("0014-05-12T21:29:49.000", locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 42 + "'", int43 == 42);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category50.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test13818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13818");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime0.minusSeconds((int) (short) 100);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = period7.toDurationFrom(readableInstant8);
        int int10 = period7.getHours();
        org.joda.time.LocalTime localTime11 = localTime5.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours((int) 'x');
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localTime13.getFields();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.LocalTime.Property property20 = localTime13.property(dateTimeFieldType19);
        org.joda.time.Interval interval21 = property20.toInterval();
        org.joda.time.LocalTime localTime22 = property20.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test13819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13819");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.DateTime dateTime30 = dateTime2.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = interval33.isAfter((long) 10);
        org.joda.time.Duration duration36 = interval33.toDuration();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = interval39.isAfter((long) 10);
        org.joda.time.Duration duration42 = interval39.toDuration();
        org.joda.time.Duration duration44 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) '4');
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime45.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTime(dateTimeZone49);
        int int51 = dateTime50.getCenturyOfEra();
        org.joda.time.Interval interval52 = duration42.toIntervalTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime54 = dateTime50.minusWeeks(6139);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(10L, chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyear();
        int int60 = dateTime58.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean65 = interval63.isAfter((long) 10);
        org.joda.time.Duration duration66 = interval63.toDuration();
        org.joda.time.Period period68 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.Duration duration70 = period68.toDurationFrom(readableInstant69);
        org.joda.time.Seconds seconds71 = duration70.toStandardSeconds();
        boolean boolean72 = duration66.isLongerThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime dateTime73 = dateTime58.plus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime();
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime77);
        boolean boolean80 = interval78.isAfter((long) 10);
        org.joda.time.Duration duration81 = interval78.toDuration();
        org.joda.time.Chronology chronology82 = interval78.getChronology();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology82);
        org.joda.time.Period period84 = duration70.toPeriod(chronology82);
        org.joda.time.DateTime dateTime85 = dateTime30.plus((org.joda.time.ReadablePeriod) period84);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 969 + "'", int12 == 969);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 969 + "'", int48 == 969);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(seconds71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test13820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13820");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Interval interval9 = interval7.withEnd(readableInstant8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.Interval interval14 = interval12.toInterval();
        boolean boolean16 = interval12.contains((long) 1970);
        org.joda.time.Interval interval17 = interval12.toInterval();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        boolean boolean22 = interval20.isAfter((long) 10);
        boolean boolean23 = interval17.abuts((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Chronology chronology24 = interval20.getChronology();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime25.getMinuteOfDay();
        int int29 = dateTime25.getYearOfCentury();
        org.joda.time.Interval interval30 = interval20.withStart((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Interval interval31 = interval7.overlap((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Interval interval32 = interval7.toInterval();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime33, (org.joda.time.ReadablePartial) localTime34, periodType35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime43 = dateTime40.toLocalTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = interval46.isAfter((long) 10);
        org.joda.time.Duration duration49 = interval46.toDuration();
        org.joda.time.DateTime dateTime51 = dateTime40.withDurationAdded((org.joda.time.ReadableDuration) duration49, 0);
        org.joda.time.DateTime dateTime52 = localTime34.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusSeconds((int) (short) -1);
        boolean boolean55 = dateTime52.isBeforeNow();
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.Chronology chronology57 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval56);
        org.joda.time.DateTime dateTime58 = dateTime52.toDateTime(chronology57);
        boolean boolean59 = interval7.contains((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime61 = dateTime52.minusMonths(98);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.withZone(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 969 + "'", int28 == 969);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test13821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13821");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology14 = interval10.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) ' ');
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime18, periodType19);
        boolean boolean21 = localTime16.equals((java.lang.Object) period20);
        org.joda.time.Interval interval22 = interval10.withPeriodAfterStart((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period24 = org.joda.time.Period.hours((int) (short) 0);
        org.joda.time.Interval interval25 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period24);
        boolean boolean27 = interval25.contains((long) 893);
        java.lang.Object obj28 = null;
        boolean boolean29 = interval25.equals(obj28);
        org.joda.time.Interval interval30 = interval25.toInterval();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval30);
    }

    @Test
    public void test13822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13822");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((-1L), dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.withDayOfWeek(2);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = localDate7.minusWeeks(536258);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test13823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13823");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Days days1 = duration0.toStandardDays();
        org.joda.time.Duration duration2 = duration0.toDuration();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        boolean boolean7 = interval5.isAfter((long) 10);
        boolean boolean8 = interval5.containsNow();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime12 = interval11.getEnd();
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) (byte) 100);
        boolean boolean15 = interval5.isAfter((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime17 = dateTime12.withDayOfMonth((int) (short) 1);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime28 = dateTime23.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        org.joda.time.Chronology chronology32 = chronology29.withUTC();
        org.joda.time.Period period33 = new org.joda.time.Period((long) '4', (long) '#', chronology29);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(chronology29);
        org.joda.time.DateTime dateTime35 = dateTime12.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.dayOfYear();
        org.joda.time.Period period37 = duration0.toPeriod(chronology29);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        long long40 = dateTimeZone38.convertUTCToLocal(426L);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateTime.Property property42 = dateTime41.minuteOfHour();
        boolean boolean43 = dateTime41.isBeforeNow();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime44, (org.joda.time.ReadablePartial) localTime45, periodType46);
        org.joda.time.Period period49 = period47.minusYears(893);
        org.joda.time.DurationFieldType[] durationFieldTypeArray50 = period47.getFieldTypes();
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.forFields(durationFieldTypeArray50);
        org.joda.time.PeriodType periodType52 = periodType51.withMinutesRemoved();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.days();
        int int54 = periodType52.indexOf(durationFieldType53);
        org.joda.time.PeriodType periodType55 = periodType52.withYearsRemoved();
        org.joda.time.Period period56 = duration0.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41, periodType52);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 427L + "'", long40 == 427L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldTypeArray50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test13824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13824");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks(4);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        java.lang.String str15 = locale13.getVariant();
        java.lang.String str16 = locale13.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType17.getField(chronology26);
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.lang.String str35 = dateTimeField30.getAsShortText(10L, locale34);
        java.lang.String str36 = locale13.getDisplayName(locale34);
        java.lang.String str37 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withLocale(locale13);
        java.lang.Integer int39 = dateTimeFormatter38.getPivotYear();
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Locale locale43 = new java.util.Locale("", "hi!");
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale44);
        java.lang.String str46 = locale43.getDisplayScript(locale44);
        java.lang.String str47 = locale40.getDisplayScript(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter38.withLocale(locale40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter38.withPivotYear((java.lang.Integer) 72001893);
        java.io.Writer writer51 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(10L, chronology53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekyear();
        int int56 = dateTime54.get(dateTimeFieldType55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = interval59.isAfter((long) 10);
        org.joda.time.Duration duration62 = interval59.toDuration();
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Duration duration66 = period64.toDurationFrom(readableInstant65);
        org.joda.time.Seconds seconds67 = duration66.toStandardSeconds();
        boolean boolean68 = duration62.isLongerThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTime dateTime69 = dateTime54.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(10L, chronology71);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekyear();
        int int74 = dateTime72.get(dateTimeFieldType73);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean76 = dateTime72.isSupported(dateTimeFieldType75);
        org.joda.time.DateTime.Property property77 = dateTime69.property(dateTimeFieldType75);
        org.joda.time.DateTime dateTime79 = dateTime69.plusDays(59);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter50.printTo(writer51, (org.joda.time.ReadableInstant) dateTime79);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AM" + "'", str35, "AM");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals(locale43.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(seconds67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test13825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13825");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTime dateTime6 = dateTime3.minus(1645455229061L);
        boolean boolean7 = dateTime6.isAfterNow();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime8.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay(1970);
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime.Property property18 = dateTime14.hourOfDay();
        boolean boolean19 = dateTime14.isAfterNow();
        org.joda.time.DateTime.Property property20 = dateTime14.dayOfYear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(72001893);
        boolean boolean23 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Locale locale27 = new java.util.Locale("", "hi!");
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale28);
        java.lang.String str30 = locale27.getDisplayScript(locale28);
        java.lang.String str31 = locale24.getDisplayScript(locale28);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale24);
        java.util.Locale locale33 = java.util.Locale.PRC;
        java.lang.String str34 = locale24.getDisplayLanguage(locale33);
        java.util.Calendar calendar35 = dateTime22.toCalendar(locale24);
        calendar35.setLenient(true);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645455797150,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=17,MILLISECOND=157,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-61962997817689,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=6,MONTH=5,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=174,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=9,SECOND=42,MILLISECOND=312,ZONE_OFFSET=1,DST_OFFSET=0]");
    }

    @Test
    public void test13826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13826");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 2, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 8);
        org.joda.time.DateTime dateTime10 = dateTime7.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DurationField durationField13 = property12.getLeapDurationField();
        int int14 = property12.getMaximumValueOverall();
        int int15 = property12.getMinimumValueOverall();
        org.joda.time.DateTime dateTime16 = property12.getDateTime();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime.Property property20 = dateTime18.monthOfYear();
        boolean boolean21 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.plus(readableDuration22);
        org.joda.time.DateTime.Property property24 = dateTime18.minuteOfDay();
        boolean boolean25 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.TimeOfDay timeOfDay26 = dateTime7.toTimeOfDay();
        org.joda.time.DateTime.Property property27 = dateTime7.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test13827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13827");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int20 = calendar8.getMinimum((int) (short) 1);
        calendar8.roll(7, false);
        org.joda.time.Instant instant25 = new org.joda.time.Instant(35L);
        long long26 = instant25.getMillis();
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime36 = dateTime31.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime38.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTime(dateTimeZone42);
        int int44 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        boolean boolean49 = interval47.isAfter((long) 10);
        org.joda.time.Duration duration50 = interval47.toDuration();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime52);
        boolean boolean55 = interval53.isAfter((long) 10);
        org.joda.time.Duration duration56 = interval53.toDuration();
        org.joda.time.Duration duration58 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration56, (int) '4');
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration50);
        mutableInterval28.setDurationAfterStart((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Days days61 = duration50.toStandardDays();
        org.joda.time.Instant instant63 = instant25.withDurationAdded((org.joda.time.ReadableDuration) duration50, (int) (short) -1);
        org.joda.time.Duration duration65 = org.joda.time.Duration.millis((long) (short) -1);
        long long66 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration65);
        long long67 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Duration duration68 = duration65.toDuration();
        org.joda.time.Duration duration69 = duration50.minus((org.joda.time.ReadableDuration) duration65);
        boolean boolean70 = calendar8.before((java.lang.Object) duration69);
        java.util.Locale locale73 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap74 = calendar8.getDisplayNames(122, 0, locale73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=285,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=10,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 35L + "'", long26 == 35L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 969 + "'", int41 == 969);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(days61);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test13828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13828");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.Period period5 = interval2.toPeriod();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        boolean boolean12 = interval2.abuts((org.joda.time.ReadableInterval) interval8);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime13, (org.joda.time.ReadablePartial) localTime14, periodType15);
        org.joda.time.Period period17 = period16.negated();
        org.joda.time.Interval interval18 = interval2.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localTime20, periodType21);
        org.joda.time.Period period24 = period22.minusDays(10);
        org.joda.time.Period period26 = period24.withMonths((int) 'a');
        org.joda.time.Period period28 = period26.withMillis((int) 'a');
        org.joda.time.Interval interval29 = interval18.withPeriodAfterStart((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = period28.withHours(2);
        org.joda.time.Period period33 = period31.plusDays(335);
        org.joda.time.Period period35 = period33.plusYears(107);
        org.joda.time.MutablePeriod mutablePeriod36 = period33.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant37 = new org.joda.time.Instant((java.lang.Object) mutablePeriod36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
    }

    @Test
    public void test13829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13829");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 2);
        org.joda.time.Duration duration3 = duration1.minus(1645455390603L);
        long long4 = duration3.getMillis();
        org.joda.time.Duration duration6 = duration3.plus((long) (-53785992));
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1645455388603L) + "'", long4 == (-1645455388603L));
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test13830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13830");
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        int int8 = dateTime5.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = dateTime5.minusMinutes(53633080);
        org.joda.time.Period period12 = org.joda.time.Period.seconds(99);
        org.joda.time.Period period14 = period12.multipliedBy(478);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime10.getZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime30 = dateTime25.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime32 = dateTime17.toDateTime(chronology31);
        org.joda.time.DateTime dateTime33 = dateTime10.toDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.Period period35 = new org.joda.time.Period(27424253L, (-61977571197804L), chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(53765, 103, 1008, chronology31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 103 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test13831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13831");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int20 = calendar8.getMinimum((int) (short) 1);
        int int21 = calendar8.getMinimalDaysInFirstWeek();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromCalendarFields(calendar8);
        int int23 = localDateTime22.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=-62142800809990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=285,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=10,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53590011 + "'", int23 == 53590011);
    }

    @Test
    public void test13832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13832");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.millis();
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.LocalTime localTime6 = localTime2.minusHours(14);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime16 = dateTime11.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.weekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekyear();
        org.joda.time.DurationField durationField21 = chronology17.eras();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType7.getField(chronology17);
        boolean boolean25 = localTime6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalTime.Property property26 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime28 = property26.addCopy((-2272131059615999946L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime30 = property26.setCopy((-28695));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -28695 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test13833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13833");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.plus((long) (byte) 10);
        org.joda.time.Period period10 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = period10.toDurationFrom(readableInstant11);
        org.joda.time.Seconds seconds13 = duration12.toStandardSeconds();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.Period period15 = duration12.toPeriod();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType18 = periodType17.withSecondsRemoved();
        org.joda.time.Period period19 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16, periodType17);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) 893);
        org.joda.time.Period period22 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) instant21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.DateTime.Property property27 = dateTime26.secondOfMinute();
        org.joda.time.Interval interval28 = duration12.toIntervalTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime30 = dateTime26.minusHours(32772);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = dateTime30.withZoneRetainFields(dateTimeZone31);
        int int34 = dateTimeZone31.getOffset(1693156694400000L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(seconds13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test13834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13834");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.DateTime dateTime30 = dateTime2.minus((org.joda.time.ReadableDuration) duration27);
        java.util.GregorianCalendar gregorianCalendar31 = dateTime30.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime30.withHourOfDay((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 969 + "'", int12 == 969);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(gregorianCalendar31);
    }

    @Test
    public void test13835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13835");
        org.joda.time.Period period1 = org.joda.time.Period.minutes((int) 'a');
        org.joda.time.Period period3 = period1.withMinutes(14);
        org.joda.time.Period period5 = period3.minusMinutes(53633080);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        int int9 = dateTime6.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime(dateTimeZone10);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.DateTime.Property property13 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.era();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16);
        long long23 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration24 = period3.toDurationFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period26 = period3.plusMillis(0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withField(dateTimeFieldType33, 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime32.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        boolean boolean50 = interval48.isAfter((long) 10);
        org.joda.time.Duration duration51 = interval48.toDuration();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime53);
        boolean boolean56 = interval54.isAfter((long) 10);
        org.joda.time.Duration duration57 = interval54.toDuration();
        org.joda.time.Duration duration59 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) '4');
        boolean boolean60 = localDateTime45.equals((java.lang.Object) duration57);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime45.withMillisOfDay(0);
        int int63 = localDateTime45.getYear();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days66 = duration65.toStandardDays();
        org.joda.time.Period period67 = duration65.toPeriod();
        org.joda.time.Period period68 = period67.toPeriod();
        org.joda.time.Period period70 = period67.withWeeks(6);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.Period period73 = period67.withFieldAdded(durationFieldType71, 2924789);
        boolean boolean74 = localDateTime45.isSupported(durationFieldType71);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime();
        org.joda.time.Interval interval78 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Period period80 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime81 = dateTime76.plus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property83 = dateTime82.era();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime();
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime84, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.Period period88 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime89 = dateTime84.plus((org.joda.time.ReadablePeriod) period88);
        org.joda.time.Chronology chronology90 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime91 = dateTime76.toDateTime(chronology90);
        org.joda.time.DurationField durationField92 = chronology90.centuries();
        java.lang.String str93 = chronology90.toString();
        org.joda.time.LocalDateTime localDateTime94 = new org.joda.time.LocalDateTime((long) (byte) 0, chronology90);
        org.joda.time.DurationField durationField95 = chronology90.seconds();
        boolean boolean96 = durationFieldType71.isSupported(chronology90);
        org.joda.time.Period period98 = period26.withFieldAdded(durationFieldType71, 53879);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 969 + "'", int9 == 969);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 12 + "'", int63 == 12);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(days66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ISOChronology[+00:00:00.001]" + "'", str93, "ISOChronology[+00:00:00.001]");
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test13836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13836");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.withMaximumValue();
        org.joda.time.LocalDate localDate6 = property4.roundCeilingCopy();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols8 = new java.text.DateFormatSymbols(locale7);
        boolean boolean9 = locale7.hasExtensions();
        java.lang.String str10 = locale7.getDisplayLanguage();
        java.lang.String str11 = property4.getAsText(locale7);
        org.joda.time.LocalDate localDate13 = property4.addToCopy(53917266);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "January" + "'", str11, "January");
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test13837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13837");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int6 = localDateTime5.getEra();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime7.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int16 = dateTime7.get(dateTimeFieldType15);
        int int17 = localDateTime5.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days23 = duration22.toStandardDays();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusYears(8);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime32 = dateTime27.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property34 = dateTime33.era();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period39 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime40 = dateTime35.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Chronology chronology41 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime42 = dateTime27.toDateTime(chronology41);
        org.joda.time.DurationField durationField43 = chronology41.centuries();
        java.lang.String str44 = chronology41.toString();
        org.joda.time.DurationField durationField45 = chronology41.days();
        org.joda.time.DateTimeField dateTimeField46 = chronology41.dayOfYear();
        org.joda.time.DurationField durationField47 = chronology41.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval48 = new org.joda.time.Interval((java.lang.Object) localDateTime26, chronology41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 969 + "'", int10 == 969);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 14 + "'", int17 == 14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[+00:00:00.001]" + "'", str44, "ISOChronology[+00:00:00.001]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test13838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13838");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(569520000L, 1679577242601600000L);
        org.joda.time.Duration duration4 = duration2.withMillis(3904114724037406L);
        org.junit.Assert.assertNotNull(duration4);
    }

    @Test
    public void test13839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13839");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        boolean boolean5 = dateTimeFormatter2.isParser();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks(4);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = dateTime12.toCalendar(locale13);
        java.lang.String str15 = locale13.getVariant();
        java.lang.String str16 = locale13.getDisplayLanguage();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeField dateTimeField27 = chronology26.halfdayOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.years();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType17.getField(chronology26);
        java.util.Locale locale34 = new java.util.Locale("", "hi!");
        java.lang.String str35 = dateTimeField30.getAsShortText(10L, locale34);
        java.lang.String str36 = locale13.getDisplayName(locale34);
        java.lang.String str37 = locale13.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withLocale(locale13);
        java.lang.Integer int39 = dateTimeFormatter38.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = dateTimeFormatter40.getPrinter();
        java.util.Locale locale42 = dateTimeFormatter40.getLocale();
        java.lang.String str43 = locale42.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
        org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "AM" + "'", str35, "AM");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimePrinter41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test13840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13840");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getDayOfWeek();
        org.joda.time.DateTime dateTime5 = dateTime0.minusMinutes(53633080);
        org.joda.time.Period period7 = org.joda.time.Period.seconds(99);
        org.joda.time.Period period9 = period7.multipliedBy(478);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime.Property property11 = dateTime5.secondOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test13841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13841");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(259200011L);
    }

    @Test
    public void test13842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13842");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeField dateTimeField2 = chronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = chronology1.dayOfWeek();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test13843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13843");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime0.minusSeconds((int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime0.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = localTime0.getChronology();
        org.joda.time.LocalTime localTime10 = localTime0.minusSeconds(0);
        org.joda.time.LocalTime.Property property11 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime13 = localTime0.minusMinutes(0);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localTime13.getFields();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localTime13.getValue(1008);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1008");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "16:09:42.312" + "'", str7, "16:09:42.312");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
    }

    @Test
    public void test13844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13844");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate.Property property4 = localDate1.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight();
        org.joda.time.LocalDate.Property property6 = localDate1.centuryOfEra();
        org.joda.time.LocalDate localDate8 = localDate1.plusYears(17);
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(48);
        org.joda.time.Chronology chronology11 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.minuteOfHour();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test13845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13845");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:56:13.837Z/2022-02-21T14:56:13.837Z");
        timeZone1.setID("Dec");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test13846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13846");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime5.getZone();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 969 + "'", int3 == 969);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test13847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13847");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) 893);
        org.joda.time.Instant instant6 = instant4.minus((long) 22);
        org.joda.time.Instant instant8 = instant6.plus((long) (short) 0);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        boolean boolean10 = dateTimeFieldType2.isSupported(chronology9);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) 59, 1645455232994L, chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(10L, chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusWeeks(4);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Calendar calendar20 = dateTime18.toCalendar(locale19);
        java.util.TimeZone timeZone21 = calendar20.getTimeZone();
        int int23 = calendar20.getGreatestMinimum(10);
        calendar20.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int32 = calendar20.getMinimum((int) (short) 1);
        calendar20.roll(7, false);
        boolean boolean36 = interval11.equals((java.lang.Object) calendar20);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) 893);
        org.joda.time.Instant instant40 = instant38.minus((long) 22);
        org.joda.time.Instant instant42 = instant40.plus((long) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(10L, chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        int int47 = dateTime45.get(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType46.getDurationType();
        boolean boolean49 = instant40.isSupported(dateTimeFieldType46);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.DateTime dateTime55 = dateTime53.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime56 = dateTime53.toLocalTime();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = interval59.isAfter((long) 10);
        org.joda.time.Duration duration62 = interval59.toDuration();
        org.joda.time.DateTime dateTime64 = dateTime53.withDurationAdded((org.joda.time.ReadableDuration) duration62, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        int int66 = dateTime64.get(dateTimeFieldType65);
        org.joda.time.DateTime dateTime68 = dateTime64.plusWeeks((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime68.withMillis((long) 12);
        org.joda.time.DateTime dateTime71 = dateTime68.withTimeAtStartOfDay();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant40, (org.joda.time.ReadableInstant) dateTime68);
        mutableInterval72.setEndMillis(57540999L);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(10L, chronology78);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.weekyear();
        int int81 = dateTime79.get(dateTimeFieldType80);
        org.joda.time.DateTime dateTime83 = dateTime79.plusWeeks(4);
        boolean boolean84 = periodType76.equals((java.lang.Object) dateTime83);
        int int85 = periodType76.size();
        org.joda.time.PeriodType periodType86 = periodType76.withMillisRemoved();
        org.joda.time.PeriodType periodType87 = periodType76.withHoursRemoved();
        org.joda.time.Period period88 = new org.joda.time.Period((long) 52, periodType87);
        mutableInterval72.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period88);
        boolean boolean91 = mutableInterval72.isBefore(87205766399993L);
        boolean boolean92 = interval11.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=285,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=10,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1970 + "'", int81 == 1970);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test13848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13848");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear((int) 'x');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withField(dateTimeFieldType30, 893);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusSeconds((int) ' ');
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime38 = property37.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks(68982321);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test13849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13849");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(275335702, 582, 18, 21392436, 56751);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21392436 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13850");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        org.joda.time.Period period5 = interval2.toPeriod();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        boolean boolean12 = interval2.abuts((org.joda.time.ReadableInterval) interval8);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.setLanguage("minutes");
        java.util.Locale locale16 = builder13.build();
        java.util.Locale.Builder builder19 = builder13.setUnicodeLocaleKeyword("99", "");
        java.util.Locale.Builder builder21 = builder19.addUnicodeLocaleAttribute("Sun");
        java.util.Locale.Builder builder24 = builder21.setExtension('a', "65");
        boolean boolean25 = interval8.equals((java.lang.Object) builder24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test13851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13851");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime0.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = dateTime0.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime0.plusSeconds(53658501);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime19 = dateTime14.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime22 = dateTime14.plusMonths((int) 'u');
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime11.withMillisOfSecond(645);
        org.joda.time.DateTime dateTime27 = dateTime11.withYear(53633080);
        org.joda.time.Chronology chronology28 = dateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = dateTime11.toLocalDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 969 + "'", int3 == 969);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test13852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13852");
        org.joda.time.Period period4 = new org.joda.time.Period(876, 2136464071, 363, (-21020));
        org.joda.time.Minutes minutes5 = period4.toStandardMinutes();
        org.junit.Assert.assertNotNull(minutes5);
    }

    @Test
    public void test13853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13853");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(47872, 53772);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 53772");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13854");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyear();
        long long14 = dateTimeField12.roundFloor((long) 53623795);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.setLanguage("minutes");
        java.util.Locale locale18 = builder15.build();
        java.util.Locale locale21 = new java.util.Locale("", "hi!");
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = locale21.getDisplayScript(locale22);
        java.lang.String str25 = locale18.getDisplayCountry(locale21);
        int int26 = dateTimeField12.getMaximumTextLength(locale18);
        java.text.DateFormatSymbols dateFormatSymbols27 = new java.text.DateFormatSymbols(locale18);
        java.lang.String str28 = locale18.getDisplayScript();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale18);
        calendar29.setLenient(true);
        calendar29.setTimeInMillis((long) 86399056);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-259200001L) + "'", long14 == (-259200001L));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "minutes");
        org.junit.Assert.assertEquals(locale21.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=86399056,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=63,ZONE_OFFSET=7,DST_OFFSET=0]");
    }

    @Test
    public void test13855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13855");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusHours((int) 'a');
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime19.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = dateTime19.get(dateTimeFieldType27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime18.property(dateTimeFieldType27);
        org.joda.time.LocalDateTime.Property property30 = localDateTime18.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime33 = property30.addWrapFieldToCopy(132);
        org.joda.time.LocalDateTime localDateTime34 = property30.roundHalfCeilingCopy();
        org.joda.time.DurationFieldType durationFieldType35 = null;
        boolean boolean36 = localDateTime34.isSupported(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 969 + "'", int22 == 969);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test13856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13856");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        int int12 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = dateTime9.toDateTime(dateTimeZone13);
        int int15 = dateTime2.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateMidnight dateMidnight31 = dateTime9.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime9.toMutableDateTimeISO();
        boolean boolean33 = dateTime9.isAfterNow();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 969 + "'", int12 == 969);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test13857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13857");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        boolean boolean5 = interval2.containsNow();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths((int) (byte) 100);
        boolean boolean12 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime13 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        java.util.Locale locale17 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        org.joda.time.DateTime dateTime20 = property15.setCopy("20", locale17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(10L, chronology22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        int int25 = dateTime23.get(dateTimeFieldType24);
        int int26 = dateTime20.get(dateTimeFieldType24);
        org.joda.time.DateTime.Property property27 = dateTime20.millisOfDay();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((-315619199148L));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test13858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13858");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusDays(29);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.LocalDate localDate6 = property4.roundHalfFloorCopy();
        int int7 = localDate6.getWeekyear();
        org.joda.time.Period period9 = org.joda.time.Period.hours((int) (byte) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(10L, chronology11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.weekyear();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean16 = dateTime12.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getDurationType();
        org.joda.time.Period period19 = period9.withFieldAdded(durationFieldType17, 53657);
        org.joda.time.Instant instant22 = new org.joda.time.Instant(35L);
        long long23 = instant22.getMillis();
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.Period period26 = new org.joda.time.Period(72001893L, chronology24);
        long long30 = chronology24.add(259253765L, 0L, 53792);
        boolean boolean31 = durationFieldType17.isSupported(chronology24);
        boolean boolean32 = localDate6.isSupported(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970" + "'", str5, "1970");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 35L + "'", long23 == 35L);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 259253765L + "'", long30 == 259253765L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test13859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13859");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(12);
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate6 = property4.roundHalfFloorCopy();
        org.joda.time.DurationField durationField7 = property4.getRangeDurationField();
        org.joda.time.ReadableInstant readableInstant8 = null;
        long long9 = property4.getDifferenceAsLong(readableInstant8);
        int int10 = property4.getMaximumValue();
        int int11 = property4.getMaximumValue();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-637L) + "'", long9 == (-637L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
    }

    @Test
    public void test13860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13860");
        java.util.Date date1 = new java.util.Date(378691253010L);
        java.util.Date date5 = new java.util.Date(2022, 1970, (int) (short) 100);
        int int6 = date5.getMinutes();
        date5.setHours(478);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromDateFields(date5);
        int int10 = date5.getDay();
        boolean boolean11 = date1.before(date5);
        int int12 = date1.getTimezoneOffset();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Jan 01 00:00:53 GMT+00:00 1982");
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jun 27 22:00:00 GMT+00:00 4086");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test13861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13861");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withField(dateTimeFieldType15, 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int23 = localDateTime22.getSecondOfMinute();
        int int24 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.withField(dateTimeFieldType33, 100);
        org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime26, (org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime.Property property38 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime.Property property39 = localDateTime26.weekOfWeekyear();
        boolean boolean40 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime26.minusDays(1149);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test13862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13862");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(5655139200000L);
    }

    @Test
    public void test13863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13863");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2074-05-01T00:00:00.000+478:15");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2074-05-01T00:00:00.000+478:15' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13864");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        boolean boolean2 = locale0.hasExtensions();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.text.DateFormatSymbols dateFormatSymbols4 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale0);
        java.util.Set<java.lang.Character> charSet5 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(dateFormatSymbols4);
        org.junit.Assert.assertNotNull(charSet5);
    }

    @Test
    public void test13865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13865");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("minutes");
        int int2 = timeZone1.getRawOffset();
        java.lang.String str3 = timeZone1.getID();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = timeZone1.getOffset(53786271, 154975, (-22601), 21389648, (int) 'u', 67900893);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
    }

    @Test
    public void test13866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13866");
        org.joda.time.Period period1 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = period1.toDurationFrom(readableInstant2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        boolean boolean8 = interval6.isAfter((long) 10);
        org.joda.time.Duration duration9 = interval6.toDuration();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        boolean boolean14 = interval12.isAfter((long) 10);
        org.joda.time.Duration duration15 = interval12.toDuration();
        org.joda.time.Duration duration17 = duration9.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) '4');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime18.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.toDateTime(dateTimeZone22);
        int int24 = dateTime23.getCenturyOfEra();
        org.joda.time.Interval interval25 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime23);
        int int26 = duration3.compareTo((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean29 = dateTimeZone28.isFixed();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 2, dateTimeZone28);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeUtils.getZone(dateTimeZone28);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 8);
        org.joda.time.DateTime dateTime37 = dateTime34.plus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType40 = periodType38.getFieldType((int) (byte) 0);
        int int41 = period36.indexOf(durationFieldType40);
        boolean boolean42 = duration15.equals((java.lang.Object) period36);
        org.joda.time.Period period44 = period36.minusWeeks(1971);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 969 + "'", int21 == 969);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test13867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13867");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(4828375119456886L);
    }

    @Test
    public void test13868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13868");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder17 = builder13.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Locale locale20 = new java.util.Locale("", "hi!");
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale21);
        java.lang.String str23 = locale20.getDisplayScript(locale21);
        java.util.Calendar.Builder builder24 = builder17.setLocale(locale20);
        org.joda.time.LocalTime localTime25 = property11.setCopy("70", locale20);
        org.joda.time.LocalTime localTime26 = property11.roundHalfCeilingCopy();
        int int27 = property11.getMinimumValue();
        org.joda.time.LocalTime localTime29 = property11.addCopy(71);
        org.joda.time.LocalTime localTime30 = property11.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime32 = property11.addNoWrapToCopy(66344928);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test13869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13869");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) localTime4, periodType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime13 = dateTime10.toLocalTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.DateTime dateTime21 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 0);
        org.joda.time.DateTime dateTime22 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime33 = dateTime28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyear();
        org.joda.time.DateTime dateTime37 = dateTime24.toDateTime(chronology34);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.DurationField durationField40 = dateTimeField39.getDurationField();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime.Property property43 = dateTime41.monthOfYear();
        org.joda.time.DurationField durationField44 = property43.getDurationField();
        int int47 = durationField44.getValue(4460054926L, (long) 53);
        boolean boolean48 = durationField44.isSupported();
        int int49 = durationField40.compareTo(durationField44);
        java.lang.String str50 = durationField40.toString();
        java.lang.String str51 = durationField40.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DurationField[years]" + "'", str50, "DurationField[years]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "DurationField[years]" + "'", str51, "DurationField[years]");
    }

    @Test
    public void test13870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13870");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime1.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.centuries();
        java.lang.String str18 = chronology15.toString();
        org.joda.time.DurationField durationField19 = chronology15.days();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType0.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField23 = chronology15.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+00:00:00.001]" + "'", str18, "ISOChronology[+00:00:00.001]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test13871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13871");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = dateTime6.toCalendar(locale7);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        int int11 = calendar8.getGreatestMinimum(10);
        calendar8.set((-1), 21, 11, (int) (short) 0, 893, 10);
        int int20 = calendar8.getMinimum((int) (short) 1);
        int int21 = calendar8.getMinimalDaysInFirstWeek();
        calendar8.set(0, 21091854, (int) 'x');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromCalendarFields(calendar8);
        // The following exception was thrown during execution in test generation
        try {
            calendar8.set(894, 62);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 894");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
        org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=55405200495190010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1757690,MONTH=10,WEEK_OF_YEAR=48,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=332,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=53,SECOND=10,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test13872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13872");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int6 = localDateTime5.getEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withYear(2);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Chronology chronology18 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime19.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTime(dateTimeZone23);
        int int25 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean30 = interval28.isAfter((long) 10);
        org.joda.time.Duration duration31 = interval28.toDuration();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        boolean boolean36 = interval34.isAfter((long) 10);
        org.joda.time.Duration duration37 = interval34.toDuration();
        org.joda.time.Duration duration39 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) '4');
        org.joda.time.DateTime dateTime40 = dateTime12.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime8.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime8.plusMonths(762);
        org.joda.time.LocalDateTime.Property property44 = localDateTime8.weekyear();
        org.joda.time.DurationField durationField45 = property44.getDurationField();
        long long48 = durationField45.add(1645455363870L, (long) 74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant49 = new org.joda.time.Instant((java.lang.Object) durationField45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 969 + "'", int22 == 969);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3980588163870L + "'", long48 == 3980588163870L);
    }

    @Test
    public void test13873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13873");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("0006-01-04T23:59:59.999Z", (double) 53777532);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=5.3777532E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13874");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        boolean boolean4 = instant1.isAfter((long) (short) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Instant instant7 = instant1.plus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Instant instant9 = instant1.minus(1692203524934400001L);
        org.joda.time.Instant instant11 = new org.joda.time.Instant(35L);
        long long12 = instant11.getMillis();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.era();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime22 = dateTime17.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        int int27 = dateTime24.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = dateTime24.toDateTime(dateTimeZone28);
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        boolean boolean35 = interval33.isAfter((long) 10);
        org.joda.time.Duration duration36 = interval33.toDuration();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        boolean boolean41 = interval39.isAfter((long) 10);
        org.joda.time.Duration duration42 = interval39.toDuration();
        org.joda.time.Duration duration44 = duration36.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) '4');
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration36);
        mutableInterval14.setDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Days days47 = duration36.toStandardDays();
        org.joda.time.Instant instant49 = instant11.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) (short) -1);
        org.joda.time.Duration duration51 = org.joda.time.Duration.millis((long) (short) -1);
        long long52 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration51);
        long long53 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.toDuration();
        org.joda.time.Duration duration55 = duration36.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Instant instant57 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration51, 70);
        org.joda.time.Duration duration58 = duration51.toDuration();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 35L + "'", long12 == 35L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 969 + "'", int27 == 969);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(days47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-1L) + "'", long53 == (-1L));
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(duration58);
    }

    @Test
    public void test13875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13875");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal(426L);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) localTime4, periodType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime13 = dateTime7.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime16 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property17 = dateTime13.year();
        org.joda.time.DateTime dateTime18 = property17.withMinimumValue();
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfDay();
        boolean boolean20 = dateTimeZone0.equals((java.lang.Object) dateTime18);
        org.joda.time.DateTime dateTime22 = dateTime18.minusHours((int) (short) 10);
        int int23 = dateTime18.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 427L + "'", long2 == 427L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 42 + "'", int23 == 42);
    }

    @Test
    public void test13876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13876");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime.Property property2 = dateTime0.monthOfYear();
        org.joda.time.DurationField durationField3 = property2.getDurationField();
        org.joda.time.DateTime dateTime5 = property2.addToCopy((int) (short) 1);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime15.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTime(dateTimeZone19);
        int int21 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.Duration duration35 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) '4');
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean39 = dateTimeZone38.isFixed();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 2, dateTimeZone38);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeUtils.getZone(dateTimeZone38);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime15.withZoneRetainFields(dateTimeZone42);
        org.joda.time.DateTime.Property property45 = dateTime44.weekyear();
        int int46 = dateTime44.getMillisOfDay();
        boolean boolean47 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property48 = dateTime5.year();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 969 + "'", int18 == 969);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 58182312 + "'", int46 == 58182312);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test13877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13877");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology14);
        java.lang.String str17 = chronology14.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(10L, chronology20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        int int23 = dateTime21.get(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = dateTime21.plusWeeks(4);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.setLanguage("minutes");
        java.util.Locale locale31 = builder28.build();
        java.lang.String str32 = locale26.getDisplayLanguage(locale31);
        java.lang.String str33 = locale31.getDisplayVariant();
        int int34 = dateTimeField18.getMaximumShortTextLength(locale31);
        java.lang.String str36 = dateTimeField18.getAsShortText(1645455243008L);
        long long38 = dateTimeField18.remainder((long) 334);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[+00:00:00.001]" + "'", str17, "ISOChronology[+00:00:00.001]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(calendar27);
        org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "minutes");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9" + "'", str36, "9");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test13878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13878");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 47674315);
        org.joda.time.Days days2 = duration1.toStandardDays();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(days2);
    }

    @Test
    public void test13879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13879");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = dateTime2.toDateTime(chronology16);
        org.joda.time.DurationField durationField18 = chronology16.centuries();
        int int21 = durationField18.getDifference((long) 2, (long) (-1));
        int int24 = durationField18.getDifference((long) 6, (long) 100);
        org.joda.time.DurationFieldType durationFieldType25 = durationField18.getType();
        int int27 = durationField18.getValue((long) ' ');
        boolean boolean28 = dateTime1.equals((java.lang.Object) int27);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime31 = dateTime1.minusWeeks(457070);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test13880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13880");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(10L, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = dateTime9.isSupported(dateTimeFieldType12);
        int int14 = dateTime5.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime16 = dateTime5.plusMillis(7);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        int int18 = dateTime16.getSecondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime16.minusDays(672);
        org.joda.time.DateTime dateTime22 = dateTime16.withCenturyOfEra(2922789);
        int int23 = dateTime22.getDayOfWeek();
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 969 + "'", int3 == 969);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 58182 + "'", int18 == 58182);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
    }

    @Test
    public void test13881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13881");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate1.plusWeeks(69);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = period6.toDurationFrom(readableInstant7);
        int int9 = period6.getHours();
        org.joda.time.Period period11 = period6.withYears(0);
        org.joda.time.LocalDate localDate13 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) period6, (int) (short) 10);
        org.joda.time.LocalDate localDate15 = localDate13.withWeekyear((int) 'x');
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.minutes();
        long long20 = durationField17.getMillis(72000967, (long) 89214);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 4320058020000L + "'", long20 == 4320058020000L);
    }

    @Test
    public void test13882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13882");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        int int4 = localTime1.getMillisOfDay();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols6 = new java.text.DateFormatSymbols(locale5);
        boolean boolean7 = localTime1.equals((java.lang.Object) locale5);
        org.joda.time.Period period9 = new org.joda.time.Period((long) '#');
        int int11 = period9.getValue(0);
        org.joda.time.Period period12 = period9.normalizedStandard();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.Period period14 = period12.plus(readablePeriod13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(10L, chronology16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean21 = dateTime17.isSupported(dateTimeFieldType20);
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType20.getDurationType();
        java.lang.String str23 = durationFieldType22.getName();
        boolean boolean24 = period14.isSupported(durationFieldType22);
        org.joda.time.LocalTime localTime26 = localTime1.withFieldAdded(durationFieldType22, 672);
        int int27 = localTime26.size();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime28, (org.joda.time.ReadablePartial) localTime29, periodType30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.DateTime dateTime37 = dateTime35.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime38 = dateTime35.toLocalTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = interval41.isAfter((long) 10);
        org.joda.time.Duration duration44 = interval41.toDuration();
        org.joda.time.DateTime dateTime46 = dateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration44, 0);
        org.joda.time.DateTime dateTime47 = localTime29.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusSeconds((int) (short) -1);
        boolean boolean50 = dateTime47.isBeforeNow();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval51);
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfCentury(4);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(10L, chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyear();
        int int60 = dateTime58.get(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getRangeDurationType();
        org.joda.time.DateTime dateTime63 = dateTime55.withField(dateTimeFieldType59, 32769);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime65 = localTime26.withField(dateTimeFieldType59, 226);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 58182312 + "'", int4 == 58182312);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "minutes" + "'", str23, "minutes");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNull(durationFieldType61);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test13883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13883");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray11 = new java.util.Locale[] { locale3, locale5, locale7, locale8, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale.FilteringMode filteringMode14 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList12, filteringMode14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale19);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale locale26 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale19, locale21, locale23, locale24, locale25, locale26 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList28, filteringMode30);
        java.util.Locale locale32 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList31);
        java.lang.String[] strArray37 = new java.lang.String[] { "70", "70", "", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        boolean boolean43 = strSet38.containsAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        boolean boolean47 = strSet42.addAll((java.util.Collection<java.lang.String>) strSet46);
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet46);
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet51);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList54 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale58);
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale63 = java.util.Locale.getDefault();
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale58, locale60, locale62, locale63, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale.FilteringMode filteringMode69 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList70 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList67, filteringMode69);
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale74);
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.util.Locale locale78 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale79 = java.util.Locale.getDefault();
        java.util.Locale locale80 = java.util.Locale.JAPAN;
        java.util.Locale locale81 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray82 = new java.util.Locale[] { locale74, locale76, locale78, locale79, locale80, locale81 };
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.util.Locale>) localeList83, filteringMode85);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter(languageRangeList54, (java.util.Collection<java.util.Locale>) localeList70, filteringMode85);
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList87, filteringMode88);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + filteringMode14 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode14.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + filteringMode30 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode30.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(languageRangeList54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + filteringMode69 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode69.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList70);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode85.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode88.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList89);
    }

    @Test
    public void test13884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13884");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(4633898112000007L);
    }

    @Test
    public void test13885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13885");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(99L);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.Interval interval23 = interval21.toInterval();
        boolean boolean25 = interval21.contains((long) 1970);
        org.joda.time.Interval interval26 = interval21.toInterval();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        boolean boolean32 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Interval interval33 = interval29.toInterval();
        long long34 = interval29.getEndMillis();
        org.joda.time.Interval interval36 = interval29.withStartMillis((long) 8);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.months();
        java.lang.String str38 = periodType37.getName();
        org.joda.time.Period period39 = interval36.toPeriod(periodType37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime18.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period42 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = period42.toDurationFrom(readableInstant43);
        long long45 = duration44.getMillis();
        long long46 = duration44.getStandardSeconds();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property48 = dateTime47.era();
        org.joda.time.Duration duration50 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime51 = dateTime47.plus((org.joda.time.ReadableDuration) duration50);
        int int52 = dateTime47.getCenturyOfEra();
        org.joda.time.Interval interval53 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration55 = org.joda.time.Duration.millis(0L);
        int int56 = duration44.compareTo((org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = interval59.isAfter((long) 10);
        org.joda.time.Duration duration62 = interval59.toDuration();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        boolean boolean67 = interval65.isAfter((long) 10);
        org.joda.time.Duration duration68 = interval65.toDuration();
        org.joda.time.Duration duration70 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) '4');
        org.joda.time.Duration duration72 = duration62.withMillis((long) (short) -1);
        org.joda.time.Duration duration75 = duration72.withDurationAdded(120L, 72001893);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardDays(0L);
        org.joda.time.Duration duration79 = duration75.withDurationAdded((org.joda.time.ReadableDuration) duration77, 6139);
        boolean boolean80 = duration55.isEqual((org.joda.time.ReadableDuration) duration75);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime40.withDurationAdded((org.joda.time.ReadableDuration) duration75, 53969158);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(interval33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645459782311L + "'", long34 == 1645459782311L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Months" + "'", str38, "Months");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 35L + "'", long45 == 35L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test13886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13886");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long4 = dateTimeZone1.adjustOffset(378691200010L, false);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone1);
        boolean boolean7 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 378691200010L + "'", long4 == 378691200010L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test13887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13887");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1645455248469L);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime3, periodType4);
        org.joda.time.Period period7 = period5.plusMinutes((int) '#');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime8.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime16 = dateTime14.plus((long) (byte) 10);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        org.joda.time.Seconds seconds21 = duration20.toStandardSeconds();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period23 = period7.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.MutablePeriod mutablePeriod24 = period7.toMutablePeriod();
        int int25 = period7.size();
        org.joda.time.Period period26 = period7.negated();
        org.joda.time.Duration duration27 = period26.toStandardDuration();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = period35.toDurationFrom(readableInstant36);
        org.joda.time.Seconds seconds38 = duration37.toStandardSeconds();
        boolean boolean39 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration41 = duration33.withMillis((long) 8);
        boolean boolean42 = duration27.equals((java.lang.Object) duration33);
        boolean boolean43 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period45 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Duration duration47 = period45.toDurationFrom(readableInstant46);
        long long48 = duration47.getMillis();
        long long49 = duration47.getStandardSeconds();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property51 = dateTime50.era();
        org.joda.time.Duration duration53 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime54 = dateTime50.plus((org.joda.time.ReadableDuration) duration53);
        int int55 = dateTime50.getCenturyOfEra();
        org.joda.time.Interval interval56 = duration47.toIntervalTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime57.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = dateTime57.toDateTime(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime57.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime.Property property65 = dateTime57.dayOfYear();
        org.joda.time.DateTime dateTime67 = dateTime57.minusMillis(132);
        org.joda.time.DateTime dateTime69 = dateTime57.plusSeconds(99);
        org.joda.time.Interval interval70 = duration47.toIntervalTo((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean71 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration47);
        java.lang.String str72 = duration47.toString();
        org.joda.time.Duration duration75 = duration47.withDurationAdded(7456773452606L, 46);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 35L + "'", long48 == 35L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 20 + "'", int55 == 20);
        org.junit.Assert.assertNotNull(interval56);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 969 + "'", int60 == 969);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT0.035S" + "'", str72, "PT0.035S");
        org.junit.Assert.assertNotNull(duration75);
    }

    @Test
    public void test13888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13888");
        java.util.Date date3 = new java.util.Date(1971, 59, (int) (byte) 100);
        java.util.Date date9 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        date9.setMinutes((int) (short) 0);
        java.util.Date date17 = new java.util.Date(21, 0, (int) (byte) -1, 53630161, (int) (byte) 10);
        date17.setMinutes((int) (short) 0);
        date17.setDate(53);
        boolean boolean22 = date9.after(date17);
        boolean boolean23 = date3.before(date9);
        date3.setYear(53969158);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Mar 09 00:00:00 GMT+00:00 53971058");
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 04 01:00:00 GMT+00:00 8039");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Mar 25 01:00:00 GMT+00:00 8039");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test13889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13889");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1970-01-01T00:00:02.186Z");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test13890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13890");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 16);
        org.joda.time.LocalTime localTime3 = localTime1.minusMillis(20986);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int5 = localTime1.get(dateTimeFieldType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test13891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13891");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime0.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime7, periodType8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = dateTime13.toLocalTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime24 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration22, 0);
        org.joda.time.DateTime dateTime25 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType28 = periodType26.getFieldType((int) (byte) 0);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime7, periodType26);
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = period29.getFieldTypes();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.forFields(durationFieldTypeArray30);
        org.joda.time.PeriodType periodType32 = periodType31.withMonthsRemoved();
        org.joda.time.PeriodType periodType33 = periodType31.withWeeksRemoved();
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test13892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13892");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar calendar5 = builder4.build();
        calendar5.setTimeInMillis(100001L);
        calendar5.setLenient(true);
        java.util.TimeZone timeZone10 = calendar5.getTimeZone();
        java.util.TimeZone.setDefault(timeZone10);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=100001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=40,MILLISECOND=8,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test13893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13893");
        java.util.Date date1 = new java.util.Date(3155695200000L);
        int int2 = date1.getDay();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Dec 31 06:00:00 GMT+00:00 2069");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test13894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13894");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols1 = new java.text.DateFormatSymbols(locale0);
        java.lang.String[] strArray2 = dateFormatSymbols1.getMonths();
        java.lang.String[] strArray4 = java.util.TimeZone.getAvailableIDs(53661);
        dateFormatSymbols1.setShortWeekdays(strArray4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols7 = new java.text.DateFormatSymbols(locale6);
        java.lang.String[] strArray8 = dateFormatSymbols7.getMonths();
        dateFormatSymbols1.setWeekdays(strArray8);
        java.lang.String[] strArray10 = dateFormatSymbols1.getMonths();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = dateTime12.toDateTime(chronology26);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime28, (org.joda.time.ReadablePartial) localTime29, periodType30);
        org.joda.time.LocalTime localTime33 = localTime29.withMillisOfSecond(4);
        int[] intArray35 = chronology26.get((org.joda.time.ReadablePartial) localTime29, (long) 0);
        org.joda.time.Chronology chronology36 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfYear();
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Locale locale41 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols42 = new java.text.DateFormatSymbols(locale41);
        java.lang.String str43 = locale38.getDisplayVariant(locale41);
        int int44 = dateTimeField37.getMaximumTextLength(locale38);
        java.lang.String str45 = locale11.getDisplayLanguage(locale38);
        java.lang.String str46 = locale38.getLanguage();
        java.text.DateFormatSymbols dateFormatSymbols47 = java.text.DateFormatSymbols.getInstance(locale38);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols49 = new java.text.DateFormatSymbols(locale48);
        java.lang.String[] strArray50 = dateFormatSymbols49.getMonths();
        java.text.DateFormatSymbols dateFormatSymbols51 = java.text.DateFormatSymbols.getInstance();
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.text.DateFormatSymbols dateFormatSymbols53 = new java.text.DateFormatSymbols(locale52);
        java.lang.String[] strArray54 = dateFormatSymbols53.getMonths();
        java.lang.String[] strArray55 = dateFormatSymbols53.getAmPmStrings();
        dateFormatSymbols51.setWeekdays(strArray55);
        dateFormatSymbols49.setEras(strArray55);
        dateFormatSymbols47.setShortMonths(strArray55);
        dateFormatSymbols1.setShortWeekdays(strArray55);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Chinese" + "'", str45, "Chinese");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateFormatSymbols47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(dateFormatSymbols51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
    }

    @Test
    public void test13895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13895");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) (short) -1);
        long long2 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        long long3 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration1);
        org.joda.time.Duration duration4 = duration1.toDuration();
        long long5 = duration4.getMillis();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 10, chronology7);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime dateTime12 = dateTime8.withMillisOfSecond(2);
        org.joda.time.DateTime.Property property13 = dateTime8.millisOfDay();
        org.joda.time.DateTime dateTime14 = property13.getDateTime();
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField19 = yearMonthDay17.getField(163);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 163");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test13896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13896");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        int int4 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean6 = localTime1.isEqual((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime localTime8 = localTime1.withMillisOfDay((int) '4');
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 58182312 + "'", int4 == 58182312);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test13897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13897");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Chronology chronology7 = interval2.getChronology();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long11 = mutableInterval10.toDurationMillis();
        mutableInterval10.setInterval((long) 14, (long) '4');
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime15, (org.joda.time.ReadablePartial) localTime16, periodType17);
        mutableInterval10.setPeriodAfterStart((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((java.lang.Object) mutableInterval10);
        org.joda.time.Interval interval21 = interval20.toInterval();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.Duration duration35 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) '4');
        org.joda.time.Interval interval36 = interval20.withDurationAfterStart((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval37 = interval20.toInterval();
        org.joda.time.MutableInterval mutableInterval38 = interval37.toMutableInterval();
        boolean boolean39 = interval2.abuts((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean47 = interval45.isAfter((long) 10);
        org.joda.time.Duration duration48 = interval45.toDuration();
        org.joda.time.Chronology chronology49 = interval45.getChronology();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology49);
        org.joda.time.Period period52 = org.joda.time.Period.seconds(99);
        long long55 = chronology49.add((org.joda.time.ReadablePeriod) period52, (long) 53657, 0);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) 1, chronology49);
        org.joda.time.DurationField durationField57 = chronology49.weekyears();
        org.joda.time.DateTimeField dateTimeField58 = chronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology49.dayOfYear();
        org.joda.time.Interval interval60 = interval2.withChronology(chronology49);
        org.joda.time.Duration duration62 = org.joda.time.Duration.millis((long) (short) -1);
        long long63 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration62);
        long long64 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration65 = duration62.toDuration();
        long long66 = duration65.getMillis();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 10, chronology68);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime69, periodType70);
        org.joda.time.PeriodType periodType72 = org.joda.time.DateTimeUtils.getPeriodType(periodType70);
        org.joda.time.Period period73 = new org.joda.time.Period((java.lang.Object) interval2, periodType72);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 426L + "'", long11 == 426L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(mutableInterval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 53657L + "'", long55 == 53657L);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType72);
    }

    @Test
    public void test13898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13898");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField15 = chronology9.minuteOfHour();
        org.joda.time.DurationField durationField16 = chronology9.hours();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test13899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13899");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTime dateTime6 = dateTime3.minus(1645455229061L);
        boolean boolean7 = dateTime6.isAfterNow();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime8.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay(1970);
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfWeek();
        org.joda.time.DateTime.Property property18 = dateTime14.hourOfDay();
        boolean boolean19 = dateTime14.isAfterNow();
        org.joda.time.DateTime.Property property20 = dateTime14.dayOfYear();
        org.joda.time.DateTime dateTime22 = property20.addWrapFieldToCopy(72001893);
        boolean boolean23 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Locale locale27 = new java.util.Locale("", "hi!");
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale28);
        java.lang.String str30 = locale27.getDisplayScript(locale28);
        java.lang.String str31 = locale24.getDisplayScript(locale28);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale24);
        java.util.Locale locale33 = java.util.Locale.PRC;
        java.lang.String str34 = locale24.getDisplayLanguage(locale33);
        java.util.Calendar calendar35 = dateTime22.toCalendar(locale24);
        org.joda.time.DateTime.Property property36 = dateTime22.era();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645455798497,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=18,MILLISECOND=504,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-61962997817689,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=6,MONTH=5,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=174,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=9,SECOND=42,MILLISECOND=312,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test13900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13900");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Period period18 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime19 = dateTime14.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period26 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime27 = dateTime22.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime29 = dateTime14.toDateTime(chronology28);
        org.joda.time.DurationField durationField30 = chronology28.centuries();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withField(dateTimeFieldType38, 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime37.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusSeconds(2922789);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMillis(30);
        int int55 = localDateTime54.getCenturyOfEra();
        int[] intArray57 = chronology28.get((org.joda.time.ReadablePartial) localDateTime54, (long) 7);
        // The following exception was thrown during execution in test generation
        try {
            chronology9.validate(readablePartial13, intArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[1970, 1, 1, 8]");
    }

    @Test
    public void test13901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13901");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) localTime4, periodType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime13 = dateTime10.toLocalTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.DateTime dateTime21 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 0);
        org.joda.time.DateTime dateTime22 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime33 = dateTime28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyear();
        org.joda.time.DateTime dateTime37 = dateTime24.toDateTime(chronology34);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfDay();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays(10L);
        long long43 = duration42.getMillis();
        org.joda.time.Seconds seconds44 = duration42.toStandardSeconds();
        org.joda.time.Seconds seconds45 = duration42.toStandardSeconds();
        long long48 = chronology38.add((org.joda.time.ReadablePeriod) seconds45, (long) 86, 10800000);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 864000000L + "'", long43 == 864000000L);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(seconds45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 9331200000000086L + "'", long48 == 9331200000000086L);
    }

    @Test
    public void test13902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13902");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property3 = dateTime1.millisOfDay();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime4, (org.joda.time.ReadablePartial) localTime5, periodType6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime8.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime17 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        int int18 = dateTime17.getDayOfMonth();
        int int19 = property3.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis(816772);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test13903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13903");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar calendar5 = builder4.build();
        calendar5.setTimeInMillis(100001L);
        int int9 = calendar5.getGreatestMinimum(0);
        int int10 = calendar5.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = calendar5.getGreatestMinimum(897);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 897");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=100001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=40,MILLISECOND=8,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test13904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13904");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 2, dateTimeZone1);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 8);
        org.joda.time.DateTime dateTime10 = dateTime7.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DurationField durationField13 = property12.getLeapDurationField();
        int int14 = property12.getMaximumValueOverall();
        int int15 = property12.getMinimumValueOverall();
        org.joda.time.DateTime dateTime16 = property12.getDateTime();
        org.joda.time.DateTime dateTime17 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime.Property property20 = dateTime18.monthOfYear();
        boolean boolean21 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime18.plus(readableDuration22);
        org.joda.time.DateTime.Property property24 = dateTime18.minuteOfDay();
        boolean boolean25 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime26 = dateTime18.toDateTime();
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test13905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13905");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(1970);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withField(dateTimeFieldType17, 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int25 = localDateTime16.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime16.plusYears(7);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.minusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusDays((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int38 = localDateTime37.getEra();
        boolean boolean39 = localDateTime31.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(10L, chronology41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        int int44 = dateTime42.get(dateTimeFieldType43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        boolean boolean49 = interval47.isAfter((long) 10);
        org.joda.time.Duration duration50 = interval47.toDuration();
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Duration duration54 = period52.toDurationFrom(readableInstant53);
        org.joda.time.Seconds seconds55 = duration54.toStandardSeconds();
        boolean boolean56 = duration50.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTime dateTime57 = dateTime42.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime37.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime8.plus((org.joda.time.ReadableDuration) duration54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((java.lang.Object) localDateTime8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(seconds55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test13906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13906");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period6 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime7 = dateTime2.plus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.halfdayOfDay();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        long long13 = durationField10.getValueAsLong(1645455232776L, (long) 3);
        long long16 = durationField10.add(4662921600000L, 1439L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 27424253L + "'", long13 == 27424253L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 4663007940000L + "'", long16 == 4663007940000L);
    }

    @Test
    public void test13907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13907");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale.Builder builder3 = builder0.clear();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long13 = dateTimeZone10.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) dateTime8, dateTimeZone10);
        long long18 = dateTimeZone10.convertLocalToUTC(35L, false, 1L);
        java.lang.String str20 = dateTimeZone10.getName((long) 12);
        int int22 = dateTimeZone10.getStandardOffset(100001L);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 29, dateTimeZone10);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime33 = dateTime28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property35 = dateTime34.era();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period40 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime41 = dateTime36.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime43 = dateTime28.toDateTime(chronology42);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime44, (org.joda.time.ReadablePartial) localTime45, periodType46);
        org.joda.time.LocalTime localTime49 = localTime45.withMillisOfSecond(4);
        int[] intArray51 = chronology42.get((org.joda.time.ReadablePartial) localTime45, (long) 0);
        org.joda.time.Chronology chronology52 = chronology42.withUTC();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.dayOfYear();
        int int55 = dateTimeField53.getLeapAmount(378691200010L);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(10L, chronology57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyear();
        int int60 = dateTime58.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime62 = dateTime58.plusWeeks(4);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.util.Calendar calendar64 = dateTime62.toCalendar(locale63);
        java.lang.String str65 = locale63.getDisplayVariant();
        java.util.Set<java.lang.String> strSet66 = locale63.getUnicodeLocaleKeys();
        int int67 = dateTimeField53.getMaximumTextLength(locale63);
        java.util.Locale.setDefault(category27, locale63);
        java.lang.String str69 = dateTimeZone10.getShortName(120L, locale63);
        java.util.Locale.Builder builder70 = builder3.setLocale(locale63);
        java.util.Locale.Builder builder72 = builder70.setLanguageTag("und");
        java.util.Locale.Builder builder73 = builder70.clearExtensions();
        java.util.Locale.Builder builder74 = builder70.clear();
        java.util.Locale.Builder builder76 = builder70.addUnicodeLocaleAttribute("Standard");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 378691200010L + "'", long13 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 34L + "'", long18 == 34L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.001" + "'", str20, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1970 + "'", int60 == 1970);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.001" + "'", str69, "+00:00:00.001");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test13908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13908");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale3 = new java.util.Locale("", "hi!");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale4);
        java.lang.String str6 = locale3.getDisplayScript(locale4);
        java.lang.String str7 = locale0.getDisplayScript(locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale0);
        java.util.Locale locale9 = java.util.Locale.PRC;
        java.lang.String str10 = locale0.getDisplayLanguage(locale9);
        java.text.DateFormatSymbols dateFormatSymbols11 = new java.text.DateFormatSymbols(locale9);
        java.lang.String[] strArray12 = dateFormatSymbols11.getMonths();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals(locale3.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455798702,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=18,MILLISECOND=709,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(strArray12);
    }

    @Test
    public void test13909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13909");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime.Property property6 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        boolean boolean11 = interval9.isAfter((long) 10);
        boolean boolean12 = interval9.containsNow();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) (byte) 100);
        boolean boolean19 = interval9.isAfter((org.joda.time.ReadableInstant) dateTime16);
        int int20 = property6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime22 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField23 = property6.getField();
        org.joda.time.DateTime dateTime25 = property6.setCopy("34");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test13910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13910");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.plus((long) (byte) 10);
        org.joda.time.DateTime.Property property9 = dateTime8.monthOfYear();
        org.joda.time.DurationField durationField10 = property9.getLeapDurationField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(10L, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime13.plusWeeks(4);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Calendar calendar19 = dateTime17.toCalendar(locale18);
        java.lang.String str20 = locale18.toLanguageTag();
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = property9.getAsShortText(locale18);
        java.lang.String str23 = property9.getAsText();
        org.joda.time.DateTime dateTime24 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "und" + "'", str20, "und");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Jan" + "'", str22, "Jan");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "January" + "'", str23, "January");
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test13911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13911");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(10L);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks(4);
        boolean boolean13 = periodType5.equals((java.lang.Object) dateTime12);
        int int14 = periodType5.size();
        org.joda.time.PeriodType periodType15 = periodType5.withMillisRemoved();
        org.joda.time.Period period16 = new org.joda.time.Period((long) 12, periodType5);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter((long) 10);
        org.joda.time.Duration duration25 = interval22.toDuration();
        org.joda.time.Chronology chronology26 = interval22.getChronology();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology26);
        org.joda.time.Period period29 = org.joda.time.Period.seconds(99);
        long long32 = chronology26.add((org.joda.time.ReadablePeriod) period29, (long) 53657, 0);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 1, chronology26);
        org.joda.time.Period period34 = new org.joda.time.Period(164096150400000L, 604800000L, periodType5, chronology26);
        org.joda.time.Period period35 = duration1.toPeriod(periodType5);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime38.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime45 = dateTime38.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMonths(0);
        int int48 = dateTime45.getYearOfEra();
        org.joda.time.Period period49 = duration37.toPeriodTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Duration duration51 = duration37.minus(readableDuration50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays(10L);
        boolean boolean54 = duration51.isEqual((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration56 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration51, 53654);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime60 = interval59.getEnd();
        org.joda.time.DateTime dateTime62 = dateTime60.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime63 = dateTime60.toLocalTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean68 = interval66.isAfter((long) 10);
        org.joda.time.Duration duration69 = interval66.toDuration();
        org.joda.time.DateTime dateTime71 = dateTime60.withDurationAdded((org.joda.time.ReadableDuration) duration69, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekyear();
        int int73 = dateTime71.get(dateTimeFieldType72);
        int int74 = dateTime71.getDayOfWeek();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime();
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period79 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime80 = dateTime75.plus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.DateTime.Property property81 = dateTime75.millisOfDay();
        org.joda.time.DateTime dateTime82 = dateTime75.withEarlierOffsetAtOverlap();
        int int83 = dateTime71.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime dateTime85 = dateTime71.plus((long) 0);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime85);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 53657L + "'", long32 == 53657L);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 969 + "'", int41 == 969);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test13912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13912");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTime.Property property7 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10);
        long long17 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime19 = dateTime10.withYearOfCentury(59);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.era();
        org.joda.time.DurationField durationField22 = property21.getLeapDurationField();
        int int23 = property21.getMaximumValueOverall();
        int int24 = property21.getMinimumValueOverall();
        org.joda.time.DateTime dateTime25 = property21.getDateTime();
        org.joda.time.DateTime dateTime26 = property21.withMaximumValue();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime32 = interval31.getEnd();
        org.joda.time.Interval interval33 = interval31.toInterval();
        boolean boolean35 = interval31.contains((long) 1970);
        org.joda.time.Interval interval36 = interval31.toInterval();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Interval interval38 = interval36.withEnd(readableInstant37);
        boolean boolean39 = interval28.isAfter((org.joda.time.ReadableInterval) interval36);
        long long40 = interval28.toDurationMillis();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths(12);
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        long long46 = property45.remainder();
        org.joda.time.LocalDate localDate47 = property45.roundCeilingCopy();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths(894);
        org.joda.time.DateMidnight dateMidnight50 = localDate47.toDateMidnight();
        boolean boolean51 = interval28.isBefore((org.joda.time.ReadableInstant) dateMidnight50);
        boolean boolean52 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateTime dateTime54 = dateTime10.withYearOfCentury(2);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(10L, chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusWeeks(15);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 969 + "'", int3 == 969);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test13913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13913");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder6 = builder0.setLenient(false);
        java.util.Calendar.Builder builder9 = builder6.set((int) (short) 1, (int) 'u');
        java.util.Calendar.Builder builder11 = builder6.setLenient(true);
        java.util.Calendar.Builder builder16 = builder11.setTimeOfDay((-28695), 51250035, (int) '#', 53);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test13914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13914");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((-1));
        int int19 = localDateTime16.getMinuteOfHour();
        int int20 = localDateTime16.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime16.withYearOfEra(9);
        int int25 = localDateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime26.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime26.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime26.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMonths(0);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int44 = localDateTime43.getEra();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime46);
        int int48 = dateTime45.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = dateTime45.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = dateTime45.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int54 = dateTime45.get(dateTimeFieldType53);
        int int55 = localDateTime43.get(dateTimeFieldType53);
        org.joda.time.DateTime dateTime57 = dateTime37.withField(dateTimeFieldType53, 7);
        int int58 = localDateTime16.get(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 132 + "'", int25 == 132);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 969 + "'", int29 == 969);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 969 + "'", int48 == 969);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 14 + "'", int55 == 14);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 14 + "'", int58 == 14);
    }

    @Test
    public void test13915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13915");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime0.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime.Property property6 = localTime5.secondOfMinute();
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test13916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13916");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 893);
        org.joda.time.Instant instant3 = instant1.minus((long) 22);
        org.joda.time.Instant instant5 = instant3.plus((long) (short) 0);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime16.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = dateTime16.toDateTime(dateTimeZone20);
        int int22 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval31.isAfter((long) 10);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.Duration duration36 = duration28.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) '4');
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration28);
        mutableInterval6.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval6.copy();
        org.joda.time.ReadableInterval readableInterval40 = org.joda.time.DateTimeUtils.getReadableInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Duration duration41 = mutableInterval39.toDuration();
        org.joda.time.Duration duration43 = duration41.minus((long) 59);
        org.joda.time.Instant instant45 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration43, 1);
        org.joda.time.Instant instant47 = instant5.withMillis(27424253L);
        org.joda.time.Instant instant50 = instant47.withDurationAdded(3290910695840L, 3522);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 969 + "'", int19 == 969);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(readableInterval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(instant50);
    }

    @Test
    public void test13917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13917");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime16 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property11.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField18 = property11.getField();
        org.joda.time.LocalTime localTime19 = property11.getLocalTime();
        org.joda.time.LocalTime localTime20 = property11.roundCeilingCopy();
        org.joda.time.LocalTime localTime21 = property11.roundHalfCeilingCopy();
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder23.setLanguage("minutes");
        java.util.Locale.Builder builder26 = builder23.clear();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Locale.Builder builder28 = builder26.setLocale(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet30 = locale27.getExtensionKeys();
        org.joda.time.LocalTime localTime31 = property11.setCopy("59", locale27);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.Interval interval36 = interval34.toInterval();
        boolean boolean38 = interval34.contains((long) 1970);
        org.joda.time.Interval interval39 = interval34.toInterval();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        boolean boolean44 = interval42.isAfter((long) 10);
        boolean boolean45 = interval39.abuts((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.Interval interval50 = interval48.toInterval();
        boolean boolean52 = interval48.contains((long) 1970);
        org.joda.time.Interval interval53 = interval48.toInterval();
        boolean boolean54 = interval42.contains((org.joda.time.ReadableInterval) interval48);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Period period59 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime60 = dateTime55.plus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property62 = dateTime61.era();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period67 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime68 = dateTime63.plus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Chronology chronology69 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime70 = dateTime55.toDateTime(chronology69);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime71, (org.joda.time.ReadablePartial) localTime72, periodType73);
        org.joda.time.LocalTime localTime76 = localTime72.withMillisOfSecond(4);
        int[] intArray78 = chronology69.get((org.joda.time.ReadablePartial) localTime72, (long) 0);
        org.joda.time.Chronology chronology79 = chronology69.withUTC();
        org.joda.time.Interval interval80 = interval48.withChronology(chronology79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((java.lang.Object) localTime31, chronology79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(interval80);
    }

    @Test
    public void test13918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13918");
        java.util.Locale locale3 = new java.util.Locale("15:59:00.999", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "months");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = locale5.stripExtensions();
        java.lang.String str8 = locale3.getDisplayName(locale7);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale7);
        calendar9.set(56733, 1164, 349);
        java.lang.String str14 = calendar9.getCalendarType();
        java.lang.String str15 = calendar9.getCalendarType();
        org.junit.Assert.assertEquals(locale3.toString(), "15:59:00.999_2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z_months");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" + "'", str4, "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)" + "'", str8, "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=7,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=56733,MONTH=1164,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=349,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=3,SECOND=18,MILLISECOND=980,ZONE_OFFSET=7,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gregory" + "'", str14, "gregory");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
    }

    @Test
    public void test13919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13919");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        timeZone18.setRawOffset((int) '4');
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder26 = builder22.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder30 = builder26.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(10L, chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = dateTime33.get(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusWeeks(4);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        java.util.TimeZone timeZone40 = calendar39.getTimeZone();
        java.util.Calendar.Builder builder41 = builder26.setTimeZone(timeZone40);
        timeZone40.setRawOffset((int) '4');
        boolean boolean44 = timeZone18.hasSameRules(timeZone40);
        int int45 = timeZone18.getRawOffset();
        java.util.TimeZone.setDefault(timeZone18);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime49);
        boolean boolean52 = interval50.isAfter((long) 10);
        org.joda.time.Duration duration53 = interval50.toDuration();
        org.joda.time.Chronology chronology54 = interval50.getChronology();
        boolean boolean55 = durationFieldType47.isSupported(chronology54);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int62 = localDateTime61.getEra();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.withYear(2);
        long long66 = chronology54.set((org.joda.time.ReadablePartial) localDateTime64, (long) 100);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.dayOfMonth();
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.util.Locale locale71 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols72 = new java.text.DateFormatSymbols(locale71);
        java.lang.String str73 = locale68.getDisplayVariant(locale71);
        java.lang.String str74 = locale71.getDisplayName();
        java.lang.String str75 = property67.getAsText(locale71);
        java.util.Locale.setDefault(locale71);
        java.lang.String str77 = timeZone18.getDisplayName(locale71);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-62092691280001L) + "'", long66 == (-62092691280001L));
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals(locale71.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "HI!" + "'", str74, "HI!");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "12" + "'", str75, "12");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "GMT+00:00" + "'", str77, "GMT+00:00");
    }

    @Test
    public void test13920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13920");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2074-05-04T04:11:34.443+478:15/2074-05-04T04:11:34.443+478:15");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2074-05-04T04:11:34.443+478:15/2074-05-04T04:11:34.443+...\" is malformed at \"+478:15/2074-05-04T04:11:34.443+...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13921");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyear();
        int int13 = dateTimeField11.get((long) 12);
        org.joda.time.DurationField durationField14 = dateTimeField11.getDurationField();
        long long16 = durationField14.getMillis((long) (-28695));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-905526737640000L) + "'", long16 == (-905526737640000L));
    }

    @Test
    public void test13922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13922");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(10L, chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime.Property property11 = dateTime5.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime13 = property11.setCopy(104);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test13923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13923");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 'a');
        org.joda.time.Period period3 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = period3.toDurationFrom(readableInstant4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        boolean boolean10 = interval8.isAfter((long) 10);
        org.joda.time.Duration duration11 = interval8.toDuration();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        boolean boolean16 = interval14.isAfter((long) 10);
        org.joda.time.Duration duration17 = interval14.toDuration();
        org.joda.time.Duration duration19 = duration11.withDurationAdded((org.joda.time.ReadableDuration) duration17, (int) '4');
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime20.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTime(dateTimeZone24);
        int int26 = dateTime25.getCenturyOfEra();
        org.joda.time.Interval interval27 = duration17.toIntervalTo((org.joda.time.ReadableInstant) dateTime25);
        int int28 = duration5.compareTo((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period29 = duration17.toPeriod();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime36 = dateTime30.withDate(6, (int) (short) 1, 4);
        org.joda.time.Period period37 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean38 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration17);
        java.lang.String str39 = duration17.toString();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period44 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime45 = dateTime40.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property47 = dateTime46.era();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period52 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime53 = dateTime48.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Chronology chronology54 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime55 = dateTime40.toDateTime(chronology54);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime56, (org.joda.time.ReadablePartial) localTime57, periodType58);
        org.joda.time.LocalTime localTime61 = localTime57.withMillisOfSecond(4);
        int[] intArray63 = chronology54.get((org.joda.time.ReadablePartial) localTime57, (long) 0);
        org.joda.time.Chronology chronology64 = chronology54.withUTC();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.dayOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.era();
        org.joda.time.Period period68 = duration17.toPeriod(chronology64);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 969 + "'", int23 == 969);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0S" + "'", str39, "PT0S");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test13924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13924");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        boolean boolean9 = interval7.isAfter((long) 10);
        org.joda.time.Duration duration10 = interval7.toDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        boolean boolean16 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(10L, chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        int int22 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean24 = dateTime20.isSupported(dateTimeFieldType23);
        org.joda.time.DateTime.Property property25 = dateTime17.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = property25.roundCeilingCopy();
        org.joda.time.DateTime dateTime27 = property25.roundFloorCopy();
        int int28 = dateTime27.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test13925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13925");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(8);
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear(28);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test13926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13926");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Period period4 = mutableInterval2.toPeriod();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property6 = dateTime5.era();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology13 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime14.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.toDateTime(dateTimeZone18);
        int int20 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean25 = interval23.isAfter((long) 10);
        org.joda.time.Duration duration26 = interval23.toDuration();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.Duration duration34 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) '4');
        org.joda.time.DateTime dateTime35 = dateTime7.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime36 = dateTime35.withEarlierOffsetAtOverlap();
        mutableInterval2.setEnd((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Interval interval38 = mutableInterval2.toInterval();
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval2.copy();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Period period47 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime48 = dateTime43.plus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Chronology chronology49 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime51);
        int int53 = dateTime50.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = dateTime50.toDateTime(dateTimeZone54);
        int int56 = dateTime43.compareTo((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = interval59.isAfter((long) 10);
        org.joda.time.Duration duration62 = interval59.toDuration();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) dateTime64);
        boolean boolean67 = interval65.isAfter((long) 10);
        org.joda.time.Duration duration68 = interval65.toDuration();
        org.joda.time.Duration duration70 = duration62.withDurationAdded((org.joda.time.ReadableDuration) duration68, (int) '4');
        org.joda.time.Interval interval71 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration62);
        mutableInterval40.setDurationAfterStart((org.joda.time.ReadableDuration) duration62);
        org.joda.time.MutableInterval mutableInterval73 = mutableInterval40.copy();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime();
        org.joda.time.Interval interval76 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime74, (org.joda.time.ReadableInstant) dateTime75);
        boolean boolean78 = interval76.isAfter((long) 10);
        org.joda.time.Duration duration79 = interval76.toDuration();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime();
        org.joda.time.Interval interval82 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadableInstant) dateTime81);
        boolean boolean84 = interval82.isAfter((long) 10);
        org.joda.time.Duration duration85 = interval82.toDuration();
        org.joda.time.Duration duration87 = duration79.withDurationAdded((org.joda.time.ReadableDuration) duration85, (int) '4');
        long long88 = duration87.getStandardMinutes();
        long long89 = duration87.getStandardMinutes();
        org.joda.time.Duration duration91 = duration87.plus((long) 0);
        mutableInterval73.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration91);
        long long93 = mutableInterval73.getEndMillis();
        org.joda.time.DateTime dateTime94 = mutableInterval73.getStart();
        mutableInterval39.setInterval((org.joda.time.ReadableInterval) mutableInterval73);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 426L + "'", long3 == 426L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 969 + "'", int17 == 969);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 969 + "'", int53 == 969);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(mutableInterval73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test13927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13927");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1645455366482L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) 'a');
        org.joda.time.Minutes minutes4 = duration3.toStandardMinutes();
        org.joda.time.Duration duration5 = duration1.plus((org.joda.time.ReadableDuration) duration3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period6 = duration5.toPeriod();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 27424256205");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(minutes4);
        org.junit.Assert.assertNotNull(duration5);
    }

    @Test
    public void test13928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13928");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime1.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime17, (org.joda.time.ReadablePartial) localTime18, periodType19);
        org.joda.time.LocalTime localTime22 = localTime18.withMillisOfSecond(4);
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) localTime18, (long) 0);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(0L, chronology15);
        org.joda.time.DateTimeField dateTimeField26 = chronology15.millisOfSecond();
        org.joda.time.DurationField durationField27 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField28 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology15.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test13929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13929");
        java.util.Locale locale3 = new java.util.Locale("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "", "hi!");
        java.lang.String str4 = locale3.getDisplayScript();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-21t14:53:44.007z/2022-02-21t14:53:44.007z__hi!");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test13930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13930");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval((long) '4', (long) 478);
        long long3 = mutableInterval2.toDurationMillis();
        mutableInterval2.setInterval((long) 14, (long) '4');
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) localTime8, periodType9);
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) period10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = interval14.getEnd();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(10L, chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        int int22 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DateTime.Property property23 = dateTime17.property(dateTimeFieldType21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean25 = dateTime17.isSupported(dateTimeFieldType24);
        org.joda.time.DateTime.Property property26 = dateTime17.centuryOfEra();
        org.joda.time.DateTime dateTime27 = property26.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears(2922789);
        mutableInterval2.setEnd((org.joda.time.ReadableInstant) dateTime27);
        int int31 = dateTime27.getSecondOfDay();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 426L + "'", long3 == 426L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test13931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13931");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 0);
        int int8 = dateTimeFormatter5.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = dateTimeFormatter5.parseLocalTime("PT-1H");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
    }

    @Test
    public void test13932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13932");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime3, periodType4);
        org.joda.time.Period period7 = period5.minusDays(10);
        org.joda.time.Period period9 = period5.minusHours(0);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(10L, chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime14.plusWeeks(4);
        boolean boolean19 = periodType11.equals((java.lang.Object) dateTime18);
        int int20 = periodType11.size();
        org.joda.time.PeriodType periodType21 = periodType11.withMillisRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 12, periodType11);
        org.joda.time.PeriodType periodType23 = periodType11.withDaysRemoved();
        org.joda.time.Period period24 = period5.withPeriodType(periodType11);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str26 = durationFieldType25.toString();
        boolean boolean27 = periodType11.isSupported(durationFieldType25);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime28, (org.joda.time.ReadablePartial) localTime29, periodType30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime35 = interval34.getEnd();
        org.joda.time.DateTime dateTime37 = dateTime35.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime38 = dateTime35.toLocalTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime40);
        boolean boolean43 = interval41.isAfter((long) 10);
        org.joda.time.Duration duration44 = interval41.toDuration();
        org.joda.time.DateTime dateTime46 = dateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration44, 0);
        org.joda.time.DateTime dateTime47 = localTime29.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusSeconds((int) (short) -1);
        boolean boolean50 = dateTime47.isBeforeNow();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.Chronology chronology52 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval51);
        org.joda.time.DateTime dateTime53 = dateTime47.toDateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfCentury(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property59 = dateTime58.era();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period64 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime65 = dateTime60.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology66);
        org.joda.time.DateTimeField dateTimeField68 = chronology66.weekyear();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.weekyear();
        org.joda.time.DurationField durationField70 = chronology66.eras();
        org.joda.time.DateTimeField dateTimeField71 = chronology66.year();
        org.joda.time.DateTimeField dateTimeField72 = chronology66.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType56.getField(chronology66);
        org.joda.time.DateTime dateTime74 = dateTime55.toDateTime(chronology66);
        org.joda.time.Period period75 = new org.joda.time.Period(378683424000000L, (long) 897, periodType11, chronology66);
        org.joda.time.PeriodType periodType76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period77 = new org.joda.time.Period((java.lang.Object) 378683424000000L, periodType76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "minutes" + "'", str26, "minutes");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test13933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13933");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int6 = localDateTime5.getEra();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime7.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int16 = dateTime7.get(dateTimeFieldType15);
        int int17 = localDateTime5.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime5.withMonthOfYear((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days23 = duration22.toStandardDays();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusYears(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean28 = localDateTime19.isSupported(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 969 + "'", int10 == 969);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 14 + "'", int17 == 14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test13934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13934");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime4.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime13 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int int14 = localTime0.getHourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(35L, chronology16);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        int int19 = periodType18.size();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property24 = dateTime22.millisOfDay();
        int int25 = dateTime22.getYearOfEra();
        org.joda.time.DateTime.Property property26 = dateTime22.centuryOfEra();
        org.joda.time.DateTime dateTime28 = dateTime22.plusWeeks(100);
        org.joda.time.DateTime.Property property29 = dateTime22.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        boolean boolean31 = localTime0.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test13935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13935");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTime(dateTimeZone4);
        int int6 = dateTime5.getCenturyOfEra();
        org.joda.time.DateTime.Property property7 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10);
        long long17 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.text.DateFormatSymbols dateFormatSymbols19 = org.joda.time.DateTimeUtils.getDateFormatSymbols(locale18);
        int int20 = property7.getMaximumShortTextLength(locale18);
        org.joda.time.DateTime dateTime21 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime22 = property7.roundFloorCopy();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale26 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols27 = new java.text.DateFormatSymbols(locale26);
        java.lang.String str28 = locale23.getDisplayVariant(locale26);
        java.lang.String str29 = locale23.getDisplayLanguage();
        java.util.Locale locale33 = new java.util.Locale("57540", "20", "672");
        java.lang.String str34 = locale23.getDisplayCountry(locale33);
        java.lang.String str35 = property7.getAsShortText(locale23);
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.010Z/1970-01-01T00:00:00.010Z");
        java.lang.String str38 = locale23.getDisplayName(locale37);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 969 + "'", int3 == 969);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(dateFormatSymbols19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals(locale33.toString(), "57540_20_672");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb" + "'", str35, "Feb");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test13936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13936");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology24.getZone();
        org.joda.time.DurationField durationField28 = chronology24.months();
        java.lang.String str29 = durationField28.getName();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "months" + "'", str29, "months");
    }

    @Test
    public void test13937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13937");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = interval7.isBefore(readableInstant8);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime18 = dateTime13.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime20.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTime(dateTimeZone24);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = interval35.isAfter((long) 10);
        org.joda.time.Duration duration38 = interval35.toDuration();
        org.joda.time.Duration duration40 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) '4');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration32);
        mutableInterval10.setDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval10.copy();
        boolean boolean44 = interval7.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.DateTime dateTime45 = mutableInterval43.getEnd();
        org.joda.time.DateTime dateTime47 = dateTime45.minusWeeks(335);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean51 = dateTimeZone50.isFixed();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 2, dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((-1L), dateTimeZone50);
        org.joda.time.LocalDate localDate55 = localDate53.withDayOfWeek(2);
        org.joda.time.LocalDate localDate57 = localDate55.plusMonths(3);
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths(1970);
        org.joda.time.LocalDate.Property property60 = localDate57.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str62 = dateTimeFieldType61.toString();
        org.joda.time.LocalDate localDate64 = localDate57.withField(dateTimeFieldType61, 53625817);
        int int65 = dateTime47.get(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 969 + "'", int23 == 969);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "weekyear" + "'", str62, "weekyear");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1963 + "'", int65 == 1963);
    }

    @Test
    public void test13938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13938");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.minusWeeks((int) 'a');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withDayOfWeek(2924);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2924 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test13939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13939");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyear();
        org.joda.time.DurationField durationField13 = chronology9.centuries();
        org.joda.time.DurationField durationField14 = chronology9.days();
        org.joda.time.Chronology chronology15 = chronology9.withUTC();
        org.joda.time.DurationField durationField16 = chronology9.halfdays();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test13940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13940");
        java.util.Locale locale3 = new java.util.Locale("15:59:00.999", "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z", "months");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale7 = locale5.stripExtensions();
        java.lang.String str8 = locale3.getDisplayName(locale7);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale7);
        calendar9.set(9, 932, 53791, 79, 171);
        java.util.TimeZone timeZone16 = calendar9.getTimeZone();
        timeZone16.setID("");
        org.junit.Assert.assertEquals(locale3.toString(), "15:59:00.999_2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z_months");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z" + "'", str4, "2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)" + "'", str8, "15:59:00.999 (2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z,months)");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=9,MONTH=932,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=53791,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=79,MINUTE=171,SECOND=19,MILLISECOND=484,ZONE_OFFSET=52,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test13941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13941");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale6 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(163);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test13942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13942");
        org.joda.time.Period period1 = org.joda.time.Period.days(11);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) localTime3, periodType4);
        org.joda.time.Period period7 = period5.minusYears(893);
        org.joda.time.Period period9 = period7.minusMinutes((int) '#');
        org.joda.time.Period period11 = period7.plusMonths(8);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        boolean boolean17 = interval15.isAfter((long) 10);
        org.joda.time.Duration duration18 = interval15.toDuration();
        org.joda.time.Chronology chronology19 = interval15.getChronology();
        boolean boolean20 = durationFieldType12.isSupported(chronology19);
        org.joda.time.Period period22 = period7.withFieldAdded(durationFieldType12, 53139974);
        boolean boolean23 = period1.isSupported(durationFieldType12);
        org.joda.time.Period period25 = period1.plusMonths(44533059);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test13943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13943");
        org.joda.time.Period period1 = new org.joda.time.Period((long) 8);
        org.joda.time.Period period3 = period1.plusSeconds(53658501);
        org.joda.time.Period period5 = period3.withMillis(8);
        org.joda.time.Period period7 = period5.plusHours((-1963));
        org.joda.time.Period period9 = period7.withSeconds(895);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test13944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13944");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime7 = interval6.getEnd();
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime10 = dateTime7.toLocalTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime12);
        boolean boolean15 = interval13.isAfter((long) 10);
        org.joda.time.Duration duration16 = interval13.toDuration();
        org.joda.time.DateTime dateTime18 = dateTime7.withDurationAdded((org.joda.time.ReadableDuration) duration16, 0);
        org.joda.time.DateTime dateTime19 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period29 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime30 = dateTime25.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime21.toDateTime(chronology31);
        org.joda.time.DateTime.Property property35 = dateTime21.millisOfSecond();
        org.joda.time.DateTime dateTime37 = property35.addToCopy(100);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test13945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13945");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        boolean boolean7 = interval5.isAfter((long) 10);
        org.joda.time.Duration duration8 = interval5.toDuration();
        org.joda.time.Chronology chronology9 = interval5.getChronology();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology9);
        org.joda.time.Period period12 = org.joda.time.Period.seconds(99);
        long long15 = chronology9.add((org.joda.time.ReadablePeriod) period12, (long) 53657, 0);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 1, chronology9);
        org.joda.time.LocalTime.Property property17 = localTime16.secondOfMinute();
        org.joda.time.LocalTime.Property property18 = localTime16.millisOfSecond();
        org.joda.time.LocalTime localTime19 = property18.roundFloorCopy();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 53657L + "'", long15 == 53657L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test13946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13946");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        boolean boolean8 = interval6.isAfter((long) 10);
        org.joda.time.Duration duration9 = interval6.toDuration();
        org.joda.time.Chronology chronology10 = interval6.getChronology();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology10);
        org.joda.time.Period period13 = org.joda.time.Period.seconds(99);
        long long16 = chronology10.add((org.joda.time.ReadablePeriod) period13, (long) 53657, 0);
        org.joda.time.DateTimeField dateTimeField17 = chronology10.halfdayOfDay();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((-378691200000L), 48980883668765L, chronology10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 53657L + "'", long16 == 53657L);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test13947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13947");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.Period period5 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime6 = dateTime1.plus((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.era();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime14 = dateTime9.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime16 = dateTime1.toDateTime(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.centuries();
        int int20 = durationField17.getDifference((long) 2, (long) (-1));
        int int23 = durationField17.getDifference(10L, (long) (short) 100);
        org.joda.time.DurationFieldType durationFieldType24 = durationField17.getType();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        boolean boolean32 = interval30.isAfter((long) 10);
        org.joda.time.Duration duration33 = interval30.toDuration();
        org.joda.time.Chronology chronology34 = interval30.getChronology();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology34);
        org.joda.time.Period period37 = org.joda.time.Period.seconds(99);
        long long40 = chronology34.add((org.joda.time.ReadablePeriod) period37, (long) 53657, 0);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 1, chronology34);
        org.joda.time.DurationField durationField42 = durationFieldType24.getField(chronology34);
        java.lang.String str43 = chronology34.toString();
        org.joda.time.DateTimeField dateTimeField44 = chronology34.monthOfYear();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 59392155, chronology34);
        org.joda.time.DateTimeField dateTimeField46 = chronology34.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 53657L + "'", long40 == 53657L);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[+00:00:00.001]" + "'", str43, "ISOChronology[+00:00:00.001]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test13948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13948");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean3 = dateTimeZone2.isFixed();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 2, dateTimeZone2);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeUtils.getZone(dateTimeZone2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj0, dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test13949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13949");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime4.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime13 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        int int14 = localTime0.getSecondOfMinute();
        org.joda.time.LocalTime localTime16 = localTime0.withMillisOfSecond(645);
        org.joda.time.Chronology chronology17 = localTime0.getChronology();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 42 + "'", int14 == 42);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test13950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13950");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.months();
        org.joda.time.Period period6 = duration3.toPeriod(periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) period6, readableInstant7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval8.copy();
        java.lang.Object obj10 = mutableInterval8.clone();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime11, (org.joda.time.ReadablePartial) localTime12, periodType13);
        org.joda.time.LocalTime localTime16 = localTime12.withMillisOfSecond(4);
        org.joda.time.LocalTime localTime18 = localTime16.minusMinutes(0);
        org.joda.time.Period period23 = new org.joda.time.Period((int) (byte) 1, (int) (byte) 0, 6, 22);
        org.joda.time.LocalTime localTime25 = localTime18.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 10);
        org.joda.time.LocalTime localTime27 = localTime25.minusSeconds(7);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property30 = dateTime29.era();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period35 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime36 = dateTime31.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime38.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime38.toDateTime(dateTimeZone42);
        int int44 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean45 = periodType28.equals((java.lang.Object) dateTime38);
        org.joda.time.DateTime dateTime47 = dateTime38.withYearOfEra(32769);
        org.joda.time.DateTime dateTime48 = localTime25.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.DateTime dateTime54 = dateTime52.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime55 = dateTime52.toLocalTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) dateTime57);
        boolean boolean60 = interval58.isAfter((long) 10);
        org.joda.time.Duration duration61 = interval58.toDuration();
        org.joda.time.DateTime dateTime63 = dateTime52.withDurationAdded((org.joda.time.ReadableDuration) duration61, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int65 = dateTime63.get(dateTimeFieldType64);
        org.joda.time.Chronology chronology66 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime67 = dateTime63.withEarlierOffsetAtOverlap();
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 969 + "'", int41 == 969);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 9 + "'", int65 == 9);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test13951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13951");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        java.util.Calendar.Builder builder12 = builder4.setWeekDate(11, 1, 1970);
        java.util.Calendar.Builder builder17 = builder12.setTimeOfDay(6, (int) '#', (-1), 53633080);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("minutes");
        java.util.Calendar.Builder builder20 = builder12.setTimeZone(timeZone19);
        java.util.Date date21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder12.setInstant(date21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test13952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13952");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.weekyearOfCentury();
        long long26 = dateTimeField24.roundFloor(100L);
        java.lang.String str28 = dateTimeField24.getAsShortText((long) (byte) 100);
        long long31 = dateTimeField24.add((long) (short) 1, (long) 53623795);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(35L, chronology33);
        int int35 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.DateTime dateTime41 = dateTime39.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime42 = dateTime39.toLocalTime();
        int int43 = dateTimeField24.getMaximumValue((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.LocalTime localTime45 = localTime42.plusMillis(3);
        int int46 = localTime45.getSecondOfMinute();
        org.joda.time.LocalTime localTime48 = localTime45.withMillisOfSecond(894);
        org.joda.time.LocalTime localTime50 = localTime48.minusMillis((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime52 = localTime50.withMillisOfSecond(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "70" + "'", str28, "70");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1692203524934400001L + "'", long31 == 1692203524934400001L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(localTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 42 + "'", int46 == 42);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
    }

    @Test
    public void test13953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13953");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("minutes");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("PT14H");
        java.util.Locale.Builder builder7 = builder5.setLanguageTag("CA");
        java.util.Locale.Builder builder10 = builder5.setExtension('u', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("29 Jan 1970 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 29 Jan 1970 00:00:00 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "minutes");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test13954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13954");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-61977571199980L));
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) localTime4, periodType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime13 = dateTime7.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime16 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = interval19.getEnd();
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime23 = dateTime20.toLocalTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.DateTime dateTime31 = dateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration29, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        int int33 = dateTime31.get(dateTimeFieldType32);
        boolean boolean34 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant2, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant37 = instant2.withMillis((long) 4);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period46 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime47 = dateTime42.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology48);
        org.joda.time.DurationField durationField50 = chronology48.minutes();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.minuteOfDay();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology48);
        org.joda.time.DurationField durationField53 = chronology48.millis();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(4460054926L, chronology48);
        org.joda.time.Period period56 = new org.joda.time.Period((long) (short) 10);
        org.joda.time.Period period58 = period56.withHours((int) 'x');
        org.joda.time.LocalTime localTime59 = localTime54.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period61 = period58.minusHours(363);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.Interval interval66 = interval64.toInterval();
        boolean boolean68 = interval64.contains((long) 1970);
        org.joda.time.Interval interval69 = interval64.toInterval();
        org.joda.time.ReadableInstant readableInstant70 = null;
        boolean boolean71 = interval69.isBefore(readableInstant70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property73 = dateTime72.era();
        org.joda.time.DurationField durationField74 = property73.getLeapDurationField();
        int int75 = property73.getMaximumValueOverall();
        int int76 = property73.getMinimumValueOverall();
        org.joda.time.DateTime dateTime77 = property73.getDateTime();
        org.joda.time.DateTime dateTime78 = property73.withMaximumValue();
        org.joda.time.Interval interval79 = interval69.withEnd((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime80 = interval79.getEnd();
        java.lang.Object obj81 = null;
        boolean boolean82 = dateTime80.equals(obj81);
        int int83 = dateTime80.getDayOfYear();
        org.joda.time.Duration duration84 = period58.toDurationFrom((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Instant instant85 = instant37.plus((org.joda.time.ReadableDuration) duration84);
        boolean boolean86 = instant37.isBeforeNow();
        org.joda.time.Instant instant89 = instant37.withDurationAdded((long) 165, 93);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNull(durationField74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(instant89);
    }

    @Test
    public void test13955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13955");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        int int4 = localDate3.getMonthOfYear();
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(478, 15);
        org.joda.time.DateMidnight dateMidnight10 = localDate3.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate3.minusMonths(44);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withField(dateTimeFieldType19, 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMonths(1);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusHours(364);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate12, (org.joda.time.ReadablePartial) localDateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test13956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13956");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = property15.addWrapFieldToCopy(99);
        org.joda.time.LocalDateTime localDateTime18 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = interval21.getEnd();
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) (byte) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(10L, chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyear();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean31 = dateTime27.isSupported(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        boolean boolean33 = dateTime24.isSupported(dateTimeFieldType30);
        int int34 = localDateTime18.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime18.withWeekyear(53623795);
        int int37 = localDateTime36.size();
        org.joda.time.LocalDateTime.Property property38 = localDateTime36.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 4 + "'", int37 == 4);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test13957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13957");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfMonth(21);
        org.joda.time.LocalDate localDate5 = localDate3.minusDays(12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        int int7 = localDate5.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDate localDate9 = localDate5.minusWeeks((int) (short) -1);
        int int10 = localDate5.getWeekyear();
        int int11 = localDate5.size();
        org.joda.time.Interval interval12 = localDate5.toInterval();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test13958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13958");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime6);
        boolean boolean9 = interval7.isAfter((long) 10);
        org.joda.time.Duration duration10 = interval7.toDuration();
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = period12.toDurationFrom(readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        boolean boolean16 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime17 = dateTime2.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(35L, chronology19);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        org.joda.time.LocalTime localTime26 = localTime20.withFieldAdded(durationFieldType24, (-1));
        org.joda.time.LocalTime localTime28 = localTime26.plusHours(53633080);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        org.joda.time.LocalTime localTime31 = property29.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime33 = property29.addWrapFieldToCopy((int) 'x');
        org.joda.time.LocalTime localTime35 = localTime33.plusSeconds(1852);
        boolean boolean36 = dateTime17.equals((java.lang.Object) localTime33);
        java.lang.String str38 = localTime33.toString("13:11:22.969");
        int int39 = localTime33.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "13:11:22.969" + "'", str38, "13:11:22.969");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 59 + "'", int39 == 59);
    }

    @Test
    public void test13959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13959");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.Duration duration3 = org.joda.time.Duration.millis((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime0.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.months();
        org.joda.time.Period period6 = duration3.toPeriod(periodType5);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime7, (org.joda.time.ReadablePartial) localTime8, periodType9);
        org.joda.time.Period period12 = period10.minusDays(10);
        org.joda.time.Duration duration13 = period10.toStandardDuration();
        org.joda.time.Duration duration15 = org.joda.time.Duration.millis((long) (short) -1);
        long long16 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        long long17 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = duration13.minus((org.joda.time.ReadableDuration) duration15);
        long long19 = duration13.getStandardDays();
        boolean boolean20 = duration3.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        boolean boolean22 = duration13.isEqual((org.joda.time.ReadableDuration) duration21);
        long long23 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration13);
        long long24 = duration13.getStandardHours();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 53786271);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime27, (org.joda.time.ReadablePartial) localTime28, periodType29);
        org.joda.time.LocalTime localTime32 = localTime27.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime33, (org.joda.time.ReadablePartial) localTime34, periodType35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime43 = dateTime40.toLocalTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = interval46.isAfter((long) 10);
        org.joda.time.Duration duration49 = interval46.toDuration();
        org.joda.time.DateTime dateTime51 = dateTime40.withDurationAdded((org.joda.time.ReadableDuration) duration49, 0);
        org.joda.time.DateTime dateTime52 = localTime34.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType55 = periodType53.getFieldType((int) (byte) 0);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime27, (org.joda.time.ReadablePartial) localTime34, periodType53);
        org.joda.time.PeriodType periodType57 = periodType53.withWeeksRemoved();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime26, periodType53);
        java.lang.String str59 = periodType53.getName();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "YearDayTime" + "'", str59, "YearDayTime");
    }

    @Test
    public void test13960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13960");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        int int3 = property1.getMaximumValueOverall();
        int int4 = property1.getMinimumValueOverall();
        org.joda.time.DateTime dateTime5 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime7, periodType8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = dateTime13.toLocalTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime24 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration22, 0);
        org.joda.time.DateTime dateTime25 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusSeconds((int) (short) -1);
        boolean boolean28 = dateTime25.isBeforeNow();
        org.joda.time.ReadableInterval readableInterval29 = null;
        org.joda.time.Chronology chronology30 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime(chronology30);
        org.joda.time.DateTime dateTime32 = dateTime5.withChronology(chronology30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        org.joda.time.DateTime.Property property37 = dateTime36.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        long long41 = dateTimeZone38.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((java.lang.Object) dateTime36, dateTimeZone38);
        long long46 = dateTimeZone38.convertLocalToUTC(35L, false, 1L);
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(dateTimeZone38);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime49 = dateTime5.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime50 = dateTime49.toDateTime();
        org.joda.time.DateTime dateTime52 = dateTime50.withCenturyOfEra(251);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 378691200010L + "'", long41 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 34L + "'", long46 == 34L);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test13961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13961");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime.Property property6 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime8 = property6.addToCopy((long) 2);
        org.joda.time.DateTime dateTime9 = property6.roundFloorCopy();
        int int10 = dateTime9.getMillisOfSecond();
        java.lang.Object obj11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(obj11);
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        org.joda.time.Period period15 = period12.withYears(53764795);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType17 = periodType16.withMonthsRemoved();
        org.joda.time.Period period18 = period12.normalizedStandard(periodType16);
        org.joda.time.DateTime dateTime19 = dateTime9.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(10L, chronology21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(10L, chronology24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        int int27 = dateTime25.get(dateTimeFieldType26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean29 = dateTime25.isSupported(dateTimeFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType28.getDurationType();
        boolean boolean31 = dateTime22.equals((java.lang.Object) durationFieldType30);
        org.joda.time.DateTime dateTime33 = dateTime22.plusMillis(762);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean35 = dateTime22.isSupported(dateTimeFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType34.getDurationType();
        int int37 = period12.get(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 312 + "'", int10 == 312);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test13962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13962");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 57540999);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean9 = dateTimeZone8.isFixed();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 2, dateTimeZone8);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeUtils.getZone(dateTimeZone8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = dateTimeFormatter2.parseLocalDate("1970-01-29T00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test13963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13963");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        int int9 = localTime2.size();
        org.joda.time.LocalTime localTime11 = localTime2.withMillisOfDay(53623795);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours(897);
        org.joda.time.LocalTime localTime15 = localTime13.minusMinutes(35);
        org.joda.time.LocalTime.Property property16 = localTime13.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test13964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13964");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        boolean boolean13 = interval7.abuts((org.joda.time.ReadableInterval) interval10);
        org.joda.time.Chronology chronology14 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        long long17 = dateTimeField15.roundFloor((long) (byte) 100);
        long long20 = dateTimeField15.set((long) (short) 0, 2000);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withField(dateTimeFieldType27, 100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMonths(5);
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.dayOfYear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.millis((long) (short) -1);
        long long41 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration40);
        long long42 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = duration40.toDuration();
        long long44 = duration43.getMillis();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime34.minus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime34.withDayOfYear((int) 'x');
        int int48 = localDateTime47.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.minuteOfHour();
        org.joda.time.DurationField durationField50 = property49.getLeapDurationField();
        org.joda.time.DurationField durationField51 = property49.getDurationField();
        org.joda.time.LocalDateTime localDateTime52 = property49.roundHalfFloorCopy();
        java.util.Calendar.Builder builder54 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder58 = builder54.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder62 = builder58.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(10L, chronology64);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekyear();
        int int67 = dateTime65.get(dateTimeFieldType66);
        org.joda.time.DateTime dateTime69 = dateTime65.plusWeeks(4);
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.util.Calendar calendar71 = dateTime69.toCalendar(locale70);
        java.util.TimeZone timeZone72 = calendar71.getTimeZone();
        java.util.Calendar.Builder builder73 = builder58.setTimeZone(timeZone72);
        java.util.Calendar.Builder builder77 = builder73.setTimeOfDay(3, 53633080, (int) (byte) 1);
        org.joda.time.Period period79 = new org.joda.time.Period((long) '#');
        int int81 = period79.getValue(0);
        org.joda.time.Period period83 = period79.plusDays((int) '#');
        int[] intArray84 = period79.getValues();
        java.util.Calendar.Builder builder85 = builder77.setFields(intArray84);
        java.util.Locale locale88 = new java.util.Locale("", "hi!");
        java.util.Locale locale89 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale89);
        java.lang.String str91 = locale88.getDisplayScript(locale89);
        boolean boolean92 = locale89.hasExtensions();
        java.util.Calendar.Builder builder93 = builder85.setLocale(locale89);
        java.lang.String str94 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDateTime52, 1164, locale89);
        int int95 = dateTimeField15.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2000000L + "'", long20 == 2000000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1970 + "'", int67 == 1970);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNotNull(calendar71);
        org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 0, 35]");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertEquals(locale88.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1164" + "'", str94, "1164");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 86399 + "'", int95 == 86399);
    }

    @Test
    public void test13965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13965");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime2);
        boolean boolean5 = interval3.isAfter((long) 10);
        org.joda.time.Duration duration6 = interval3.toDuration();
        org.joda.time.Chronology chronology7 = interval3.getChronology();
        boolean boolean8 = durationFieldType0.isSupported(chronology7);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        int int15 = localDateTime14.getEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withYear(2);
        long long19 = chronology7.set((org.joda.time.ReadablePartial) localDateTime17, (long) 100);
        int int20 = localDateTime17.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = localDateTime17.getValue(1963);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1963");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62092691280001L) + "'", long19 == (-62092691280001L));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test13966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13966");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.Interval interval4 = interval2.toInterval();
        boolean boolean6 = interval2.contains((long) 1970);
        org.joda.time.Interval interval7 = interval2.toInterval();
        org.joda.time.ReadableInstant readableInstant8 = null;
        boolean boolean9 = interval7.isBefore(readableInstant8);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period17 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime18 = dateTime13.plus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime20.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime20.toDateTime(dateTimeZone24);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        boolean boolean31 = interval29.isAfter((long) 10);
        org.joda.time.Duration duration32 = interval29.toDuration();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime34);
        boolean boolean37 = interval35.isAfter((long) 10);
        org.joda.time.Duration duration38 = interval35.toDuration();
        org.joda.time.Duration duration40 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) '4');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration32);
        mutableInterval10.setDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.MutableInterval mutableInterval43 = mutableInterval10.copy();
        boolean boolean44 = interval7.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.DateTime dateTime45 = mutableInterval43.getEnd();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period49 = new org.joda.time.Period((long) (short) -1, (long) (byte) -1, periodType48);
        java.lang.String str50 = periodType48.getName();
        org.joda.time.Period period51 = mutableInterval43.toPeriod(periodType48);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 969 + "'", int23 == 969);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "YearDayTime" + "'", str50, "YearDayTime");
        org.junit.Assert.assertNotNull(period51);
    }

    @Test
    public void test13967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13967");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(10L, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.weekyear();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.plusWeeks(4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime14 = dateTime10.withWeekyear(1);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalTime localTime16 = dateTime2.toLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        java.lang.String str18 = dateTimeFieldType17.getName();
        org.joda.time.LocalTime.Property property19 = localTime16.property(dateTimeFieldType17);
        org.joda.time.LocalTime localTime20 = property19.roundCeilingCopy();
        org.joda.time.LocalTime localTime21 = property19.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "clockhourOfHalfday" + "'", str18, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test13968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13968");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        int int3 = dateTime0.getDayOfWeek();
        org.joda.time.DateTime dateTime5 = dateTime0.minusMinutes(53633080);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.LocalTime localTime7 = dateTime5.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = localTime7.toString("7 Jun 4086 23:59:59 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test13969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13969");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime(chronology21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localTime24, periodType25);
        org.joda.time.LocalTime localTime28 = localTime24.withMillisOfSecond(4);
        int[] intArray30 = chronology21.get((org.joda.time.ReadablePartial) localTime24, (long) 0);
        org.joda.time.Chronology chronology31 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfYear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols37 = new java.text.DateFormatSymbols(locale36);
        java.lang.String str38 = locale33.getDisplayVariant(locale36);
        int int39 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str40 = locale6.getDisplayLanguage(locale33);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setLanguage("minutes");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale locale45 = builder41.build();
        java.lang.String str46 = locale6.getDisplayScript(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withLocale(locale45);
        boolean boolean48 = dateTimeFormatter2.isPrinter();
        int int49 = dateTimeFormatter2.getDefaultYear();
        boolean boolean50 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = dateTimeFormatter2.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2000 + "'", int49 == 2000);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(dateTimePrinter51);
    }

    @Test
    public void test13970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13970");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 17);
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.era();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Period period19 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime20 = dateTime15.plus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime(chronology21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime23, (org.joda.time.ReadablePartial) localTime24, periodType25);
        org.joda.time.LocalTime localTime28 = localTime24.withMillisOfSecond(4);
        int[] intArray30 = chronology21.get((org.joda.time.ReadablePartial) localTime24, (long) 0);
        org.joda.time.Chronology chronology31 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.dayOfYear();
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Locale locale36 = new java.util.Locale("", "hi!");
        java.text.DateFormatSymbols dateFormatSymbols37 = new java.text.DateFormatSymbols(locale36);
        java.lang.String str38 = locale33.getDisplayVariant(locale36);
        int int39 = dateTimeField32.getMaximumTextLength(locale33);
        java.lang.String str40 = locale6.getDisplayLanguage(locale33);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setLanguage("minutes");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale locale45 = builder41.build();
        java.lang.String str46 = locale6.getDisplayScript(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withLocale(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter2.withLocale(locale50);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.DateTime.Property property57 = dateTime56.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        long long61 = dateTimeZone58.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((java.lang.Object) dateTime56, dateTimeZone58);
        long long66 = dateTimeZone58.convertLocalToUTC(35L, false, 1L);
        java.lang.String str68 = dateTimeZone58.getName((long) 12);
        int int70 = dateTimeZone58.getStandardOffset(100001L);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime(4460054926L, dateTimeZone58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter2.withZone(dateTimeZone58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withDefaultYear(43);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 378691200010L + "'", long61 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 34L + "'", long66 == 34L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.001" + "'", str68, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
    }

    @Test
    public void test13971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13971");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        java.lang.String str4 = interval2.toString();
        long long5 = interval2.getStartMillis();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        java.lang.String str10 = interval8.toString();
        org.joda.time.Chronology chronology11 = interval8.getChronology();
        org.joda.time.MutableInterval mutableInterval12 = interval8.toMutableInterval();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property16 = dateTime14.millisOfDay();
        org.joda.time.DateTime.Property property17 = dateTime14.weekyear();
        org.joda.time.DateTime.Property property18 = dateTime14.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int20 = dateTime14.get(dateTimeFieldType19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 10, chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime(dateTimeZone24);
        org.joda.time.Period period27 = org.joda.time.Period.millis(10);
        org.joda.time.DateTime dateTime28 = dateTime23.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withField(dateTimeFieldType35, 100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime34.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int43 = localDateTime34.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean45 = dateTimeZone44.isFixed();
        org.joda.time.DateTime dateTime46 = localDateTime34.toDateTime(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime23.withZone(dateTimeZone44);
        boolean boolean48 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime23);
        mutableInterval12.setStart((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean50 = interval2.isBefore((org.joda.time.ReadableInstant) dateTime23);
        long long51 = interval2.getStartMillis();
        org.joda.time.Chronology chronology52 = interval2.getChronology();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001" + "'", str4, "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645459782311L + "'", long5 == 1645459782311L);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001" + "'", str10, "2022-02-21T16:09:42.312+00:00:00.001/2022-02-21T16:09:42.312+00:00:00.001");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(mutableInterval12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 58182 + "'", int20 == 58182);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645459782311L + "'", long51 == 1645459782311L);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test13972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13972");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        int int4 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean6 = localTime1.isEqual((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime localTime8 = localTime1.withMillisOfDay((int) '4');
        org.joda.time.LocalTime.Property property9 = localTime1.millisOfSecond();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        org.joda.time.Interval interval17 = interval15.toInterval();
        boolean boolean19 = interval15.contains((long) 1970);
        org.joda.time.Interval interval20 = interval15.toInterval();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean25 = interval23.isAfter((long) 10);
        boolean boolean26 = interval20.abuts((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Chronology chronology27 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.LocalTime localTime31 = localTime29.minusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfDay();
        org.joda.time.Period period34 = new org.joda.time.Period(0L, 52L, chronology32);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay(3061497600001L, chronology32);
        org.joda.time.LocalTime localTime37 = localTime35.minusMillis(2);
        int int38 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime42);
        boolean boolean45 = interval43.isAfter((long) 10);
        org.joda.time.Duration duration46 = interval43.toDuration();
        org.joda.time.Chronology chronology47 = interval43.getChronology();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((long) (byte) 0, (long) (short) 100, chronology47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology47);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = localTime37.isAfter((org.joda.time.ReadablePartial) localDateTime49);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 58182312 + "'", int4 == 58182312);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(chronology47);
    }

    @Test
    public void test13973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13973");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("990");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test13974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13974");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalTime localTime14 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = property11.getLocalTime();
        org.joda.time.LocalTime localTime17 = property11.addCopy(672);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test13975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13975");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        boolean boolean4 = interval2.isAfter((long) 10);
        org.joda.time.Duration duration5 = interval2.toDuration();
        org.joda.time.MutableInterval mutableInterval6 = interval2.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property9 = dateTime8.era();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime15 = dateTime10.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        int int20 = dateTime17.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = dateTime17.toDateTime(dateTimeZone21);
        int int23 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean28 = interval26.isAfter((long) 10);
        org.joda.time.Duration duration29 = interval26.toDuration();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        boolean boolean34 = interval32.isAfter((long) 10);
        org.joda.time.Duration duration35 = interval32.toDuration();
        org.joda.time.Duration duration37 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration35, (int) '4');
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration29);
        mutableInterval7.setDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutableInterval mutableInterval40 = mutableInterval7.copy();
        org.joda.time.MutableInterval mutableInterval41 = mutableInterval7.copy();
        boolean boolean42 = interval2.isAfter((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Chronology chronology43 = interval2.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(mutableInterval6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 969 + "'", int20 == 969);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(mutableInterval40);
        org.junit.Assert.assertNotNull(mutableInterval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test13976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13976");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.LocalTime localTime5 = localTime0.minusSeconds((int) (short) 100);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime6, (org.joda.time.ReadablePartial) localTime7, periodType8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime13 = interval12.getEnd();
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = dateTime13.toLocalTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime24 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration22, 0);
        org.joda.time.DateTime dateTime25 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType28 = periodType26.getFieldType((int) (byte) 0);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime7, periodType26);
        org.joda.time.Chronology chronology30 = localTime7.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.months();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.hourOfHalfday();
        long long36 = chronology30.add((long) 536, 1L, 75241893);
        org.joda.time.DateTimeField dateTimeField37 = chronology30.hourOfHalfday();
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 75242429L + "'", long36 == 75242429L);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test13977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13977");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period7 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime11);
        int int13 = dateTime10.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = dateTime10.toDateTime(dateTimeZone14);
        int int16 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = interval19.isAfter((long) 10);
        org.joda.time.Duration duration22 = interval19.toDuration();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isAfter((long) 10);
        org.joda.time.Duration duration28 = interval25.toDuration();
        org.joda.time.Duration duration30 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) '4');
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration22);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Days days33 = duration22.toStandardDays();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration22, readableInstant34);
        long long36 = duration22.getMillis();
        long long37 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration22);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 969 + "'", int13 == 969);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test13978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13978");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(4);
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test13979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13979");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(35L, chronology9);
        org.joda.time.LocalTime localTime12 = localTime10.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        org.joda.time.LocalTime localTime16 = localTime10.withFieldAdded(durationFieldType14, (-1));
        org.joda.time.LocalTime localTime18 = localTime16.plusHours(53633080);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        org.joda.time.LocalTime localTime21 = property19.addNoWrapToCopy(14);
        org.joda.time.LocalTime localTime23 = property19.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime24 = property19.withMaximumValue();
        org.joda.time.LocalTime localTime25 = property19.roundFloorCopy();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime30 = interval29.getEnd();
        org.joda.time.DateTime.Property property31 = dateTime30.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        long long35 = dateTimeZone32.adjustOffset(378691200010L, false);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((java.lang.Object) dateTime30, dateTimeZone32);
        long long40 = dateTimeZone32.convertLocalToUTC(35L, false, 1L);
        java.lang.String str42 = dateTimeZone32.getName((long) 12);
        int int44 = dateTimeZone32.getStandardOffset(100001L);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 29, dateTimeZone32);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTime dateTime48 = localTime25.toDateTimeToday(dateTimeZone32);
        java.lang.String str49 = dateTimeZone32.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter5.withZone(dateTimeZone32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter50.withPivotYear((java.lang.Integer) 899);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 378691200010L + "'", long35 == 378691200010L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 34L + "'", long40 == 34L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.001" + "'", str42, "+00:00:00.001");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.001" + "'", str49, "+00:00:00.001");
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
    }

    @Test
    public void test13980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13980");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime0, (org.joda.time.ReadablePartial) localTime1, periodType2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime10 = dateTime4.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(1970);
        org.joda.time.DateTime dateTime13 = localTime0.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.year();
        org.joda.time.DateTime dateTime15 = property14.withMinimumValue();
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.era();
        org.joda.time.DateTime dateTime18 = property17.roundCeilingCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears(6139);
        org.joda.time.DateTime dateTime22 = dateTime18.minusMillis((-718798));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test13981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13981");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = interval2.getEnd();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMonths((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(8);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        boolean boolean12 = interval10.isAfter((long) 10);
        org.joda.time.Duration duration13 = interval10.toDuration();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.Duration duration21 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '4');
        long long22 = duration21.getStandardMinutes();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime23.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime23.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime23.withWeekOfWeekyear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean32 = dateTimeZone31.isFixed();
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime(dateTimeZone31);
        org.joda.time.Interval interval34 = duration21.toIntervalFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) 22);
        org.joda.time.Days days37 = duration36.toStandardDays();
        org.joda.time.Duration duration39 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration36, 53654);
        org.joda.time.DateTime dateTime40 = dateTime5.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Chronology chronology41 = dateTime5.getChronology();
        org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getChronology(chronology41);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 969 + "'", int26 == 969);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test13982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13982");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((-61977549748226L), chronology1);
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test13983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13983");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableInstant) dateTime3);
        boolean boolean6 = interval4.isAfter((long) 10);
        org.joda.time.Duration duration7 = interval4.toDuration();
        org.joda.time.Chronology chronology8 = interval4.getChronology();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology8);
        org.joda.time.Chronology chronology10 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval) mutableInterval9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Period period16 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime17 = dateTime12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.era();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Period period24 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime25 = dateTime20.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology26 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime27 = dateTime12.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime12.withWeekOfWeekyear(11);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds(86399999);
        org.joda.time.DateTime dateTime32 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalTime.Property property33 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime35 = property33.addCopy(4460054926L);
        org.joda.time.LocalTime localTime36 = property33.getLocalTime();
        org.joda.time.LocalTime localTime37 = property33.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
    }

    @Test
    public void test13984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13984");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 2, dateTimeZone1);
        long long7 = dateTimeZone1.convertLocalToUTC((long) 10, false, (long) 1);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property10 = dateTime9.centuryOfEra();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 9L + "'", long7 == 9L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test13985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13985");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.Chronology chronology24 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.dayOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test13986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13986");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int14 = localDateTime5.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime5.plusYears(7);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(20);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMonths(53654);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.era();
        boolean boolean22 = property21.isLeap();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property21.getFieldType();
        java.lang.String str25 = dateTimeFieldType24.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "era" + "'", str25, "era");
    }

    @Test
    public void test13987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13987");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale5);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale5, locale7, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList14, filteringMode16);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray29 = new java.util.Locale[] { locale21, locale23, locale25, locale26, locale27, locale28 };
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList30, filteringMode32);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList17, filteringMode32);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        boolean boolean40 = strSet37.addAll((java.util.Collection<java.lang.String>) strSet39);
        java.util.Iterator<java.lang.String> strItor41 = strSet39.iterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.parse("minutes", strMap43);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("2022-02-21T14:53:44.007Z/2022-02-21T14:53:44.007Z");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags(languageRangeList44, (java.util.Collection<java.lang.String>) strSet47);
        boolean boolean49 = strSet39.removeAll((java.util.Collection<java.lang.String>) strSet47);
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet47, filteringMode50);
        boolean boolean52 = strSet47.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode16.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode50.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test13988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13988");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusSeconds(292278993);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusYears(45);
        int int29 = localDateTime24.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
    }

    @Test
    public void test13989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13989");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(35L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime localTime8 = localTime2.withFieldAdded(durationFieldType6, (-1));
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(53633080);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalTime localTime14 = property11.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = property11.getLocalTime();
        org.joda.time.LocalTime localTime17 = property11.addCopy(14);
        org.joda.time.LocalTime localTime18 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime20 = property11.addWrapFieldToCopy(30);
        int int21 = property11.getLeapAmount();
        org.joda.time.LocalTime localTime22 = property11.withMinimumValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test13990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13990");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(10L, chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = dateTime3.plusWeeks(4);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Calendar calendar9 = dateTime7.toCalendar(locale8);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis(22);
        org.joda.time.Period period13 = new org.joda.time.Period((long) '#');
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = period13.toDurationFrom(readableInstant14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime17);
        boolean boolean20 = interval18.isAfter((long) 10);
        org.joda.time.Duration duration21 = interval18.toDuration();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.isAfter((long) 10);
        org.joda.time.Duration duration27 = interval24.toDuration();
        org.joda.time.Duration duration29 = duration21.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '4');
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime31);
        int int33 = dateTime30.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime30.toDateTime(dateTimeZone34);
        int int36 = dateTime35.getCenturyOfEra();
        org.joda.time.Interval interval37 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        int int38 = duration15.compareTo((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime39 = dateTime11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(58L, chronology40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period42 = new org.joda.time.Period((java.lang.Object) chronology40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 969 + "'", int33 == 969);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20 + "'", int36 == 20);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test13991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13991");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = property14.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = property14.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMonths(8454);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test13992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13992");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(51120000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = localTime1.withMillisOfSecond(21388);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21388 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test13993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13993");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(35L);
        long long2 = instant1.getMillis();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime3, (org.joda.time.ReadablePartial) localTime4, periodType5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) (byte) 100);
        org.joda.time.LocalTime localTime13 = dateTime10.toLocalTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime15);
        boolean boolean18 = interval16.isAfter((long) 10);
        org.joda.time.Duration duration19 = interval16.toDuration();
        org.joda.time.DateTime dateTime21 = dateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration19, 0);
        org.joda.time.DateTime dateTime22 = localTime4.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusSeconds((int) (short) -1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime33 = dateTime28.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Chronology chronology34 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1), chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.weekyear();
        org.joda.time.DateTime dateTime37 = dateTime24.toDateTime(chronology34);
        org.joda.time.Chronology chronology38 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) instant1, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone39 = chronology38.getZone();
        org.joda.time.Period period41 = new org.joda.time.Period((long) '#');
        int int43 = period41.getValue(0);
        org.joda.time.PeriodType periodType44 = period41.getPeriodType();
        int[] intArray46 = chronology38.get((org.joda.time.ReadablePeriod) period41, 86400000L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35L + "'", long2 == 35L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 1, 0, 0, 0, 0]");
    }

    @Test
    public void test13994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13994");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.era();
        org.joda.time.DurationField durationField2 = property1.getLeapDurationField();
        int int3 = property1.getMaximumValueOverall();
        int int4 = property1.getMinimumValueOverall();
        org.joda.time.DateTime dateTime5 = property1.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withField(dateTimeFieldType12, 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        int int20 = localDateTime11.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean22 = dateTimeZone21.isFixed();
        org.joda.time.DateTime dateTime23 = localDateTime11.toDateTime(dateTimeZone21);
        long long25 = dateTimeZone21.convertUTCToLocal((long) 893);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime5.toMutableDateTime(dateTimeZone21);
        boolean boolean28 = dateTime5.isAfter((long) 5);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval31.isAfter((long) 10);
        org.joda.time.Duration duration34 = interval31.toDuration();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean39 = interval37.isAfter((long) 10);
        org.joda.time.Duration duration40 = interval37.toDuration();
        org.joda.time.Duration duration42 = duration34.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) '4');
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateTime44);
        int int46 = dateTime43.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime43.toDateTime(dateTimeZone47);
        int int49 = dateTime48.getCenturyOfEra();
        org.joda.time.Interval interval50 = duration40.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = dateTime48.minusWeeks(6139);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime52.toMutableDateTimeISO();
        org.joda.time.Chronology chronology54 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime56);
        boolean boolean59 = interval57.isAfter((long) 10);
        org.joda.time.Duration duration60 = interval57.toDuration();
        org.joda.time.Chronology chronology61 = interval57.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.monthOfYear();
        org.joda.time.DateTime dateTime63 = dateTime52.withChronology(chronology61);
        org.joda.time.DateMidnight dateMidnight64 = dateTime63.toDateMidnight();
        org.joda.time.DateTime.Property property65 = dateTime63.dayOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNull(durationField2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 894L + "'", long25 == 894L);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 969 + "'", int46 == 969);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test13995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13995");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder8 = builder4.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(10L, chronology10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusWeeks(4);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = dateTime15.toCalendar(locale16);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder4.setTimeZone(timeZone18);
        timeZone18.setRawOffset((int) '4');
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder26 = builder22.setTimeOfDay(1, (int) (short) 1, 53623795);
        java.util.Calendar.Builder builder30 = builder26.setDate((int) (byte) 10, 20, (int) '#');
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(10L, chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        int int35 = dateTime33.get(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime33.plusWeeks(4);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Calendar calendar39 = dateTime37.toCalendar(locale38);
        java.util.TimeZone timeZone40 = calendar39.getTimeZone();
        java.util.Calendar.Builder builder41 = builder26.setTimeZone(timeZone40);
        timeZone40.setRawOffset((int) '4');
        boolean boolean44 = timeZone18.hasSameRules(timeZone40);
        int int45 = timeZone18.getRawOffset();
        java.util.TimeZone.setDefault(timeZone18);
        boolean boolean47 = timeZone18.observesDaylightTime();
        int int48 = timeZone18.getRawOffset();
        boolean boolean49 = timeZone18.useDaylightTime();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=2419200010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.001,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=29,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=11,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test13996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13996");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.Period period4 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime5 = dateTime0.plus((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Period period12 = new org.joda.time.Period((long) '#');
        org.joda.time.DateTime dateTime13 = dateTime8.plus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = dateTime0.toDateTime(chronology14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime16, (org.joda.time.ReadablePartial) localTime17, periodType18);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfSecond(4);
        int[] intArray23 = chronology14.get((org.joda.time.ReadablePartial) localTime17, (long) 0);
        org.joda.time.DateTimeField dateTimeField24 = chronology14.weekyearOfCentury();
        long long26 = dateTimeField24.roundFloor(100L);
        java.lang.String str28 = dateTimeField24.getAsShortText((long) (byte) 100);
        long long31 = dateTimeField24.add((long) (short) 1, (long) 53623795);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(35L, chronology33);
        int int35 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.LocalTime localTime37 = localTime34.withHourOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.monthOfYear();
        long long41 = dateTimeField39.roundFloor((-1296387152L));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "70" + "'", str28, "70");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1692203524934400001L + "'", long31 == 1692203524934400001L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-2678400000L) + "'", long41 == (-2678400000L));
    }

    @Test
    public void test13997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13997");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime4);
        boolean boolean7 = interval5.isAfter((long) 10);
        org.joda.time.Duration duration8 = interval5.toDuration();
        org.joda.time.Chronology chronology9 = interval5.getChronology();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval((long) 1, (long) (byte) 1, chronology9);
        org.joda.time.Period period12 = org.joda.time.Period.seconds(99);
        long long15 = chronology9.add((org.joda.time.ReadablePeriod) period12, (long) 53657, 0);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 1, chronology9);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.era();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 53657L + "'", long15 == 53657L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test13998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13998");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Interval interval2 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime0, (org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime6 = dateTime0.withDate(6, (int) (short) 1, 4);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(1970);
        org.joda.time.DateTime.Property property9 = dateTime6.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property9.setCopy(62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test13999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test13999");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(14, 5, 12, 14, 12);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withField(dateTimeFieldType6, 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime5.withTime(20, (int) (byte) 0, (int) (byte) 1, 893);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths(5);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfYear();
        org.joda.time.Duration duration19 = org.joda.time.Duration.millis((long) (short) -1);
        long long20 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        long long21 = org.joda.time.DateTimeUtils.getDurationMillis((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.toDuration();
        long long23 = duration22.getMillis();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.withDayOfYear((int) 'x');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(10L, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withField(dateTimeFieldType30, 893);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.withYearOfCentury(2);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(10L, chronology38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.weekyear();
        int int41 = dateTime39.get(dateTimeFieldType40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean43 = dateTime39.isSupported(dateTimeFieldType42);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType42.getDurationType();
        java.lang.String str45 = durationFieldType44.getName();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime26.withFieldAdded(durationFieldType44, 11);
        org.joda.time.LocalDateTime.Property property48 = localDateTime26.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime49 = property48.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "minutes" + "'", str45, "minutes");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test14000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest27.test14000");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(53878);
        int int2 = period1.getYears();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }
}

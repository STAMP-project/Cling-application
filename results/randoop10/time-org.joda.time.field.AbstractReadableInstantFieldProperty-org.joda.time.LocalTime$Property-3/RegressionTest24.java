import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest24 {

    public static boolean debug = false;

    @Test
    public void test12001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12001");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setVariant("53275870");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.setLanguageTag("06:10:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 06:10:00.000 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test12002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12002");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.getLocalTime();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime48.plusWeeks(0);
        int int53 = dateTime52.getYearOfEra();
        org.joda.time.DateTime.Property property54 = dateTime52.year();
        int int55 = dateTime52.getYearOfCentury();
        int int56 = property42.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalTime localTime57 = property42.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField58 = property42.getField();
        org.joda.time.DurationField durationField59 = dateTimeField58.getRangeDurationField();
        int int61 = durationField59.getValue(0L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test12003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12003");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        int int21 = dateTime19.getMonthOfYear();
        int int22 = dateTime19.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int28 = dateTimeZone26.getOffset((long) (byte) 1);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone26, (long) 3);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = localTime14.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime.Property property33 = dateTime32.weekOfWeekyear();
        org.joda.time.DateTime dateTime35 = property33.addWrapFieldToCopy(17);
        int int36 = dateTime35.getHourOfDay();
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfMonth();
        org.joda.time.Chronology chronology49 = chronology45.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.year();
        long long52 = dateTimeField50.roundHalfFloor(9L);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.Chronology chronology59 = localTime56.getChronology();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) (byte) 1, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.Chronology chronology69 = localTime66.getChronology();
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) (byte) 1, chronology69);
        boolean boolean71 = dateTimeFieldType62.isSupported(chronology69);
        org.joda.time.DateTimeField dateTimeField72 = chronology69.centuryOfEra();
        org.joda.time.LocalTime localTime73 = org.joda.time.LocalTime.now(chronology69);
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime(chronology69);
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.now(chronology69);
        java.util.Locale locale76 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str77 = locale76.getVariant();
        java.lang.String str78 = dateTimeField61.getAsShortText((org.joda.time.ReadablePartial) localTime75, locale76);
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime((long) 1);
        int[] intArray82 = localTime81.getValues();
        int[] intArray84 = dateTimeField50.addWrapField((org.joda.time.ReadablePartial) localTime75, (int) (byte) 0, intArray82, (int) (byte) -1);
        int int85 = localTime75.getMillisOfSecond();
        int int86 = localTime75.getMillisOfSecond();
        long long88 = chronology38.set((org.joda.time.ReadablePartial) localTime75, 1645454948057L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2" + "'", str78, "2");
        org.junit.Assert.assertNotNull(intArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 0, 0, 11]");
        org.junit.Assert.assertNotNull(intArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[-1, 0, 0, 11]");
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 796 + "'", int85 == 796);
// flaky:         org.junit.Assert.assertTrue("'" + int86 + "' != '" + 796 + "'", int86 == 796);
// flaky:         org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1645455413786L + "'", long88 == 1645455413786L);
    }

    @Test
    public void test12004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12004");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.Instant instant17 = dateTime4.toInstant();
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        boolean boolean19 = instant17.isEqualNow();
        org.joda.time.Chronology chronology20 = instant17.getChronology();
        org.joda.time.DateTime dateTime21 = instant17.toDateTime();
        org.joda.time.DateTime dateTime22 = instant17.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime23 = instant17.toMutableDateTime();
        org.joda.time.Instant instant25 = instant17.minus(5923639711429139990L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant25);
    }

    @Test
    public void test12005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12005");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        long long11 = dateTimeField8.add((long) 'u', 7);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfMonth();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.LocalTime localTime24 = localTime22.plusHours((int) 'u');
        int int25 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = localTime37.getChronology();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (byte) 1, chronology40);
        int[] intArray43 = chronology32.get((org.joda.time.ReadablePartial) localTime41, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField44 = chronology32.dayOfYear();
        org.joda.time.DurationField durationField45 = durationFieldType26.getField(chronology32);
        org.joda.time.DurationFieldType durationFieldType46 = durationField45.getType();
        org.joda.time.LocalTime localTime48 = localTime22.withFieldAdded(durationFieldType46, 4);
        org.joda.time.LocalTime.Property property49 = localTime22.minuteOfHour();
        org.joda.time.LocalTime localTime50 = property49.roundCeilingCopy();
        org.joda.time.LocalTime localTime52 = property49.setCopy(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property49.getFieldType();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 25200117L + "'", long11 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
    }

    @Test
    public void test12006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12006");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = dateTimeField8.getType();
        long long12 = dateTimeField8.getDifferenceAsLong((long) 15, (long) 11);
        boolean boolean14 = dateTimeField8.isLeap(2863424L);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField8.getType();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
    }

    @Test
    public void test12007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12007");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTime dateTime21 = interval9.getEnd();
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int33 = dateTimeZone31.getOffset((long) (byte) 1);
        long long35 = dateTimeZone29.getMillisKeepLocal(dateTimeZone31, (long) 3);
        boolean boolean37 = dateTimeZone31.equals((java.lang.Object) 1);
        int int39 = dateTimeZone31.getOffset((long) 3);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (-1), dateTimeZone31);
        org.joda.time.DateTime dateTime41 = dateTime25.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime43 = dateTime25.minusSeconds((-1645455016));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3L + "'", long35 == 3L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test12008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12008");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        long long17 = dateTimeZone9.previousTransition(0L);
        java.lang.String str19 = dateTimeZone9.getNameKey(720100L);
        org.joda.time.DateTime dateTime20 = dateTime4.withZoneRetainFields(dateTimeZone9);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        int int29 = localTime23.compareTo((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.LocalTime.Property property30 = localTime23.hourOfDay();
        org.joda.time.DateTime dateTime31 = dateTime20.withFields((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.yearOfEra();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.dayOfMonth();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.LocalTime localTime52 = localTime50.plusHours((int) 'u');
        long long54 = chronology37.set((org.joda.time.ReadablePartial) localTime50, 0L);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((java.lang.Object) localTime23, chronology37);
        org.joda.time.Chronology chronology56 = localTime23.getChronology();
        org.joda.time.LocalTime.Property property57 = localTime23.hourOfDay();
        org.joda.time.LocalTime localTime58 = property57.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((java.lang.Object) property57, dateTimeZone59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 53813916L + "'", long54 == 53813916L);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localTime58);
    }

    @Test
    public void test12009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12009");
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.LocalTime localTime11 = dateTime10.toLocalTime();
        org.joda.time.DateTime.Property property12 = dateTime10.minuteOfHour();
        int int13 = property12.get();
        org.joda.time.Interval interval14 = property12.toInterval();
        org.joda.time.Interval interval15 = interval14.toInterval();
        long long16 = interval14.toDurationMillis();
        org.joda.time.Interval interval18 = interval14.withStartMillis(10L);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology25);
        org.joda.time.Interval interval28 = interval14.withChronology(chronology25);
        org.joda.time.DateTimeZone dateTimeZone29 = chronology25.getZone();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone29);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(3179999, 16, 53401, 1020, 53613221, 35, dateTimeZone29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1020 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 60000L + "'", long16 == 60000L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test12010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12010");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime4.plusMinutes(5);
        org.joda.time.DateTime dateTime13 = dateTime4.minusMillis(419);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime4.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar14.clear(53790);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53790");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
    }

    @Test
    public void test12011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12011");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.getLocalTime();
        java.lang.String str44 = localTime43.toString();
        int[] intArray45 = localTime43.getValues();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = dateTimeZone46.getShortName((long) 2922789, locale48);
        org.joda.time.DateTime dateTime50 = localTime43.toDateTimeToday(dateTimeZone46);
        org.joda.time.LocalTime.Property property51 = localTime43.hourOfDay();
        org.joda.time.LocalTime localTime53 = property51.addCopy(1970);
        boolean boolean54 = property51.isLeap();
        org.joda.time.LocalTime localTime55 = property51.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "00:00:00.001" + "'", str44, "00:00:00.001");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localTime55);
    }

    @Test
    public void test12012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12012");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(5, 0, 7, 27424248);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27424248 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12013");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTime dateTime21 = interval9.getEnd();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test12014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12014");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = null; // flaky: interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = null; // flaky: interval26.toPeriod();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Period period38 = interval36.toPeriod();
        org.joda.time.Interval interval39 = interval36.toInterval();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.LocalTime localTime45 = dateTime44.toLocalTime();
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfHour();
        int int47 = property46.get();
        org.joda.time.Interval interval48 = property46.toInterval();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.LocalTime localTime60 = localTime56.plus(readablePeriod59);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean62 = localTime60.isSupported(dateTimeFieldType61);
        org.joda.time.DateTime dateTime63 = dateTime53.withFields((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int69 = dateTimeZone67.getOffset((long) (byte) 1);
        long long71 = dateTimeZone65.getMillisKeepLocal(dateTimeZone67, (long) 3);
        long long74 = dateTimeZone65.convertLocalToUTC((long) 9, false);
        java.lang.String str75 = dateTimeZone65.toString();
        org.joda.time.DateTime dateTime76 = localTime60.toDateTimeToday(dateTimeZone65);
        long long77 = dateTime76.getMillis();
        boolean boolean78 = interval48.equals((java.lang.Object) long77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.DateTime dateTime85 = localTime83.toDateTime(readableInstant84);
        org.joda.time.Chronology chronology86 = localTime83.getChronology();
        org.joda.time.LocalTime localTime87 = new org.joda.time.LocalTime((long) (byte) 1, chronology86);
        boolean boolean88 = dateTimeFieldType79.isSupported(chronology86);
        org.joda.time.DateTimeField dateTimeField89 = chronology86.centuryOfEra();
        org.joda.time.LocalTime localTime90 = org.joda.time.LocalTime.now(chronology86);
        org.joda.time.LocalTime localTime91 = new org.joda.time.LocalTime(chronology86);
        org.joda.time.LocalTime localTime92 = org.joda.time.LocalTime.now(chronology86);
        org.joda.time.Interval interval93 = interval48.withChronology(chronology86);
        boolean boolean94 = interval36.isAfter((org.joda.time.ReadableInterval) interval93);
        boolean boolean95 = false; // flaky: interval26.contains((org.joda.time.ReadableInterval) interval93);
        org.joda.time.Interval interval96 = null; // flaky: interval26.toInterval();
        org.joda.time.DateTime dateTime97 = null; // flaky: interval26.getEnd();
        org.joda.time.TimeOfDay timeOfDay98 = null; // flaky: dateTime97.toTimeOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3L + "'", long71 == 3L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-1L) + "'", long74 == (-1L));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645402199990L + "'", long77 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
// flaky:         org.junit.Assert.assertNotNull(interval96);
// flaky:         org.junit.Assert.assertNotNull(dateTime97);
// flaky:         org.junit.Assert.assertNotNull(timeOfDay98);
    }

    @Test
    public void test12015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12015");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime5.withPeriodAdded(readablePeriod6, 17);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime28 = dateTime13.withFieldAdded(durationFieldType26, 2022);
        org.joda.time.LocalTime localTime30 = localTime8.withFieldAdded(durationFieldType26, 122);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) 1);
        int[] intArray33 = localTime32.getValues();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        int int41 = property40.getMinimumValue();
        org.joda.time.DateTime dateTime42 = property40.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = dateTimeZone44.isLocalDateTimeGap(localDateTime45);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = dateTime42.withZoneRetainFields(dateTimeZone44);
        int int49 = dateTime48.getDayOfWeek();
        org.joda.time.DateTime dateTime50 = localTime32.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalTime localTime52 = localTime32.withMillisOfDay(59);
        org.joda.time.LocalTime localTime53 = localTime30.withFields((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = localTime57.getChronology();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) (byte) 1, chronology60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.monthOfYear();
        org.joda.time.DurationField durationField64 = chronology60.months();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.weekyear();
        org.joda.time.DateTimeField dateTimeField66 = chronology60.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime70 = null;
        boolean boolean71 = dateTimeZone69.isLocalDateTimeGap(localDateTime70);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone69);
        org.joda.time.LocalTime localTime74 = localTime72.minusMinutes(3);
        int int75 = localTime74.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime79 = null;
        boolean boolean80 = dateTimeZone78.isLocalDateTimeGap(localDateTime79);
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone78);
        org.joda.time.LocalTime localTime82 = localTime74.withFields((org.joda.time.ReadablePartial) localTime81);
        java.util.Locale locale85 = new java.util.Locale("Property[minuteOfHour]", "Thu Jan 01 00:00:00 UTC 1970");
        java.lang.String str86 = locale85.getCountry();
        java.lang.String str87 = dateTimeField66.getAsText((org.joda.time.ReadablePartial) localTime82, locale85);
        long long89 = dateTimeField66.roundHalfEven(5471113658425200000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = dateTimeField66.getType();
        org.joda.time.LocalTime.Property property91 = localTime32.property(dateTimeFieldType90);
        org.joda.time.DateTimeField dateTimeField92 = property91.getField();
        long long95 = dateTimeField92.add(1645455331580L, 50400000);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 23 + "'", int75 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertEquals(locale85.toString(), "property[minuteofhour]_THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "THU JAN 01 00:00:00 UTC 1970" + "'", str86, "THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "10" + "'", str87, "10");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 5471113658425200000L + "'", long89 == 5471113658425200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 1645505731580L + "'", long95 == 1645505731580L);
    }

    @Test
    public void test12016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12016");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        long long10 = interval8.toDurationMillis();
        boolean boolean11 = interval8.isBeforeNow();
        org.joda.time.Interval interval12 = interval8.toInterval();
        long long13 = interval8.getStartMillis();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfHour();
        int int21 = property20.get();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        int int31 = property30.get();
        org.joda.time.Interval interval32 = property30.toInterval();
        org.joda.time.Interval interval33 = interval32.toInterval();
        boolean boolean34 = interval23.isBefore((org.joda.time.ReadableInterval) interval32);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.get();
        org.joda.time.Interval interval43 = property41.toInterval();
        org.joda.time.Interval interval44 = interval43.toInterval();
        boolean boolean45 = interval23.abuts((org.joda.time.ReadableInterval) interval43);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.get();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.minuteOfHour();
        int int63 = property62.getMinimumValue();
        org.joda.time.DateTime dateTime64 = property62.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone66.isLocalDateTimeGap(localDateTime67);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = dateTime64.withZoneRetainFields(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((java.lang.Object) dateTime70);
        org.joda.time.Interval interval72 = null; // flaky: interval55.withEnd((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Interval interval73 = interval23.withStart((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period74 = interval23.toPeriod();
        boolean boolean75 = interval8.isBefore((org.joda.time.ReadableInterval) interval23);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localTime78.toDateTime(readableInstant79);
        org.joda.time.LocalTime localTime81 = dateTime80.toLocalTime();
        org.joda.time.DateTime.Property property82 = dateTime80.minuteOfHour();
        int int83 = property82.get();
        org.joda.time.Interval interval84 = property82.toInterval();
        org.joda.time.DateTime dateTime85 = interval84.getEnd();
        org.joda.time.Period period86 = interval84.toPeriod();
        boolean boolean88 = interval84.isAfter(0L);
        boolean boolean90 = interval84.isBefore((-98727291751800000L));
        boolean boolean91 = interval23.contains((org.joda.time.ReadableInterval) interval84);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645402199990L + "'", long13 == 1645402199990L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test12017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12017");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        int int17 = dateTime15.getEra();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int28 = dateTimeZone26.getOffset((long) (byte) 1);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone26, (long) 3);
        org.joda.time.DateTime dateTime31 = dateTime22.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime33 = dateTime22.minus((long) '#');
        org.joda.time.DateTime.Property property34 = dateTime22.weekyear();
        org.joda.time.DateTime dateTime36 = dateTime22.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime22.toDateTime();
        org.joda.time.DateTime dateTime39 = dateTime22.withWeekyear(15);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 10);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(dateTimeZone46);
        int int49 = dateTimeField43.getMaximumValue((org.joda.time.ReadablePartial) localTime48);
        int int50 = localTime48.getSecondOfMinute();
        org.joda.time.LocalTime localTime52 = localTime48.minusMinutes(53358486);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = localTime57.getChronology();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) (byte) 1, chronology60);
        boolean boolean62 = dateTimeFieldType53.isSupported(chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone66.isLocalDateTimeGap(localDateTime67);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone66);
        org.joda.time.LocalTime localTime71 = localTime69.minusMinutes(3);
        java.util.Locale locale75 = new java.util.Locale("Property[minuteOfHour]", "Thu Jan 01 00:00:00 UTC 1970");
        java.lang.String str76 = dateTimeField63.getAsShortText((org.joda.time.ReadablePartial) localTime69, (int) (byte) 100, locale75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = dateTimeField63.getType();
        boolean boolean78 = localTime48.isSupported(dateTimeFieldType77);
        int int79 = dateTime15.get(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 999 + "'", int49 == 999);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 54 + "'", int50 == 54);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertEquals(locale75.toString(), "property[minuteofhour]_THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "100" + "'", str76, "100");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 20 + "'", int79 == 20);
    }

    @Test
    public void test12018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12018");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        long long10 = interval8.toDurationMillis();
        java.lang.Object obj11 = null;
        boolean boolean12 = interval8.equals(obj11);
        org.joda.time.Interval interval13 = interval8.toInterval();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        int int20 = dateTime18.getMonthOfYear();
        int int21 = dateTime18.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int27 = dateTimeZone25.getOffset((long) (byte) 1);
        long long29 = dateTimeZone23.getMillisKeepLocal(dateTimeZone25, (long) 3);
        org.joda.time.DateTime dateTime30 = dateTime18.toDateTime(dateTimeZone25);
        org.joda.time.DateTime.Property property31 = dateTime18.dayOfYear();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 1, chronology38);
        org.joda.time.DateTime dateTime40 = localTime39.toDateTimeToday();
        org.joda.time.DateTime dateTime42 = dateTime40.minus(0L);
        int int43 = dateTime18.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime45 = dateTime42.minusMinutes((int) ' ');
        org.joda.time.DateTime.Property property46 = dateTime42.dayOfMonth();
        org.joda.time.DateTime dateTime47 = property46.withMaximumValue();
        org.joda.time.DateTime.Property property48 = dateTime47.era();
        org.joda.time.Interval interval49 = interval13.withEnd((org.joda.time.ReadableInstant) dateTime47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = dateTime47.withDayOfWeek((-27423369));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27423369 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(interval49);
    }

    @Test
    public void test12019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12019");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(892, 89268449);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 892 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12020");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime2 = null;
        boolean boolean3 = dateTimeZone1.isLocalDateTimeGap(localDateTime2);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.Chronology chronology11 = localTime8.getChronology();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (byte) 1, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology11);
        org.joda.time.LocalTime localTime17 = localTime15.plusHours((int) 'u');
        org.joda.time.LocalTime localTime19 = localTime15.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int25 = dateTimeZone23.getOffset((long) (byte) 1);
        long long27 = dateTimeZone21.getMillisKeepLocal(dateTimeZone23, (long) 3);
        long long30 = dateTimeZone21.convertLocalToUTC((long) 9, false);
        java.lang.String str31 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime32 = localTime19.toDateTimeToday(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readableDuration33);
        org.joda.time.DateTime dateTime36 = dateTime32.minusHours((int) 'a');
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        org.joda.time.DateTime.Property property43 = dateTime41.minuteOfHour();
        java.util.Locale locale44 = java.util.Locale.US;
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale44.getDisplayName(locale46);
        java.lang.String str48 = property43.getAsText(locale44);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property43.getFieldType();
        int int50 = dateTime36.get(dateTimeFieldType49);
        boolean boolean51 = localTime4.isSupported(dateTimeFieldType49);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType49.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3L + "'", long27 == 3L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1L) + "'", long30 == (-1L));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "English (United States)" + "'", str45, "English (United States)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str47, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "10" + "'", str48, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 56 + "'", int50 == 56);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(durationFieldType52);
    }

    @Test
    public void test12021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12021");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1, chronology16);
        boolean boolean18 = dateTimeFieldType9.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.centuryOfEra();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(chronology16);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology16);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology16);
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str24 = locale23.getVariant();
        java.lang.String str25 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localTime22, locale23);
        int int28 = dateTimeField8.getDifference(53332080L, 990L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 14 + "'", int28 == 14);
    }

    @Test
    public void test12022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12022");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter5.getParser();
        org.joda.time.Chronology chronology9 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withDefaultYear((int) (short) 0);
        java.io.Writer writer12 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(writer12, 34999200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test12023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12023");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeField dateTimeField20 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.era();
        org.joda.time.DurationField durationField22 = chronology6.minutes();
        java.lang.String str23 = chronology6.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
    }

    @Test
    public void test12024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12024");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((java.lang.Object) 1645455382475L);
    }

    @Test
    public void test12025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12025");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.yearOfEra();
        long long10 = dateTimeField7.set(3003279000000L, 100);
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.lang.String str17 = locale12.getDisplayCountry(locale16);
        java.lang.String str18 = locale12.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("hours");
        java.lang.String str22 = locale20.getExtension('u');
        java.lang.String str23 = locale12.getDisplayVariant(locale20);
        java.lang.String str24 = dateTimeField7.getAsShortText(2022, locale20);
        int int26 = dateTimeField7.getLeapAmount((long) 86399);
        java.lang.String str28 = dateTimeField7.getAsShortText((long) 840000);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59006173800000L) + "'", long10 == (-59006173800000L));
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals(locale16.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "United States" + "'", str17, "United States");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "eng" + "'", str18, "eng");
        org.junit.Assert.assertEquals(locale20.toString(), "hours");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022" + "'", str24, "2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970" + "'", str28, "1970");
    }

    @Test
    public void test12026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12026");
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int17 = dateTimeZone15.getOffset((long) (byte) 1);
        long long19 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, (long) 3);
        org.joda.time.DateTime dateTime20 = dateTime11.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, readableDuration23);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 1, chronology38);
        int[] intArray41 = chronology30.get((org.joda.time.ReadablePartial) localTime39, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField42 = chronology30.dayOfYear();
        org.joda.time.Interval interval43 = interval24.withChronology(chronology30);
        org.joda.time.Chronology chronology44 = interval24.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(72, 86399999, 86399905, (-600051), (int) 'x', 990, 53464, chronology44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -600051 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test12027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12027");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Calendar calendar6 = builder0.build();
        calendar6.clear();
        java.time.Instant instant8 = calendar6.toInstant();
        calendar6.setTimeInMillis(1645455003838L);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        int int19 = dateTime17.getMonthOfYear();
        int int20 = dateTime17.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        long long28 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, (long) 3);
        org.joda.time.DateTime dateTime29 = dateTime17.toDateTime(dateTimeZone22);
        org.joda.time.DateTime.Property property30 = dateTime29.millisOfDay();
        java.lang.String str31 = property30.getAsText();
        org.joda.time.DateTime dateTime32 = property30.roundHalfEvenCopy();
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder33.clearExtensions();
        java.util.Locale.Builder builder35 = builder33.clear();
        java.util.Locale.Builder builder37 = builder33.setVariant("53275870");
        java.util.Locale.Builder builder38 = builder33.clearExtensions();
        java.util.Locale.Builder builder39 = builder33.clearExtensions();
        java.util.Locale.Builder builder40 = builder33.clear();
        java.util.Locale locale41 = builder33.build();
        java.util.Calendar calendar42 = dateTime32.toCalendar(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = calendar6.getDisplayName(1970, 600, locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455003838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=50,SECOND=3,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "600000" + "'", str31, "600000");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645402199990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test12028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12028");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime4.withWeekyear(15);
        org.joda.time.DateTime dateTime23 = dateTime4.plusWeeks(600);
        int int24 = dateTime4.getSecondOfMinute();
        org.joda.time.DateTime dateTime26 = dateTime4.minusHours(53283606);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        int int33 = dateTime31.getMonthOfYear();
        int int34 = dateTime31.getHourOfDay();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int45 = dateTimeZone43.getOffset((long) (byte) 1);
        long long47 = dateTimeZone41.getMillisKeepLocal(dateTimeZone43, (long) 3);
        org.joda.time.DateTime dateTime48 = dateTime39.withZone(dateTimeZone41);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime48);
        boolean boolean51 = interval49.isBefore((long) 21);
        org.joda.time.Interval interval52 = interval49.toInterval();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.LocalTime localTime58 = dateTime57.toLocalTime();
        int int59 = dateTime57.getMonthOfYear();
        int int60 = dateTime57.getHourOfDay();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int71 = dateTimeZone69.getOffset((long) (byte) 1);
        long long73 = dateTimeZone67.getMillisKeepLocal(dateTimeZone69, (long) 3);
        org.joda.time.DateTime dateTime74 = dateTime65.withZone(dateTimeZone67);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableInstant) dateTime74);
        boolean boolean77 = interval75.isBefore((long) 21);
        org.joda.time.Interval interval78 = interval75.toInterval();
        org.joda.time.Duration duration79 = interval78.toDuration();
        org.joda.time.Interval interval80 = interval49.withDurationAfterStart((org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateTime dateTime81 = dateTime26.minus((org.joda.time.ReadableDuration) duration79);
        org.joda.time.DateTime dateTime83 = dateTime26.withWeekOfWeekyear(3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3L + "'", long47 == 3L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3L + "'", long73 == 3L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test12029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12029");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField14 = property9.getField();
        java.lang.String str15 = property9.getAsText();
        org.joda.time.LocalTime localTime16 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.era();
        int int33 = localTime29.indexOf(dateTimeFieldType32);
        int int34 = dateTime22.get(dateTimeFieldType32);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        org.joda.time.DateTime dateTime43 = dateTime39.plusWeeks(0);
        org.joda.time.Chronology chronology44 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType32.getField(chronology44);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime(38089L, chronology44);
        int int47 = localTime16.compareTo((org.joda.time.ReadablePartial) localTime46);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test12030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12030");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int14 = dateTimeZone12.getOffset((long) (byte) 1);
        long long16 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, (long) 3);
        boolean boolean18 = dateTimeZone12.equals((java.lang.Object) 1);
        int int20 = dateTimeZone12.getOffset((long) 3);
        boolean boolean22 = dateTimeZone12.isStandardOffset((long) (-292275054));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3L + "'", long16 == 3L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test12031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12031");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.Interval interval25 = interval8.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval25.toPeriod(periodType26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = interval25.contains(readableInterval28);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        int int36 = dateTime34.getMonthOfYear();
        int int37 = dateTime34.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int43 = dateTimeZone41.getOffset((long) (byte) 1);
        long long45 = dateTimeZone39.getMillisKeepLocal(dateTimeZone41, (long) 3);
        org.joda.time.DateTime dateTime46 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.Interval interval47 = interval25.withEnd((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology48 = interval25.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = localTime53.getChronology();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) (byte) 1, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology56.getZone();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 'u', dateTimeZone60);
        org.joda.time.Chronology chronology62 = chronology48.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField63 = chronology62.hourOfHalfday();
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("hours");
        java.lang.String str67 = locale66.getDisplayScript();
        java.lang.String str68 = dateTimeField63.getAsText(1645455022907L, locale66);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2" + "'", str68, "2");
    }

    @Test
    public void test12032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12032");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.removeUnicodeLocaleAttribute("53545394");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test12033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12033");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(12, 2000, 0);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("China");
        java.util.Locale locale11 = builder8.build();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale11);
        java.lang.String str13 = locale11.toLanguageTag();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.US;
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.lang.String str20 = locale15.getDisplayCountry(locale19);
        java.util.Locale.setDefault(category14, locale19);
        java.util.Locale locale22 = java.util.Locale.US;
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.lang.String str27 = locale22.getDisplayCountry(locale26);
        java.lang.String str28 = locale22.getISO3Language();
        java.util.Locale locale30 = new java.util.Locale("hours");
        java.lang.String str32 = locale30.getExtension('u');
        java.lang.String str33 = locale22.getDisplayVariant(locale30);
        java.lang.String str34 = locale22.toLanguageTag();
        java.util.Locale.setDefault(category14, locale22);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (byte) 1, chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.clockhourOfHalfday();
        org.joda.time.DurationField durationField47 = dateTimeField46.getDurationField();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance();
        boolean boolean50 = calendar49.isWeekDateSupported();
        long long51 = calendar49.getTimeInMillis();
        java.util.TimeZone timeZone52 = calendar49.getTimeZone();
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("hours");
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone52, locale54);
        java.lang.String str56 = dateTimeField46.getAsText(1645454878702L, locale54);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int67 = dateTimeZone65.getOffset((long) (byte) 1);
        long long69 = dateTimeZone63.getMillisKeepLocal(dateTimeZone65, (long) 3);
        org.joda.time.DateTime dateTime70 = dateTime61.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime72 = dateTime61.minus((long) '#');
        org.joda.time.DateTime dateTime74 = dateTime61.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.DateTime dateTime76 = dateTime61.plus(readablePeriod75);
        org.joda.time.DateTime.Property property77 = dateTime61.millisOfDay();
        org.joda.time.DateTime dateTime78 = property77.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = property77.getFieldType();
        java.util.Locale locale80 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str81 = locale80.getVariant();
        java.util.Locale locale82 = java.util.Locale.US;
        java.util.Locale locale86 = new java.util.Locale("", "hi!", "");
        java.lang.String str87 = locale82.getDisplayCountry(locale86);
        java.lang.String str88 = locale82.getISO3Language();
        java.lang.String str89 = locale82.getScript();
        java.lang.String str90 = locale80.getDisplayCountry(locale82);
        java.lang.String str91 = locale80.getISO3Country();
        int int92 = property77.getMaximumTextLength(locale80);
        java.lang.String str93 = locale80.getDisplayVariant();
        int int94 = dateTimeField46.getMaximumShortTextLength(locale80);
        java.lang.String str95 = locale80.getDisplayName();
        java.lang.String str96 = locale22.getDisplayScript(locale80);
        java.lang.String str97 = locale22.getDisplayVariant();
        java.lang.String str98 = locale11.getDisplayName(locale22);
        java.util.Locale locale99 = locale22.stripExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertTrue("'" + category14 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category14.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "United States" + "'", str20, "United States");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "United States" + "'", str27, "United States");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "eng" + "'", str28, "eng");
        org.junit.Assert.assertEquals(locale30.toString(), "hours");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "en-US" + "'", str34, "en-US");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645455414565,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=54,MILLISECOND=565,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645455414565L + "'", long51 == 1645455414565L);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "hours");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645455414565,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=54,MILLISECOND=565,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2" + "'", str56, "2");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 3L + "'", long69 == 3L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_US");
        org.junit.Assert.assertEquals(locale86.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "United States" + "'", str87, "United States");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "eng" + "'", str88, "eng");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "China" + "'", str90, "China");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "CHN" + "'", str91, "CHN");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Chinese (China)" + "'", str95, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertNotNull(locale99);
        org.junit.Assert.assertEquals(locale99.toString(), "en_US");
    }

    @Test
    public void test12034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12034");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfYear();
        long long15 = dateTimeField13.roundHalfFloor((-61914758399990L));
        long long18 = dateTimeField13.set((long) 45, 43);
        long long20 = dateTimeField13.roundHalfFloor(3631573440000002070L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-61914758400000L) + "'", long15 == (-61914758400000L));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3628800045L + "'", long18 == 3628800045L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3631573440000000000L + "'", long20 == 3631573440000000000L);
    }

    @Test
    public void test12035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12035");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int18 = dateTimeZone16.getOffset((long) (byte) 1);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isBefore((long) 21);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.DateTime.Property property31 = dateTime29.minuteOfHour();
        int int32 = property31.get();
        org.joda.time.Interval interval33 = property31.toInterval();
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        org.joda.time.Period period35 = interval33.toPeriod();
        java.lang.String str36 = interval33.toString();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        org.joda.time.DateTime.Property property43 = dateTime41.minuteOfHour();
        int int44 = property43.get();
        org.joda.time.Interval interval45 = property43.toInterval();
        org.joda.time.Interval interval46 = interval45.toInterval();
        long long47 = interval45.toDurationMillis();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = interval45.toPeriod(periodType48);
        org.joda.time.Interval interval50 = interval33.overlap((org.joda.time.ReadableInterval) interval45);
        boolean boolean51 = interval22.isBefore((org.joda.time.ReadableInterval) interval33);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) (byte) 1, chronology58);
        org.joda.time.DateTime dateTime60 = localTime59.toDateTimeToday();
        org.joda.time.DateTime dateTime62 = dateTime60.minus(0L);
        boolean boolean63 = interval33.isBefore((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.LocalTime localTime69 = dateTime68.toLocalTime();
        org.joda.time.DateTime.Property property70 = dateTime68.minuteOfHour();
        int int71 = property70.get();
        org.joda.time.Interval interval72 = property70.toInterval();
        org.joda.time.Interval interval73 = interval72.toInterval();
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localTime76.toDateTime(readableInstant77);
        org.joda.time.LocalTime localTime79 = dateTime78.toLocalTime();
        org.joda.time.DateTime.Property property80 = dateTime78.minuteOfHour();
        int int81 = property80.getMinimumValue();
        org.joda.time.DateTime dateTime82 = property80.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime85 = null;
        boolean boolean86 = dateTimeZone84.isLocalDateTimeGap(localDateTime85);
        org.joda.time.LocalTime localTime87 = new org.joda.time.LocalTime(dateTimeZone84);
        org.joda.time.DateTime dateTime88 = dateTime82.withZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((java.lang.Object) dateTime88);
        org.joda.time.Interval interval90 = null; // flaky: interval73.withEnd((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.Duration duration91 = interval73.toDuration();
        org.joda.time.Interval interval92 = interval33.withDurationAfterStart((org.joda.time.ReadableDuration) duration91);
        org.joda.time.Chronology chronology93 = interval92.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str36, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 60000L + "'", long47 == 60000L);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test12036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12036");
        java.util.Locale locale3 = new java.util.Locale("\uc624\uc804 12:11:00", "00:01:00.001", "53581");
        org.junit.Assert.assertEquals(locale3.toString(), "\uc624\uc804 12:11:00_00:01:00.001_53581");
    }

    @Test
    public void test12037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12037");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList6, strMap7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList8, strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap13);
        java.util.Collection<java.lang.String> strCollection15 = null;
        java.lang.String str16 = java.util.Locale.lookupTag(languageRangeList14, strCollection15);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test12038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12038");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        boolean boolean48 = dateTimeFieldType39.isSupported(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.centuryOfEra();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(chronology46);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.Interval interval53 = interval8.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField54 = chronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = chronology46.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField55.getType();
        org.joda.time.DurationField durationField57 = dateTimeField55.getRangeDurationField();
        long long60 = durationField57.getMillis(22, 1645454963040L);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        int int69 = localTime63.compareTo((org.joda.time.ReadablePartial) localTime66);
        org.joda.time.LocalTime.Property property70 = localTime63.hourOfDay();
        org.joda.time.LocalTime localTime72 = property70.addCopy(6);
        org.joda.time.LocalTime localTime73 = property70.roundCeilingCopy();
        java.util.Locale locale75 = java.util.Locale.US;
        java.lang.String str76 = locale75.getDisplayName();
        org.joda.time.LocalTime localTime77 = property70.setCopy("0", locale75);
        org.joda.time.LocalTime localTime79 = property70.addCopy((int) (byte) 0);
        org.joda.time.DurationField durationField80 = property70.getDurationField();
        int int81 = durationField57.compareTo(durationField80);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 13305600000L + "'", long60 == 13305600000L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "English (United States)" + "'", str76, "English (United States)");
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test12039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12039");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(0);
        org.joda.time.Instant instant13 = dateTime10.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 1, chronology29);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePartial) localTime30, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField33 = chronology21.dayOfYear();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        int int41 = property40.get();
        org.joda.time.Interval interval42 = property40.toInterval();
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Period period44 = interval42.toPeriod();
        int[] intArray46 = chronology21.get((org.joda.time.ReadablePeriod) period44, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField47 = chronology21.weekOfWeekyear();
        boolean boolean48 = dateTimeFieldType14.isSupported(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTime10.withField(dateTimeFieldType14, 659990);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 659990 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[minuteOfHour]" + "'", str7, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test12040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12040");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.DateTime dateTime8 = property6.getDateTime();
        org.joda.time.DurationField durationField9 = property6.getRangeDurationField();
        int int10 = property6.getMinimumValueOverall();
        org.joda.time.DateTime dateTime11 = property6.withMaximumValue();
        org.joda.time.DurationField durationField12 = property6.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNull(durationField12);
    }

    @Test
    public void test12041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12041");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime18 = dateTime4.withMonthOfYear(3);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime21 = property19.addToCopy(0);
        org.joda.time.DateTime.Property property22 = dateTime21.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test12042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12042");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTime dateTime9 = property6.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField10 = property6.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test12043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12043");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(0, 10);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int15 = dateTimeZone13.getOffset((long) (byte) 1);
        long long17 = dateTimeZone11.getMillisKeepLocal(dateTimeZone13, (long) 3);
        org.joda.time.DateTime dateTime18 = dateTime9.withZone(dateTimeZone11);
        org.joda.time.DateTime dateTime20 = dateTime9.minus((long) '#');
        org.joda.time.DateTime.Property property21 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime23 = dateTime9.minusWeeks((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime9.getZone();
        boolean boolean26 = dateTimeZone24.isStandardOffset((long) 12);
        boolean boolean28 = dateTimeZone24.isStandardOffset((long) '4');
        long long30 = dateTimeZone4.getMillisKeepLocal(dateTimeZone24, (long) 23);
        long long33 = dateTimeZone24.adjustOffset((long) 95, true);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        boolean boolean35 = dateTimeZone24.isFixed();
        java.lang.String str36 = dateTimeZone24.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval37 = new org.joda.time.Interval(3779990L, 99L, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3L + "'", long17 == 3L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 600013L + "'", long30 == 600013L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 95L + "'", long33 == 95L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
    }

    @Test
    public void test12044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12044");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        long long10 = dateTimeZone1.convertLocalToUTC((long) 9, false);
        java.lang.String str11 = dateTimeZone1.toString();
        long long13 = dateTimeZone1.convertUTCToLocal((long) '#');
        long long16 = dateTimeZone1.convertLocalToUTC(45L, true);
        int int18 = dateTimeZone1.getOffsetFromLocal(2863424L);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        int int25 = dateTime23.getMonthOfYear();
        int int26 = dateTime23.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int32 = dateTimeZone30.getOffset((long) (byte) 1);
        long long34 = dateTimeZone28.getMillisKeepLocal(dateTimeZone30, (long) 3);
        org.joda.time.DateTime dateTime35 = dateTime23.toDateTime(dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.withDurationAdded(readableDuration36, (int) (byte) 10);
        int int39 = dateTime35.getDayOfMonth();
        int int40 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int51 = dateTimeZone49.getOffset((long) (byte) 1);
        long long53 = dateTimeZone47.getMillisKeepLocal(dateTimeZone49, (long) 3);
        org.joda.time.DateTime dateTime54 = dateTime45.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime56 = dateTime45.minus((long) '#');
        org.joda.time.DateTime.Property property57 = dateTime45.weekyear();
        org.joda.time.DateTime dateTime59 = dateTime45.minusWeeks((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone60 = dateTime45.getZone();
        boolean boolean62 = dateTimeZone60.isStandardOffset((long) 12);
        boolean boolean63 = dateTimeZone60.isFixed();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        org.joda.time.Chronology chronology70 = localTime67.getChronology();
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((long) (byte) 1, chronology70);
        org.joda.time.DateTime dateTime72 = localTime71.toDateTimeToday();
        org.joda.time.DateTime dateTime74 = dateTime72.minus(0L);
        int int75 = dateTime72.getMillisOfDay();
        boolean boolean76 = dateTimeZone60.equals((java.lang.Object) int75);
        long long78 = dateTimeZone1.getMillisKeepLocal(dateTimeZone60, 0L);
        int int80 = dateTimeZone1.getOffsetFromLocal(194480851981698L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 45L + "'", long13 == 45L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35L + "'", long16 == 35L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 21 + "'", int39 == 21);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3L + "'", long53 == 3L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
    }

    @Test
    public void test12045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12045");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setTimeOfDay(5, 292278993, (-143999));
        java.util.Calendar calendar5 = builder4.build();
        java.time.Instant instant6 = calendar5.toInstant();
        int int7 = calendar5.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = calendar5.getMinimum(318367);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 318367");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=17536613581000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2525,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=261,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=33,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test12046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12046");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology5.weekOfWeekyear();
        java.lang.String str21 = dateTimeField19.getAsText(604800000L);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getVariant();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale22);
        int int26 = dateTimeField19.getMaximumShortTextLength(locale22);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2" + "'", str21, "2");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645455414834,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=54,MILLISECOND=834,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test12047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12047");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime4.toString(dateTimeFormatter9);
        int int11 = dateTime4.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight12 = dateTime4.toDateMidnight();
        org.joda.time.DateTime dateTime14 = dateTime4.plusSeconds((int) (short) 1);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 1, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField23.getType();
        long long27 = dateTimeField23.getDifferenceAsLong((long) 15, (long) 11);
        int int30 = dateTimeField23.getDifference((long) 20, (long) 1970);
        org.joda.time.ReadablePartial readablePartial31 = null;
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.util.Locale locale34 = java.util.Locale.US;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale34.getISO3Language();
        java.lang.String str37 = locale33.getDisplayName(locale34);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale34);
        java.lang.String str39 = dateTimeField23.getAsText(readablePartial31, 22200000, locale34);
        java.lang.String str40 = locale34.getDisplayName();
        java.util.Calendar calendar41 = dateTime14.toCalendar(locale34);
        calendar41.setMinimalDaysInFirstWeek(600000);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str10, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eng" + "'", str36, "eng");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645455414850,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=54,MILLISECOND=850,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "22200000" + "'", str39, "22200000");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English (United States)" + "'", str40, "English (United States)");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645402200990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=600000,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=1,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test12048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12048");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        calendar6.roll((int) (byte) 0, 366);
        long long10 = calendar6.getTimeInMillis();
        calendar6.add(318367, 0);
        calendar6.set((-95), (-292275054), 840000, 23, 5038);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-95,MONTH=-292275054,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=840000,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=23,MINUTE=5038,SECOND=54,MILLISECOND=870,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645455414870L + "'", long10 == 1645455414870L);
    }

    @Test
    public void test12049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12049");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime4.withWeekyear(15);
        org.joda.time.DateTime dateTime23 = dateTime4.plusWeeks(600);
        org.joda.time.DateTime dateTime25 = dateTime4.minusMinutes((int) (short) 10);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter28.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter28.withZoneUTC();
        boolean boolean33 = dateTimeFormatter32.isOffsetParsed();
        java.lang.Integer int34 = dateTimeFormatter32.getPivotYear();
        org.joda.time.Chronology chronology35 = dateTimeFormatter32.getChronolgy();
        org.joda.time.Chronology chronology36 = dateTimeFormatter32.getChronolgy();
        int int37 = dateTimeFormatter32.getDefaultYear();
        boolean boolean38 = dateTime25.equals((java.lang.Object) int37);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNull(dateTimePrinter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNull(chronology35);
        org.junit.Assert.assertNull(chronology36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2000 + "'", int37 == 2000);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test12050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12050");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear(3);
        boolean boolean34 = dateTime30.isEqual(175367340000L);
        java.util.Date date35 = dateTime30.toDate();
        org.joda.time.DateTime dateTime38 = dateTime30.withDurationAdded((long) 27419008, 1970);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfHour();
        org.joda.time.DateTime dateTime40 = property39.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:00 UTC 1970");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test12051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12051");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = null; // flaky: interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        org.joda.time.DateTime dateTime35 = localTime34.toDateTimeToday();
        org.joda.time.Interval interval36 = interval9.withStart((org.joda.time.ReadableInstant) dateTime35);
        java.util.Date date43 = new java.util.Date(0, 10, 8, 32770, 52, 0);
        date43.setSeconds(53328);
        date43.setDate(22383);
        boolean boolean48 = interval9.equals((java.lang.Object) date43);
        org.joda.time.Interval interval49 = interval9.toInterval();
        org.joda.time.Duration duration50 = interval9.toDuration();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertEquals(date43.toString(), "Fri Nov 12 01:40:48 UTC 1965");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration50);
    }

    @Test
    public void test12052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12052");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime5.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.years();
        org.joda.time.DurationField durationField10 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.era();
        org.joda.time.DurationField durationField12 = chronology8.minutes();
        org.joda.time.DurationField durationField13 = chronology8.years();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.010" + "'", str7, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test12053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12053");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 1);
        int[] intArray2 = localTime1.getValues();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfHour();
        int int10 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone13.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = dateTime11.withZoneRetainFields(dateTimeZone13);
        int int18 = dateTime17.getDayOfWeek();
        org.joda.time.DateTime dateTime19 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime21 = localTime1.minusMinutes(419);
        int int22 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        int int31 = localTime25.compareTo((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(0, 8);
        int int35 = localTime28.compareTo((org.joda.time.ReadablePartial) localTime34);
        boolean boolean36 = localTime1.isEqual((org.joda.time.ReadablePartial) localTime28);
        org.junit.Assert.assertNotNull(intArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12054");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.LocalTime localTime14 = localTime12.plusHours((int) 'u');
        org.joda.time.LocalTime localTime16 = localTime12.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        int int23 = dateTime21.getMonthOfYear();
        int int24 = dateTime21.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        org.joda.time.DateTime dateTime33 = dateTime21.toDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime34 = localTime16.toDateTimeToday(dateTimeZone26);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) 5, dateTimeZone26);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.DateTime.Property property42 = dateTime40.minuteOfHour();
        int int43 = property42.get();
        org.joda.time.Interval interval44 = property42.toInterval();
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.Period period46 = interval44.toPeriod();
        java.lang.String str47 = interval44.toString();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.get();
        org.joda.time.Interval interval56 = property54.toInterval();
        org.joda.time.Interval interval57 = interval56.toInterval();
        long long58 = interval56.toDurationMillis();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval56.toPeriod(periodType59);
        org.joda.time.Interval interval61 = interval44.overlap((org.joda.time.ReadableInterval) interval56);
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Period period63 = interval61.toPeriod(periodType62);
        org.joda.time.MutablePeriod mutablePeriod64 = period63.toMutablePeriod();
        org.joda.time.LocalTime localTime65 = localTime35.minus((org.joda.time.ReadablePeriod) period63);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance();
        boolean boolean67 = calendar66.isWeekDateSupported();
        long long68 = calendar66.getTimeInMillis();
        java.util.TimeZone timeZone69 = calendar66.getTimeZone();
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localTime72.toDateTime(readableInstant73);
        org.joda.time.Chronology chronology75 = localTime72.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.weekyears();
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localTime80.toDateTime(readableInstant81);
        org.joda.time.Chronology chronology83 = localTime80.getChronology();
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((long) (byte) 1, chronology83);
        int[] intArray86 = chronology75.get((org.joda.time.ReadablePartial) localTime84, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField87 = chronology75.clockhourOfDay();
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((java.lang.Object) calendar66, chronology75);
        org.joda.time.LocalTime localTime89 = new org.joda.time.LocalTime(chronology75);
        org.joda.time.DateTime dateTime90 = localTime89.toDateTimeToday();
        org.joda.time.Interval interval91 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period63, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.Chronology chronology92 = interval91.getChronology();
        org.joda.time.LocalTime localTime93 = new org.joda.time.LocalTime(25271959883666578L, chronology92);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = localTime93.getValue(27424247);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 27424247");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str47, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 60000L + "'", long58 == 60000L);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1645455414979,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=54,MILLISECOND=979,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645455414979L + "'", long68 == 1645455414979L);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(chronology92);
    }

    @Test
    public void test12055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12055");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime10 = property6.addToCopy((long) 366);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTimeISO();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int23 = dateTimeZone21.getOffset((long) (byte) 1);
        long long25 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, (long) 3);
        org.joda.time.DateTime dateTime26 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime28 = dateTime17.minus((long) '#');
        org.joda.time.DateTime.Property property29 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime31 = dateTime17.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime17.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(0L, dateTimeZone37);
        java.util.TimeZone timeZone41 = dateTimeZone37.toTimeZone();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str44 = locale43.getCountry();
        java.lang.String str45 = dateTimeZone37.getShortName(0L, locale43);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        java.lang.String str53 = property52.toString();
        org.joda.time.DateTime dateTime54 = property52.roundFloorCopy();
        org.joda.time.DateTime dateTime56 = property52.addToCopy((long) 366);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusYears(7);
        org.joda.time.DateTime dateTime65 = dateTime61.plusWeeks((int) (short) 10);
        int int66 = property52.getDifference((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime65, readableDuration67);
        int int69 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean71 = instant12.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology72 = instant12.getChronology();
        int int73 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) instant12);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean75 = instant12.isSupported(dateTimeFieldType74);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localTime78.toDateTime(readableInstant79);
        org.joda.time.LocalTime localTime81 = dateTime80.toLocalTime();
        org.joda.time.DateTime.Property property82 = dateTime80.minuteOfHour();
        int int83 = property82.get();
        org.joda.time.Interval interval84 = property82.toInterval();
        org.joda.time.DateTime dateTime85 = interval84.getEnd();
        long long86 = interval84.getEndMillis();
        org.joda.time.Chronology chronology87 = interval84.getChronology();
        org.joda.time.MutableDateTime mutableDateTime88 = instant12.toMutableDateTime(chronology87);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[minuteOfHour]" + "'", str7, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CN" + "'", str44, "CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Property[minuteOfHour]" + "'", str53, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-100800) + "'", int66 == (-100800));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645402259990L + "'", long86 == 1645402259990L);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
    }

    @Test
    public void test12056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12056");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        long long39 = interval8.getStartMillis();
        org.joda.time.Interval interval41 = interval8.withEndMillis(1645454908348L);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.get();
        org.joda.time.Interval interval50 = property48.toInterval();
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Period period52 = interval50.toPeriod();
        java.lang.String str53 = interval50.toString();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.DateTime.Property property60 = dateTime58.minuteOfHour();
        int int61 = property60.get();
        org.joda.time.Interval interval62 = property60.toInterval();
        org.joda.time.Interval interval63 = interval62.toInterval();
        long long64 = interval62.toDurationMillis();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = interval62.toPeriod(periodType65);
        org.joda.time.Interval interval67 = interval50.overlap((org.joda.time.ReadableInterval) interval62);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = interval67.toPeriod(periodType68);
        org.joda.time.ReadableInterval readableInterval70 = null;
        boolean boolean71 = interval67.contains(readableInterval70);
        boolean boolean72 = interval41.overlaps(readableInterval70);
        org.joda.time.Interval interval73 = interval41.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval75 = interval73.withEndMillis(898L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645402199990L + "'", long39 == 1645402199990L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str53, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 60000L + "'", long64 == 60000L);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval73);
    }

    @Test
    public void test12057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12057");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        int int10 = localTime4.compareTo((org.joda.time.ReadablePartial) localTime7);
        org.joda.time.LocalTime.Property property11 = localTime4.hourOfDay();
        org.joda.time.LocalTime localTime13 = property11.addCopy(6);
        org.joda.time.LocalTime localTime14 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property11.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime17 = property11.roundHalfEvenCopy();
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology18.halfdays();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology18.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test12058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12058");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Interval interval22 = interval8.withChronology(chronology19);
        boolean boolean23 = interval8.isAfterNow();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        int int31 = property30.get();
        org.joda.time.Interval interval32 = property30.toInterval();
        org.joda.time.Interval interval33 = interval32.toInterval();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        int int42 = localTime36.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.LocalTime.Property property43 = localTime36.hourOfDay();
        org.joda.time.LocalTime localTime45 = property43.addCopy(6);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.get();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.joda.time.Interval interval55 = interval54.toInterval();
        long long56 = interval54.toDurationMillis();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval54.toPeriod(periodType57);
        org.joda.time.LocalTime localTime60 = localTime45.withPeriodAdded((org.joda.time.ReadablePeriod) period58, 8);
        org.joda.time.PeriodType periodType61 = period58.getPeriodType();
        org.joda.time.Period period62 = interval33.toPeriod(periodType61);
        org.joda.time.MutableInterval mutableInterval63 = interval33.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval64 = null;
        boolean boolean65 = interval33.isAfter(readableInterval64);
        boolean boolean66 = interval33.isBeforeNow();
        boolean boolean67 = interval8.isBefore((org.joda.time.ReadableInterval) interval33);
        long long68 = interval33.getEndMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 60000L + "'", long56 == 60000L);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645402259990L + "'", long68 == 1645402259990L);
    }

    @Test
    public void test12059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12059");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.Chronology chronology9 = dateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = locale12.getCountry();
        int int14 = dateTimeField10.getMaximumTextLength(locale12);
        int int16 = dateTimeField10.get(60000L);
        org.joda.time.DurationField durationField17 = dateTimeField10.getDurationField();
        java.lang.String str19 = dateTimeField10.getAsShortText((long) 365);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "CN" + "'", str13, "CN");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 60 + "'", int16 == 60);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
    }

    @Test
    public void test12060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12060");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.withMaximumValue();
        org.joda.time.LocalTime localTime45 = property42.setCopy(0);
        org.joda.time.LocalTime localTime47 = property42.addWrapFieldToCopy(122);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) 1);
        int[] intArray50 = localTime49.getValues();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.LocalTime localTime56 = dateTime55.toLocalTime();
        org.joda.time.DateTime.Property property57 = dateTime55.minuteOfHour();
        int int58 = property57.getMinimumValue();
        org.joda.time.DateTime dateTime59 = property57.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime62 = null;
        boolean boolean63 = dateTimeZone61.isLocalDateTimeGap(localDateTime62);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(dateTimeZone61);
        org.joda.time.DateTime dateTime65 = dateTime59.withZoneRetainFields(dateTimeZone61);
        int int66 = dateTime65.getDayOfWeek();
        org.joda.time.DateTime dateTime67 = localTime49.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.LocalTime localTime69 = localTime49.withMillisOfDay(59);
        int int70 = localTime47.compareTo((org.joda.time.ReadablePartial) localTime69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType72 = localTime69.getFieldType(1140);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1140");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test12061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12061");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int18 = dateTimeZone16.getOffset((long) (byte) 1);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isBefore((long) 21);
        org.joda.time.Interval interval25 = interval22.toInterval();
        org.joda.time.Chronology chronology26 = interval22.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology26);
        int int29 = dateTime28.getYearOfEra();
        org.joda.time.DateTime dateTime31 = dateTime28.plusMonths((-74714));
        int int32 = dateTime28.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 21 + "'", int32 == 21);
    }

    @Test
    public void test12062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12062");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = interval9.toPeriod(periodType10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfMonth();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.LocalTime localTime33 = localTime31.plusHours((int) 'u');
        long long35 = chronology18.set((org.joda.time.ReadablePartial) localTime31, 0L);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(7213320000L, chronology18);
        org.joda.time.DateTimeField dateTimeField37 = chronology18.monthOfYear();
        boolean boolean38 = period11.equals((java.lang.Object) dateTimeField37);
        org.joda.time.Period period39 = period11.toPeriod();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 53815201L + "'", long35 == 53815201L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test12063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12063");
        java.util.Locale locale3 = new java.util.Locale("\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)", "CA", "53476729");
        org.junit.Assert.assertEquals(locale3.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)_CA_53476729");
    }

    @Test
    public void test12064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12064");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withChronology(chronology14);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        long long28 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, (long) 3);
        org.joda.time.DateTime dateTime29 = dateTime20.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime31 = dateTime20.minus((long) '#');
        org.joda.time.DateTime.Property property32 = dateTime20.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime20.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime20.withSecondOfMinute(0);
        boolean boolean38 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology39 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime20.plusYears(600074);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test12065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12065");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime5.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.years();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DurationField durationField11 = chronology8.years();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology8.getZone();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.010" + "'", str7, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test12066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12066");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime4.toString(dateTimeFormatter9);
        org.joda.time.DateTime dateTime12 = dateTime4.plusMinutes(17);
        org.joda.time.DateTime dateTime14 = dateTime4.withWeekyear(5);
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        java.lang.String str18 = dateTimeZone17.getID();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.now(dateTimeZone17);
        org.joda.time.LocalTime localTime21 = localTime19.minusMinutes(18);
        int int22 = localTime19.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str10, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 56 + "'", int22 == 56);
    }

    @Test
    public void test12067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12067");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("English");
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.weekyears();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        int[] intArray21 = chronology10.get((org.joda.time.ReadablePartial) localTime19, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField22 = chronology10.dayOfYear();
        org.joda.time.DurationField durationField23 = durationFieldType4.getField(chronology10);
        org.joda.time.DurationField durationField24 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField25 = chronology10.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        boolean boolean35 = dateTimeFieldType26.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.centuryOfEra();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology33);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(chronology33);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) (byte) 1, chronology45);
        org.joda.time.DateTime dateTime47 = localTime46.toDateTimeToday();
        org.joda.time.LocalTime localTime49 = localTime46.minusMinutes(1);
        org.joda.time.LocalTime.Property property50 = localTime46.millisOfDay();
        org.joda.time.LocalTime localTime51 = localTime38.withFields((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.LocalTime.Property property52 = localTime46.hourOfDay();
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localTime46, 42, locale54);
        java.util.Locale.Builder builder56 = builder1.setLocale(locale54);
        java.util.Locale.Builder builder57 = builder56.clearExtensions();
        java.util.Locale.Builder builder58 = builder56.clear();
        java.util.Locale.Builder builder59 = builder58.clear();
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.util.Locale locale61 = java.util.Locale.US;
        java.util.Locale locale62 = locale61.stripExtensions();
        java.lang.String str63 = locale61.getISO3Language();
        java.lang.String str64 = locale60.getDisplayName(locale61);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale61);
        java.util.Locale.Builder builder66 = builder59.setLocale(locale61);
        java.util.Locale.Builder builder67 = builder59.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "42" + "'", str55, "42");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "eng" + "'", str63, "eng");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English" + "'", str64, "English");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645455415271,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=55,MILLISECOND=271,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test12068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12068");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        calendar6.roll((int) (byte) 0, 366);
        boolean boolean10 = calendar6.isWeekDateSupported();
        calendar6.roll(9, 623000);
        calendar6.set(983, 18, 1970);
        int int18 = calendar6.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=983,MONTH=18,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1970,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=55,MILLISECOND=299,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test12069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12069");
        java.util.Date date5 = new java.util.Date(1970, 8, 292278993, 53386763, (-457055));
        java.util.Date date12 = new java.util.Date(590, 934, (int) '4', 600000, (int) (short) -1, 22200000);
        boolean boolean13 = date5.after(date12);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromDateFields(date5);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 30 01:25:00 UTC 810192");
        org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 14 22:39:00 UTC 2637");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test12070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12070");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        calendar2.setMinimalDaysInFirstWeek(5);
        java.util.TimeZone timeZone5 = calendar2.getTimeZone();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone5);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        org.joda.time.DateTime.Property property13 = dateTime11.minuteOfHour();
        int int14 = property13.get();
        org.joda.time.Interval interval15 = property13.toInterval();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfHour();
        int int23 = property22.getMinimumValue();
        org.joda.time.DateTime dateTime24 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        boolean boolean26 = interval15.contains((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = interval15.toDuration();
        org.joda.time.Chronology chronology28 = interval15.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.DateTime.Property property35 = dateTime33.minuteOfHour();
        int int36 = property35.get();
        org.joda.time.Interval interval37 = property35.toInterval();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalTime localTime49 = localTime45.plus(readablePeriod48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean51 = localTime49.isSupported(dateTimeFieldType50);
        org.joda.time.DateTime dateTime52 = dateTime42.withFields((org.joda.time.ReadablePartial) localTime49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int58 = dateTimeZone56.getOffset((long) (byte) 1);
        long long60 = dateTimeZone54.getMillisKeepLocal(dateTimeZone56, (long) 3);
        long long63 = dateTimeZone54.convertLocalToUTC((long) 9, false);
        java.lang.String str64 = dateTimeZone54.toString();
        org.joda.time.DateTime dateTime65 = localTime49.toDateTimeToday(dateTimeZone54);
        long long66 = dateTime65.getMillis();
        boolean boolean67 = interval37.equals((java.lang.Object) long66);
        long long68 = interval37.getStartMillis();
        org.joda.time.Interval interval69 = interval37.toInterval();
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localTime72.toDateTime(readableInstant73);
        org.joda.time.LocalTime localTime75 = dateTime74.toLocalTime();
        org.joda.time.DateTime.Property property76 = dateTime74.minuteOfHour();
        int int77 = property76.get();
        org.joda.time.Interval interval78 = property76.toInterval();
        org.joda.time.DateTime dateTime79 = interval78.getEnd();
        org.joda.time.Period period80 = interval78.toPeriod();
        java.lang.String str81 = interval78.toString();
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = localTime84.toDateTime(readableInstant85);
        org.joda.time.LocalTime localTime87 = dateTime86.toLocalTime();
        org.joda.time.DateTime.Property property88 = dateTime86.minuteOfHour();
        int int89 = property88.get();
        org.joda.time.Interval interval90 = property88.toInterval();
        org.joda.time.Interval interval91 = interval90.toInterval();
        long long92 = interval90.toDurationMillis();
        org.joda.time.PeriodType periodType93 = null;
        org.joda.time.Period period94 = interval90.toPeriod(periodType93);
        org.joda.time.Interval interval95 = interval78.overlap((org.joda.time.ReadableInterval) interval90);
        org.joda.time.Interval interval96 = interval37.overlap((org.joda.time.ReadableInterval) interval95);
        boolean boolean97 = interval15.isBefore((org.joda.time.ReadableInterval) interval96);
        boolean boolean98 = calendar6.after((java.lang.Object) interval96);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455415317,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=55,MILLISECOND=317,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455415317,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=55,MILLISECOND=317,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3L + "'", long60 == 3L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.010" + "'", str64, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645402199990L + "'", long66 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645402199990L + "'", long68 == 1645402199990L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(period80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str81, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 60000L + "'", long92 == 60000L);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test12071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12071");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter5.getParser();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int15 = dateTimeZone13.getOffset((long) (byte) 1);
        long long17 = dateTimeZone11.getMillisKeepLocal(dateTimeZone13, (long) 3);
        long long20 = dateTimeZone11.convertLocalToUTC((long) 9, false);
        java.lang.String str21 = dateTimeZone11.toString();
        java.lang.String str23 = dateTimeZone11.getShortName((long) (byte) 100);
        java.lang.String str24 = dateTimeZone11.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter5.withZone(dateTimeZone11);
        boolean boolean26 = dateTimeFormatter5.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter5.withDefaultYear(53358486);
        java.lang.Appendable appendable29 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.LocalTime localTime37 = localTime35.minusMillis((int) (byte) 10);
        int int38 = localTime37.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean40 = localTime37.isSupported(dateTimeFieldType39);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter5.printTo(appendable29, (org.joda.time.ReadablePartial) localTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3L + "'", long17 == 3L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test12072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12072");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.DurationField durationField11 = chronology7.years();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.hourOfHalfday();
        org.joda.time.DurationField durationField14 = chronology7.weeks();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray18 = chronology7.get(readablePeriod15, (-52938L), 1645454944702L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test12073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12073");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime11.toDateTimeToday(dateTimeZone16);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.withYearOfCentury(0);
        org.joda.time.DateTime.Property property31 = dateTime27.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = property31.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int43 = dateTimeZone41.getOffset((long) (byte) 1);
        long long45 = dateTimeZone39.getMillisKeepLocal(dateTimeZone41, (long) 3);
        org.joda.time.DateTime dateTime46 = dateTime37.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime48 = dateTime46.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, readableDuration49);
        org.joda.time.Period period51 = interval50.toPeriod();
        org.joda.time.DateTime dateTime52 = dateTime32.plus((org.joda.time.ReadablePeriod) period51);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645402199990L + "'", long28 == 1645402199990L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test12074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12074");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        boolean boolean10 = interval8.isAfterNow();
        long long11 = interval8.toDurationMillis();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(1645454883425L);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        org.joda.time.DateTime dateTime22 = localTime21.toDateTimeToday();
        org.joda.time.LocalTime localTime24 = localTime21.minusMinutes(1);
        org.joda.time.LocalTime.Property property25 = localTime21.millisOfDay();
        int int26 = localTime21.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean28 = localTime21.isSupported(dateTimeFieldType27);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        int int35 = dateTime33.getMonthOfYear();
        int int36 = dateTime33.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int42 = dateTimeZone40.getOffset((long) (byte) 1);
        long long44 = dateTimeZone38.getMillisKeepLocal(dateTimeZone40, (long) 3);
        org.joda.time.DateTime dateTime45 = dateTime33.toDateTime(dateTimeZone38);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime48 = dateTime33.withFieldAdded(durationFieldType46, 2022);
        org.joda.time.LocalTime localTime50 = localTime21.withFieldAdded(durationFieldType46, 1439);
        org.joda.time.DateTime dateTime52 = dateTime13.withFieldAdded(durationFieldType46, 12);
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfYear((int) ' ');
        int int55 = dateTime52.getDayOfYear();
        boolean boolean56 = interval8.contains((org.joda.time.ReadableInstant) dateTime52);
        long long57 = interval8.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 60000L + "'", long11 == 60000L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 53 + "'", int55 == 53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 60000L + "'", long57 == 60000L);
    }

    @Test
    public void test12075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12075");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        java.lang.String str4 = date1.toLocaleString();
        java.lang.String str5 = date1.toGMTString();
        java.time.Instant instant6 = date1.toInstant();
        date1.setMinutes(34);
        int int9 = date1.getYear();
        long long10 = date1.getTime();
        date1.setSeconds(32772);
        int int13 = date1.getHours();
        java.util.Date date19 = new java.util.Date(53, 32772, 125, 99, (int) (short) 10);
        java.time.Instant instant20 = date19.toInstant();
        java.time.Instant instant21 = date19.toInstant();
        boolean boolean22 = date1.before(date19);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 09:40:12 UTC 1970");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jan 1, 1970 12:11:00 AM" + "'", str4, "Jan 1, 1970 12:11:00 AM");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1 Jan 1970 00:11:00 GMT" + "'", str5, "1 Jan 1970 00:11:00 GMT");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2040100L + "'", long10 == 2040100L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertEquals(date19.toString(), "Thu May 08 03:10:00 UTC 4684");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test12076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12076");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        java.lang.String str29 = interval26.toString();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.get();
        org.joda.time.Interval interval38 = property36.toInterval();
        org.joda.time.Interval interval39 = interval38.toInterval();
        long long40 = interval38.toDurationMillis();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = interval38.toPeriod(periodType41);
        org.joda.time.Interval interval43 = interval26.overlap((org.joda.time.ReadableInterval) interval38);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval43.toPeriod(periodType44);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        org.joda.time.LocalTime localTime47 = localTime17.minus((org.joda.time.ReadablePeriod) period45);
        java.lang.String str48 = localTime17.toString();
        int int49 = localTime17.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str29, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 60000L + "'", long40 == 60000L);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(localTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "00:10:00.000" + "'", str48, "00:10:00.000");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
    }

    @Test
    public void test12077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12077");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        boolean boolean11 = dateTimeFieldType2.isSupported(chronology9);
        boolean boolean12 = durationFieldType1.isSupported(chronology9);
        java.lang.String str13 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfYear();
        long long17 = dateTimeField14.set(151200000L, (int) 'x');
        long long20 = dateTimeField14.add(0L, 19044L);
        long long22 = dateTimeField14.roundFloor(10800000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10346400000L + "'", long17 == 10346400000L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645401600000L + "'", long20 == 1645401600000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test12078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12078");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        boolean boolean10 = dateTime8.isBefore((long) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.US;
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.lang.String str16 = locale11.getDisplayCountry(locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale11);
        java.util.Locale locale18 = java.util.Locale.ITALY;
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String str20 = locale11.getDisplayCountry(locale18);
        java.util.Calendar calendar21 = dateTime8.toCalendar(locale18);
        // The following exception was thrown during execution in test generation
        try {
            calendar21.set(457056, 53546);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 457056");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United States" + "'", str16, "United States");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455415512,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=55,MILLISECOND=512,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Stati Uniti" + "'", str20, "Stati Uniti");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645402199990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test12079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12079");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime4.plusHours(1970);
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears((int) (byte) 0);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalTime localTime32 = localTime28.plus(readablePeriod31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean34 = localTime32.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = dateTime25.withFields((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int41 = dateTimeZone39.getOffset((long) (byte) 1);
        long long43 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, (long) 3);
        long long46 = dateTimeZone37.convertLocalToUTC((long) 9, false);
        java.lang.String str47 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime48 = localTime32.toDateTimeToday(dateTimeZone37);
        java.util.Locale locale50 = null;
        java.lang.String str51 = dateTimeZone37.getShortName((long) 100, locale50);
        boolean boolean53 = dateTimeZone37.isStandardOffset(1645454876554L);
        org.joda.time.DateTime dateTime54 = dateTime20.withZoneRetainFields(dateTimeZone37);
        int int55 = dateTime54.getYearOfCentury();
        int int56 = dateTime54.getEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.010" + "'", str51, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test12080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12080");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localTime24, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.dayOfYear();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Period period38 = interval36.toPeriod();
        int[] intArray40 = chronology15.get((org.joda.time.ReadablePeriod) period38, (long) (byte) 100);
        org.joda.time.DateTime dateTime41 = dateTime8.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime42 = dateTime8.withTimeAtStartOfDay();
        boolean boolean43 = dateTime42.isEqualNow();
        org.joda.time.DateTime.Property property44 = dateTime42.yearOfCentury();
        org.joda.time.Interval interval45 = property44.toInterval();
        long long46 = interval45.getEndMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(interval45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1672531199990L + "'", long46 == 1672531199990L);
    }

    @Test
    public void test12081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12081");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay((int) (short) 10, (int) '4', 99, 35);
        java.util.Calendar.Builder builder18 = builder15.set(9, 35);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int23 = dateTimeZone21.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(0L, dateTimeZone21);
        java.util.TimeZone timeZone25 = dateTimeZone21.toTimeZone();
        java.util.Calendar.Builder builder26 = builder18.setTimeZone(timeZone25);
        java.util.Calendar.Builder builder30 = builder18.setWeekDate(5304, 611, (int) (short) 100);
        java.util.Locale locale31 = java.util.Locale.US;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayCountry(locale35);
        java.lang.String str37 = locale31.getISO3Language();
        java.util.Locale locale39 = new java.util.Locale("hours");
        java.lang.String str41 = locale39.getExtension('u');
        java.lang.String str42 = locale31.getDisplayVariant(locale39);
        java.lang.String str43 = locale39.getDisplayLanguage();
        java.util.Calendar.Builder builder44 = builder30.setLocale(locale39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder47 = builder30.setWeekDefinition(0, 840000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United States" + "'", str36, "United States");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertEquals(locale39.toString(), "hours");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test12082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12082");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        java.util.Locale locale9 = java.util.Locale.US;
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale9.getDisplayCountry(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale9);
        java.util.Date date16 = calendar15.getTime();
        int int17 = date16.getHours();
        date16.setHours(366);
        int int20 = date16.getTimezoneOffset();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.getMinimumValue();
        org.joda.time.DateTime dateTime29 = property27.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime32 = null;
        boolean boolean33 = dateTimeZone31.isLocalDateTimeGap(localDateTime32);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(dateTimeZone31);
        org.joda.time.DateTime dateTime35 = dateTime29.withZoneRetainFields(dateTimeZone31);
        int int36 = dateTime35.getYearOfCentury();
        java.util.Date date37 = dateTime35.toDate();
        int int38 = date37.getMinutes();
        boolean boolean39 = date16.after(date37);
        long long40 = date16.getTime();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromDateFields(date16);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        int int50 = localTime44.compareTo((org.joda.time.ReadablePartial) localTime47);
        org.joda.time.LocalTime.Property property51 = localTime44.hourOfDay();
        int int52 = localTime44.getMinuteOfHour();
        boolean boolean53 = localTime41.isAfter((org.joda.time.ReadablePartial) localTime44);
        long long55 = chronology6.set((org.joda.time.ReadablePartial) localTime41, 1645455269791L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "United States" + "'", str14, "United States");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455415599,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=55,MILLISECOND=599,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Mar 08 06:56:55 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 14 + "'", int17 == 14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertNotNull(date37);
        org.junit.Assert.assertEquals(date37.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1646722615599L + "'", long40 == 1646722615599L);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645426615599L + "'", long55 == 1645426615599L);
    }

    @Test
    public void test12083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12083");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        long long14 = chronology6.add(53262062L, 1645401600000L, 13);
        org.joda.time.DurationField durationField15 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField16 = chronology6.halfdayOfDay();
        long long19 = dateTimeField16.getDifferenceAsLong(2040100L, 2605186369422L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 21390274062062L + "'", long14 == 21390274062062L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60305L) + "'", long19 == (-60305L));
    }

    @Test
    public void test12084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12084");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.clockhourOfDay();
        org.joda.time.DurationField durationField18 = chronology5.seconds();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology5.getZone();
        org.joda.time.DurationField durationField20 = chronology5.seconds();
        org.joda.time.DurationField durationField21 = chronology5.seconds();
        org.joda.time.DateTimeField dateTimeField22 = chronology5.yearOfEra();
        java.lang.String str23 = dateTimeField22.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DateTimeField[yearOfEra]" + "'", str23, "DateTimeField[yearOfEra]");
    }

    @Test
    public void test12085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12085");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getVariant();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfMonth();
        org.joda.time.Chronology chronology14 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology14);
        boolean boolean18 = calendar3.before((java.lang.Object) chronology14);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology14.getDateTimeMillis((-10647), 3720000, 53509260, 53283606);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3720000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455415693,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=55,MILLISECOND=693,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test12086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12086");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.LocalTime localTime7 = localTime5.minusMillis((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.years();
        boolean boolean9 = localTime5.isSupported(durationFieldType8);
        java.lang.String str10 = durationFieldType8.toString();
        java.lang.String str11 = durationFieldType8.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime15 = null;
        boolean boolean16 = dateTimeZone14.isLocalDateTimeGap(localDateTime15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localTime17.toString(dateTimeFormatter18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology20.getZone();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology20.getZone();
        boolean boolean23 = durationFieldType8.isSupported(chronology20);
        org.joda.time.Chronology chronology24 = chronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.millisOfDay();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        int int34 = localTime28.compareTo((org.joda.time.ReadablePartial) localTime31);
        org.joda.time.LocalTime.Property property35 = localTime28.hourOfDay();
        org.joda.time.LocalTime localTime37 = property35.addCopy(6);
        org.joda.time.LocalTime localTime38 = property35.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime39 = property35.roundCeilingCopy();
        org.joda.time.LocalTime localTime41 = property35.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime43 = property35.setCopy("1");
        org.joda.time.LocalTime localTime45 = localTime43.minusMillis((int) ' ');
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.lang.String str48 = locale47.getDisplayName();
        java.lang.String str49 = locale47.getDisplayVariant();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale47);
        java.lang.String str51 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localTime43, 95, locale47);
        java.lang.String str53 = dateTimeField25.getAsShortText(2700000L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "years" + "'", str10, "years");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "years" + "'", str11, "years");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "00:00:00.010" + "'", str19, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English (United States)" + "'", str48, "English (United States)");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1645455415705,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=55,MILLISECOND=705,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "95" + "'", str51, "95");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2700000" + "'", str53, "2700000");
    }

    @Test
    public void test12087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12087");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 789);
    }

    @Test
    public void test12088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12088");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((-27422807));
        int int10 = dateTimeFormatter9.getDefaultYear();
        boolean boolean11 = dateTimeFormatter9.isPrinter();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2000 + "'", int10 == 2000);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test12089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12089");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = null; // flaky: interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = interval9.toDuration();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((-259200010L), 2605186100796L);
        org.joda.time.Interval interval31 = interval9.overlap((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTime dateTime32 = interval31.getStart();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        org.joda.time.DateTime.Property property39 = dateTime37.minuteOfHour();
        int int40 = property39.get();
        org.joda.time.Interval interval41 = property39.toInterval();
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.Period period43 = interval41.toPeriod();
        java.lang.String str44 = interval41.toString();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.LocalTime localTime50 = dateTime49.toLocalTime();
        org.joda.time.DateTime.Property property51 = dateTime49.minuteOfHour();
        int int52 = property51.get();
        org.joda.time.Interval interval53 = property51.toInterval();
        org.joda.time.Interval interval54 = interval53.toInterval();
        long long55 = interval53.toDurationMillis();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval53.toPeriod(periodType56);
        org.joda.time.Interval interval58 = interval41.overlap((org.joda.time.ReadableInterval) interval53);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = interval58.toPeriod(periodType59);
        org.joda.time.ReadableInterval readableInterval61 = null;
        boolean boolean62 = interval58.contains(readableInterval61);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localTime65.toDateTime(readableInstant66);
        org.joda.time.LocalTime localTime68 = dateTime67.toLocalTime();
        int int69 = dateTime67.getMonthOfYear();
        int int70 = dateTime67.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int76 = dateTimeZone74.getOffset((long) (byte) 1);
        long long78 = dateTimeZone72.getMillisKeepLocal(dateTimeZone74, (long) 3);
        org.joda.time.DateTime dateTime79 = dateTime67.toDateTime(dateTimeZone72);
        org.joda.time.Interval interval80 = interval58.withEnd((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Interval interval81 = interval80.toInterval();
        boolean boolean82 = interval31.overlaps((org.joda.time.ReadableInterval) interval81);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str44, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 60000L + "'", long55 == 60000L);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 3L + "'", long78 == 3L);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test12090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12090");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime17 = property9.setCopy("1");
        org.joda.time.Interval interval18 = property9.toInterval();
        org.joda.time.LocalTime localTime20 = property9.addCopy(366);
        org.joda.time.LocalTime localTime21 = property9.getLocalTime();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int[] intArray38 = chronology27.get((org.joda.time.ReadablePartial) localTime36, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField39 = chronology27.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = localTime44.getChronology();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (byte) 1, chronology47);
        boolean boolean49 = dateTimeFieldType40.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.centuryOfEra();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        org.joda.time.Chronology chronology57 = localTime54.getChronology();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) (byte) 1, chronology57);
        int int59 = dateTimeField50.getMaximumValue((org.joda.time.ReadablePartial) localTime58);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) 1);
        int[] intArray62 = localTime61.getValues();
        int int63 = dateTimeField39.getMaximumValue((org.joda.time.ReadablePartial) localTime58, intArray62);
        org.joda.time.LocalTime.Property property64 = localTime58.millisOfSecond();
        org.joda.time.LocalTime localTime65 = property64.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property64.getFieldType();
        int int67 = localTime21.get(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2922789 + "'", int59 == 2922789);
        org.junit.Assert.assertNotNull(intArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 366 + "'", int63 == 366);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test12091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12091");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusHours(1439);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int8 = dateTimeZone6.getOffset((long) (byte) 1);
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone6, (long) 3);
        long long12 = dateTimeZone4.previousTransition(0L);
        org.joda.time.DateTime dateTime13 = localTime2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime15 = dateTime13.minusYears(54);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3L + "'", long10 == 3L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test12092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12092");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property10 = dateTime4.monthOfYear();
        java.util.Locale locale12 = new java.util.Locale("English");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        int int14 = property10.getMaximumTextLength(locale12);
        org.joda.time.DateTimeField dateTimeField15 = property10.getField();
        org.joda.time.DateTime dateTime16 = property10.getDateTime();
        int int17 = dateTime16.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals(locale12.toString(), "english");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21 + "'", int17 == 21);
    }

    @Test
    public void test12093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12093");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) '4');
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfYear();
        org.joda.time.DurationField durationField11 = chronology8.halfdays();
        org.joda.time.DurationFieldType durationFieldType12 = durationField11.getType();
        boolean boolean13 = localTime2.isSupported(durationFieldType12);
        java.lang.String str14 = durationFieldType12.getName();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 1, chronology29);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePartial) localTime30, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField33 = chronology21.dayOfYear();
        org.joda.time.DurationField durationField34 = durationFieldType15.getField(chronology21);
        org.joda.time.DurationField durationField35 = chronology21.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology21.millisOfSecond();
        org.joda.time.DurationField durationField37 = durationFieldType12.getField(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "halfdays" + "'", str14, "halfdays");
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test12094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12094");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime16 = property9.roundFloorCopy();
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        int int18 = property17.getMinimumValue();
        org.joda.time.LocalTime localTime19 = property17.roundHalfFloorCopy();
        org.joda.time.DurationField durationField20 = property17.getLeapDurationField();
        org.joda.time.LocalTime localTime22 = property17.addCopy(53401);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test12095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12095");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(934, 53389);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 934 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12096");
        java.util.Date date1 = new java.util.Date(45L);
        int int2 = date1.getTimezoneOffset();
        int int3 = date1.getTimezoneOffset();
        java.util.Date date5 = new java.util.Date((long) (byte) 100);
        date5.setMinutes(11);
        long long8 = date5.getTime();
        int int9 = date5.getMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date5);
        java.lang.String str11 = date5.toLocaleString();
        date5.setDate(1);
        boolean boolean14 = date1.before(date5);
        long long15 = date5.getTime();
        java.util.Date date21 = new java.util.Date(53, 366, 17590, 3720000, 20);
        int int22 = date5.compareTo(date21);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 660100L + "'", long8 == 660100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan 1, 1970 12:11:00 AM" + "'", str11, "Jan 1, 1970 12:11:00 AM");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 660100L + "'", long15 == 660100L);
        org.junit.Assert.assertEquals(date21.toString(), "Tue Jan 11 00:20:00 UTC 2456");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test12097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12097");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int[] intArray38 = chronology27.get((org.joda.time.ReadablePartial) localTime36, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField39 = chronology27.dayOfYear();
        org.joda.time.DurationField durationField40 = durationFieldType21.getField(chronology27);
        org.joda.time.DurationFieldType durationFieldType41 = durationField40.getType();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (byte) 1, chronology50);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology50);
        org.joda.time.Interval interval53 = new org.joda.time.Interval(0L, 0L, chronology50);
        org.joda.time.DurationField durationField54 = durationFieldType41.getField(chronology50);
        boolean boolean55 = durationFieldType20.isSupported(chronology50);
        org.joda.time.DateTimeField dateTimeField56 = chronology50.minuteOfDay();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test12098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12098");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isOffsetParsed();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withLocale(locale8);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfMonth();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology17);
        org.joda.time.LocalTime localTime23 = localTime21.plusHours((int) 'u');
        org.joda.time.LocalTime localTime25 = localTime21.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int31 = dateTimeZone29.getOffset((long) (byte) 1);
        long long33 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 3);
        long long36 = dateTimeZone27.convertLocalToUTC((long) 9, false);
        java.lang.String str37 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime38 = localTime25.toDateTimeToday(dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.DateTime dateTime42 = dateTime38.minusHours((int) 'a');
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.LocalTime localTime48 = dateTime47.toLocalTime();
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfHour();
        java.util.Locale locale50 = java.util.Locale.US;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale50.getDisplayName(locale52);
        java.lang.String str54 = property49.getAsText(locale50);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property49.getFieldType();
        int int56 = dateTime42.get(dateTimeFieldType55);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.LocalTime localTime62 = dateTime61.toLocalTime();
        org.joda.time.DateTime.Property property63 = dateTime61.minuteOfHour();
        int int64 = property63.get();
        org.joda.time.Interval interval65 = property63.toInterval();
        org.joda.time.Interval interval66 = interval65.toInterval();
        long long67 = interval65.toDurationMillis();
        org.joda.time.Interval interval69 = interval65.withStartMillis(10L);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.Chronology chronology76 = localTime73.getChronology();
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((long) (byte) 1, chronology76);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(chronology76);
        org.joda.time.Interval interval79 = interval65.withChronology(chronology76);
        org.joda.time.DateTimeZone dateTimeZone80 = chronology76.getZone();
        boolean boolean81 = dateTimeFieldType55.isSupported(chronology76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter10.withChronology(chronology76);
        org.joda.time.Chronology chronology83 = dateTimeFormatter82.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone84 = chronology83.getZone();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.year();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3L + "'", long33 == 3L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "English (United States)" + "'", str51, "English (United States)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str53, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "10" + "'", str54, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 56 + "'", int56 == 56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 60000L + "'", long67 == 60000L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test12099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12099");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationField durationField20 = chronology6.minutes();
        long long23 = durationField20.subtract(0L, (long) (byte) 1);
        boolean boolean24 = durationField20.isPrecise();
        long long27 = durationField20.add(660100L, 1L);
        long long29 = durationField20.getMillis(53594457L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60000L) + "'", long23 == (-60000L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 720100L + "'", long27 == 720100L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3215667420000L + "'", long29 == 3215667420000L);
    }

    @Test
    public void test12100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12100");
        java.util.Locale locale3 = new java.util.Locale("", "1585867476", "14:54:14.181");
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Property[minuteOfHour]");
        java.lang.String str7 = locale5.getUnicodeLocaleType("CN");
        java.lang.String str8 = locale3.getDisplayCountry(locale5);
        org.junit.Assert.assertEquals(locale3.toString(), "_1585867476_14:54:14.181");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1585867476" + "'", str8, "1585867476");
    }

    @Test
    public void test12101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12101");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.year();
        org.joda.time.DateTimeField dateTimeField18 = chronology5.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology5.monthOfYear();
        org.joda.time.DurationField durationField20 = chronology5.weeks();
        org.joda.time.DateTimeField dateTimeField21 = chronology5.centuryOfEra();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        int int28 = dateTime26.getMonthOfYear();
        int int29 = dateTime26.getHourOfDay();
        org.joda.time.DateTime.Property property30 = dateTime26.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = dateTime26.toString(dateTimeFormatter31);
        org.joda.time.DateTime dateTime34 = dateTime26.plusMinutes(17);
        org.joda.time.DateTime dateTime36 = dateTime26.withWeekyear(5);
        org.joda.time.DateTime dateTime38 = dateTime36.minusYears((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        java.lang.String str41 = dateTimeZone39.getShortName(1645444120478L);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int52 = dateTimeZone50.getOffset((long) (byte) 1);
        long long54 = dateTimeZone48.getMillisKeepLocal(dateTimeZone50, (long) 3);
        org.joda.time.DateTime dateTime55 = dateTime46.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime57 = dateTime46.minus((long) '#');
        org.joda.time.DateTime.Property property58 = dateTime46.weekyear();
        org.joda.time.DateTime dateTime60 = dateTime46.minusWeeks((int) (byte) -1);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.LocalTime localTime66 = dateTime65.toLocalTime();
        int int67 = dateTime65.getMonthOfYear();
        org.joda.time.DateTime dateTime69 = dateTime65.withHourOfDay(2);
        boolean boolean70 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTime46.getZone();
        long long73 = dateTimeZone39.getMillisKeepLocal(dateTimeZone71, (long) (-100800));
        java.lang.String str75 = dateTimeZone71.getName((long) (-1645432682));
        org.joda.time.Chronology chronology76 = chronology5.withZone(dateTimeZone71);
        org.joda.time.DurationField durationField77 = chronology5.minutes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str32, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.010" + "'", str41, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3L + "'", long54 == 3L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-100800L) + "'", long73 == (-100800L));
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test12102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12102");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        java.util.GregorianCalendar gregorianCalendar16 = dateTime4.toGregorianCalendar();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar16);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = gregorianCalendar16.getMaximum(1140);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1140");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test12103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12103");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.getLocalTime();
        java.lang.String str44 = localTime43.toString();
        int[] intArray45 = localTime43.getValues();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.lang.String str49 = dateTimeZone46.getShortName((long) 2922789, locale48);
        org.joda.time.DateTime dateTime50 = localTime43.toDateTimeToday(dateTimeZone46);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = localTime43.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "00:00:00.001" + "'", str44, "00:00:00.001");
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
    }

    @Test
    public void test12104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12104");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("China");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "7200000");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12105");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.Interval interval25 = interval8.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval25.toPeriod(periodType26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = interval25.contains(readableInterval28);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        int int36 = dateTime34.getMonthOfYear();
        int int37 = dateTime34.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int43 = dateTimeZone41.getOffset((long) (byte) 1);
        long long45 = dateTimeZone39.getMillisKeepLocal(dateTimeZone41, (long) 3);
        org.joda.time.DateTime dateTime46 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.Interval interval47 = interval25.withEnd((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        int int56 = localTime50.compareTo((org.joda.time.ReadablePartial) localTime53);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean58 = localTime50.isSupported(dateTimeFieldType57);
        org.joda.time.DateTime.Property property59 = dateTime34.property(dateTimeFieldType57);
        org.joda.time.DateTime dateTime61 = dateTime34.withMillisOfDay(10);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.LocalTime localTime67 = dateTime66.toLocalTime();
        org.joda.time.DateTime.Property property68 = dateTime66.minuteOfHour();
        int int69 = property68.getMinimumValue();
        org.joda.time.DateTime dateTime70 = property68.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property71 = dateTime70.dayOfYear();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime70.minus(readableDuration72);
        org.joda.time.DateTime dateTime75 = dateTime70.withYearOfEra(3);
        org.joda.time.DateTime dateTime77 = dateTime75.minusYears(888);
        boolean boolean78 = dateTime61.isEqual((org.joda.time.ReadableInstant) dateTime77);
        int int79 = dateTime61.getMinuteOfHour();
        org.joda.time.DateTime dateTime81 = dateTime61.withYear(14);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test12106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12106");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("China");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setUnicodeLocaleKeyword("14:54:52.661", "Tue Feb 01 14:47:49 UTC 2022");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 14:54:52.661 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test12107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12107");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1 Jan 1970 00:00:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1 Jan 1970 00:00:00 GMT\" is malformed at \" Jan 1970 00:00:00 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12108");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList6, strMap7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList6, strMap9);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((java.lang.Object) strMap9);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime25.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, readableDuration28);
        org.joda.time.Period period30 = interval29.toPeriod();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = interval29.toPeriod(periodType31);
        org.joda.time.Interval interval33 = interval29.toInterval();
        org.joda.time.Interval interval34 = interval11.overlap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableInterval readableInterval35 = null;
        boolean boolean36 = interval29.isAfter(readableInterval35);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12109");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.yearOfEra();
        long long10 = dateTimeField7.set(3003279000000L, 100);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime16.plusWeeks(0);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        long long25 = dateTimeField22.addWrapField((long) 366, 0);
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str28 = locale27.getCountry();
        java.lang.String str29 = dateTimeField22.getAsShortText(11, locale27);
        java.util.Locale.setDefault(locale27);
        java.lang.String str31 = dateTimeField7.getAsText(86399999, locale27);
        long long33 = dateTimeField7.roundHalfFloor(3779990L);
        long long35 = dateTimeField7.remainder(1645455367078L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59006173800000L) + "'", long10 == (-59006173800000L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 366L + "'", long25 == 366L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CN" + "'", str28, "CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "11" + "'", str29, "11");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "86399999" + "'", str31, "86399999");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 4460167078L + "'", long35 == 4460167078L);
    }

    @Test
    public void test12110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12110");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime21 = dateTime16.withField(dateTimeFieldType19, (int) (byte) 1);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalTime localTime34 = localTime30.plus(readablePeriod33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean36 = localTime34.isSupported(dateTimeFieldType35);
        org.joda.time.DateTime dateTime37 = dateTime27.withFields((org.joda.time.ReadablePartial) localTime34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int43 = dateTimeZone41.getOffset((long) (byte) 1);
        long long45 = dateTimeZone39.getMillisKeepLocal(dateTimeZone41, (long) 3);
        long long48 = dateTimeZone39.convertLocalToUTC((long) 9, false);
        java.lang.String str49 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime50 = localTime34.toDateTimeToday(dateTimeZone39);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(dateTimeZone39);
        int int53 = dateTimeZone39.getOffsetFromLocal((long) 21);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 31, dateTimeZone39);
        org.joda.time.DateTime dateTime55 = dateTime21.withZoneRetainFields(dateTimeZone39);
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(dateTimeZone39);
        org.joda.time.LocalTime localTime58 = localTime56.minusMinutes((int) (byte) 100);
        org.joda.time.LocalTime localTime60 = localTime58.minusMinutes(53748945);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
    }

    @Test
    public void test12111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12111");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime5.withPeriodAdded(readablePeriod6, 17);
        int int9 = localTime5.size();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology17);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears(7);
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        org.joda.time.Chronology chronology30 = chronology20.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField31 = chronology20.halfdays();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromMillisOfDay(121320000L, chronology20);
        org.joda.time.LocalTime.Property property33 = localTime32.hourOfDay();
        org.joda.time.LocalTime localTime35 = localTime32.plusMinutes(0);
        org.joda.time.LocalTime localTime36 = localTime5.withFields((org.joda.time.ReadablePartial) localTime32);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
    }

    @Test
    public void test12112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12112");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.minusSeconds(1);
        int int20 = dateTime16.getMillisOfSecond();
        org.joda.time.DateTime.Property property21 = dateTime16.monthOfYear();
        org.joda.time.DateTime dateTime23 = dateTime16.minusSeconds(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = dateTimeFormatter26.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter26.withDefaultYear(1);
        boolean boolean30 = dateTimeFormatter29.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter29.getParser();
        org.joda.time.Chronology chronology33 = dateTimeFormatter29.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter29.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter35.withPivotYear((int) 'a');
        boolean boolean38 = dateTimeFormatter35.isParser();
        boolean boolean39 = dateTime23.equals((java.lang.Object) boolean38);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNull(dateTimePrinter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test12113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12113");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime5.withPeriodAdded(readablePeriod6, 17);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfCentury((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime25.plus(3003279000000L);
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime25.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime25.withMillis(111539999L);
        org.joda.time.DateTime dateTime35 = dateTime25.plusYears((int) (short) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.secondOfMinute();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        int int43 = dateTime41.getMonthOfYear();
        int int44 = dateTime41.getHourOfDay();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int55 = dateTimeZone53.getOffset((long) (byte) 1);
        long long57 = dateTimeZone51.getMillisKeepLocal(dateTimeZone53, (long) 3);
        org.joda.time.DateTime dateTime58 = dateTime49.withZone(dateTimeZone51);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime58);
        boolean boolean61 = interval59.isBefore((long) 21);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.LocalTime localTime67 = dateTime66.toLocalTime();
        org.joda.time.DateTime.Property property68 = dateTime66.minuteOfHour();
        int int69 = property68.get();
        org.joda.time.Interval interval70 = property68.toInterval();
        org.joda.time.DateTime dateTime71 = interval70.getEnd();
        org.joda.time.Period period72 = interval70.toPeriod();
        org.joda.time.Period period73 = interval70.toPeriod();
        boolean boolean74 = interval59.isBefore((org.joda.time.ReadableInterval) interval70);
        org.joda.time.Period period75 = interval70.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod76 = period75.toMutablePeriod();
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadablePeriod) period75);
        org.joda.time.DateTime dateTime78 = interval77.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime80 = dateTime78.withEra((-1645433070));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1645433070 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3L + "'", long57 == 3L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test12114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12114");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.LocalTime localTime16 = property13.addCopy(366L);
        org.joda.time.LocalTime.Property property17 = localTime16.minuteOfHour();
        org.joda.time.LocalTime localTime19 = localTime16.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Period period30 = interval28.toPeriod();
        org.joda.time.Interval interval31 = interval28.toInterval();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int42 = dateTimeZone40.getOffset((long) (byte) 1);
        long long44 = dateTimeZone38.getMillisKeepLocal(dateTimeZone40, (long) 3);
        org.joda.time.DateTime dateTime45 = dateTime36.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime47 = dateTime36.minus((long) '#');
        org.joda.time.DateTime dateTime49 = dateTime36.minusMinutes(100);
        long long50 = dateTime36.getMillis();
        boolean boolean51 = interval28.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period52 = interval28.toPeriod();
        java.lang.String str53 = period52.toString();
        boolean boolean55 = period52.equals((java.lang.Object) 1646092800000L);
        org.joda.time.LocalTime localTime57 = localTime19.withPeriodAdded((org.joda.time.ReadablePeriod) period52, 32772);
        org.joda.time.LocalTime localTime59 = localTime19.plusHours(0);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645402199990L + "'", long50 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT1M" + "'", str53, "PT1M");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
    }

    @Test
    public void test12115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12115");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(53);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        boolean boolean15 = dateTime12.isEqual((long) 15);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime12.getZone();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.clockhourOfHalfday();
        org.joda.time.DurationField durationField29 = dateTimeField28.getDurationField();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        boolean boolean32 = calendar31.isWeekDateSupported();
        long long33 = calendar31.getTimeInMillis();
        java.util.TimeZone timeZone34 = calendar31.getTimeZone();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("hours");
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.lang.String str38 = dateTimeField28.getAsText(1645454878702L, locale36);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int49 = dateTimeZone47.getOffset((long) (byte) 1);
        long long51 = dateTimeZone45.getMillisKeepLocal(dateTimeZone47, (long) 3);
        org.joda.time.DateTime dateTime52 = dateTime43.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime54 = dateTime43.minus((long) '#');
        org.joda.time.DateTime dateTime56 = dateTime43.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime58 = dateTime43.plus(readablePeriod57);
        org.joda.time.DateTime.Property property59 = dateTime43.millisOfDay();
        org.joda.time.DateTime dateTime60 = property59.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property59.getFieldType();
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str63 = locale62.getVariant();
        java.util.Locale locale64 = java.util.Locale.US;
        java.util.Locale locale68 = new java.util.Locale("", "hi!", "");
        java.lang.String str69 = locale64.getDisplayCountry(locale68);
        java.lang.String str70 = locale64.getISO3Language();
        java.lang.String str71 = locale64.getScript();
        java.lang.String str72 = locale62.getDisplayCountry(locale64);
        java.lang.String str73 = locale62.getISO3Country();
        int int74 = property59.getMaximumTextLength(locale62);
        java.lang.String str75 = locale62.getDisplayVariant();
        int int76 = dateTimeField28.getMaximumShortTextLength(locale62);
        java.lang.String str77 = locale62.getDisplayName();
        java.util.Locale locale81 = new java.util.Locale("", "hi!", "");
        java.lang.String str82 = locale81.getVariant();
        java.lang.String str83 = locale62.getDisplayVariant(locale81);
        java.lang.String str84 = dateTimeZone16.getShortName(9L, locale81);
        java.util.Set<java.lang.String> strSet85 = locale81.getUnicodeLocaleAttributes();
        java.util.Locale locale87 = new java.util.Locale("English");
        java.lang.String str88 = locale87.getLanguage();
        java.lang.String str89 = locale81.getDisplayVariant(locale87);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645455416346,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=56,MILLISECOND=346,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645455416346L + "'", long33 == 1645455416346L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "hours");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645455416346,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=56,MILLISECOND=346,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2" + "'", str38, "2");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3L + "'", long51 == 3L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertEquals(locale68.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "United States" + "'", str69, "United States");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "eng" + "'", str70, "eng");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "China" + "'", str72, "China");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "CHN" + "'", str73, "CHN");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 8 + "'", int74 == 8);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str77, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals(locale81.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00:00.010" + "'", str84, "+00:00:00.010");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertEquals(locale87.toString(), "english");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "english" + "'", str88, "english");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
    }

    @Test
    public void test12116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12116");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.year();
        org.joda.time.DurationField durationField19 = chronology6.months();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(63560213483231L, chronology6);
        org.joda.time.DateTimeField dateTimeField21 = chronology6.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test12117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12117");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationField durationField20 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.monthOfYear();
        long long23 = dateTimeField21.roundHalfFloor(1645402140000L);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str25 = locale24.getVariant();
        int int26 = dateTimeField21.getMaximumShortTextLength(locale24);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale24);
        long long28 = calendar27.getTimeInMillis();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1646092800000L + "'", long23 == 1646092800000L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645455416401,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=56,MILLISECOND=401,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645455416401L + "'", long28 == 1645455416401L);
    }

    @Test
    public void test12118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12118");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime12.minusYears(600000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime12.withMinuteOfHour(464304);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 464304 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test12119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12119");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.lang.String str3 = calendar2.getCalendarType();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        calendar2.clear();
        calendar2.set(28, (int) (short) 10, 0);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        calendar2.set(122, 892, 292278993);
        java.time.Instant instant15 = calendar2.toInstant();
        java.util.Date date16 = calendar2.getTime();
        java.util.Date date20 = new java.util.Date(53613221, 1970, 125);
        int int21 = date16.compareTo(date20);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u82f1\u6587" + "'", str1, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=25196933260800000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=800429,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=11,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 11 00:00:00 UTC 800429");
        org.junit.Assert.assertEquals(date20.toString(), "Tue Jul 03 00:00:00 UTC 53615285");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test12120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12120");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(2000);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:02' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test12121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12121");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.DateTime dateTime2 = dateTime0.minus(readableDuration1);
        org.joda.time.DateTime dateTime4 = dateTime0.minusMillis(15);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test12122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12122");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter5.getParser();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePartial) localTime21, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField24 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField25 = chronology12.seconds();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology12.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter5.withZone(dateTimeZone26);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeFormatter27.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = dateTimeFormatter32.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter32.withDefaultYear(1);
        boolean boolean36 = dateTimeFormatter35.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter35.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter35.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime42 = null;
        boolean boolean43 = dateTimeZone41.isLocalDateTimeGap(localDateTime42);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone41);
        boolean boolean46 = dateTimeZone41.isStandardOffset((long) 59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter35.withZone(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter35.withPivotYear((-1645432682));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter35.withPivotYear((java.lang.Integer) 17);
        boolean boolean52 = dateTimeZone29.equals((java.lang.Object) dateTimeFormatter51);
        org.joda.time.ReadWritableInstant readWritableInstant53 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int56 = dateTimeFormatter51.parseInto(readWritableInstant53, "7", 22383);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNull(dateTimePrinter33);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test12123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12123");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        java.time.Instant instant4 = calendar0.toInstant();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455416479,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=56,MILLISECOND=479,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455416479L + "'", long2 == 1645455416479L);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(instant4);
    }

    @Test
    public void test12124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12124");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap7);
        java.util.Collection<java.util.Locale> localeCollection9 = null;
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, localeCollection9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.parse("days", strMap12);
        java.util.Set<java.lang.String> strSet14 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strSet14);
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet18);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.parse("de");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strMap25);
        java.util.Collection<java.util.Locale> localeCollection27 = null;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, localeCollection27);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter(languageRangeList21, (java.util.Collection<java.util.Locale>) localeList28, filteringMode29);
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList30);
        java.util.Locale.FilteringMode filteringMode32 = null;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList31, filteringMode32);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = localTime37.getChronology();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (byte) 1, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfMonth();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.LocalTime localTime46 = localTime44.plusHours((int) 'u');
        org.joda.time.LocalTime localTime48 = localTime44.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int54 = dateTimeZone52.getOffset((long) (byte) 1);
        long long56 = dateTimeZone50.getMillisKeepLocal(dateTimeZone52, (long) 3);
        long long59 = dateTimeZone50.convertLocalToUTC((long) 9, false);
        java.lang.String str60 = dateTimeZone50.toString();
        org.joda.time.DateTime dateTime61 = localTime48.toDateTimeToday(dateTimeZone50);
        java.util.Locale locale63 = java.util.Locale.US;
        java.util.Locale locale67 = new java.util.Locale("", "hi!", "");
        java.lang.String str68 = locale63.getDisplayCountry(locale67);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(locale63);
        java.util.Locale locale70 = java.util.Locale.ITALY;
        boolean boolean71 = locale70.hasExtensions();
        java.lang.String str72 = locale63.getDisplayCountry(locale70);
        java.lang.String str73 = dateTimeZone50.getShortName((long) 2022, locale63);
        java.lang.String str74 = locale63.getDisplayName();
        java.util.Set<java.lang.String> strSet75 = locale63.getUnicodeLocaleKeys();
        java.lang.String str76 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet75);
        java.util.Set<java.lang.String> strSet77 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.List<java.lang.String> strList78 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet77);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode29.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList30);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3L + "'", long56 == 3L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-1L) + "'", long59 == (-1L));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertEquals(locale67.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "United States" + "'", str68, "United States");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645455416490,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=56,MILLISECOND=490,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Stati Uniti" + "'", str72, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.010" + "'", str73, "+00:00:00.010");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u82f1\u6587\u7f8e\u56fd)" + "'", str74, "\u82f1\u6587\u7f8e\u56fd)");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strList78);
    }

    @Test
    public void test12125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12125");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        boolean boolean48 = dateTimeFieldType39.isSupported(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.centuryOfEra();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(chronology46);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.Interval interval53 = interval8.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField54 = chronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = chronology46.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField55.getType();
        org.joda.time.DurationField durationField57 = dateTimeField55.getRangeDurationField();
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale58);
        int int60 = dateTimeField55.getMaximumTextLength(locale58);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.Chronology chronology69 = localTime66.getChronology();
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) (byte) 1, chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.dayOfMonth();
        org.joda.time.Chronology chronology73 = chronology69.withUTC();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.year();
        boolean boolean75 = durationFieldType62.isSupported(chronology73);
        org.joda.time.DateTimeField dateTimeField76 = chronology73.dayOfYear();
        org.joda.time.DurationField durationField77 = chronology73.weeks();
        org.joda.time.LocalTime localTime78 = org.joda.time.LocalTime.fromMillisOfDay(1645454879931L, chronology73);
        int[] intArray80 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray82 = dateTimeField55.add((org.joda.time.ReadablePartial) localTime78, 119, intArray80, 27424235);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(localTime78);
    }

    @Test
    public void test12126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12126");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(292278993);
        boolean boolean2 = dateTimeZone1.isFixed();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test12127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12127");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        int int9 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.LocalTime.Property property10 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime12 = property10.addCopy(6);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        int int20 = property19.get();
        org.joda.time.Interval interval21 = property19.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        long long23 = interval21.toDurationMillis();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = interval21.toPeriod(periodType24);
        org.joda.time.LocalTime localTime27 = localTime12.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 8);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.DateTime dateTime38 = property34.addToCopy(9);
        org.joda.time.DateTime dateTime39 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = localTime0.isAfter((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = localTime44.getChronology();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (byte) 1, chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfMonth();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology47);
        org.joda.time.LocalTime localTime53 = localTime51.plusHours((int) 'u');
        org.joda.time.LocalTime localTime55 = localTime51.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int61 = dateTimeZone59.getOffset((long) (byte) 1);
        long long63 = dateTimeZone57.getMillisKeepLocal(dateTimeZone59, (long) 3);
        long long66 = dateTimeZone57.convertLocalToUTC((long) 9, false);
        java.lang.String str67 = dateTimeZone57.toString();
        org.joda.time.DateTime dateTime68 = localTime55.toDateTimeToday(dateTimeZone57);
        org.joda.time.DateTime dateTime69 = localTime12.toDateTimeToday(dateTimeZone57);
        org.joda.time.DateTime.Property property70 = dateTime69.minuteOfDay();
        int int71 = property70.get();
        int int72 = property70.getMinimumValueOverall();
        int int73 = property70.getMaximumValueOverall();
        int int74 = property70.get();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 60000L + "'", long23 == 60000L);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3L + "'", long63 == 3L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-1L) + "'", long66 == (-1L));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.010" + "'", str67, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 370 + "'", int71 == 370);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1439 + "'", int73 == 1439);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 370 + "'", int74 == 370);
    }

    @Test
    public void test12128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12128");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime14.toDateTimeToday(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.minusHours((int) 'a');
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale39.getDisplayName(locale41);
        java.lang.String str43 = property38.getAsText(locale39);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property38.getFieldType();
        int int45 = dateTime31.get(dateTimeFieldType44);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.get();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.joda.time.Interval interval55 = interval54.toInterval();
        long long56 = interval54.toDurationMillis();
        org.joda.time.Interval interval58 = interval54.withStartMillis(10L);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.Chronology chronology65 = localTime62.getChronology();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) (byte) 1, chronology65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology65);
        org.joda.time.Interval interval68 = interval54.withChronology(chronology65);
        org.joda.time.DateTimeZone dateTimeZone69 = chronology65.getZone();
        boolean boolean70 = dateTimeFieldType44.isSupported(chronology65);
        org.joda.time.DateTimeField dateTimeField71 = chronology65.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = chronology65.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = dateTimeField72.getType();
        int int75 = dateTimeField72.getMinimumValue(0L);
        long long77 = dateTimeField72.roundHalfCeiling((-8207999990L));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "anglais (Etats-Unis)" + "'", str40, "anglais (Etats-Unis)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str42, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "10" + "'", str43, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 56 + "'", int45 == 56);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 60000L + "'", long56 == 60000L);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-8208000000L) + "'", long77 == (-8208000000L));
    }

    @Test
    public void test12129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12129");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Interval interval22 = interval8.withChronology(chronology19);
        long long23 = interval22.getStartMillis();
        boolean boolean25 = interval22.isAfter(53379962L);
        org.joda.time.MutableInterval mutableInterval26 = interval22.toMutableInterval();
        org.joda.time.Period period27 = mutableInterval26.toPeriod();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645402199990L + "'", long23 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test12130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12130");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay((int) (short) 10, (int) '4', 99, 35);
        java.util.Calendar.Builder builder18 = builder15.set(9, 35);
        java.util.Calendar.Builder builder21 = builder15.set(4, 2922789);
        java.util.Locale locale23 = new java.util.Locale("+00:00:00.010");
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfMonth();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now(chronology30);
        org.joda.time.LocalTime localTime36 = localTime34.plusHours((int) 'u');
        org.joda.time.LocalTime.Property property37 = localTime34.minuteOfHour();
        java.util.Locale locale38 = java.util.Locale.US;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.lang.String str40 = property37.getAsText(locale38);
        java.lang.String str41 = locale23.getDisplayVariant(locale38);
        java.util.Calendar.Builder builder42 = builder21.setLocale(locale23);
        java.util.Calendar.Builder builder47 = builder42.setTimeOfDay(22200000, 365, (-1645455016), 31);
        java.util.Calendar.Builder builder51 = builder47.setDate((-10647), 0, 27419008);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals(locale23.toString(), "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "anglais" + "'", str39, "anglais");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "56" + "'", str40, "56");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test12131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12131");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology6.minuteOfHour();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology6);
        org.joda.time.LocalTime localTime22 = localTime20.minusMillis(318367);
        java.lang.String str23 = localTime20.toString();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int34 = dateTimeZone32.getOffset((long) (byte) 1);
        long long36 = dateTimeZone30.getMillisKeepLocal(dateTimeZone32, (long) 3);
        org.joda.time.DateTime dateTime37 = dateTime28.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime39 = dateTime28.minus((long) '#');
        org.joda.time.DateTime.Property property40 = dateTime28.weekyear();
        org.joda.time.DateTime dateTime42 = dateTime28.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime43 = dateTime28.toDateTime();
        org.joda.time.DateTime dateTime45 = dateTime28.withWeekyear(15);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = localTime49.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) (byte) 1, chronology52);
        org.joda.time.DateTime dateTime54 = localTime53.toDateTimeToday();
        org.joda.time.LocalTime localTime56 = localTime53.minusMinutes(1);
        org.joda.time.LocalTime.Property property57 = localTime53.millisOfDay();
        int int58 = localTime53.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean60 = localTime53.isSupported(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getDurationType();
        org.joda.time.DateTime.Property property62 = dateTime28.property(dateTimeFieldType59);
        boolean boolean63 = localTime20.equals((java.lang.Object) property62);
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime66 = property62.setCopy("", locale65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "00:00:00.000" + "'", str23, "00:00:00.000");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test12132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12132");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.getLocalTime();
        org.joda.time.LocalTime localTime45 = property42.addCopy((long) 86399999);
        org.joda.time.LocalTime localTime46 = property42.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField47 = property42.getLeapDurationField();
        org.joda.time.Interval interval48 = property42.toInterval();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        int int57 = localTime51.compareTo((org.joda.time.ReadablePartial) localTime54);
        org.joda.time.LocalTime.Property property58 = localTime51.hourOfDay();
        org.joda.time.LocalTime localTime60 = property58.addCopy(6);
        org.joda.time.LocalTime localTime61 = property58.roundCeilingCopy();
        java.util.Locale locale63 = java.util.Locale.US;
        java.lang.String str64 = locale63.getDisplayName();
        org.joda.time.LocalTime localTime65 = property58.setCopy("0", locale63);
        org.joda.time.LocalTime localTime67 = property58.addCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime68 = property58.roundHalfCeilingCopy();
        org.joda.time.Interval interval69 = property58.toInterval();
        boolean boolean71 = interval69.isBefore((long) (byte) 1);
        org.joda.time.Interval interval73 = interval69.withStartMillis(0L);
        boolean boolean74 = interval48.isAfter((org.joda.time.ReadableInterval) interval69);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "anglais (Etats-Unis)" + "'", str64, "anglais (Etats-Unis)");
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test12133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12133");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime5 = null;
        boolean boolean6 = dateTimeZone4.isLocalDateTimeGap(localDateTime5);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = localTime7.toString(dateTimeFormatter8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType0.getField(chronology10);
        int int14 = dateTimeField13.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "year" + "'", str1, "year");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00:00:00.010" + "'", str9, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
    }

    @Test
    public void test12134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12134");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        boolean boolean10 = dateTime8.isAfterNow();
        org.joda.time.DateTime dateTime12 = dateTime8.plusDays((-36000));
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        int int21 = localTime15.compareTo((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.LocalTime localTime25 = localTime15.withFieldAdded(durationFieldType23, 7);
        org.joda.time.DateTime dateTime27 = dateTime8.withFieldAdded(durationFieldType23, 15);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test12135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12135");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime10 = property6.addToCopy(25200000L);
        java.lang.String str11 = property6.getAsText();
        org.joda.time.DateTime dateTime13 = property6.addToCopy(32770);
        int int14 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime15 = property6.roundCeilingCopy();
        org.joda.time.DateTime dateTime16 = property6.getDateTime();
        org.joda.time.DateTime.Property property17 = dateTime16.era();
        org.joda.time.DateTime dateTime19 = dateTime16.plus(0L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[minuteOfHour]" + "'", str7, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test12136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12136");
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        org.joda.time.DateTime.Property property13 = dateTime11.minuteOfHour();
        int int14 = property13.getMinimumValue();
        org.joda.time.DateTime dateTime15 = property13.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime(dateTimeZone17);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 1, dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(87, 457070, 119, 1970, (-1645433109), (int) (byte) -1, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test12137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12137");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.plus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.minusMillis((int) (byte) 100);
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(0);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        int int17 = dateTime15.getMonthOfYear();
        int int18 = dateTime15.getHourOfDay();
        org.joda.time.DateTime.Property property19 = dateTime15.dayOfMonth();
        org.joda.time.DateTime.Property property20 = dateTime15.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int25 = dateTimeZone23.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(0L, dateTimeZone23);
        org.joda.time.DateTime.Property property27 = dateTime26.secondOfMinute();
        long long28 = property20.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = property20.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.joda.time.DurationField durationField31 = property30.getLeapDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property30.getFieldType();
        boolean boolean33 = localTime10.isSupported(dateTimeFieldType32);
        java.lang.String str34 = localTime10.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 19044L + "'", long28 == 19044L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "00:09:59.900" + "'", str34, "00:09:59.900");
    }

    @Test
    public void test12138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12138");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField31 = chronology5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology5.weekyearOfCentury();
        org.joda.time.DurationField durationField33 = chronology5.seconds();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test12139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12139");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\uc624\ud6c4 1:11:00", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1970.1.1????1:11:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12140");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(164881787717000L);
    }

    @Test
    public void test12141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12141");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar16 = dateTime13.toGregorianCalendar();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar16);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localTime17.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
    }

    @Test
    public void test12142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12142");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        int int8 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((int) (short) 1);
        boolean boolean11 = dateTimeFormatter10.isParser();
        int int12 = dateTimeFormatter10.getDefaultYear();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.hourOfHalfday();
        long long25 = dateTimeField22.add((long) 'u', 7);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 1, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfMonth();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.LocalTime localTime38 = localTime36.plusHours((int) 'u');
        int int39 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.weekyears();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = localTime51.getChronology();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) (byte) 1, chronology54);
        int[] intArray57 = chronology46.get((org.joda.time.ReadablePartial) localTime55, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField58 = chronology46.dayOfYear();
        org.joda.time.DurationField durationField59 = durationFieldType40.getField(chronology46);
        org.joda.time.DurationFieldType durationFieldType60 = durationField59.getType();
        org.joda.time.LocalTime localTime62 = localTime36.withFieldAdded(durationFieldType60, 4);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        int int71 = localTime65.compareTo((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.LocalTime.Property property72 = localTime65.hourOfDay();
        org.joda.time.LocalTime localTime74 = property72.addCopy(6);
        int int75 = localTime74.getSecondOfMinute();
        org.joda.time.LocalTime.Property property76 = localTime74.secondOfMinute();
        org.joda.time.LocalTime localTime77 = property76.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime78 = localTime62.withFields((org.joda.time.ReadablePartial) localTime77);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = null;
        boolean boolean80 = localTime62.isSupported(dateTimeFieldType79);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int85 = dateTimeZone83.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime(0L, dateTimeZone83);
        java.util.TimeZone timeZone87 = dateTimeZone83.toTimeZone();
        java.util.Locale locale89 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str90 = locale89.getCountry();
        java.lang.String str91 = dateTimeZone83.getShortName(0L, locale89);
        org.joda.time.LocalTime localTime92 = new org.joda.time.LocalTime(dateTimeZone83);
        boolean boolean93 = localTime62.equals((java.lang.Object) dateTimeZone83);
        org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime(dateTimeZone83);
        org.joda.time.LocalTime localTime95 = new org.joda.time.LocalTime(53322503L, dateTimeZone83);
        org.joda.time.LocalDateTime localDateTime96 = null;
        boolean boolean97 = dateTimeZone83.isLocalDateTimeGap(localDateTime96);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter98 = dateTimeFormatter10.withZone(dateTimeZone83);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 25200117L + "'", long25 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(timeZone87);
        org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "CN" + "'", str90, "CN");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "+00:00:00.010" + "'", str91, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter98);
    }

    @Test
    public void test12143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12143");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime4.toDateTimeISO();
        boolean boolean11 = dateTime4.isAfter(1L);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property13 = dateTime4.property(dateTimeFieldType12);
        java.lang.String str14 = dateTimeFieldType12.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "year" + "'", str14, "year");
    }

    @Test
    public void test12144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12144");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        boolean boolean6 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(15706);
        org.joda.time.Chronology chronology9 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology10 = dateTimeFormatter2.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = dateTimeFormatter2.parseLocalDate("2 Mar 3870 10:09:01 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNull(chronology10);
    }

    @Test
    public void test12145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12145");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval31.isAfter((long) 2);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        int int41 = property40.get();
        org.joda.time.Interval interval42 = property40.toInterval();
        org.joda.time.DateTime dateTime43 = interval42.getEnd();
        org.joda.time.Period period44 = interval42.toPeriod();
        java.lang.String str45 = interval42.toString();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.get();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.joda.time.Interval interval55 = interval54.toInterval();
        long long56 = interval54.toDurationMillis();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval54.toPeriod(periodType57);
        org.joda.time.Interval interval59 = interval42.overlap((org.joda.time.ReadableInterval) interval54);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = interval59.toPeriod(periodType60);
        org.joda.time.Interval interval62 = interval31.withPeriodAfterStart((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((java.lang.Object) interval31);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        boolean boolean66 = interval63.contains(0L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str45, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 60000L + "'", long56 == 60000L);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test12146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12146");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.DurationField durationField20 = chronology6.seconds();
        org.joda.time.DurationField durationField21 = chronology6.halfdays();
        org.joda.time.DurationField durationField22 = chronology6.hours();
        long long25 = durationField22.add(23640942585L, 53328L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 215621742585L + "'", long25 == 215621742585L);
    }

    @Test
    public void test12147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12147");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTime dateTime9 = property6.setCopy((int) (byte) 1);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test12148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12148");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.weekyears();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) (byte) 1, chronology45);
        int[] intArray48 = chronology37.get((org.joda.time.ReadablePartial) localTime46, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField49 = chronology37.dayOfYear();
        org.joda.time.DurationField durationField50 = durationFieldType31.getField(chronology37);
        int int51 = period28.get(durationFieldType31);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        org.joda.time.LocalTime localTime57 = dateTime56.toLocalTime();
        int int58 = dateTime56.getMonthOfYear();
        org.joda.time.DateTime.Property property59 = dateTime56.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime56.minus((long) (short) 10);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period28, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime.Property property63 = dateTime61.millisOfDay();
        int int64 = dateTime61.getMinuteOfHour();
        org.joda.time.DateTime dateTime65 = dateTime61.toDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test12149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12149");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        int int8 = dateTime6.getMonthOfYear();
        int int9 = dateTime6.getHourOfDay();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        org.joda.time.DateTime dateTime23 = dateTime14.withZone(dateTimeZone16);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 1, chronology38);
        int[] intArray41 = chronology30.get((org.joda.time.ReadablePartial) localTime39, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField42 = chronology30.dayOfYear();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.LocalTime localTime48 = dateTime47.toLocalTime();
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfHour();
        int int50 = property49.get();
        org.joda.time.Interval interval51 = property49.toInterval();
        org.joda.time.DateTime dateTime52 = interval51.getEnd();
        org.joda.time.Period period53 = interval51.toPeriod();
        int[] intArray55 = chronology30.get((org.joda.time.ReadablePeriod) period53, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.Chronology chronology62 = localTime59.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.weekyears();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        org.joda.time.Chronology chronology70 = localTime67.getChronology();
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((long) (byte) 1, chronology70);
        int[] intArray73 = chronology62.get((org.joda.time.ReadablePartial) localTime71, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField74 = chronology62.dayOfYear();
        org.joda.time.DurationField durationField75 = durationFieldType56.getField(chronology62);
        int int76 = period53.get(durationFieldType56);
        org.joda.time.DateTime dateTime77 = dateTime23.plus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Chronology chronology78 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.dayOfWeek();
        boolean boolean80 = durationFieldType0.isSupported(chronology78);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "hours" + "'", str1, "hours");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test12150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12150");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime8.plus(readablePeriod11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = localTime12.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        long long26 = dateTimeZone17.convertLocalToUTC((long) 9, false);
        java.lang.String str27 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime28 = localTime12.toDateTimeToday(dateTimeZone17);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone17);
        int int31 = dateTimeZone17.getOffsetFromLocal((long) 21);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 31, dateTimeZone17);
        java.lang.String str34 = dateTimeZone17.getNameKey(1645402200000L);
        java.lang.String str35 = dateTimeZone17.getID();
        long long38 = dateTimeZone17.convertLocalToUTC(10740000L, true);
        long long42 = dateTimeZone17.convertLocalToUTC(25199990L, false, 1645455040615L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 10739990L + "'", long38 == 10739990L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 25199980L + "'", long42 == 25199980L);
    }

    @Test
    public void test12151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12151");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.joda.time.DurationField durationField13 = dateTimeField12.getRangeDurationField();
        int int16 = dateTimeField12.getDifference((long) 15, 3003279000000L);
        boolean boolean17 = dateTimeField12.isLenient();
        boolean boolean18 = dateTimeField12.isLenient();
        int int20 = dateTimeField12.get(53370750L);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        int int29 = dateTime27.getMonthOfYear();
        org.joda.time.DateTime dateTime31 = dateTime27.withHourOfDay(2);
        org.joda.time.DateTime dateTime34 = dateTime31.withDurationAdded(53283791L, 600);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.lang.String str38 = locale36.getISO3Country();
        java.lang.String str39 = dateTime31.toString("06:10:00.000", locale36);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = dateTimeField12.set(1645454906986L, "", locale36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-95) + "'", int16 == (-95));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "anglais" + "'", str37, "anglais");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "06:10:00.000" + "'", str39, "06:10:00.000");
    }

    @Test
    public void test12152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12152");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime4.toGregorianCalendar();
        gregorianCalendar7.set(13, 2, 19, 122, 366);
        int int14 = gregorianCalendar7.getWeeksInWeekYear();
        boolean boolean15 = gregorianCalendar7.isWeekDateSupported();
        gregorianCalendar7.setMinimalDaysInFirstWeek(27);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = gregorianCalendar7.get(888);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 888");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test12153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12153");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.minutes();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        long long10 = durationField7.getMillis((-38088L), 660010000L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1201940812800000L) + "'", long10 == (-1201940812800000L));
    }

    @Test
    public void test12154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12154");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        int int21 = dateTime19.getMonthOfYear();
        int int22 = dateTime19.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int28 = dateTimeZone26.getOffset((long) (byte) 1);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone26, (long) 3);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = localTime14.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime.Property property33 = dateTime32.weekOfWeekyear();
        org.joda.time.DateTime dateTime35 = property33.addWrapFieldToCopy(17);
        int int36 = dateTime35.getHourOfDay();
        org.joda.time.DateTime.Property property37 = dateTime35.hourOfDay();
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfMonth();
        org.joda.time.DurationField durationField40 = chronology38.centuries();
        long long43 = durationField40.getMillis(48, 1645454898487L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 151473369600000L + "'", long43 == 151473369600000L);
    }

    @Test
    public void test12155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12155");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime4.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime4.withDayOfMonth(17);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfDay();
        org.joda.time.DateTime.Property property22 = dateTime20.weekyear();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        int int29 = dateTime27.getMonthOfYear();
        int int30 = dateTime27.getHourOfDay();
        org.joda.time.DateTime.Property property31 = dateTime27.dayOfMonth();
        org.joda.time.DateTime dateTime32 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        int int39 = dateTime37.getMonthOfYear();
        int int40 = dateTime37.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int46 = dateTimeZone44.getOffset((long) (byte) 1);
        long long48 = dateTimeZone42.getMillisKeepLocal(dateTimeZone44, (long) 3);
        org.joda.time.DateTime dateTime49 = dateTime37.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfCentury((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime54 = dateTime49.withField(dateTimeFieldType52, (int) (byte) 1);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        org.joda.time.DateTime.Property property61 = dateTime59.minuteOfHour();
        int int62 = property61.get();
        org.joda.time.Interval interval63 = property61.toInterval();
        org.joda.time.Interval interval64 = interval63.toInterval();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localTime67.toDateTime(readableInstant68);
        org.joda.time.LocalTime localTime70 = dateTime69.toLocalTime();
        org.joda.time.DateTime.Property property71 = dateTime69.minuteOfHour();
        int int72 = property71.getMinimumValue();
        org.joda.time.DateTime dateTime73 = property71.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime76 = null;
        boolean boolean77 = dateTimeZone75.isLocalDateTimeGap(localDateTime76);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime(dateTimeZone75);
        org.joda.time.DateTime dateTime79 = dateTime73.withZoneRetainFields(dateTimeZone75);
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((java.lang.Object) dateTime79);
        org.joda.time.Interval interval81 = interval64.withEnd((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.Duration duration82 = interval64.toDuration();
        org.joda.time.Interval interval83 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration82);
        org.joda.time.DateTime dateTime85 = dateTime32.withDurationAdded((org.joda.time.ReadableDuration) duration82, (int) (byte) -1);
        org.joda.time.DateTime dateTime86 = dateTime20.minus((org.joda.time.ReadableDuration) duration82);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType87.getDurationType();
        boolean boolean89 = dateTime20.isSupported(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3L + "'", long48 == 3L);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test12156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12156");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology7);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = localTime20.toDateTimeToday();
        org.joda.time.LocalTime localTime23 = localTime20.minusMinutes(1);
        org.joda.time.LocalTime.Property property24 = localTime20.millisOfDay();
        org.joda.time.LocalTime localTime25 = localTime12.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.LocalTime.Property property26 = localTime20.hourOfDay();
        int int27 = property26.getLeapAmount();
        int int28 = property26.getMaximumValueOverall();
        org.joda.time.LocalTime localTime29 = property26.getLocalTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 23 + "'", int28 == 23);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test12157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12157");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeParser dateTimeParser6 = dateTimeFormatter5.getParser();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePartial) localTime21, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField24 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField25 = chronology12.seconds();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology12.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter5.withZone(dateTimeZone26);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter29.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatter29.getParser();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter29.getParser();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(dateTimeParser6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNull(dateTimeZone30);
        org.junit.Assert.assertNull(dateTimeParser31);
        org.junit.Assert.assertNull(dateTimeParser32);
    }

    @Test
    public void test12158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12158");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology7);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = localTime20.toDateTimeToday();
        org.joda.time.LocalTime localTime23 = localTime20.minusMinutes(1);
        org.joda.time.LocalTime.Property property24 = localTime20.millisOfDay();
        org.joda.time.LocalTime localTime25 = localTime12.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.LocalTime.Property property26 = localTime20.hourOfDay();
        int int27 = property26.getLeapAmount();
        org.joda.time.LocalTime localTime29 = property26.setCopy(19);
        org.joda.time.LocalTime localTime30 = property26.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localTime30.getValue(1439);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1439");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test12159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12159");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("21 Feb 2022 14:48:53 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"21 Feb 2022 14:48:53 GMT\" is malformed at \" Feb 2022 14:48:53 GMT\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12160");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        long long10 = interval8.toDurationMillis();
        boolean boolean11 = interval8.isBeforeNow();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalTime localTime32 = localTime28.plus(readablePeriod31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean34 = localTime32.isSupported(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = dateTime25.withFields((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int41 = dateTimeZone39.getOffset((long) (byte) 1);
        long long43 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, (long) 3);
        long long46 = dateTimeZone37.convertLocalToUTC((long) 9, false);
        java.lang.String str47 = dateTimeZone37.toString();
        org.joda.time.DateTime dateTime48 = localTime32.toDateTimeToday(dateTimeZone37);
        long long49 = dateTime48.getMillis();
        boolean boolean50 = interval20.equals((java.lang.Object) long49);
        boolean boolean51 = interval20.isAfterNow();
        boolean boolean52 = interval8.isAfter((org.joda.time.ReadableInterval) interval20);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        org.joda.time.DateTime.Property property61 = dateTime59.minuteOfHour();
        org.joda.time.DateTime dateTime63 = dateTime59.plusWeeks(0);
        org.joda.time.Chronology chronology64 = dateTime59.getChronology();
        org.joda.time.Interval interval65 = new org.joda.time.Interval(1L, (long) 15, chronology64);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        org.joda.time.LocalTime localTime71 = dateTime70.toLocalTime();
        org.joda.time.DateTime.Property property72 = dateTime70.minuteOfHour();
        int int73 = property72.get();
        org.joda.time.Interval interval74 = property72.toInterval();
        org.joda.time.DateTime dateTime75 = interval74.getEnd();
        org.joda.time.Period period76 = interval74.toPeriod();
        boolean boolean78 = interval74.isAfter(0L);
        boolean boolean80 = interval74.isBefore((-98727291751800000L));
        boolean boolean81 = interval65.isBefore((org.joda.time.ReadableInterval) interval74);
        boolean boolean82 = interval20.overlaps((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutableInterval mutableInterval83 = interval65.toMutableInterval();
        java.lang.String str84 = interval65.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.010" + "'", str47, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645402199990L + "'", long49 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(mutableInterval83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.025+00:00:00.010" + "'", str84, "1970-01-01T00:00:00.011+00:00:00.010/1970-01-01T00:00:00.025+00:00:00.010");
    }

    @Test
    public void test12161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12161");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime4.toGregorianCalendar();
        int int9 = gregorianCalendar7.getActualMaximum(0);
        java.util.Date date10 = gregorianCalendar7.getTime();
        gregorianCalendar7.setWeekDate(889, 292278993, 2);
        java.util.Locale locale15 = java.util.Locale.US;
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.lang.String str20 = locale15.getDisplayCountry(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale15);
        java.util.Date date22 = calendar21.getTime();
        int int23 = date22.getDay();
        date22.setDate(86399999);
        date22.setMinutes((int) ' ');
        gregorianCalendar7.setTime(date22);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar7.roll(9722, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(date10);
        org.junit.Assert.assertEquals(date10.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "United States" + "'", str20, "United States");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645455417437,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=57,MILLISECOND=437,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Mon Mar 31 14:32:57 UTC 238577");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test12162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12162");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.getLocalTime();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime48.plusWeeks(0);
        int int53 = dateTime52.getYearOfEra();
        org.joda.time.DateTime.Property property54 = dateTime52.year();
        int int55 = dateTime52.getYearOfCentury();
        int int56 = property42.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalTime localTime57 = property42.roundCeilingCopy();
        org.joda.time.LocalTime localTime58 = property42.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
    }

    @Test
    public void test12163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12163");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        long long10 = dateTimeField8.roundFloor((long) 1);
        int int13 = dateTimeField8.getDifference(0L, (-60000L));
        org.joda.time.DurationField durationField14 = dateTimeField8.getLeapDurationField();
        int int15 = dateTimeField8.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test12164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12164");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        long long9 = dateTimeZone1.previousTransition(0L);
        java.lang.String str11 = dateTimeZone1.getNameKey(720100L);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime14 = localTime12.minusHours(1439);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long24 = dateTimeZone16.previousTransition(0L);
        org.joda.time.DateTime dateTime25 = localTime14.toDateTimeToday(dateTimeZone16);
        long long27 = dateTimeZone1.getMillisKeepLocal(dateTimeZone16, 0L);
        long long30 = dateTimeZone16.adjustOffset(53772393L, false);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 53772393L + "'", long30 == 53772393L);
    }

    @Test
    public void test12165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12165");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isOffsetParsed();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.LocalTime localTime13 = dateTime12.toLocalTime();
        int int14 = dateTime12.getMonthOfYear();
        int int15 = dateTime12.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        org.joda.time.DateTime dateTime24 = dateTime12.toDateTime(dateTimeZone17);
        org.joda.time.DateTime dateTime26 = dateTime12.plusHours(1970);
        org.joda.time.DateTime dateTime28 = dateTime26.minusYears((int) (byte) 0);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime36.plus(readablePeriod39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean42 = localTime40.isSupported(dateTimeFieldType41);
        org.joda.time.DateTime dateTime43 = dateTime33.withFields((org.joda.time.ReadablePartial) localTime40);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int49 = dateTimeZone47.getOffset((long) (byte) 1);
        long long51 = dateTimeZone45.getMillisKeepLocal(dateTimeZone47, (long) 3);
        long long54 = dateTimeZone45.convertLocalToUTC((long) 9, false);
        java.lang.String str55 = dateTimeZone45.toString();
        org.joda.time.DateTime dateTime56 = localTime40.toDateTimeToday(dateTimeZone45);
        java.util.Locale locale58 = null;
        java.lang.String str59 = dateTimeZone45.getShortName((long) 100, locale58);
        boolean boolean61 = dateTimeZone45.isStandardOffset(1645454876554L);
        org.joda.time.DateTime dateTime62 = dateTime28.withZoneRetainFields(dateTimeZone45);
        int int64 = dateTimeZone45.getStandardOffset(2863424L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter6.withZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.lang.String str69 = dateTimeZone66.getShortName((long) 2922789, locale68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter6.withLocale(locale68);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3L + "'", long51 == 3L);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-1L) + "'", long54 == (-1L));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00:00.010" + "'", str69, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
    }

    @Test
    public void test12166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12166");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        boolean boolean3 = localTime1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property4.addCopy(1645455009493L);
        java.util.Locale locale8 = new java.util.Locale("hourOfDay");
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.lang.String str10 = property4.getAsShortText(locale8);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals(locale8.toString(), "hourofday");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hourofday" + "'", str9, "hourofday");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
    }

    @Test
    public void test12167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12167");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime4.toGregorianCalendar();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.yearOfEra();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfMonth();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology22);
        org.joda.time.LocalTime localTime28 = localTime26.plusHours((int) 'u');
        long long30 = chronology13.set((org.joda.time.ReadablePartial) localTime26, 0L);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        org.joda.time.DateTime.Property property37 = dateTime35.minuteOfHour();
        int int38 = property37.get();
        org.joda.time.Interval interval39 = property37.toInterval();
        org.joda.time.Period period40 = interval39.toPeriod();
        int[] intArray43 = chronology13.get((org.joda.time.ReadablePeriod) period40, (-2208988800000L), 473354280000L);
        org.joda.time.Period period44 = period40.toPeriod();
        org.joda.time.DateTime dateTime45 = dateTime4.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime47 = dateTime45.withMillis(7171200000L);
        org.joda.time.DateTime.Property property48 = dateTime45.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 53817673L + "'", long30 == 53817673L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[84, 11, 4, 2, 15, 18, 0, 0]");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test12168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12168");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(53629505L);
    }

    @Test
    public void test12169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12169");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime4.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime4.withDayOfMonth(17);
        boolean boolean22 = dateTime20.isEqual(1645455329754L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test12170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12170");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfHalfday();
        int int11 = dateTimeField10.getMaximumValue();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        int int20 = localTime14.compareTo((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.LocalTime.Property property21 = localTime14.hourOfDay();
        org.joda.time.LocalTime localTime23 = property21.addCopy(6);
        int int24 = localTime23.getMillisOfSecond();
        java.util.Locale locale26 = new java.util.Locale("hours");
        java.lang.String str27 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localTime23, locale26);
        org.joda.time.LocalTime localTime29 = localTime23.withMillisOfDay(0);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        int int38 = localTime32.compareTo((org.joda.time.ReadablePartial) localTime35);
        org.joda.time.LocalTime.Property property39 = localTime32.hourOfDay();
        org.joda.time.LocalTime localTime41 = property39.addCopy(6);
        org.joda.time.LocalTime localTime42 = property39.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime43 = property39.roundCeilingCopy();
        org.joda.time.LocalTime localTime45 = property39.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime46 = property39.withMaximumValue();
        org.joda.time.LocalTime localTime48 = property39.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime49 = property39.roundFloorCopy();
        org.joda.time.LocalTime localTime51 = localTime49.plusHours(0);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        org.joda.time.LocalTime localTime57 = dateTime56.toLocalTime();
        org.joda.time.DateTime.Property property58 = dateTime56.minuteOfHour();
        int int59 = property58.get();
        org.joda.time.Interval interval60 = property58.toInterval();
        org.joda.time.Interval interval61 = interval60.toInterval();
        long long62 = interval60.toDurationMillis();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = interval60.toPeriod(periodType63);
        java.lang.String str65 = period64.toString();
        int int66 = period64.size();
        org.joda.time.LocalTime localTime68 = localTime51.withPeriodAdded((org.joda.time.ReadablePeriod) period64, (-27423369));
        org.joda.time.LocalTime localTime69 = localTime23.minus((org.joda.time.ReadablePeriod) period64);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertEquals(locale26.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "6" + "'", str27, "6");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 60000L + "'", long62 == 60000L);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PT1M" + "'", str65, "PT1M");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
    }

    @Test
    public void test12171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12171");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.LocalTime localTime26 = localTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localTime11.getFieldTypes();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        java.lang.String str35 = property34.toString();
        org.joda.time.DateTime dateTime36 = property34.roundFloorCopy();
        org.joda.time.DateTime dateTime38 = property34.addToCopy((long) 366);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusYears(7);
        org.joda.time.DateTime dateTime47 = dateTime43.plusWeeks((int) (short) 10);
        int int48 = property34.getDifference((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, readableDuration49);
        org.joda.time.DateTime dateTime51 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime53 = dateTime51.minusDays((int) (short) 100);
        int int54 = dateTime53.getHourOfDay();
        org.joda.time.DateTime.Property property55 = dateTime53.year();
        org.joda.time.DateTime dateTime56 = property55.withMinimumValue();
        org.joda.time.DateTime dateTime58 = property55.setCopy(119);
        org.joda.time.DateTime dateTime60 = property55.setCopy(45);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Property[minuteOfHour]" + "'", str35, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-100800) + "'", int48 == (-100800));
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 6 + "'", int54 == 6);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test12172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12172");
        java.util.Date date3 = new java.util.Date(59, 52, 2070);
        java.util.Date date9 = new java.util.Date(53, 1, 2922789, (-292275054), 370);
        date9.setHours(24);
        date9.setTime(53467424L);
        boolean boolean14 = date3.before(date9);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Dec 29 00:00:00 UTC 1968");
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 14:51:07 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test12173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12173");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTime dateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone27.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = dateTime25.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.LocalTime localTime38 = dateTime37.toLocalTime();
        org.joda.time.DateTime.Property property39 = dateTime37.minuteOfHour();
        int int40 = property39.get();
        org.joda.time.Interval interval41 = property39.toInterval();
        org.joda.time.Interval interval42 = interval41.toInterval();
        long long43 = interval41.toDurationMillis();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = interval41.toPeriod(periodType44);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadablePeriod) period45);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.LocalTime localTime52 = dateTime51.toLocalTime();
        org.joda.time.DateTime.Property property53 = dateTime51.minuteOfHour();
        org.joda.time.DateTime dateTime55 = dateTime51.plusWeeks(0);
        org.joda.time.Chronology chronology56 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.millisOfDay();
        org.joda.time.DateTime dateTime58 = dateTime32.toDateTime(chronology56);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.yearOfEra();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 60000L + "'", long43 == 60000L);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test12174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12174");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withDefaultYear(0);
        boolean boolean10 = dateTimeFormatter9.isPrinter();
        java.lang.Integer int11 = dateTimeFormatter9.getPivotYear();
        boolean boolean12 = dateTimeFormatter9.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 0);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        org.joda.time.DateTime.Property property21 = dateTime19.minuteOfHour();
        int int22 = property21.get();
        org.joda.time.Interval interval23 = property21.toInterval();
        org.joda.time.Interval interval24 = interval23.toInterval();
        long long25 = interval23.toDurationMillis();
        org.joda.time.Interval interval27 = interval23.withStartMillis(10L);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = localTime31.getChronology();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) (byte) 1, chronology34);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology34);
        org.joda.time.Interval interval37 = interval23.withChronology(chronology34);
        boolean boolean38 = interval23.isAfterNow();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfHour();
        int int46 = property45.getMinimumValue();
        org.joda.time.DateTime dateTime47 = property45.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime50 = null;
        boolean boolean51 = dateTimeZone49.isLocalDateTimeGap(localDateTime50);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(dateTimeZone49);
        org.joda.time.DateTime dateTime53 = dateTime47.withZoneRetainFields(dateTimeZone49);
        org.joda.time.DateTime dateTime55 = dateTime53.withYearOfEra(6);
        org.joda.time.DateTime dateTime57 = dateTime53.plusMonths(1439);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, readableDuration58);
        org.joda.time.Interval interval60 = interval23.withEnd((org.joda.time.ReadableInstant) dateTime57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTimeFormatter9.print((org.joda.time.ReadableInstant) dateTime57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(int11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 60000L + "'", long25 == 60000L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval60);
    }

    @Test
    public void test12175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12175");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Calendar calendar6 = builder0.build();
        calendar6.clear();
        java.time.Instant instant8 = calendar6.toInstant();
        java.util.Date date9 = calendar6.getTime();
        int int10 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.setMinimalDaysInFirstWeek((int) 'x');
        calendar6.clear();
        calendar6.set((-292275054), 540000, 32, (-1645455016), 590, 1);
        int int21 = calendar6.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=120,ERA=?,YEAR=-292275054,MONTH=540000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=32,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=-1645455016,MINUTE=590,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 52 + "'", int21 == 52);
    }

    @Test
    public void test12176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12176");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.lang.String str3 = calendar2.getCalendarType();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        calendar2.clear();
        calendar2.set(28, (int) (short) 10, 0);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        int int11 = calendar2.getWeeksInWeekYear();
        calendar2.set(48, 3720000, 999);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((java.lang.Object) localTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "anglais" + "'", str1, "anglais");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=9722289600000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=310057,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=34,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test12177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12177");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(53);
        org.joda.time.DateTime.Property property13 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime14 = property13.withMinimumValue();
        int int15 = property13.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test12178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12178");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime4.plus(readableDuration17);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTimeISO();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime25.plusWeeks(0);
        int int30 = dateTime25.getHourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime25.minusSeconds(31);
        boolean boolean33 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (byte) 1, chronology42);
        boolean boolean44 = dateTimeFieldType35.isSupported(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.centuryOfEra();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = localTime49.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) (byte) 1, chronology52);
        int int54 = dateTimeField45.getMaximumValue((org.joda.time.ReadablePartial) localTime53);
        int int56 = dateTimeField45.get((long) 16);
        long long58 = dateTimeField45.remainder((-35999900L));
        java.util.Locale locale61 = new java.util.Locale("hours");
        java.lang.String str62 = locale61.getDisplayCountry();
        java.util.Locale locale63 = locale61.stripExtensions();
        java.lang.String str64 = dateTimeField45.getAsShortText(1645454869965L, locale61);
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleKeys();
        java.lang.String str66 = dateTime32.toString("53731300", locale61);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2922789 + "'", int54 == 2922789);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 19 + "'", int56 == 19);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-35999900L) + "'", long58 == (-35999900L));
        org.junit.Assert.assertEquals(locale61.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "20" + "'", str64, "20");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "53731300" + "'", str66, "53731300");
    }

    @Test
    public void test12179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12179");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        java.lang.String str4 = calendar0.getCalendarType();
        java.time.Instant instant5 = calendar0.toInstant();
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        java.time.Instant instant7 = calendar0.toInstant();
        int int8 = calendar0.getWeekYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455418092,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=58,MILLISECOND=92,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test12180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12180");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DurationField durationField17 = property16.getRangeDurationField();
        org.joda.time.DateTime dateTime19 = property16.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property16.getFieldType();
        org.joda.time.DateTime dateTime22 = property16.addWrapFieldToCopy(44);
        int int23 = dateTime22.getMillisOfDay();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.years();
        boolean boolean33 = localTime29.isSupported(durationFieldType32);
        java.lang.String str34 = durationFieldType32.toString();
        java.lang.String str35 = durationFieldType32.toString();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime39 = null;
        boolean boolean40 = dateTimeZone38.isLocalDateTimeGap(localDateTime39);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = null;
        java.lang.String str43 = localTime41.toString(dateTimeFormatter42);
        org.joda.time.Chronology chronology44 = localTime41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology44.getZone();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology44.getZone();
        boolean boolean47 = durationFieldType32.isSupported(chronology44);
        org.joda.time.Chronology chronology48 = chronology44.withUTC();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.monthOfYear();
        org.joda.time.Chronology chronology50 = chronology48.withUTC();
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime22.toMutableDateTime(chronology50);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 600000 + "'", int23 == 600000);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "years" + "'", str34, "years");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "years" + "'", str35, "years");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "00:00:00.010" + "'", str43, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test12181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12181");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        org.joda.time.Interval interval11 = interval8.toInterval();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime16.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime16.minus((long) '#');
        org.joda.time.DateTime dateTime29 = dateTime16.minusMinutes(100);
        long long30 = dateTime16.getMillis();
        boolean boolean31 = interval8.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property32 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime34 = dateTime16.withMillisOfSecond(12);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder35.clearExtensions();
        java.util.Locale.Builder builder38 = builder36.removeUnicodeLocaleAttribute("China");
        java.util.Locale locale39 = builder36.build();
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("hours");
        java.util.Locale.Builder builder42 = builder36.setLocale(locale41);
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale43.getDisplayName();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale43.getDisplayName(locale45);
        java.util.Locale.Builder builder47 = builder36.setLocale(locale43);
        java.util.Calendar calendar48 = dateTime34.toCalendar(locale43);
        org.joda.time.DateTime dateTime50 = dateTime34.plusSeconds(302);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) dateTime34);
        org.joda.time.DateTime dateTime53 = dateTime51.plusYears(892);
        org.joda.time.DateTime dateTime55 = dateTime51.plusHours((-74714));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645402199990L + "'", long30 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "hours");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "anglais (Etats-Unis)" + "'", str44, "anglais (Etats-Unis)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str46, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645402200002,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=12,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test12182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12182");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.LocalTime localTime26 = localTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 8);
        org.joda.time.LocalTime localTime28 = localTime26.withSecondOfMinute(52);
        org.joda.time.LocalTime localTime30 = localTime28.minusSeconds(10);
        org.joda.time.LocalTime.Property property31 = localTime30.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test12183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12183");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.lang.String str9 = localTime7.toString();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = dateTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        long long35 = dateTimeZone26.convertLocalToUTC((long) 9, false);
        java.lang.String str36 = dateTimeZone26.toString();
        org.joda.time.DateTime dateTime37 = localTime21.toDateTimeToday(dateTimeZone26);
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(dateTimeZone26);
        org.joda.time.DateTime dateTime39 = localTime7.toDateTimeToday(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime39.toMutableDateTimeISO();
        int int41 = dateTime39.getMinuteOfDay();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        int int48 = dateTime46.getMonthOfYear();
        int int49 = dateTime46.getHourOfDay();
        org.joda.time.DateTime.Property property50 = dateTime46.dayOfMonth();
        org.joda.time.DateTime.Property property51 = dateTime46.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int56 = dateTimeZone54.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(0L, dateTimeZone54);
        org.joda.time.DateTime.Property property58 = dateTime57.secondOfMinute();
        long long59 = property51.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.LocalTime localTime65 = dateTime64.toLocalTime();
        org.joda.time.DateTime.Property property66 = dateTime64.minuteOfHour();
        int int67 = property66.get();
        org.joda.time.Interval interval68 = property66.toInterval();
        org.joda.time.Interval interval69 = interval68.toInterval();
        long long70 = interval68.toDurationMillis();
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = interval68.toPeriod(periodType71);
        java.lang.String str73 = period72.toString();
        org.joda.time.DateTime dateTime74 = dateTime57.plus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.DateTime dateTime76 = dateTime39.withPeriodAdded((org.joda.time.ReadablePeriod) period72, 43);
        org.joda.time.DateTime dateTime78 = dateTime76.minusHours((-74714));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00:00:00.001" + "'", str9, "00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.010" + "'", str36, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 19044L + "'", long59 == 19044L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 60000L + "'", long70 == 60000L);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PT1M" + "'", str73, "PT1M");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test12184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12184");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder14 = builder10.setDate(31, 53, 52);
        java.util.Calendar.Builder builder16 = builder10.setLenient(false);
        java.util.Locale locale19 = new java.util.Locale("600000", "\u82f1\u6587");
        java.util.Calendar.Builder builder20 = builder16.setLocale(locale19);
        java.util.Calendar.Builder builder24 = builder16.setDate(458342, 32772, (int) (byte) 100);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int35 = dateTimeZone33.getOffset((long) (byte) 1);
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, (long) 3);
        org.joda.time.DateTime dateTime38 = dateTime29.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime40 = dateTime29.minus((long) '#');
        org.joda.time.DateTime dateTime42 = dateTime29.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.DateTime dateTime44 = dateTime29.plus(readablePeriod43);
        org.joda.time.DateTime.Property property45 = dateTime29.millisOfDay();
        org.joda.time.DateTime dateTime46 = property45.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property45.getFieldType();
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale48.getVariant();
        java.util.Locale locale50 = java.util.Locale.US;
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.lang.String str55 = locale50.getDisplayCountry(locale54);
        java.lang.String str56 = locale50.getISO3Language();
        java.lang.String str57 = locale50.getScript();
        java.lang.String str58 = locale48.getDisplayCountry(locale50);
        java.lang.String str59 = locale48.getISO3Country();
        int int60 = property45.getMaximumTextLength(locale48);
        java.util.Set<java.lang.String> strSet61 = locale48.getUnicodeLocaleAttributes();
        java.util.Calendar.Builder builder62 = builder16.setLocale(locale48);
        java.util.Locale locale63 = java.util.Locale.ITALY;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet65 = locale63.getExtensionKeys();
        java.util.Calendar.Builder builder66 = builder62.setLocale(locale63);
        java.lang.String str67 = locale63.toLanguageTag();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "\u82f1\u6587");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3L + "'", long37 == 3L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "United States" + "'", str55, "United States");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "eng" + "'", str56, "eng");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "China" + "'", str58, "China");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CHN" + "'", str59, "CHN");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it-IT" + "'", str67, "it-IT");
    }

    @Test
    public void test12185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12185");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int18 = dateTimeZone16.getOffset((long) (byte) 1);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isBefore((long) 21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getRangeDurationType();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        int int35 = localTime29.compareTo((org.joda.time.ReadablePartial) localTime32);
        org.joda.time.LocalTime.Property property36 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime38 = property36.addCopy(6);
        org.joda.time.LocalTime localTime39 = property36.withMaximumValue();
        org.joda.time.LocalTime localTime41 = property36.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime42 = property36.roundHalfEvenCopy();
        org.joda.time.Chronology chronology43 = localTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType25.getField(chronology43);
        org.joda.time.Interval interval45 = interval22.withChronology(chronology43);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Interval interval47 = interval45.withEnd(readableInstant46);
        org.joda.time.Interval interval48 = interval45.toInterval();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
    }

    @Test
    public void test12186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12186");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        int int18 = property17.get();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.Interval interval20 = interval19.toInterval();
        long long21 = interval19.toDurationMillis();
        org.joda.time.Interval interval23 = interval19.withStartMillis(10L);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        int[] intArray40 = chronology29.get((org.joda.time.ReadablePartial) localTime38, (long) (short) -1);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        org.joda.time.DateTime.Property property47 = dateTime45.minuteOfHour();
        int int48 = property47.getMinimumValue();
        org.joda.time.DateTime dateTime49 = property47.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime52 = null;
        boolean boolean53 = dateTimeZone51.isLocalDateTimeGap(localDateTime52);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(dateTimeZone51);
        org.joda.time.DateTime dateTime55 = dateTime49.withZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = localTime38.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean57 = interval19.equals((java.lang.Object) localTime38);
        org.joda.time.LocalTime localTime59 = localTime38.minusSeconds((int) (short) 10);
        org.joda.time.DateTime dateTime60 = dateTime8.withFields((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.DateTime dateTime61 = dateTime60.withLaterOffsetAtOverlap();
        long long62 = dateTime60.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[minuteOfHour]" + "'", str7, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 60000L + "'", long21 == 60000L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645401599991L + "'", long62 == 1645401599991L);
    }

    @Test
    public void test12187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12187");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localTime24, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.dayOfYear();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Period period38 = interval36.toPeriod();
        int[] intArray40 = chronology15.get((org.joda.time.ReadablePeriod) period38, (long) (byte) 100);
        org.joda.time.DateTime dateTime41 = dateTime8.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime42 = dateTime8.withTimeAtStartOfDay();
        boolean boolean43 = dateTime42.isEqualNow();
        org.joda.time.DateTime dateTime44 = dateTime42.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime46 = dateTime44.withYear(457056);
        int int47 = dateTime46.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 21 + "'", int47 == 21);
    }

    @Test
    public void test12188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12188");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = interval8.toPeriod(periodType11);
        java.lang.String str13 = period12.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        java.lang.String str16 = durationFieldType15.toString();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePartial) localTime31, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField34 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField35 = durationFieldType15.getField(chronology22);
        java.lang.String str36 = durationFieldType15.getName();
        boolean boolean37 = period12.isSupported(durationFieldType15);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        org.joda.time.DateTime.Property property44 = dateTime42.minuteOfHour();
        int int45 = property44.get();
        org.joda.time.Interval interval46 = property44.toInterval();
        org.joda.time.Interval interval47 = interval46.toInterval();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.get();
        org.joda.time.Interval interval56 = property54.toInterval();
        org.joda.time.Interval interval57 = interval56.toInterval();
        boolean boolean58 = interval47.isBefore((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTime dateTime59 = interval47.getEnd();
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        org.joda.time.DateTime dateTime62 = dateTime59.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime63 = dateTime62.toDateTime();
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int71 = dateTimeZone69.getOffset((long) (byte) 1);
        long long73 = dateTimeZone67.getMillisKeepLocal(dateTimeZone69, (long) 3);
        boolean boolean75 = dateTimeZone69.equals((java.lang.Object) 1);
        int int77 = dateTimeZone69.getOffset((long) 3);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), dateTimeZone69);
        org.joda.time.DateTime dateTime79 = dateTime63.withZone(dateTimeZone69);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period12, (org.joda.time.ReadableInstant) dateTime79);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "halfdays" + "'", str16, "halfdays");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "halfdays" + "'", str36, "halfdays");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3L + "'", long73 == 3L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test12189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12189");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay((int) (short) 10, (int) '4', 99, 35);
        java.util.Calendar.Builder builder18 = builder15.set(9, 35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder21 = builder18.setWeekDefinition(36, (-19044));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test12190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12190");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Calendar calendar6 = builder5.build();
        java.util.Calendar.Builder builder8 = builder5.setLenient(false);
        java.util.Calendar.Builder builder13 = builder8.setTimeOfDay(56321361, 308157, (-1376306), 233);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-40019997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=53,SECOND=0,MILLISECOND=3,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test12191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12191");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime13.getZone();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.LocalTime localTime30 = localTime28.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        int int32 = localTime28.indexOf(dateTimeFieldType31);
        int int33 = dateTime21.get(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = localTime40.getChronology();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfMonth();
        org.joda.time.Chronology chronology47 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.year();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(17L, 1645454862530L, chronology47);
        org.joda.time.DurationField durationField50 = chronology47.minutes();
        boolean boolean51 = durationFieldType34.isSupported(chronology47);
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType31.getField(chronology47);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.Chronology chronology59 = localTime56.getChronology();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) (byte) 1, chronology59);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.monthOfYear();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology59.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType31.getField(chronology59);
        boolean boolean66 = dateTime13.isSupported(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test12192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12192");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime.Property property17 = dateTime4.dayOfYear();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        org.joda.time.DateTime dateTime26 = localTime25.toDateTimeToday();
        org.joda.time.DateTime dateTime28 = dateTime26.minus(0L);
        int int29 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime31 = dateTime28.minusMinutes((int) ' ');
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test12193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12193");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int3 = dateTimeZone1.getOffset((long) (byte) 1);
        java.lang.String str4 = dateTimeZone1.toString();
        java.lang.String str6 = dateTimeZone1.getShortName((long) 25);
        java.lang.String str8 = dateTimeZone1.getNameKey((long) 50);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.010" + "'", str4, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test12194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12194");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getVariant();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfMonth();
        org.joda.time.Chronology chronology14 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.year();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology14);
        boolean boolean18 = calendar3.before((java.lang.Object) chronology14);
        org.joda.time.DurationField durationField19 = chronology14.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.dayOfMonth();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455418505,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=58,MILLISECOND=505,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test12195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12195");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear(1);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter6.getParser();
        java.lang.Integer int8 = dateTimeFormatter6.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withDefaultYear(18000000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant13 = org.joda.time.Instant.parse("Italian (Italy)", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test12196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12196");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = property6.getAsText(locale7);
        org.joda.time.Interval interval12 = property6.toInterval();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "anglais (Etats-Unis)" + "'", str8, "anglais (Etats-Unis)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str10, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(interval12);
    }

    @Test
    public void test12197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12197");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        int int16 = dateTime14.getMonthOfYear();
        int int17 = dateTime14.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int23 = dateTimeZone21.getOffset((long) (byte) 1);
        long long25 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, (long) 3);
        org.joda.time.DateTime dateTime26 = dateTime14.toDateTime(dateTimeZone19);
        int int27 = dateTime26.getEra();
        org.joda.time.DateTime.Property property28 = dateTime26.millisOfSecond();
        int int29 = property9.getDifference((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime.Property property30 = dateTime26.secondOfMinute();
        java.lang.String str31 = property30.toString();
        org.joda.time.DateTime dateTime33 = property30.setCopy("42");
        org.joda.time.DateTime dateTime35 = dateTime33.plusMillis(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = localTime40.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.weekyears();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = localTime48.getChronology();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) (byte) 1, chronology51);
        int[] intArray54 = chronology43.get((org.joda.time.ReadablePartial) localTime52, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField55 = chronology43.dayOfYear();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.minuteOfHour();
        int int63 = property62.get();
        org.joda.time.Interval interval64 = property62.toInterval();
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        org.joda.time.Period period66 = interval64.toPeriod();
        int[] intArray68 = chronology43.get((org.joda.time.ReadablePeriod) period66, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField69 = chronology43.weekOfWeekyear();
        boolean boolean70 = dateTimeFieldType36.isSupported(chronology43);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.Chronology chronology76 = localTime73.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.weekyears();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType36.getField(chronology76);
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.now(chronology76);
        org.joda.time.DateTimeField dateTimeField80 = chronology76.centuryOfEra();
        org.joda.time.DateTime dateTime81 = dateTime33.withChronology(chronology76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = dateTime81.withDate(53702416, 14, 119);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-457055) + "'", int29 == (-457055));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[secondOfMinute]" + "'", str31, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test12198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12198");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime4.plusYears((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean20 = dateTime4.isSupported(dateTimeFieldType19);
        org.joda.time.DateTime dateTime22 = dateTime4.plusMillis(789);
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.US;
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.lang.String str29 = locale24.getDisplayCountry(locale28);
        java.util.Locale.setDefault(category23, locale28);
        java.util.Locale locale31 = java.util.Locale.US;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayCountry(locale35);
        java.lang.String str37 = locale31.getISO3Language();
        java.util.Locale locale39 = new java.util.Locale("hours");
        java.lang.String str41 = locale39.getExtension('u');
        java.lang.String str42 = locale31.getDisplayVariant(locale39);
        java.lang.String str43 = locale31.toLanguageTag();
        java.util.Locale.setDefault(category23, locale31);
        java.util.Locale locale45 = java.util.Locale.getDefault(category23);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.Chronology chronology54 = localTime51.getChronology();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) (byte) 1, chronology54);
        boolean boolean56 = dateTimeFieldType47.isSupported(chronology54);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.centuryOfEra();
        java.lang.String str58 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType46.getField(chronology54);
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str62 = locale61.getVariant();
        java.util.Locale locale63 = java.util.Locale.US;
        java.util.Locale locale67 = new java.util.Locale("", "hi!", "");
        java.lang.String str68 = locale63.getDisplayCountry(locale67);
        java.lang.String str69 = locale63.getISO3Language();
        java.lang.String str70 = locale63.getScript();
        java.lang.String str71 = locale61.getDisplayCountry(locale63);
        java.lang.String str72 = dateTimeField59.getAsShortText((long) 42, locale61);
        java.util.Locale.setDefault(category23, locale61);
        java.util.Calendar calendar74 = dateTime4.toCalendar(locale61);
        java.util.Locale locale77 = java.util.Locale.US;
        java.util.Locale locale78 = locale77.stripExtensions();
        java.lang.String str79 = locale77.getVariant();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale77);
        java.lang.String str82 = locale77.getUnicodeLocaleType("CN");
        java.lang.String str83 = locale77.getLanguage();
        java.util.Locale locale87 = new java.util.Locale("", "hi!", "");
        java.lang.String str88 = locale87.getVariant();
        java.lang.String str89 = locale77.getDisplayName(locale87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = calendar74.getDisplayName((-1969), (-100800), locale87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "United States" + "'", str29, "United States");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "United States" + "'", str36, "United States");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertEquals(locale39.toString(), "hours");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "en-US" + "'", str43, "en-US");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[UTC]" + "'", str58, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertEquals(locale67.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "United States" + "'", str68, "United States");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "eng" + "'", str69, "eng");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "China" + "'", str71, "China");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1" + "'", str72, "1");
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1645402199990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=1645455418572,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=58,MILLISECOND=572,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "en" + "'", str83, "en");
        org.junit.Assert.assertEquals(locale87.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "English (United States)" + "'", str89, "English (United States)");
    }

    @Test
    public void test12199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12199");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime44 = property42.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.LocalTime.Property property45 = localTime44.secondOfMinute();
        int int46 = property45.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
    }

    @Test
    public void test12200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12200");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean8 = localTime6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalTime localTime10 = localTime6.minusMinutes(5);
        org.joda.time.LocalTime localTime12 = localTime6.withMinuteOfHour(59);
        java.lang.String str13 = localTime12.toString();
        org.joda.time.DateTime dateTime14 = localTime12.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "00:59:00.000" + "'", str13, "00:59:00.000");
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test12201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12201");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField15 = property13.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int19 = dateTimeZone17.getOffset((long) (byte) 1);
        java.lang.String str20 = dateTimeZone17.toString();
        java.lang.String str22 = dateTimeZone17.getShortName((long) 25);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int33 = dateTimeZone31.getOffset((long) (byte) 1);
        long long35 = dateTimeZone29.getMillisKeepLocal(dateTimeZone31, (long) 3);
        org.joda.time.DateTime dateTime36 = dateTime27.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime38 = dateTime27.minus((long) '#');
        org.joda.time.DateTime.Property property39 = dateTime27.weekyear();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime27.plus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime41.withWeekyear(1439);
        int int44 = dateTime41.getYearOfCentury();
        int int45 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime41);
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str48 = dateTimeZone17.getName(1645454951507L, locale47);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        org.joda.time.LocalTime localTime54 = dateTime53.toLocalTime();
        int int55 = dateTime53.getMonthOfYear();
        int int56 = dateTime53.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int62 = dateTimeZone60.getOffset((long) (byte) 1);
        long long64 = dateTimeZone58.getMillisKeepLocal(dateTimeZone60, (long) 3);
        org.joda.time.DateTime dateTime65 = dateTime53.toDateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime67 = dateTime53.withMonthOfYear(3);
        org.joda.time.DateTime.Property property68 = dateTime67.dayOfMonth();
        org.joda.time.DateTime dateTime70 = property68.addToCopy(0);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.LocalTime localTime76 = dateTime75.toLocalTime();
        org.joda.time.DateTime.Property property77 = dateTime75.minuteOfHour();
        org.joda.time.DateTime dateTime79 = dateTime75.plusWeeks(0);
        int int80 = dateTime79.getYearOfEra();
        org.joda.time.DateTime.Property property81 = dateTime79.year();
        java.util.Locale locale83 = new java.util.Locale("hours");
        java.lang.String str84 = locale83.getDisplayCountry();
        java.util.Locale locale85 = locale83.stripExtensions();
        int int86 = property81.getMaximumShortTextLength(locale85);
        java.lang.String str87 = property68.getAsText(locale85);
        java.lang.String str88 = locale47.getDisplayVariant(locale85);
        java.lang.String str89 = locale85.toLanguageTag();
        int int90 = property13.getMaximumTextLength(locale85);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3L + "'", long35 == 3L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3L + "'", long64 == 3L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals(locale83.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "hours");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "21" + "'", str87, "21");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "hours" + "'", str89, "hours");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
    }

    @Test
    public void test12202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12202");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTime dateTime21 = interval9.getEnd();
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillis(1646006399990L);
        int int29 = dateTime28.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 28 + "'", int29 == 28);
    }

    @Test
    public void test12203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12203");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1, chronology16);
        boolean boolean18 = dateTimeFieldType9.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.centuryOfEra();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(chronology16);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology16);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology16);
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str24 = locale23.getVariant();
        java.lang.String str25 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localTime22, locale23);
        int[] intArray26 = localTime22.getValues();
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = null;
        org.joda.time.format.DateTimeParser dateTimeParser28 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter27, dateTimeParser28);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = dateTimeFormatter29.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter29.withDefaultYear(1);
        org.joda.time.format.DateTimeParser dateTimeParser33 = dateTimeFormatter32.getParser();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = localTime36.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.weekyears();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = localTime44.getChronology();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (byte) 1, chronology47);
        int[] intArray50 = chronology39.get((org.joda.time.ReadablePartial) localTime48, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField51 = chronology39.clockhourOfDay();
        org.joda.time.DurationField durationField52 = chronology39.seconds();
        org.joda.time.DateTimeZone dateTimeZone53 = chronology39.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter32.withZone(dateTimeZone53);
        org.joda.time.format.DateTimeParser dateTimeParser55 = dateTimeFormatter54.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter54.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeFormatter56.getZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = localTime22.toString(dateTimeFormatter56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[14, 56, 58, 701]");
        org.junit.Assert.assertNull(dateTimePrinter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(dateTimeParser33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(dateTimeParser55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNull(dateTimeZone57);
    }

    @Test
    public void test12204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12204");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Wed Mar 02 10:09:01 UTC 3870");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=wedmar0210:09:01utc3870");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12205");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 122);
        boolean boolean11 = dateTimeFormatter8.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter8.getPrinter();
        java.io.Writer writer13 = null;
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) 0);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (byte) 1, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.monthOfYear();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalTime localTime33 = localTime29.plus(readablePeriod32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean35 = localTime33.isSupported(dateTimeFieldType34);
        int[] intArray36 = new int[] {};
        int int37 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localTime33, intArray36);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        int int46 = localTime40.compareTo((org.joda.time.ReadablePartial) localTime43);
        org.joda.time.LocalTime.Property property47 = localTime40.hourOfDay();
        org.joda.time.LocalTime localTime49 = property47.addCopy(6);
        org.joda.time.LocalTime localTime50 = property47.roundHalfCeilingCopy();
        int int51 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) localTime50);
        org.joda.time.LocalTime localTime53 = localTime50.minusMillis(11);
        boolean boolean54 = localTime15.equals((java.lang.Object) localTime53);
        org.joda.time.LocalTime localTime56 = localTime53.plusHours(473354279);
        org.joda.time.LocalTime localTime58 = localTime53.minusSeconds(58);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer13, (org.joda.time.ReadablePartial) localTime58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
    }

    @Test
    public void test12206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12206");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime4.toString(dateTimeFormatter9);
        org.joda.time.DateTime dateTime12 = dateTime4.plusMinutes(17);
        org.joda.time.DateTime dateTime14 = dateTime4.withWeekyear(5);
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears((int) (byte) -1);
        org.joda.time.DateTime dateTime18 = dateTime14.withYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getRangeDurationType();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.weekyears();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = localTime31.getChronology();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) (byte) 1, chronology34);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePartial) localTime35, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField38 = chronology26.dayOfYear();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfHour();
        int int46 = property45.get();
        org.joda.time.Interval interval47 = property45.toInterval();
        org.joda.time.DateTime dateTime48 = interval47.getEnd();
        org.joda.time.Period period49 = interval47.toPeriod();
        int[] intArray51 = chronology26.get((org.joda.time.ReadablePeriod) period49, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField52 = chronology26.weekOfWeekyear();
        boolean boolean53 = dateTimeFieldType19.isSupported(chronology26);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.Chronology chronology59 = localTime56.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.weekyears();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType19.getField(chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.hourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.era();
        org.joda.time.DateTime dateTime64 = dateTime18.toDateTime(chronology59);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str10, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test12207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12207");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatter5.getParser();
        org.joda.time.Chronology chronology9 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withDefaultYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter11.withZoneUTC();
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(writer15, (-3241594890406689L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimeParser8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test12208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12208");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = property25.get();
        org.joda.time.Interval interval27 = property25.toInterval();
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Period period29 = interval27.toPeriod();
        int[] intArray31 = chronology6.get((org.joda.time.ReadablePeriod) period29, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField32 = chronology6.dayOfYear();
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField34 = chronology6.hourOfDay();
        org.joda.time.DurationField durationField35 = chronology6.hours();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(0L, chronology6);
        org.joda.time.DateTime.Property property37 = dateTime36.millisOfSecond();
        org.joda.time.DateTime dateTime39 = dateTime36.withYear(540000);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.LocalTime localTime45 = dateTime44.toLocalTime();
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfHour();
        int int47 = property46.get();
        org.joda.time.Interval interval48 = property46.toInterval();
        org.joda.time.Interval interval49 = interval48.toInterval();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfHour();
        int int57 = property56.getMinimumValue();
        org.joda.time.DateTime dateTime58 = property56.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime61 = null;
        boolean boolean62 = dateTimeZone60.isLocalDateTimeGap(localDateTime61);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(dateTimeZone60);
        org.joda.time.DateTime dateTime64 = dateTime58.withZoneRetainFields(dateTimeZone60);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((java.lang.Object) dateTime64);
        org.joda.time.Interval interval66 = interval49.withEnd((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int68 = dateTime64.get(dateTimeFieldType67);
        java.lang.String str69 = dateTimeFieldType67.getName();
        org.joda.time.DateTime.Property property70 = dateTime36.property(dateTimeFieldType67);
        boolean boolean71 = dateTime36.isEqualNow();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "halfdayOfDay" + "'", str69, "halfdayOfDay");
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test12209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12209");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, readablePeriod8);
        org.joda.time.DateTime dateTime11 = dateTime4.plusMinutes(5);
        org.joda.time.DateTime.Property property12 = dateTime4.yearOfCentury();
        java.lang.String str13 = property12.getAsText();
        int int14 = property12.getMinimumValue();
        org.joda.time.DateTime dateTime16 = property12.setCopy(28);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getFirstDayOfWeek();
        int int20 = calendar17.getLeastMaximum(2);
        java.lang.String str21 = calendar17.getCalendarType();
        java.time.Instant instant22 = calendar17.toInstant();
        int int23 = calendar17.getMinimalDaysInFirstWeek();
        java.time.Instant instant24 = calendar17.toInstant();
        java.util.TimeZone timeZone25 = calendar17.getTimeZone();
        java.lang.String str26 = calendar17.getCalendarType();
        boolean boolean27 = property12.equals((java.lang.Object) calendar17);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "22" + "'", str13, "22");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455418859,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=58,MILLISECOND=859,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "gregory" + "'", str26, "gregory");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test12210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12210");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.year();
        org.joda.time.DurationField durationField18 = chronology5.months();
        int int21 = durationField18.getDifference(8362592323200099L, 53322503L);
        long long23 = durationField18.getMillis(86399);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3179999 + "'", int21 == 3179999);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 227207424654000L + "'", long23 == 227207424654000L);
    }

    @Test
    public void test12211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12211");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((java.lang.Object) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.plusMinutes((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plusMillis((-343140000));
        org.joda.time.DateTime.Property property20 = dateTime19.yearOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test12212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12212");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.LocalTime localTime7 = localTime5.plusMinutes((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = localTime7.getField(11826);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11826");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test12213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12213");
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfMonth();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.LocalTime localTime16 = localTime14.plusHours((int) 'u');
        org.joda.time.LocalTime localTime18 = localTime14.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        int int25 = dateTime23.getMonthOfYear();
        int int26 = dateTime23.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int32 = dateTimeZone30.getOffset((long) (byte) 1);
        long long34 = dateTimeZone28.getMillisKeepLocal(dateTimeZone30, (long) 3);
        org.joda.time.DateTime dateTime35 = dateTime23.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime36 = localTime18.toDateTimeToday(dateTimeZone28);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) 5, dateTimeZone28);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        org.joda.time.DateTime.Property property44 = dateTime42.minuteOfHour();
        int int45 = property44.get();
        org.joda.time.Interval interval46 = property44.toInterval();
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Period period48 = interval46.toPeriod();
        java.lang.String str49 = interval46.toString();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfHour();
        int int57 = property56.get();
        org.joda.time.Interval interval58 = property56.toInterval();
        org.joda.time.Interval interval59 = interval58.toInterval();
        long long60 = interval58.toDurationMillis();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = interval58.toPeriod(periodType61);
        org.joda.time.Interval interval63 = interval46.overlap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval63.toPeriod(periodType64);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.LocalTime localTime67 = localTime37.minus((org.joda.time.ReadablePeriod) period65);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance();
        boolean boolean69 = calendar68.isWeekDateSupported();
        long long70 = calendar68.getTimeInMillis();
        java.util.TimeZone timeZone71 = calendar68.getTimeZone();
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localTime74.toDateTime(readableInstant75);
        org.joda.time.Chronology chronology77 = localTime74.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.weekyears();
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localTime82.toDateTime(readableInstant83);
        org.joda.time.Chronology chronology85 = localTime82.getChronology();
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime((long) (byte) 1, chronology85);
        int[] intArray88 = chronology77.get((org.joda.time.ReadablePartial) localTime86, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField89 = chronology77.clockhourOfDay();
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((java.lang.Object) calendar68, chronology77);
        org.joda.time.LocalTime localTime91 = new org.joda.time.LocalTime(chronology77);
        org.joda.time.DateTime dateTime92 = localTime91.toDateTimeToday();
        org.joda.time.Interval interval93 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period65, (org.joda.time.ReadableInstant) dateTime92);
        org.joda.time.Chronology chronology94 = interval93.getChronology();
        org.joda.time.LocalTime localTime95 = new org.joda.time.LocalTime(25271959883666578L, chronology94);
        org.joda.time.Interval interval96 = new org.joda.time.Interval((long) 100, 53747650L, chronology94);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3L + "'", long34 == 3L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str49, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 60000L + "'", long60 == 60000L);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1645455418911,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=58,MILLISECOND=911,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645455418911L + "'", long70 == 1645455418911L);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(chronology94);
    }

    @Test
    public void test12214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12214");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        boolean boolean11 = dateTimeFieldType2.isSupported(chronology9);
        boolean boolean12 = durationFieldType1.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.minuteOfHour();
        boolean boolean14 = dateTimeField13.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test12215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12215");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(1645402140000L, chronology9);
        org.joda.time.DurationField durationField11 = chronology9.weeks();
        long long12 = durationField11.getUnitMillis();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((java.lang.Object) long12);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 604800000L + "'", long12 == 604800000L);
    }

    @Test
    public void test12216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12216");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime4.toString(dateTimeFormatter9);
        org.joda.time.DateTime dateTime12 = dateTime4.plusMinutes(17);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        int int20 = property19.getMinimumValue();
        org.joda.time.DateTime dateTime21 = property19.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime24 = null;
        boolean boolean25 = dateTimeZone23.isLocalDateTimeGap(localDateTime24);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(dateTimeZone23);
        org.joda.time.DateTime dateTime27 = dateTime21.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) dateTime27);
        org.joda.time.DateTime dateTime30 = dateTime27.plusMinutes((int) '4');
        boolean boolean31 = dateTime4.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Instant instant32 = dateTime4.toInstant();
        org.joda.time.Instant instant35 = instant32.withDurationAdded(53629505L, 53771);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str10, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant35);
    }

    @Test
    public void test12217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12217");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        java.lang.String str10 = dateTimeField9.getName();
        long long13 = dateTimeField9.add((long) 1970, (long) (short) 0);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.parse("14");
        int int16 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localTime15);
        int int17 = localTime15.size();
        org.joda.time.LocalTime localTime19 = localTime15.plusMinutes((-1645432682));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfMonth" + "'", str10, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1970L + "'", long13 == 1970L);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test12218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12218");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.withChronology(chronology14);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        long long28 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, (long) 3);
        org.joda.time.DateTime dateTime29 = dateTime20.withZone(dateTimeZone22);
        org.joda.time.DateTime dateTime31 = dateTime20.minus((long) '#');
        org.joda.time.DateTime.Property property32 = dateTime20.weekyear();
        org.joda.time.DateTime dateTime34 = dateTime20.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime37 = dateTime20.withSecondOfMinute(0);
        boolean boolean38 = dateTime13.isAfter((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime40 = dateTime20.plusWeeks(292278993);
        org.joda.time.DateTime dateTime41 = dateTime20.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.Chronology chronology47 = localTime44.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.weekyears();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.Chronology chronology55 = localTime52.getChronology();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((long) (byte) 1, chronology55);
        int[] intArray58 = chronology47.get((org.joda.time.ReadablePartial) localTime56, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField59 = chronology47.clockhourOfDay();
        org.joda.time.DurationField durationField60 = chronology47.seconds();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology47.getZone();
        org.joda.time.DurationField durationField62 = chronology47.seconds();
        org.joda.time.DurationField durationField63 = chronology47.seconds();
        org.joda.time.DateTime dateTime64 = dateTime41.withChronology(chronology47);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test12219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12219");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.Interval interval11 = new org.joda.time.Interval(0L, 0L, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.year();
        org.joda.time.DateTimeField dateTimeField14 = chronology8.dayOfWeek();
        int int16 = dateTimeField14.getMinimumValue((long) 19);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfMonth();
        org.joda.time.Chronology chronology28 = chronology24.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.clockhourOfDay();
        java.util.Locale locale32 = java.util.Locale.KOREA;
        java.lang.String str33 = dateTimeField30.getAsShortText(366, locale32);
        java.lang.String str34 = locale32.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = dateTimeField14.getAsShortText(980, locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 980");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "366" + "'", str33, "366");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u671d\u9c9c\u6587" + "'", str34, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test12220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12220");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime5.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.years();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        java.lang.String str12 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyear();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(1645454883425L);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        org.joda.time.DateTime dateTime25 = localTime24.toDateTimeToday();
        org.joda.time.LocalTime localTime27 = localTime24.minusMinutes(1);
        org.joda.time.LocalTime.Property property28 = localTime24.millisOfDay();
        int int29 = localTime24.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean31 = localTime24.isSupported(dateTimeFieldType30);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        int int38 = dateTime36.getMonthOfYear();
        int int39 = dateTime36.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int45 = dateTimeZone43.getOffset((long) (byte) 1);
        long long47 = dateTimeZone41.getMillisKeepLocal(dateTimeZone43, (long) 3);
        org.joda.time.DateTime dateTime48 = dateTime36.toDateTime(dateTimeZone41);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime51 = dateTime36.withFieldAdded(durationFieldType49, 2022);
        org.joda.time.LocalTime localTime53 = localTime24.withFieldAdded(durationFieldType49, 1439);
        org.joda.time.DateTime dateTime55 = dateTime16.withFieldAdded(durationFieldType49, 12);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int59 = dateTimeZone57.getOffset((long) (byte) 1);
        java.lang.String str60 = dateTimeZone57.toString();
        org.joda.time.DateTime dateTime61 = dateTime55.toDateTime(dateTimeZone57);
        org.joda.time.DateTime.Property property62 = dateTime61.minuteOfDay();
        org.joda.time.DateTime dateTime63 = property62.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int68 = dateTimeZone66.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(0L, dateTimeZone66);
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.now(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = dateTime63.toDateTime(dateTimeZone66);
        java.util.Locale locale73 = java.util.Locale.JAPAN;
        java.lang.String str74 = dateTimeZone66.getShortName(7092000000L, locale73);
        java.lang.String str75 = dateTimeField13.getAsText(2, locale73);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.010" + "'", str7, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3L + "'", long47 == 3L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.010" + "'", str60, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.010" + "'", str74, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2" + "'", str75, "2");
    }

    @Test
    public void test12221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12221");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime localTime11 = localTime8.minusMinutes(1);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        int int21 = localTime15.compareTo((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.LocalTime.Property property22 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime24 = property22.addCopy(6);
        org.joda.time.LocalTime localTime25 = property22.roundCeilingCopy();
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = locale27.getDisplayName();
        org.joda.time.LocalTime localTime29 = property22.setCopy("0", locale27);
        org.joda.time.LocalTime localTime30 = property22.roundFloorCopy();
        int[] intArray32 = chronology12.get((org.joda.time.ReadablePartial) localTime30, 8362592323200099L);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay(1645454977311L, chronology12);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = localTime46.getChronology();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (byte) 1, chronology49);
        int[] intArray52 = chronology41.get((org.joda.time.ReadablePartial) localTime50, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField53 = chronology41.dayOfYear();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.DateTime.Property property60 = dateTime58.minuteOfHour();
        int int61 = property60.get();
        org.joda.time.Interval interval62 = property60.toInterval();
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Period period64 = interval62.toPeriod();
        int[] intArray66 = chronology41.get((org.joda.time.ReadablePeriod) period64, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int72 = dateTimeZone70.getOffset((long) (byte) 1);
        long long74 = dateTimeZone68.getMillisKeepLocal(dateTimeZone70, (long) 3);
        long long77 = dateTimeZone68.convertLocalToUTC((long) 9, false);
        java.lang.String str78 = dateTimeZone68.toString();
        org.joda.time.Chronology chronology79 = chronology41.withZone(dateTimeZone68);
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime(dateTimeZone68);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(2863424L, dateTimeZone68);
        org.joda.time.Chronology chronology82 = chronology12.withZone(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField83 = chronology12.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u82f1\u6587\u7f8e\u56fd)" + "'", str28, "\u82f1\u6587\u7f8e\u56fd)");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 99]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3L + "'", long74 == 3L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.010" + "'", str78, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
    }

    @Test
    public void test12222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12222");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.yearOfEra();
        long long10 = dateTimeField7.set(3003279000000L, 100);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime20 = dateTime16.plusWeeks(0);
        org.joda.time.Chronology chronology21 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        long long25 = dateTimeField22.addWrapField((long) 366, 0);
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str28 = locale27.getCountry();
        java.lang.String str29 = dateTimeField22.getAsShortText(11, locale27);
        java.util.Locale.setDefault(locale27);
        java.lang.String str31 = dateTimeField7.getAsText(86399999, locale27);
        long long33 = dateTimeField7.roundHalfFloor(3779990L);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        int int42 = localTime36.compareTo((org.joda.time.ReadablePartial) localTime39);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean44 = localTime36.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray45 = localTime36.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        java.lang.String str48 = dateTimeFieldType46.getName();
        int int49 = localTime36.get(dateTimeFieldType46);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        int int58 = localTime52.compareTo((org.joda.time.ReadablePartial) localTime55);
        org.joda.time.LocalTime.Property property59 = localTime52.hourOfDay();
        org.joda.time.LocalTime localTime61 = property59.addCopy(6);
        org.joda.time.LocalTime localTime62 = property59.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime63 = property59.roundCeilingCopy();
        org.joda.time.LocalTime localTime65 = property59.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime67 = property59.setCopy("1");
        org.joda.time.LocalTime localTime68 = localTime36.withFields((org.joda.time.ReadablePartial) localTime67);
        org.joda.time.LocalTime localTime70 = localTime36.minusSeconds(0);
        int int71 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime.Property property72 = localTime36.millisOfDay();
        int int73 = property72.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-59006173800000L) + "'", long10 == (-59006173800000L));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 366L + "'", long25 == 366L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "CN" + "'", str28, "CN");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "11" + "'", str29, "11");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "86399999" + "'", str31, "86399999");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "halfdayOfDay" + "'", str48, "halfdayOfDay");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 292278993 + "'", int71 == 292278993);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test12223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12223");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.LocalTime localTime20 = dateTime19.toLocalTime();
        int int21 = dateTime19.getMonthOfYear();
        int int22 = dateTime19.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int28 = dateTimeZone26.getOffset((long) (byte) 1);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone26, (long) 3);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = localTime14.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime.Property property33 = dateTime32.weekOfWeekyear();
        int int34 = dateTime32.getMinuteOfDay();
        org.joda.time.DateTime dateTime36 = dateTime32.minusYears(576);
        java.lang.String str37 = dateTime32.toString();
        org.joda.time.DateTime dateTime39 = dateTime32.plusMinutes(7800000);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 896 + "'", int34 == 896);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-21T14:56:59.001+00:00:00.010" + "'", str37, "2022-02-21T14:56:59.001+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test12224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12224");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar16 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTime.Property property17 = dateTime13.weekyear();
        org.joda.time.DateTime dateTime18 = dateTime13.toDateTimeISO();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = property25.get();
        org.joda.time.Interval interval27 = property25.toInterval();
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Period period29 = interval27.toPeriod();
        java.lang.String str30 = interval27.toString();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        org.joda.time.DateTime.Property property37 = dateTime35.minuteOfHour();
        int int38 = property37.get();
        org.joda.time.Interval interval39 = property37.toInterval();
        org.joda.time.Interval interval40 = interval39.toInterval();
        long long41 = interval39.toDurationMillis();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = interval39.toPeriod(periodType42);
        org.joda.time.Interval interval44 = interval27.overlap((org.joda.time.ReadableInterval) interval39);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.LocalTime localTime50 = dateTime49.toLocalTime();
        int int51 = dateTime49.getMonthOfYear();
        int int52 = dateTime49.getHourOfDay();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int63 = dateTimeZone61.getOffset((long) (byte) 1);
        long long65 = dateTimeZone59.getMillisKeepLocal(dateTimeZone61, (long) 3);
        org.joda.time.DateTime dateTime66 = dateTime57.withZone(dateTimeZone59);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime66);
        boolean boolean69 = interval67.isBefore((long) 21);
        boolean boolean70 = interval44.isBefore((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Duration duration71 = interval67.toDuration();
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localTime75.toDateTime(readableInstant76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar80 = dateTime77.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int86 = dateTimeZone84.getOffset((long) (byte) 1);
        long long88 = dateTimeZone82.getMillisKeepLocal(dateTimeZone84, (long) 3);
        long long90 = dateTimeZone82.previousTransition(0L);
        java.lang.String str92 = dateTimeZone82.getNameKey(720100L);
        org.joda.time.DateTime dateTime93 = dateTime77.withZoneRetainFields(dateTimeZone82);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int95 = dateTime77.get(dateTimeFieldType94);
        org.joda.time.DateTime.Property property96 = dateTime77.minuteOfHour();
        org.joda.time.DateTime dateTime97 = dateTime77.withEarlierOffsetAtOverlap();
        int int98 = dateTime97.getDayOfYear();
        boolean boolean99 = duration71.equals((java.lang.Object) dateTime97);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str30, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 60000L + "'", long41 == 60000L);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3L + "'", long65 == 3L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(gregorianCalendar80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 3L + "'", long88 == 3L);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 52 + "'", int98 == 52);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test12225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12225");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.plus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean8 = localTime6.isSupported(dateTimeFieldType7);
        int int9 = localTime6.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test12226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12226");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Interval interval22 = interval8.withChronology(chronology19);
        boolean boolean23 = interval8.isAfterNow();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        int int31 = property30.getMinimumValue();
        org.joda.time.DateTime dateTime32 = property30.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime35 = null;
        boolean boolean36 = dateTimeZone34.isLocalDateTimeGap(localDateTime35);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime32.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime40 = dateTime38.withYearOfEra(6);
        org.joda.time.DateTime dateTime42 = dateTime38.plusMonths(1439);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, readableDuration43);
        org.joda.time.Interval interval45 = interval8.withEnd((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = interval8.getStart();
        long long47 = interval8.getStartMillis();
        boolean boolean49 = interval8.isAfter(0L);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.LocalTime localTime55 = dateTime54.toLocalTime();
        org.joda.time.DateTime.Property property56 = dateTime54.minuteOfHour();
        int int57 = property56.get();
        org.joda.time.Interval interval58 = property56.toInterval();
        org.joda.time.Period period59 = interval58.toPeriod();
        org.joda.time.Chronology chronology60 = interval58.getChronology();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.LocalTime localTime66 = dateTime65.toLocalTime();
        org.joda.time.DateTime.Property property67 = dateTime65.minuteOfHour();
        int int68 = property67.get();
        org.joda.time.Interval interval69 = property67.toInterval();
        org.joda.time.Period period70 = interval69.toPeriod();
        long long71 = interval69.toDurationMillis();
        boolean boolean72 = interval69.isBeforeNow();
        org.joda.time.Interval interval73 = interval69.toInterval();
        boolean boolean75 = interval69.isBefore(1645401697000L);
        long long76 = interval69.getStartMillis();
        boolean boolean78 = interval69.equals((java.lang.Object) 29);
        org.joda.time.ReadableInterval readableInterval79 = null;
        boolean boolean80 = interval69.isAfter(readableInterval79);
        long long81 = interval69.getEndMillis();
        boolean boolean82 = interval58.overlaps((org.joda.time.ReadableInterval) interval69);
        org.joda.time.Interval interval83 = interval8.overlap((org.joda.time.ReadableInterval) interval58);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645402199990L + "'", long47 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 60000L + "'", long71 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645402199990L + "'", long76 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1645402259990L + "'", long81 == 1645402259990L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(interval83);
    }

    @Test
    public void test12227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12227");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.MutablePeriod mutablePeriod31 = period29.toMutablePeriod();
        org.joda.time.Period period32 = period29.toPeriod();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        int int41 = localTime35.compareTo((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.LocalTime.Property property42 = localTime35.hourOfDay();
        org.joda.time.LocalTime localTime44 = property42.addCopy(6);
        int int45 = localTime44.getSecondOfMinute();
        org.joda.time.LocalTime.Property property46 = localTime44.secondOfMinute();
        org.joda.time.LocalTime localTime47 = property46.getLocalTime();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.getMinimumValue();
        org.joda.time.DateTime dateTime56 = property54.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfYear();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.minus(readableDuration58);
        org.joda.time.DateTime dateTime61 = dateTime56.minusDays(0);
        int int62 = property46.getDifference((org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTime61.getMinuteOfDay();
        org.joda.time.DateTime.Property property64 = dateTime61.millisOfDay();
        boolean boolean65 = period29.equals((java.lang.Object) dateTime61);
        org.joda.time.DateTime dateTime67 = dateTime61.plus(1645454878832L);
        org.joda.time.DateTime dateTime69 = dateTime67.minusYears(990);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1645379999) + "'", int62 == (-1645379999));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test12228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12228");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology37);
        long long43 = chronology5.set((org.joda.time.ReadablePartial) localTime41, 25200000L);
        org.joda.time.LocalTime.Property property44 = localTime41.secondOfMinute();
        org.joda.time.LocalTime localTime45 = property44.roundFloorCopy();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("era");
        org.joda.time.LocalTime localTime49 = property44.setCopy("45", locale48);
        java.util.Locale locale51 = java.util.Locale.forLanguageTag("53528311");
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str53 = locale48.getDisplayName(locale51);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 53819466L + "'", long43 == 53819466L);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "era");
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "era" + "'", str53, "era");
    }

    @Test
    public void test12229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12229");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay(12, 2000, 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 0);
        java.lang.String str10 = dateTimeZone8.getShortName((long) 'x');
        java.lang.String str12 = dateTimeZone8.getName(1645454960928L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 1, chronology27);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePartial) localTime28, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField31 = chronology19.dayOfYear();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.Period period42 = interval40.toPeriod();
        int[] intArray44 = chronology19.get((org.joda.time.ReadablePeriod) period42, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int50 = dateTimeZone48.getOffset((long) (byte) 1);
        long long52 = dateTimeZone46.getMillisKeepLocal(dateTimeZone48, (long) 3);
        long long55 = dateTimeZone46.convertLocalToUTC((long) 9, false);
        java.lang.String str56 = dateTimeZone46.toString();
        org.joda.time.Chronology chronology57 = chronology19.withZone(dateTimeZone46);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(dateTimeZone46);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(2863424L, dateTimeZone46);
        long long61 = dateTimeZone8.getMillisKeepLocal(dateTimeZone46, 1645454869965L);
        java.util.TimeZone timeZone62 = dateTimeZone8.toTimeZone();
        java.util.Calendar.Builder builder63 = builder6.setTimeZone(timeZone62);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645454869955L + "'", long61 == 1645454869955L);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test12230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12230");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setVariant("53275870");
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale.Builder builder7 = builder4.setRegion("");
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        int int18 = localTime12.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime.Property property19 = localTime12.hourOfDay();
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str21 = locale20.getVariant();
        java.util.Locale locale22 = java.util.Locale.US;
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.lang.String str27 = locale22.getDisplayCountry(locale26);
        java.lang.String str28 = locale22.getISO3Language();
        java.lang.String str29 = locale22.getScript();
        java.lang.String str30 = locale20.getDisplayCountry(locale22);
        int int31 = property19.getMaximumTextLength(locale20);
        java.lang.String str33 = locale20.getUnicodeLocaleType("CN");
        java.util.Locale.Builder builder34 = builder9.setLocale(locale20);
        java.util.Locale.Builder builder36 = builder34.removeUnicodeLocaleAttribute("53474795");
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("it");
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.util.Locale.Builder builder40 = builder36.setLocale(locale38);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "United States" + "'", str27, "United States");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "eng" + "'", str28, "eng");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "China" + "'", str30, "China");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test12231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12231");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList6, strMap7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList8, strMap9);
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode13 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strSet12, filteringMode13);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = java.util.Locale.lookupTag(languageRangeList10, (java.util.Collection<java.lang.String>) strSet16);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + filteringMode13 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode13.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test12232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12232");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localTime11.getFieldTypes();
        org.joda.time.LocalTime.Property property16 = localTime11.secondOfMinute();
        int int17 = property16.getMinimumValue();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        int int24 = dateTime22.getMonthOfYear();
        int int25 = dateTime22.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int31 = dateTimeZone29.getOffset((long) (byte) 1);
        long long33 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 3);
        org.joda.time.DateTime dateTime34 = dateTime22.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfDay();
        java.lang.String str36 = property35.getAsText();
        org.joda.time.DateTime dateTime37 = property35.roundHalfEvenCopy();
        int int38 = property16.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = dateTime37.plus(1645455283590L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3L + "'", long33 == 3L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "600000" + "'", str36, "600000");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test12233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12233");
        java.util.Date date1 = new java.util.Date(45L);
        int int2 = date1.getTimezoneOffset();
        int int3 = date1.getTimezoneOffset();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromDateFields(date1);
        java.util.Date date6 = new java.util.Date((long) (byte) 100);
        date6.setMinutes(11);
        java.lang.String str9 = date6.toLocaleString();
        java.lang.String str10 = date6.toGMTString();
        java.time.Instant instant11 = date6.toInstant();
        date6.setMinutes(34);
        int int14 = date6.getYear();
        date6.setMonth(0);
        boolean boolean17 = date1.before(date6);
        int int18 = date6.getSeconds();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:34:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-1-1 0:11:00" + "'", str9, "1970-1-1 0:11:00");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1 Jan 1970 00:11:00 GMT" + "'", str10, "1 Jan 1970 00:11:00 GMT");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 70 + "'", int14 == 70);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test12234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12234");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval(53753387L, 53390339L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12235");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder3.setDate(7200000, (-100800), 53358486);
        java.util.Calendar.Builder builder11 = builder7.setWeekDate(53419115, (-27423368), 892);
        java.util.Calendar.Builder builder16 = builder11.setTimeOfDay((int) (short) 10, 53748945, 1140, 27423369);
        java.util.Calendar.Builder builder20 = builder16.setDate(0, (-6280956), 27424247);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test12236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12236");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int4 = dateTimeZone2.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0L, dateTimeZone2);
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks(26);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test12237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12237");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        org.joda.time.DateTime dateTime35 = localTime34.toDateTimeToday();
        org.joda.time.Interval interval36 = interval9.withStart((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime();
        org.joda.time.DateTime.Property property38 = dateTime37.weekyear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test12238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12238");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime5.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.010" + "'", str7, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test12239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12239");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property6.getFieldType();
        int int10 = property6.get();
        org.joda.time.DateTime dateTime12 = property6.addToCopy((int) (short) -1);
        java.lang.String str13 = property6.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "minuteOfHour" + "'", str13, "minuteOfHour");
    }

    @Test
    public void test12240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12240");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime16 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime18 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        int int25 = dateTime23.getMonthOfYear();
        int int26 = dateTime23.getHourOfDay();
        org.joda.time.DateTime.Property property27 = dateTime23.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = null;
        java.lang.String str29 = dateTime23.toString(dateTimeFormatter28);
        org.joda.time.DateTime dateTime31 = dateTime23.plusMinutes(17);
        org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay((int) (short) 10);
        long long34 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalTime localTime35 = property9.getLocalTime();
        int int36 = property9.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str29, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-457056L) + "'", long34 == (-457056L));
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23 + "'", int36 == 23);
    }

    @Test
    public void test12241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12241");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime4.minus(readableDuration14);
        int int16 = dateTime4.getYearOfEra();
        org.joda.time.DateTime.Property property17 = dateTime4.dayOfWeek();
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfMonth();
        java.lang.String str29 = dateTimeField28.getName();
        long long32 = dateTimeField28.add((long) 1970, (long) (short) 0);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        int int41 = localTime35.compareTo((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.LocalTime.Property property42 = localTime35.hourOfDay();
        org.joda.time.LocalTime localTime44 = property42.addCopy(6);
        org.joda.time.LocalTime localTime45 = property42.roundCeilingCopy();
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = locale47.getDisplayName();
        org.joda.time.LocalTime localTime49 = property42.setCopy("0", locale47);
        org.joda.time.LocalTime localTime50 = property42.roundFloorCopy();
        org.joda.time.LocalTime localTime52 = localTime50.minusMillis(22);
        org.joda.time.LocalTime localTime54 = localTime50.minusMillis(23);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.lang.String str59 = dateTimeZone56.getShortName((long) 2922789, locale58);
        java.util.Locale locale60 = locale58.stripExtensions();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.LocalTime localTime66 = dateTime65.toLocalTime();
        org.joda.time.DateTime.Property property67 = dateTime65.minuteOfHour();
        org.joda.time.DateTime dateTime69 = dateTime65.plusWeeks(0);
        org.joda.time.Chronology chronology70 = dateTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.secondOfDay();
        long long74 = dateTimeField71.addWrapField((long) 366, 0);
        java.util.Locale locale76 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str77 = locale76.getCountry();
        java.lang.String str78 = dateTimeField71.getAsShortText(11, locale76);
        java.lang.String str79 = locale60.getDisplayName(locale76);
        java.lang.String str80 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localTime50, 7200000, locale60);
        // The following exception was thrown during execution in test generation
        try {
            int int81 = property17.compareTo((org.joda.time.ReadablePartial) localTime50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "dayOfMonth" + "'", str29, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1970L + "'", long32 == 1970L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u82f1\u6587\u7f8e\u56fd)" + "'", str48, "\u82f1\u6587\u7f8e\u56fd)");
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 366L + "'", long74 == 366L);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "CN" + "'", str77, "CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "11" + "'", str78, "11");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "7200000" + "'", str80, "7200000");
    }

    @Test
    public void test12242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12242");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.DurationField durationField12 = chronology7.minutes();
        long long15 = durationField12.getMillis(22, 1641167999990L);
        long long18 = durationField12.subtract((long) 27, (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1320000L + "'", long15 == 1320000L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 60027L + "'", long18 == 60027L);
    }

    @Test
    public void test12243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12243");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime10 = property6.addToCopy((long) 366);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTimeISO();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int23 = dateTimeZone21.getOffset((long) (byte) 1);
        long long25 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, (long) 3);
        org.joda.time.DateTime dateTime26 = dateTime17.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime28 = dateTime17.minus((long) '#');
        org.joda.time.DateTime.Property property29 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime31 = dateTime17.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime32 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime17.withSecondOfMinute(0);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(0L, dateTimeZone37);
        java.util.TimeZone timeZone41 = dateTimeZone37.toTimeZone();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str44 = locale43.getCountry();
        java.lang.String str45 = dateTimeZone37.getShortName(0L, locale43);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        java.lang.String str53 = property52.toString();
        org.joda.time.DateTime dateTime54 = property52.roundFloorCopy();
        org.joda.time.DateTime dateTime56 = property52.addToCopy((long) 366);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localTime59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusYears(7);
        org.joda.time.DateTime dateTime65 = dateTime61.plusWeeks((int) (short) 10);
        int int66 = property52.getDifference((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Interval interval68 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime65, readableDuration67);
        int int69 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime65);
        boolean boolean71 = instant12.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology72 = instant12.getChronology();
        int int73 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Chronology chronology74 = instant12.getChronology();
        org.joda.time.DateTime dateTime75 = instant12.toDateTimeISO();
        long long76 = instant12.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[minuteOfHour]" + "'", str7, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CN" + "'", str44, "CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Property[minuteOfHour]" + "'", str53, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-100800) + "'", int66 == (-100800));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645455419735L + "'", long76 == 1645455419735L);
    }

    @Test
    public void test12244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12244");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology37);
        long long43 = chronology5.set((org.joda.time.ReadablePartial) localTime41, 25200000L);
        org.joda.time.DateTimeField dateTimeField44 = chronology5.year();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(chronology5);
        org.joda.time.DateTimeField dateTimeField46 = chronology5.minuteOfDay();
        org.joda.time.DurationField durationField47 = chronology5.minutes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 53819776L + "'", long43 == 53819776L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test12245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12245");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        boolean boolean10 = dateTime8.isBefore((long) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime8.plusDays(1020);
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test12246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12246");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("53424816");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test12247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12247");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setVariant("53275870");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        java.util.Locale locale7 = builder6.build();
        java.lang.String str8 = locale7.getScript();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test12248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12248");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        long long9 = dateTimeZone1.previousTransition(0L);
        long long11 = dateTimeZone1.nextTransition(604800611L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 604800611L + "'", long11 == 604800611L);
    }

    @Test
    public void test12249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12249");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.util.Date date7 = calendar6.getTime();
        int int8 = date7.getHours();
        date7.setHours(366);
        int int11 = date7.getTimezoneOffset();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.getMinimumValue();
        org.joda.time.DateTime dateTime20 = property18.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone22.isLocalDateTimeGap(localDateTime23);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime20.withZoneRetainFields(dateTimeZone22);
        int int27 = dateTime26.getYearOfCentury();
        java.util.Date date28 = dateTime26.toDate();
        int int29 = date28.getMinutes();
        boolean boolean30 = date7.after(date28);
        long long31 = date7.getTime();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromDateFields(date7);
        java.util.Locale locale33 = java.util.Locale.US;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.lang.String str35 = locale33.getVariant();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale33);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = localTime40.getChronology();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfMonth();
        org.joda.time.Chronology chronology47 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.year();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(chronology47);
        boolean boolean51 = calendar36.before((java.lang.Object) chronology47);
        org.joda.time.DurationField durationField52 = chronology47.hours();
        long long55 = durationField52.subtract(53311058L, 1645454958405L);
        org.joda.time.DurationFieldType durationFieldType56 = durationField52.getType();
        boolean boolean57 = localTime32.isSupported(durationFieldType56);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455419934,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=59,MILLISECOND=934,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Mar 08 06:56:59 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1646722619934L + "'", long31 == 1646722619934L);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455419934,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=59,MILLISECOND=934,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-5923637850204688942L) + "'", long55 == (-5923637850204688942L));
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test12250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12250");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645455393206L);
    }

    @Test
    public void test12251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12251");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Calendar.Builder builder9 = builder0.setTimeOfDay(5, 7, 31);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        java.time.Instant instant11 = calendar10.toInstant();
        calendar10.set(12, (int) (byte) 0, 32772, (-100800), 365);
        calendar10.setTimeInMillis((long) (byte) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getRangeDurationType();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        int[] intArray40 = chronology29.get((org.joda.time.ReadablePartial) localTime38, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField41 = chronology29.dayOfYear();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.get();
        org.joda.time.Interval interval50 = property48.toInterval();
        org.joda.time.DateTime dateTime51 = interval50.getEnd();
        org.joda.time.Period period52 = interval50.toPeriod();
        int[] intArray54 = chronology29.get((org.joda.time.ReadablePeriod) period52, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField55 = chronology29.weekOfWeekyear();
        boolean boolean56 = dateTimeFieldType22.isSupported(chronology29);
        boolean boolean57 = dateTimeFieldType20.isSupported(chronology29);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        int int66 = localTime60.compareTo((org.joda.time.ReadablePartial) localTime63);
        org.joda.time.LocalTime.Property property67 = localTime60.hourOfDay();
        org.joda.time.LocalTime localTime69 = property67.addCopy(6);
        org.joda.time.LocalTime localTime70 = property67.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime71 = property67.roundCeilingCopy();
        int[] intArray73 = chronology29.get((org.joda.time.ReadablePartial) localTime71, (long) (byte) 1);
        boolean boolean74 = calendar10.before((java.lang.Object) intArray73);
        java.util.Calendar.Builder builder75 = builder0.setFields(intArray73);
        java.util.Calendar.Builder builder79 = builder75.setDate((-1645432682), 623000, 2);
        java.util.Calendar.Builder builder83 = builder75.setWeekDate(789, 457056, 2922789);
        java.util.Calendar.Builder builder85 = builder83.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder88 = builder85.set(2186, 1020);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=59,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test12252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12252");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra(6);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTime dateTime19 = dateTime14.withField(dateTimeFieldType17, 59);
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfDay();
        int int21 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime19.withYearOfEra(27424249);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getRangeDurationType();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = localTime28.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.weekyears();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = localTime36.getChronology();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) (byte) 1, chronology39);
        int[] intArray42 = chronology31.get((org.joda.time.ReadablePartial) localTime40, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField43 = chronology31.dayOfYear();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        int int51 = property50.get();
        org.joda.time.Interval interval52 = property50.toInterval();
        org.joda.time.DateTime dateTime53 = interval52.getEnd();
        org.joda.time.Period period54 = interval52.toPeriod();
        int[] intArray56 = chronology31.get((org.joda.time.ReadablePeriod) period54, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField57 = chronology31.weekOfWeekyear();
        boolean boolean58 = dateTimeFieldType24.isSupported(chronology31);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localTime61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = localTime61.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.weekyears();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType24.getField(chronology64);
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.now(chronology64);
        org.joda.time.DateTimeField dateTimeField68 = chronology64.millisOfDay();
        org.joda.time.DurationField durationField69 = chronology64.halfdays();
        org.joda.time.DurationField durationField70 = chronology64.months();
        org.joda.time.DateTime dateTime71 = dateTime23.withChronology(chronology64);
        org.joda.time.format.DateTimePrinter dateTimePrinter72 = null;
        org.joda.time.format.DateTimeParser dateTimeParser73 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter72, dateTimeParser73);
        org.joda.time.format.DateTimePrinter dateTimePrinter75 = dateTimeFormatter74.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter74.withDefaultYear(1);
        boolean boolean78 = dateTimeFormatter77.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter77.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter77.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime84 = null;
        boolean boolean85 = dateTimeZone83.isLocalDateTimeGap(localDateTime84);
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone83);
        boolean boolean88 = dateTimeZone83.isStandardOffset((long) 59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter77.withZone(dateTimeZone83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter77.withPivotYear((-1645432682));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = dateTime23.toString(dateTimeFormatter91);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNull(dateTimePrinter75);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
    }

    @Test
    public void test12253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12253");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        calendar2.setMinimalDaysInFirstWeek(5);
        java.util.TimeZone timeZone5 = calendar2.getTimeZone();
        java.lang.String str6 = calendar2.getCalendarType();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime8.toString(dateTimeFormatter9);
        int int11 = dateTime8.getEra();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, readableDuration12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfHour();
        int int21 = property20.get();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.DateTime.Property property29 = dateTime27.minuteOfHour();
        int int30 = property29.getMinimumValue();
        org.joda.time.DateTime dateTime31 = property29.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfYear();
        boolean boolean33 = interval22.contains((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        java.lang.String str41 = property40.toString();
        org.joda.time.DateTime dateTime42 = property40.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.minus(readableDuration43);
        org.joda.time.Interval interval45 = interval22.withStart((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Interval interval46 = interval22.toInterval();
        org.joda.time.Interval interval47 = interval13.overlap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int58 = dateTimeZone56.getOffset((long) (byte) 1);
        long long60 = dateTimeZone54.getMillisKeepLocal(dateTimeZone56, (long) 3);
        org.joda.time.DateTime dateTime61 = dateTime52.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime63 = dateTime52.minus((long) '#');
        org.joda.time.DateTime.Property property64 = dateTime52.weekyear();
        org.joda.time.DateTime dateTime66 = dateTime52.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime67 = dateTime52.toDateTime();
        org.joda.time.DateTime dateTime69 = dateTime52.withWeekOfWeekyear(2);
        boolean boolean70 = interval46.isAfter((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = dateTime69.withCenturyOfEra((int) (byte) 10);
        boolean boolean73 = dateTime72.isAfterNow();
        boolean boolean74 = calendar2.after((java.lang.Object) dateTime72);
        java.util.Calendar.Builder builder75 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder80 = builder75.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Calendar calendar81 = builder75.build();
        calendar81.clear();
        java.time.Instant instant83 = calendar81.toInstant();
        java.util.Date date84 = calendar81.getTime();
        int int85 = calendar81.getMinimalDaysInFirstWeek();
        calendar81.setMinimalDaysInFirstWeek((int) 'x');
        calendar81.clear();
        int int89 = calendar2.compareTo(calendar81);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\u82f1\u6587" + "'", str1, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455420018,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=0,MILLISECOND=18,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gregory" + "'", str6, "gregory");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.062+00:00:00.010" + "'", str10, "1970-01-01T00:00:00.062+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Property[minuteOfHour]" + "'", str41, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNull(interval47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3L + "'", long60 == 3L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=120,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(date84);
        org.junit.Assert.assertEquals(date84.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test12254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12254");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime8.plus(readablePeriod11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = localTime12.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        long long26 = dateTimeZone17.convertLocalToUTC((long) 9, false);
        java.lang.String str27 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime28 = localTime12.toDateTimeToday(dateTimeZone17);
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone17.getShortName((long) 100, locale30);
        boolean boolean33 = dateTimeZone17.isStandardOffset(1645454876554L);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 1140, dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.010" + "'", str31, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test12255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12255");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayName(locale9);
        java.lang.String str11 = property6.getAsText(locale7);
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        int int13 = property6.getMinimumValueOverall();
        org.joda.time.DateTime dateTime15 = property6.addWrapFieldToCopy(54);
        org.joda.time.DateTime dateTime16 = property6.getDateTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u82f1\u6587\u7f8e\u56fd)" + "'", str8, "\u82f1\u6587\u7f8e\u56fd)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str10, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test12256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12256");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.clockhourOfHalfday();
        java.lang.String str12 = dateTimeField10.getAsText(3L);
        long long15 = dateTimeField10.addWrapField(53308315L, 318367);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "12" + "'", str12, "12");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 78508315L + "'", long15 == 78508315L);
    }

    @Test
    public void test12257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12257");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime5.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.years();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weekyears();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        int[] intArray27 = chronology16.get((org.joda.time.ReadablePartial) localTime25, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField28 = chronology16.weekyear();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 5, chronology16);
        org.joda.time.DurationField durationField30 = chronology16.seconds();
        int int31 = durationField9.compareTo(durationField30);
        long long34 = durationField9.getDifferenceAsLong(49L, 53808215L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.010" + "'", str7, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }

    @Test
    public void test12258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12258");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        java.util.GregorianCalendar gregorianCalendar16 = dateTime13.toGregorianCalendar();
        int int17 = dateTime13.getYear();
        org.joda.time.DateTime dateTime19 = dateTime13.withYear(9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime13.toString(dateTimeFormatter20);
        org.joda.time.DateTime dateTime22 = dateTime13.toDateTimeISO();
        int int23 = dateTime13.getSecondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime13.weekOfWeekyear();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.lang.String str32 = locale31.getVariant();
        java.lang.String str33 = locale27.getDisplayScript(locale31);
        java.lang.String str34 = locale27.getVariant();
        java.lang.String str35 = locale26.getDisplayLanguage(locale27);
        java.util.Locale.setDefault(locale27);
        java.util.Calendar calendar37 = dateTime13.toCalendar(locale27);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str21, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645402199990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
    }

    @Test
    public void test12259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12259");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter5.withDefaultYear(0);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronolgy();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronolgy();
        java.lang.Appendable appendable12 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable12, 1645455124311L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertNull(chronology11);
    }

    @Test
    public void test12260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12260");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.MutablePeriod mutablePeriod31 = period28.toMutablePeriod();
        org.joda.time.Period period32 = mutablePeriod31.toPeriod();
        org.joda.time.Period period33 = mutablePeriod31.toPeriod();
        org.joda.time.PeriodType periodType34 = period33.getPeriodType();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.getMinimumValue();
        org.joda.time.DateTime dateTime43 = property41.roundHalfEvenCopy();
        java.util.Locale locale44 = java.util.Locale.US;
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.lang.String str49 = locale44.getDisplayCountry(locale48);
        java.lang.String str50 = property41.getAsText(locale48);
        long long51 = property41.remainder();
        org.joda.time.DateTimeField dateTimeField52 = property41.getField();
        org.joda.time.DateTime dateTime53 = property41.withMinimumValue();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period33, (org.joda.time.ReadableInstant) dateTime53);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = period33.getValue(892);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 892");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertEquals(locale48.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "United States" + "'", str49, "United States");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "10" + "'", str50, "10");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test12261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12261");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        int int5 = date1.getMonth();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date1);
        java.lang.String str7 = date1.toLocaleString();
        java.util.Date date9 = new java.util.Date((long) (byte) 100);
        date9.setMinutes(11);
        long long12 = date9.getTime();
        long long13 = date9.getTime();
        date9.setSeconds((int) ' ');
        java.lang.String str16 = date9.toLocaleString();
        date9.setYear(3);
        java.time.Instant instant19 = date9.toInstant();
        boolean boolean20 = date1.after(date9);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "01.01.1970 00:11:00" + "'", str7, "01.01.1970 00:11:00");
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:11:32 UTC 1903");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 660100L + "'", long12 == 660100L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 660100L + "'", long13 == 660100L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "01.01.1970 00:11:32" + "'", str16, "01.01.1970 00:11:32");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test12262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12262");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationField durationField20 = chronology6.minutes();
        long long23 = durationField20.subtract(0L, (long) (byte) 1);
        boolean boolean24 = durationField20.isPrecise();
        long long27 = durationField20.add(1645402200000L, (-1L));
        long long30 = durationField20.subtract((long) 2070, (-60526224000000L));
        long long33 = durationField20.add((long) 24, 163239569);
        long long36 = durationField20.subtract((-32940000L), 40);
        long long39 = durationField20.add(53440539L, 292278993);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60000L) + "'", long23 == (-60000L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645402140000L + "'", long27 == 1645402140000L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3631573440000002070L + "'", long30 == 3631573440000002070L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 9794374140024L + "'", long33 == 9794374140024L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-35340000L) + "'", long36 == (-35340000L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 17536793020539L + "'", long39 == 17536793020539L);
    }

    @Test
    public void test12263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12263");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury((int) '4');
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalTime localTime30 = localTime26.plus(readablePeriod29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean32 = localTime30.isSupported(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = dateTime23.withFields((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        long long41 = dateTimeZone35.getMillisKeepLocal(dateTimeZone37, (long) 3);
        long long44 = dateTimeZone35.convertLocalToUTC((long) 9, false);
        java.lang.String str45 = dateTimeZone35.toString();
        org.joda.time.DateTime dateTime46 = localTime30.toDateTimeToday(dateTimeZone35);
        boolean boolean48 = dateTimeZone35.isStandardOffset((long) 7);
        org.joda.time.DateTime dateTime49 = dateTime16.toDateTime(dateTimeZone35);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime52 = dateTime16.withFieldAdded(durationFieldType50, 2922789);
        int int53 = dateTime16.getMinuteOfDay();
        org.joda.time.DateTime dateTime55 = dateTime16.withSecondOfMinute(15);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.minuteOfHour();
        java.util.Locale locale63 = java.util.Locale.US;
        java.lang.String str64 = locale63.getDisplayName();
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale63.getDisplayName(locale65);
        java.lang.String str67 = property62.getAsText(locale63);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property62.getFieldType();
        boolean boolean69 = dateTime55.isSupported(dateTimeFieldType68);
        org.joda.time.DateTime.Property property70 = dateTime55.year();
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime55.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.010" + "'", str45, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str64, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str66, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "10" + "'", str67, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
    }

    @Test
    public void test12264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12264");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        calendar0.add(0, (int) 'a');
        int int7 = calendar0.getWeeksInWeekYear();
        calendar0.set(1, 47, (-1969));
        // The following exception was thrown during execution in test generation
        try {
            calendar0.add(21, 86399905);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=47,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=-1969,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=0,MILLISECOND=250,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test12265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12265");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        long long11 = dateTimeField8.add((long) 'u', 7);
        int int12 = dateTimeField8.getMaximumValue();
        int int14 = dateTimeField8.get(22200000L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 25200117L + "'", long11 == 25200117L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 11 + "'", int12 == 11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
    }

    @Test
    public void test12266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12266");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setVariant("53275870");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder8.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12267");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear(3);
        int int33 = dateTime32.getEra();
        org.joda.time.DateTime dateTime36 = dateTime32.withDurationAdded(27424247L, 233);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test12268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12268");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.lang.String str3 = calendar2.getCalendarType();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        calendar2.clear();
        // The following exception was thrown during execution in test generation
        try {
            calendar2.set(53, 889);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Englisch" + "'", str1, "Englisch");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test12269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12269");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = localTime7.minusMinutes(1);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.dayOfMonth();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology17);
        org.joda.time.LocalTime localTime23 = localTime21.plusHours((int) 'u');
        org.joda.time.LocalTime localTime25 = localTime21.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int31 = dateTimeZone29.getOffset((long) (byte) 1);
        long long33 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 3);
        long long36 = dateTimeZone27.convertLocalToUTC((long) 9, false);
        java.lang.String str37 = dateTimeZone27.toString();
        org.joda.time.DateTime dateTime38 = localTime25.toDateTimeToday(dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.minus(readableDuration39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = dateTime38.toDateTime(dateTimeZone42);
        org.joda.time.DateTime.Property property45 = dateTime38.centuryOfEra();
        org.joda.time.DateTime.Property property46 = dateTime38.centuryOfEra();
        boolean boolean47 = localTime7.equals((java.lang.Object) dateTime38);
        org.joda.time.DateTime dateTime49 = dateTime38.plusDays(599990);
        org.joda.time.DateTime.Property property50 = dateTime38.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3L + "'", long33 == 3L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-1L) + "'", long36 == (-1L));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00:00.010" + "'", str37, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test12270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12270");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear(3);
        boolean boolean34 = dateTime30.isEqual(175367340000L);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.Chronology chronology45 = chronology41.withUTC();
        org.joda.time.DateTime dateTime46 = dateTime30.toDateTime(chronology41);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.LocalTime localTime52 = dateTime51.toLocalTime();
        org.joda.time.DateTime.Property property53 = dateTime51.minuteOfHour();
        int int54 = property53.get();
        org.joda.time.Interval interval55 = property53.toInterval();
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Period period57 = interval55.toPeriod();
        org.joda.time.DateTime dateTime58 = dateTime30.minus((org.joda.time.ReadablePeriod) period57);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test12271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12271");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        int int15 = dateTime14.getYearOfCentury();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.LocalTime localTime21 = dateTime20.toLocalTime();
        org.joda.time.DateTime.Property property22 = dateTime20.minuteOfHour();
        int int23 = property22.get();
        org.joda.time.Interval interval24 = property22.toInterval();
        org.joda.time.Interval interval25 = interval24.toInterval();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        org.joda.time.DateTime.Property property32 = dateTime30.minuteOfHour();
        int int33 = property32.get();
        org.joda.time.Interval interval34 = property32.toInterval();
        org.joda.time.Interval interval35 = interval34.toInterval();
        boolean boolean36 = interval25.isBefore((org.joda.time.ReadableInterval) interval34);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        org.joda.time.DateTime.Property property43 = dateTime41.minuteOfHour();
        int int44 = property43.get();
        org.joda.time.Interval interval45 = property43.toInterval();
        org.joda.time.Interval interval46 = interval45.toInterval();
        boolean boolean47 = interval25.abuts((org.joda.time.ReadableInterval) interval45);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.get();
        org.joda.time.Interval interval56 = property54.toInterval();
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        org.joda.time.LocalTime localTime63 = dateTime62.toLocalTime();
        org.joda.time.DateTime.Property property64 = dateTime62.minuteOfHour();
        int int65 = property64.getMinimumValue();
        org.joda.time.DateTime dateTime66 = property64.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime69 = null;
        boolean boolean70 = dateTimeZone68.isLocalDateTimeGap(localDateTime69);
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime(dateTimeZone68);
        org.joda.time.DateTime dateTime72 = dateTime66.withZoneRetainFields(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((java.lang.Object) dateTime72);
        org.joda.time.Interval interval74 = interval57.withEnd((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Interval interval75 = interval25.withStart((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime77 = dateTime72.minusYears((int) (short) -1);
        boolean boolean78 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.DateTime.Property property79 = dateTime14.secondOfDay();
        int int80 = property79.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test12272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12272");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear(3);
        boolean boolean34 = dateTime30.isEqual(175367340000L);
        java.util.Date date35 = dateTime30.toDate();
        java.util.Date date36 = dateTime30.toDate();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Jan 01 00:01:00 UTC 1970");
        org.junit.Assert.assertNotNull(date36);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Jan 01 00:01:00 UTC 1970");
    }

    @Test
    public void test12273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12273");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int4 = dateTimeZone2.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0L, dateTimeZone2);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(dateTimeZone2);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePartial) localTime21, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField24 = chronology12.dayOfYear();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = localTime28.getChronology();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (byte) 1, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = chronology31.hourOfHalfday();
        long long36 = dateTimeField33.add((long) 'u', 7);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        int int45 = localTime39.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.LocalTime.Property property46 = localTime39.hourOfDay();
        org.joda.time.LocalTime localTime48 = property46.addCopy(6);
        org.joda.time.LocalTime localTime49 = property46.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime50 = property46.roundCeilingCopy();
        org.joda.time.LocalTime localTime52 = localTime50.plusHours(2922789);
        java.util.Locale locale53 = java.util.Locale.ITALY;
        boolean boolean54 = locale53.hasExtensions();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localTime50, locale53);
        java.util.Locale locale58 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale59 = java.util.Locale.ITALY;
        boolean boolean60 = locale59.hasExtensions();
        java.lang.String str61 = locale58.getDisplayVariant(locale59);
        java.lang.String str62 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localTime50, (int) '4', locale58);
        boolean boolean63 = dateTimeZone2.equals((java.lang.Object) str62);
        int int65 = dateTimeZone2.getOffset(759888000000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 25200117L + "'", long36 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "52" + "'", str62, "52");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
    }

    @Test
    public void test12274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12274");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale4 = java.util.Locale.UK;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale8 = new java.util.Locale("English");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet10 = locale8.getExtensionKeys();
        java.lang.String str11 = locale8.getScript();
        java.util.Locale.setDefault(category0, locale8);
        java.lang.String str13 = locale8.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale8.toString(), "english");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test12275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12275");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.Interval interval30 = interval29.toInterval();
        boolean boolean31 = interval9.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.getMinimumValue();
        org.joda.time.DateTime dateTime50 = property48.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone52.isLocalDateTimeGap(localDateTime53);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime50.withZoneRetainFields(dateTimeZone52);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) dateTime56);
        org.joda.time.Interval interval58 = interval41.withEnd((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Interval interval59 = interval9.withStart((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((java.lang.Object) dateTime56);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = localTime64.getChronology();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) (byte) 1, chronology67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology67);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTime.Property property71 = dateTime69.millisOfDay();
        boolean boolean72 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime74 = dateTime60.withMinuteOfHour(9);
        org.joda.time.DateTime dateTime76 = dateTime74.plus(120493983959000L);
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.DateTime dateTime82 = localTime80.toDateTime(readableInstant81);
        org.joda.time.Chronology chronology83 = localTime80.getChronology();
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((long) (byte) 1, chronology83);
        org.joda.time.DateTimeField dateTimeField85 = chronology83.hourOfHalfday();
        long long87 = dateTimeField85.roundFloor((long) 1);
        int int88 = dateTime74.get(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test12276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12276");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CN" + "'", str1, "CN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "China" + "'", str2, "China");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test12277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12277");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology37);
        long long43 = chronology5.set((org.joda.time.ReadablePartial) localTime41, 25200000L);
        java.lang.String str44 = localTime41.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 53820565L + "'", long43 == 53820565L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "14:57:00.565" + "'", str44, "14:57:00.565");
    }

    @Test
    public void test12278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12278");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks(0);
        org.joda.time.DateTime dateTime10 = dateTime4.plus(1L);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks(6);
        int int13 = dateTime12.getSecondOfDay();
        int int14 = dateTime12.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime12.withMillis(1645455221019L);
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 600 + "'", int13 == 600);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test12279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12279");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        long long10 = dateTimeZone1.convertLocalToUTC((long) 9, false);
        java.lang.String str11 = dateTimeZone1.toString();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(dateTimeZone1);
        int int14 = dateTimeZone1.getStandardOffset((long) 9);
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale16.getVariant();
        java.lang.String str19 = dateTimeZone1.getShortName((long) 122, locale16);
        java.util.TimeZone timeZone20 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        long long22 = calendar21.getTimeInMillis();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        boolean boolean24 = calendar23.isWeekDateSupported();
        long long25 = calendar23.getTimeInMillis();
        calendar23.set((-100800), 600, 8);
        int int30 = calendar23.getMinimalDaysInFirstWeek();
        java.util.Date date31 = calendar23.getTime();
        calendar21.setTime(date31);
        // The following exception was thrown during execution in test generation
        try {
            calendar21.add(302, 134);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-3241594890179402,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=100751,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=8,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=0,MILLISECOND=608,ZONE_OFFSET=10,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645455420598L + "'", long22 == 1645455420598L);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-3241594890179402,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=100751,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=8,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=0,MILLISECOND=598,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645455420598L + "'", long25 == 1645455420598L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Thu Jan 08 14:57:00 UTC 100751");
    }

    @Test
    public void test12280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12280");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTime();
        org.joda.time.DateTime dateTime3 = instant0.toDateTimeISO();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test12281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12281");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Period period9 = interval8.toPeriod();
        long long10 = interval8.toDurationMillis();
        boolean boolean11 = interval8.isBeforeNow();
        org.joda.time.Interval interval12 = interval8.toInterval();
        long long13 = interval8.getStartMillis();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfHour();
        int int21 = property20.get();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.joda.time.Interval interval23 = interval22.toInterval();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        int int31 = property30.get();
        org.joda.time.Interval interval32 = property30.toInterval();
        org.joda.time.Interval interval33 = interval32.toInterval();
        boolean boolean34 = interval23.isBefore((org.joda.time.ReadableInterval) interval32);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.get();
        org.joda.time.Interval interval43 = property41.toInterval();
        org.joda.time.Interval interval44 = interval43.toInterval();
        boolean boolean45 = interval23.abuts((org.joda.time.ReadableInterval) interval43);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.get();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.joda.time.Interval interval55 = interval54.toInterval();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.LocalTime localTime61 = dateTime60.toLocalTime();
        org.joda.time.DateTime.Property property62 = dateTime60.minuteOfHour();
        int int63 = property62.getMinimumValue();
        org.joda.time.DateTime dateTime64 = property62.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime67 = null;
        boolean boolean68 = dateTimeZone66.isLocalDateTimeGap(localDateTime67);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime(dateTimeZone66);
        org.joda.time.DateTime dateTime70 = dateTime64.withZoneRetainFields(dateTimeZone66);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((java.lang.Object) dateTime70);
        org.joda.time.Interval interval72 = interval55.withEnd((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Interval interval73 = interval23.withStart((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period74 = interval23.toPeriod();
        boolean boolean75 = interval8.isBefore((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableInterval mutableInterval76 = interval8.toMutableInterval();
        org.joda.time.Interval interval78 = interval8.withStartMillis((long) (-14));
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        org.joda.time.Interval interval80 = interval78.withPeriodAfterStart(readablePeriod79);
        org.joda.time.Chronology chronology81 = interval80.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645402199990L + "'", long13 == 1645402199990L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mutableInterval76);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test12282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12282");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(53268449L, dateTimeZone1);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfHour();
        int int10 = property9.get();
        org.joda.time.DateTime dateTime11 = property9.roundHalfEvenCopy();
        boolean boolean13 = dateTime11.isBefore((long) (byte) 10);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int[] intArray38 = chronology27.get((org.joda.time.ReadablePartial) localTime36, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField39 = chronology27.dayOfYear();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.LocalTime localTime45 = dateTime44.toLocalTime();
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfHour();
        int int47 = property46.get();
        org.joda.time.Interval interval48 = property46.toInterval();
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.Period period50 = interval48.toPeriod();
        int[] intArray52 = chronology27.get((org.joda.time.ReadablePeriod) period50, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.Chronology chronology59 = localTime56.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.weekyears();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = localTime64.getChronology();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) (byte) 1, chronology67);
        int[] intArray70 = chronology59.get((org.joda.time.ReadablePartial) localTime68, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField71 = chronology59.dayOfYear();
        org.joda.time.DurationField durationField72 = durationFieldType53.getField(chronology59);
        int int73 = period50.get(durationFieldType53);
        int[] intArray76 = chronology20.get((org.joda.time.ReadablePeriod) period50, 1645454861756L, (long) 9);
        boolean boolean77 = dateTime11.equals((java.lang.Object) chronology20);
        org.joda.time.DateTimeField dateTimeField78 = chronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField79 = chronology20.minuteOfDay();
        org.joda.time.DateTime dateTime80 = dateTime2.withChronology(chronology20);
        org.joda.time.DateTime.Property property81 = dateTime2.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[-52, -1, -2, -6, -14, -47, -41, -747]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test12283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12283");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        boolean boolean11 = dateTimeFieldType2.isSupported(chronology9);
        boolean boolean12 = durationFieldType1.isSupported(chronology9);
        java.lang.String str13 = chronology9.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology9.dayOfYear();
        long long17 = dateTimeField14.set(151200000L, (int) 'x');
        int int18 = dateTimeField14.getMinimumValue();
        long long20 = dateTimeField14.remainder(19736037354062L);
        long long23 = dateTimeField14.add(1645455082450L, (-1645433169));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10346400000L + "'", long17 == 10346400000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 30954062L + "'", long20 == 30954062L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-142163780346517550L) + "'", long23 == (-142163780346517550L));
    }

    @Test
    public void test12284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12284");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        int int17 = dateTime16.getEra();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int28 = dateTimeZone26.getOffset((long) (byte) 1);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone26, (long) 3);
        org.joda.time.DateTime dateTime31 = dateTime22.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime33 = dateTime22.minus((long) '#');
        org.joda.time.DateTime.Property property34 = dateTime22.weekyear();
        org.joda.time.DateTime dateTime36 = dateTime22.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime37 = dateTime22.toDateTime();
        org.joda.time.DateTime dateTime39 = dateTime22.withWeekyear(15);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        java.lang.String str41 = dateTime39.toString();
        int int42 = dateTime39.getMinuteOfHour();
        int int43 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime.Property property44 = dateTime39.dayOfWeek();
        org.joda.time.DateTime.Property property45 = dateTime39.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3L + "'", long30 == 3L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "0015-02-16T00:10:00.000+00:00:00.010" + "'", str41, "0015-02-16T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test12285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12285");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear(22383);
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        int int18 = localTime12.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime.Property property19 = localTime12.hourOfDay();
        org.joda.time.LocalTime localTime21 = property19.addCopy(6);
        org.joda.time.LocalTime localTime22 = property19.roundCeilingCopy();
        java.util.Locale locale24 = java.util.Locale.US;
        java.lang.String str25 = locale24.getDisplayName();
        org.joda.time.LocalTime localTime26 = property19.setCopy("0", locale24);
        org.joda.time.LocalTime localTime28 = property19.addCopy((int) (byte) 0);
        org.joda.time.Interval interval29 = property19.toInterval();
        org.joda.time.DurationField durationField30 = property19.getDurationField();
        org.joda.time.LocalTime localTime32 = property19.addWrapFieldToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(stringBuffer9, (org.joda.time.ReadablePartial) localTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str25, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localTime32);
    }

    @Test
    public void test12286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12286");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int4 = dateTimeZone2.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0L, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = dateTimeZone2.getShortName(0L, locale8);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        java.lang.String str18 = property17.toString();
        org.joda.time.DateTime dateTime19 = property17.roundFloorCopy();
        org.joda.time.DateTime dateTime21 = property17.addToCopy((long) 366);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears(7);
        org.joda.time.DateTime dateTime30 = dateTime26.plusWeeks((int) (short) 10);
        int int31 = property17.getDifference((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, readableDuration32);
        int int34 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime30);
        int int36 = dateTimeZone2.getStandardOffset((long) 292278993);
        long long39 = dateTimeZone2.adjustOffset(3195670080000L, true);
        long long43 = dateTimeZone2.convertLocalToUTC((long) 600074, true, (long) 10);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CN" + "'", str9, "CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[minuteOfHour]" + "'", str18, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-100800) + "'", int31 == (-100800));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3195670080000L + "'", long39 == 3195670080000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 600064L + "'", long43 == 600064L);
    }

    @Test
    public void test12287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12287");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        boolean boolean15 = dateTimeFieldType6.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.centuryOfEra();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        org.joda.time.DateTime dateTime27 = localTime26.toDateTimeToday();
        org.joda.time.LocalTime localTime29 = localTime26.minusMinutes(1);
        org.joda.time.LocalTime.Property property30 = localTime26.millisOfDay();
        org.joda.time.LocalTime localTime31 = localTime18.withFields((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.LocalTime.Property property32 = localTime26.hourOfDay();
        int int33 = property32.getLeapAmount();
        org.joda.time.LocalTime localTime35 = property32.setCopy(19);
        org.joda.time.LocalTime localTime36 = property32.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime37 = property32.roundHalfCeilingCopy();
        org.joda.time.ReadableInstant readableInstant38 = null;
        long long39 = property32.getDifferenceAsLong(readableInstant38);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.weekyears();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = localTime50.getChronology();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (byte) 1, chronology53);
        int[] intArray56 = chronology45.get((org.joda.time.ReadablePartial) localTime54, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField57 = chronology45.clockhourOfDay();
        org.joda.time.DurationField durationField58 = chronology45.weeks();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(chronology45);
        org.joda.time.DateTimeField dateTimeField60 = chronology45.era();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = dateTimeZone61.getShortName((long) 2922789, locale63);
        java.util.Locale locale65 = locale63.stripExtensions();
        int int66 = dateTimeField60.getMaximumShortTextLength(locale65);
        int int67 = property32.getMaximumTextLength(locale65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter5.withLocale(locale65);
        java.lang.Integer int69 = dateTimeFormatter5.getPivotYear();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-457070L) + "'", long39 == (-457070L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.010" + "'", str64, "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNull(int69);
    }

    @Test
    public void test12288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12288");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime6 = localTime2.withMillisOfDay(9);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test12289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12289");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.dayOfYear();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.Period period30 = interval28.toPeriod();
        int[] intArray32 = chronology7.get((org.joda.time.ReadablePeriod) period30, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField33 = chronology7.weekOfWeekyear();
        boolean boolean34 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.Chronology chronology40 = localTime37.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType0.getField(chronology40);
        int int43 = dateTimeField42.getMinimumValue();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) (byte) 1, chronology58);
        int[] intArray61 = chronology50.get((org.joda.time.ReadablePartial) localTime59, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField62 = chronology50.dayOfYear();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localTime65.toDateTime(readableInstant66);
        org.joda.time.LocalTime localTime68 = dateTime67.toLocalTime();
        org.joda.time.DateTime.Property property69 = dateTime67.minuteOfHour();
        int int70 = property69.get();
        org.joda.time.Interval interval71 = property69.toInterval();
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.Period period73 = interval71.toPeriod();
        int[] intArray75 = chronology50.get((org.joda.time.ReadablePeriod) period73, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int81 = dateTimeZone79.getOffset((long) (byte) 1);
        long long83 = dateTimeZone77.getMillisKeepLocal(dateTimeZone79, (long) 3);
        long long86 = dateTimeZone77.convertLocalToUTC((long) 9, false);
        java.lang.String str87 = dateTimeZone77.toString();
        org.joda.time.Chronology chronology88 = chronology50.withZone(dateTimeZone77);
        int int90 = dateTimeZone77.getOffsetFromLocal(1645454862530L);
        java.util.Locale.Category category92 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale93 = java.util.Locale.getDefault(category92);
        java.lang.String str94 = dateTimeZone77.getShortName(25200117L, locale93);
        java.lang.String str95 = locale93.getDisplayCountry();
        boolean boolean96 = locale93.hasExtensions();
        java.util.Set<java.lang.String> strSet97 = locale93.getUnicodeLocaleAttributes();
        java.lang.String str98 = dateTimeField42.getAsText(1645454928854L, locale93);
        java.lang.String str99 = locale93.getCountry();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 3L + "'", long83 == 3L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-1L) + "'", long86 == (-1L));
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+00:00:00.010" + "'", str87, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
        org.junit.Assert.assertTrue("'" + category92 + "' != '" + java.util.Locale.Category.FORMAT + "'", category92.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "english");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+00:00:00.010" + "'", str94, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "2" + "'", str98, "2");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test12290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12290");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime6 = dateTime5.toLocalTime();
        int int7 = dateTime5.getMonthOfYear();
        int int8 = dateTime5.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int14 = dateTimeZone12.getOffset((long) (byte) 1);
        long long16 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, (long) 3);
        org.joda.time.DateTime dateTime17 = dateTime5.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfCentury((int) '4');
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime31 = localTime27.plus(readablePeriod30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean33 = localTime31.isSupported(dateTimeFieldType32);
        org.joda.time.DateTime dateTime34 = dateTime24.withFields((org.joda.time.ReadablePartial) localTime31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int40 = dateTimeZone38.getOffset((long) (byte) 1);
        long long42 = dateTimeZone36.getMillisKeepLocal(dateTimeZone38, (long) 3);
        long long45 = dateTimeZone36.convertLocalToUTC((long) 9, false);
        java.lang.String str46 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime47 = localTime31.toDateTimeToday(dateTimeZone36);
        boolean boolean49 = dateTimeZone36.isStandardOffset((long) 7);
        org.joda.time.DateTime dateTime50 = dateTime17.toDateTime(dateTimeZone36);
        java.lang.String str52 = dateTimeZone36.getName(10381800000L);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((-59006173800000L), dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3L + "'", long16 == 3L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.010" + "'", str46, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.010" + "'", str52, "+00:00:00.010");
    }

    @Test
    public void test12291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12291");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime4.minus((long) '#');
        org.joda.time.DateTime.Property property16 = dateTime4.weekyear();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime4.plus(readableDuration17);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        int int26 = dateTime24.getMonthOfYear();
        int int27 = dateTime24.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int33 = dateTimeZone31.getOffset((long) (byte) 1);
        long long35 = dateTimeZone29.getMillisKeepLocal(dateTimeZone31, (long) 3);
        org.joda.time.DateTime dateTime36 = dateTime24.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfCentury((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.DateTime dateTime41 = dateTime36.withField(dateTimeFieldType39, (int) (byte) 1);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.get();
        org.joda.time.Interval interval50 = property48.toInterval();
        org.joda.time.Interval interval51 = interval50.toInterval();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        org.joda.time.LocalTime localTime57 = dateTime56.toLocalTime();
        org.joda.time.DateTime.Property property58 = dateTime56.minuteOfHour();
        int int59 = property58.getMinimumValue();
        org.joda.time.DateTime dateTime60 = property58.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime63 = null;
        boolean boolean64 = dateTimeZone62.isLocalDateTimeGap(localDateTime63);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(dateTimeZone62);
        org.joda.time.DateTime dateTime66 = dateTime60.withZoneRetainFields(dateTimeZone62);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((java.lang.Object) dateTime66);
        org.joda.time.Interval interval68 = interval51.withEnd((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration69 = interval51.toDuration();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateTime dateTime72 = dateTime18.withDurationAdded((org.joda.time.ReadableDuration) duration69, 6);
        int int73 = dateTime72.getMinuteOfDay();
        int int74 = dateTime72.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay75 = dateTime72.toTimeOfDay();
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localTime78.toDateTime(readableInstant79);
        org.joda.time.LocalTime localTime81 = dateTime80.toLocalTime();
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.DateTime dateTime86 = localTime84.toDateTime(readableInstant85);
        org.joda.time.LocalTime localTime87 = dateTime86.toLocalTime();
        org.joda.time.LocalTime localTime89 = localTime87.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.era();
        int int91 = localTime87.indexOf(dateTimeFieldType90);
        int int92 = dateTime80.get(dateTimeFieldType90);
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType90.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime95 = dateTime72.withFieldAdded(durationFieldType93, 990);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3L + "'", long35 == 3L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 16 + "'", int73 == 16);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 16 + "'", int74 == 16);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(durationFieldType93);
    }

    @Test
    public void test12292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12292");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(chronology7);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((long) (short) -1, 3);
        org.joda.time.DateTime dateTime19 = dateTime17.minusHours(2000);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int30 = dateTimeZone28.getOffset((long) (byte) 1);
        long long32 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 3);
        org.joda.time.DateTime dateTime33 = dateTime24.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime35 = dateTime24.minus((long) '#');
        org.joda.time.DateTime.Property property36 = dateTime24.weekyear();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime24.toMutableDateTime();
        boolean boolean38 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime24);
        boolean boolean40 = dateTime17.isAfter((long) 419);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test12293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12293");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime10 = property9.withMinimumValue();
        int int11 = property9.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test12294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12294");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setVariant("53275870");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.setVariant("weekyear");
        java.util.Locale.Builder builder9 = builder6.clear();
        java.util.Locale.Builder builder11 = builder6.setVariant("");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime17.plusWeeks(0);
        org.joda.time.Chronology chronology22 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfDay();
        org.joda.time.DurationField durationField24 = dateTimeField23.getRangeDurationField();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str26 = locale25.getCountry();
        int int27 = dateTimeField23.getMaximumTextLength(locale25);
        java.util.Locale.Builder builder28 = builder12.setLocale(locale25);
        java.util.Locale.Builder builder29 = builder12.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder12.setLanguage("13:47:42.530");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 13:47:42.530 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "CN" + "'", str26, "CN");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test12295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12295");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localTime8.toDateTime(readableInstant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime8.plus(readablePeriod11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean14 = localTime12.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime15 = dateTime5.withFields((org.joda.time.ReadablePartial) localTime12);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        long long26 = dateTimeZone17.convertLocalToUTC((long) 9, false);
        java.lang.String str27 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime28 = localTime12.toDateTimeToday(dateTimeZone17);
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Interval interval31 = interval29.withStartMillis((long) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        boolean boolean33 = interval29.isAfter(readableInstant32);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test12296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12296");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTime dateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime28 = null;
        boolean boolean29 = dateTimeZone27.isLocalDateTimeGap(localDateTime28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.DateTime dateTime31 = dateTime25.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = localTime14.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra(86399999);
        long long35 = dateTime32.getMillis();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (byte) 1, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfMonth();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.LocalTime localTime48 = localTime46.plusHours((int) 'u');
        org.joda.time.LocalTime localTime50 = localTime46.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int56 = dateTimeZone54.getOffset((long) (byte) 1);
        long long58 = dateTimeZone52.getMillisKeepLocal(dateTimeZone54, (long) 3);
        long long61 = dateTimeZone52.convertLocalToUTC((long) 9, false);
        java.lang.String str62 = dateTimeZone52.toString();
        org.joda.time.DateTime dateTime63 = localTime50.toDateTimeToday(dateTimeZone52);
        java.util.Locale locale65 = java.util.Locale.US;
        java.util.Locale locale69 = new java.util.Locale("", "hi!", "");
        java.lang.String str70 = locale65.getDisplayCountry(locale69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(locale65);
        java.util.Locale locale72 = java.util.Locale.ITALY;
        boolean boolean73 = locale72.hasExtensions();
        java.lang.String str74 = locale65.getDisplayCountry(locale72);
        java.lang.String str75 = dateTimeZone52.getShortName((long) 2022, locale65);
        java.lang.String str76 = locale65.getDisplayName();
        java.util.Calendar calendar77 = dateTime32.toCalendar(locale65);
        java.util.Date date79 = new java.util.Date((long) (byte) 100);
        date79.setMinutes(11);
        java.lang.String str82 = date79.toLocaleString();
        calendar77.setTime(date79);
        calendar77.setTimeInMillis(1645401599991L);
        int int86 = calendar77.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            int int88 = calendar77.getMinimum(53486);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53486");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645401599991L + "'", long35 == 1645401599991L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3L + "'", long58 == 3L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.010" + "'", str62, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "United States" + "'", str70, "United States");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645455421004,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=1,MILLISECOND=4,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Stati Uniti" + "'", str74, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.010" + "'", str75, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str76, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(calendar77);
        org.junit.Assert.assertEquals(calendar77.toString(), "java.util.GregorianCalendar[time=1645401599991,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Jan 1, 1970 12:11:00 AM" + "'", str82, "Jan 1, 1970 12:11:00 AM");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test12297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12297");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weekyears();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 1, chronology21);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePartial) localTime22, (long) (short) -1);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.DateTime.Property property31 = dateTime29.minuteOfHour();
        int int32 = property31.getMinimumValue();
        org.joda.time.DateTime dateTime33 = property31.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime36 = null;
        boolean boolean37 = dateTimeZone35.isLocalDateTimeGap(localDateTime36);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(dateTimeZone35);
        org.joda.time.DateTime dateTime39 = dateTime33.withZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTime dateTime40 = localTime22.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        long long41 = property6.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime43 = dateTime40.withHourOfDay(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime48 = dateTime40.withTime((-14), 53613221, 100, 53546);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -14 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 9L + "'", long41 == 9L);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test12298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12298");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType0.getField(chronology6);
        org.joda.time.DurationField durationField20 = chronology6.minutes();
        long long23 = durationField20.subtract(0L, (long) (byte) 1);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (byte) 1, chronology38);
        int[] intArray41 = chronology30.get((org.joda.time.ReadablePartial) localTime39, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField42 = chronology30.dayOfYear();
        org.joda.time.DurationField durationField43 = durationFieldType24.getField(chronology30);
        org.joda.time.DurationFieldType durationFieldType44 = durationField43.getType();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = localTime50.getChronology();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (byte) 1, chronology53);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology53);
        org.joda.time.Interval interval56 = new org.joda.time.Interval(0L, 0L, chronology53);
        org.joda.time.DurationField durationField57 = durationFieldType44.getField(chronology53);
        int int58 = durationField20.compareTo(durationField57);
        long long61 = durationField57.add((-60000L), 3L);
        long long63 = durationField57.getValueAsLong((-61914758400000L));
        long long66 = durationField57.getMillis(53, 1030334470L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-60000L) + "'", long23 == (-60000L));
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 10740000L + "'", long61 == 10740000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-17198544L) + "'", long63 == (-17198544L));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 190800000L + "'", long66 == 190800000L);
    }

    @Test
    public void test12299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12299");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.DateTime.Property property9 = dateTime4.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test12300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12300");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) '4');
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        int int3 = property2.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property2.getFieldType();
        org.joda.time.DateTime dateTime6 = property2.addToCopy(1439);
        org.joda.time.DateTime dateTime8 = property2.setCopy((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 600000 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 62 + "'", int3 == 62);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test12301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12301");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.LocalTime localTime26 = localTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 8);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        int int34 = property33.get();
        org.joda.time.Interval interval35 = property33.toInterval();
        org.joda.time.DateTime dateTime37 = property33.addToCopy(9);
        org.joda.time.DateTime dateTime38 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime39 = localTime11.toDateTimeToday();
        org.joda.time.Chronology chronology40 = localTime11.getChronology();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test12302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12302");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        org.joda.time.DateTime.Property property45 = dateTime43.minuteOfHour();
        java.lang.String str46 = property45.toString();
        org.joda.time.DateTime dateTime47 = property45.roundFloorCopy();
        org.joda.time.DateTime dateTime49 = property45.addToCopy((long) 366);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localTime52.toDateTime(readableInstant53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusYears(7);
        org.joda.time.DateTime dateTime58 = dateTime54.plusWeeks((int) (short) 10);
        int int59 = property45.getDifference((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime58, readableDuration60);
        boolean boolean62 = interval8.equals((java.lang.Object) interval61);
        boolean boolean64 = interval61.contains(10740000L);
        org.joda.time.DateTime dateTime65 = interval61.getStart();
        org.joda.time.Interval interval66 = interval61.toInterval();
        long long67 = interval61.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[minuteOfHour]" + "'", str46, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-100800) + "'", int59 == (-100800));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test12303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12303");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(990L, 3631573444234202070L);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        int int9 = dateTime7.getMonthOfYear();
        int int10 = dateTime7.getHourOfDay();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        org.joda.time.DateTime dateTime24 = dateTime15.withZone(dateTimeZone17);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime24);
        boolean boolean27 = interval25.isBefore((long) 21);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.joda.time.DateTime.Property property34 = dateTime32.minuteOfHour();
        int int35 = property34.get();
        org.joda.time.Interval interval36 = property34.toInterval();
        org.joda.time.DateTime dateTime37 = interval36.getEnd();
        org.joda.time.Period period38 = interval36.toPeriod();
        org.joda.time.Period period39 = interval36.toPeriod();
        boolean boolean40 = interval25.isBefore((org.joda.time.ReadableInterval) interval36);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Interval interval42 = interval25.withDurationBeforeEnd(readableDuration41);
        java.lang.Object obj43 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.dayOfMonth();
        org.joda.time.Chronology chronology54 = chronology50.withUTC();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.year();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.clockhourOfDay();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(obj43, chronology54);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.LocalTime localTime65 = dateTime64.toLocalTime();
        org.joda.time.DateTime.Property property66 = dateTime64.minuteOfHour();
        int int67 = property66.get();
        org.joda.time.Interval interval68 = property66.toInterval();
        org.joda.time.DateTime dateTime69 = interval68.getEnd();
        org.joda.time.Period period70 = interval68.toPeriod();
        java.lang.String str71 = interval68.toString();
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localTime74.toDateTime(readableInstant75);
        org.joda.time.LocalTime localTime77 = dateTime76.toLocalTime();
        org.joda.time.DateTime.Property property78 = dateTime76.minuteOfHour();
        int int79 = property78.get();
        org.joda.time.Interval interval80 = property78.toInterval();
        org.joda.time.Interval interval81 = interval80.toInterval();
        long long82 = interval80.toDurationMillis();
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.Period period84 = interval80.toPeriod(periodType83);
        org.joda.time.Interval interval85 = interval68.overlap((org.joda.time.ReadableInterval) interval80);
        org.joda.time.PeriodType periodType86 = null;
        org.joda.time.Period period87 = interval85.toPeriod(periodType86);
        org.joda.time.MutablePeriod mutablePeriod88 = period87.toMutablePeriod();
        org.joda.time.PeriodType periodType89 = mutablePeriod88.getPeriodType();
        org.joda.time.Period period90 = interval59.toPeriod(periodType89);
        org.joda.time.Period period91 = interval42.toPeriod(periodType89);
        org.joda.time.Period period92 = interval2.toPeriod(periodType89);
        long long93 = interval2.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str71, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 60000L + "'", long82 == 60000L);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(mutablePeriod88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 990L + "'", long93 == 990L);
    }

    @Test
    public void test12304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12304");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TW");
    }

    @Test
    public void test12305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12305");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        int[] intArray20 = chronology9.get((org.joda.time.ReadablePartial) localTime18, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField21 = chronology9.clockhourOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) calendar0, chronology9);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(chronology9);
        org.joda.time.DurationField durationField24 = chronology9.years();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = durationField24.add((long) 53740, 1645454977311L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645454977311");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455421184,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=1,MILLISECOND=184,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455421184L + "'", long2 == 1645455421184L);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test12306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12306");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period27 = interval26.toPeriod();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = null;
        java.lang.String str31 = dateTime29.toString(dateTimeFormatter30);
        int int32 = dateTime29.getEra();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, readableDuration33);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.get();
        org.joda.time.Interval interval43 = property41.toInterval();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        int int51 = property50.getMinimumValue();
        org.joda.time.DateTime dateTime52 = property50.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        boolean boolean54 = interval43.contains((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.LocalTime localTime60 = dateTime59.toLocalTime();
        org.joda.time.DateTime.Property property61 = dateTime59.minuteOfHour();
        java.lang.String str62 = property61.toString();
        org.joda.time.DateTime dateTime63 = property61.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime65 = dateTime63.minus(readableDuration64);
        org.joda.time.Interval interval66 = interval43.withStart((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.Interval interval67 = interval43.toInterval();
        org.joda.time.Interval interval68 = interval34.overlap((org.joda.time.ReadableInterval) interval67);
        boolean boolean69 = interval26.abuts((org.joda.time.ReadableInterval) interval34);
        long long70 = interval26.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.062+00:00:00.010" + "'", str31, "1970-01-01T00:00:00.062+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Property[minuteOfHour]" + "'", str62, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test12307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12307");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay((int) (short) 10, (int) '4', 99, 35);
        java.util.Calendar.Builder builder18 = builder15.set(9, 35);
        java.util.Calendar.Builder builder21 = builder15.set(4, 2922789);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        int int28 = dateTime26.getMonthOfYear();
        int int29 = dateTime26.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.Interval interval31 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, readablePeriod30);
        org.joda.time.DateTime dateTime33 = dateTime26.plusMinutes(5);
        org.joda.time.DateTime dateTime35 = dateTime26.minusMillis(419);
        org.joda.time.Chronology chronology36 = dateTime26.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((java.lang.Object) builder15, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Calendar$Builder");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 11]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test12308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12308");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale6.getVariant();
        java.lang.String str8 = locale2.getDisplayScript(locale6);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        java.util.Locale locale18 = java.util.Locale.US;
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.lang.String str23 = locale18.getDisplayCountry(locale22);
        java.lang.String str24 = property15.getAsText(locale22);
        java.lang.String str25 = locale6.getDisplayVariant(locale22);
        java.lang.String str26 = locale0.getDisplayVariant(locale6);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int37 = dateTimeZone35.getOffset((long) (byte) 1);
        long long39 = dateTimeZone33.getMillisKeepLocal(dateTimeZone35, (long) 3);
        org.joda.time.DateTime dateTime40 = dateTime31.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime42 = dateTime31.minus((long) '#');
        org.joda.time.DateTime.Property property43 = dateTime31.weekyear();
        org.joda.time.DateTime dateTime45 = dateTime31.withWeekOfWeekyear((int) (short) 10);
        java.util.Locale locale47 = new java.util.Locale("Englisch (Vereinigte Staaten von Amerika)");
        java.util.Calendar calendar48 = dateTime31.toCalendar(locale47);
        java.lang.String str49 = locale6.getDisplayScript(locale47);
        java.lang.String str50 = locale47.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale6.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "United States" + "'", str23, "United States");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "10" + "'", str24, "10");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3L + "'", long39 == 3L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals(locale47.toString(), "englisch (vereinigte staaten von amerika)");
        org.junit.Assert.assertNotNull(calendar48);
        org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645402199990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test12309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12309");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        org.joda.time.LocalTime localTime45 = property42.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime46 = property42.withMinimumValue();
        org.joda.time.LocalTime localTime47 = property42.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 11]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
    }

    @Test
    public void test12310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12310");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        boolean boolean3 = localTime1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalTime.Property property4 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property4.addCopy((-26));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval7 = new org.joda.time.Interval((java.lang.Object) (-26));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test12311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12311");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        java.lang.String str4 = calendar0.getCalendarType();
        java.time.Instant instant5 = calendar0.toInstant();
        java.util.Date date7 = new java.util.Date((long) (byte) 100);
        date7.setMinutes(11);
        long long10 = date7.getTime();
        int int11 = date7.getMonth();
        calendar0.setTime(date7);
        calendar0.set(600000, 888, 11);
        int int18 = calendar0.getActualMaximum(2);
        java.time.Instant instant19 = calendar0.toInstant();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=18874340151060100,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=600074,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=11,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=11,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 660100L + "'", long10 == 660100L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test12312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12312");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime4.toString(dateTimeFormatter9);
        int int11 = dateTime4.getYearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        boolean boolean21 = dateTimeFieldType12.isSupported(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.centuryOfEra();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = localTime28.getChronology();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (byte) 1, chronology31);
        boolean boolean33 = dateTimeFieldType24.isSupported(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.centuryOfEra();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DateTimeField dateTimeField36 = chronology31.millisOfSecond();
        org.joda.time.DurationField durationField37 = chronology31.days();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = localTime41.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.weekyears();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = localTime49.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) (byte) 1, chronology52);
        int[] intArray55 = chronology44.get((org.joda.time.ReadablePartial) localTime53, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField56 = chronology44.weekyear();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 5, chronology44);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        org.joda.time.LocalTime localTime63 = dateTime62.toLocalTime();
        org.joda.time.DateTime.Property property64 = dateTime62.minuteOfHour();
        int int65 = property64.get();
        org.joda.time.Interval interval66 = property64.toInterval();
        org.joda.time.Period period67 = interval66.toPeriod();
        org.joda.time.DateTime dateTime68 = dateTime57.plus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.MutablePeriod mutablePeriod69 = period67.toMutablePeriod();
        int[] intArray71 = chronology31.get((org.joda.time.ReadablePeriod) period67, 7687676336460000L);
        org.joda.time.LocalTime localTime72 = localTime23.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime74 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period67, 18000000);
        org.joda.time.TimeOfDay timeOfDay75 = dateTime4.toTimeOfDay();
        boolean boolean77 = dateTime4.isAfter(3725404110L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010" + "'", str10, "2022-02-21T00:10:00.000+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 12711105, 0, 9, 1, 0, 0]");
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test12313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12313");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.util.Date date7 = calendar6.getTime();
        int int8 = date7.getHours();
        date7.setHours(366);
        int int11 = date7.getTimezoneOffset();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.getMinimumValue();
        org.joda.time.DateTime dateTime20 = property18.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime23 = null;
        boolean boolean24 = dateTimeZone22.isLocalDateTimeGap(localDateTime23);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = dateTime20.withZoneRetainFields(dateTimeZone22);
        int int27 = dateTime26.getYearOfCentury();
        java.util.Date date28 = dateTime26.toDate();
        int int29 = date28.getMinutes();
        boolean boolean30 = date7.after(date28);
        int int31 = date28.getDate();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "United States" + "'", str5, "United States");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455421349,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=1,MILLISECOND=349,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Mar 08 06:57:01 UTC 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(date28);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Feb 21 00:09:59 UTC 2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 21 + "'", int31 == 21);
    }

    @Test
    public void test12314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12314");
        java.util.Date date1 = new java.util.Date(1645454869965L);
        date1.setDate(1);
        int int4 = date1.getMonth();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (byte) 1, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.hourOfHalfday();
        long long17 = dateTimeField14.add((long) 'u', 7);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (byte) 1, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.dayOfMonth();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.LocalTime localTime30 = localTime28.plusHours((int) 'u');
        int int31 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localTime35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = localTime35.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.weekyears();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        int[] intArray49 = chronology38.get((org.joda.time.ReadablePartial) localTime47, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField50 = chronology38.dayOfYear();
        org.joda.time.DurationField durationField51 = durationFieldType32.getField(chronology38);
        org.joda.time.DurationFieldType durationFieldType52 = durationField51.getType();
        org.joda.time.LocalTime localTime54 = localTime28.withFieldAdded(durationFieldType52, 4);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        int int63 = localTime57.compareTo((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.LocalTime.Property property64 = localTime57.hourOfDay();
        org.joda.time.LocalTime localTime66 = property64.addCopy(6);
        int int67 = localTime66.getSecondOfMinute();
        org.joda.time.LocalTime.Property property68 = localTime66.secondOfMinute();
        org.joda.time.LocalTime localTime69 = property68.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime70 = localTime54.withFields((org.joda.time.ReadablePartial) localTime69);
        org.joda.time.LocalTime.Property property71 = localTime70.minuteOfHour();
        org.joda.time.LocalTime localTime73 = localTime70.minusSeconds(122);
        org.joda.time.LocalTime.Property property74 = localTime73.millisOfDay();
        int int75 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime73);
        int int76 = localTime5.size();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int81 = dateTimeZone79.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(0L, dateTimeZone79);
        org.joda.time.DateTime dateTime84 = dateTime82.minusMonths((int) (byte) 1);
        org.joda.time.DateTime dateTime86 = dateTime82.plusHours(62);
        boolean boolean87 = localTime5.equals((java.lang.Object) dateTime82);
        org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 01 14:47:49 UTC 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 25200117L + "'", long17 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test12315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12315");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfMonth();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.LocalTime localTime16 = localTime14.plusHours((int) 'u');
        org.joda.time.LocalTime localTime18 = localTime14.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int24 = dateTimeZone22.getOffset((long) (byte) 1);
        long long26 = dateTimeZone20.getMillisKeepLocal(dateTimeZone22, (long) 3);
        long long29 = dateTimeZone20.convertLocalToUTC((long) 9, false);
        java.lang.String str30 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime31 = localTime18.toDateTimeToday(dateTimeZone20);
        java.util.Locale locale33 = java.util.Locale.US;
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.lang.String str38 = locale33.getDisplayCountry(locale37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale33);
        java.util.Locale locale40 = java.util.Locale.ITALY;
        boolean boolean41 = locale40.hasExtensions();
        java.lang.String str42 = locale33.getDisplayCountry(locale40);
        java.lang.String str43 = dateTimeZone20.getShortName((long) 2022, locale33);
        java.lang.String str44 = locale33.getDisplayScript();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone3, locale33);
        java.util.TimeZone timeZone46 = calendar45.getTimeZone();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone46);
        java.util.TimeZone timeZone48 = calendar47.getTimeZone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455421421,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=1,MILLISECOND=421,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455421421L + "'", long2 == 1645455421421L);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3L + "'", long26 == 3L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "United States" + "'", str38, "United States");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645455421421,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=1,MILLISECOND=421,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Stati Uniti" + "'", str42, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645455421422,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=1,MILLISECOND=422,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645455421422,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=1,MILLISECOND=422,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Koordinierte Universalzeit");
    }

    @Test
    public void test12316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12316");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList6, strMap7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList8, strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap13);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.weekyears();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        int[] intArray36 = chronology25.get((org.joda.time.ReadablePartial) localTime34, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField37 = chronology25.dayOfYear();
        org.joda.time.DurationField durationField38 = durationFieldType19.getField(chronology25);
        org.joda.time.DurationField durationField39 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField40 = chronology25.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = localTime45.getChronology();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) (byte) 1, chronology48);
        boolean boolean50 = dateTimeFieldType41.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.centuryOfEra();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology48);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(chronology48);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = localTime57.getChronology();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) (byte) 1, chronology60);
        org.joda.time.DateTime dateTime62 = localTime61.toDateTimeToday();
        org.joda.time.LocalTime localTime64 = localTime61.minusMinutes(1);
        org.joda.time.LocalTime.Property property65 = localTime61.millisOfDay();
        org.joda.time.LocalTime localTime66 = localTime53.withFields((org.joda.time.ReadablePartial) localTime61);
        org.joda.time.LocalTime.Property property67 = localTime61.hourOfDay();
        java.util.Locale locale69 = java.util.Locale.TAIWAN;
        java.lang.String str70 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localTime61, 42, locale69);
        java.lang.String str71 = locale69.getISO3Language();
        java.lang.String str72 = locale69.getVariant();
        java.util.Set<java.lang.String> strSet73 = locale69.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap77 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList78 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, strMap77);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList80 = java.util.Locale.LanguageRange.parse("de");
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap84 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList85 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, strMap84);
        java.util.Collection<java.util.Locale> localeCollection86 = null;
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, localeCollection86);
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter(languageRangeList80, (java.util.Collection<java.util.Locale>) localeList87, filteringMode88);
        java.util.Locale.FilteringMode filteringMode90 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList78, (java.util.Collection<java.util.Locale>) localeList89, filteringMode90);
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags(languageRangeList16, (java.util.Collection<java.lang.String>) strSet73, filteringMode90);
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strSet73);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "42" + "'", str70, "42");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zho" + "'", str71, "zho");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(languageRangeList78);
        org.junit.Assert.assertNotNull(languageRangeList80);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(languageRangeList85);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode88.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertTrue("'" + filteringMode90 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode90.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertNotNull(strList93);
    }

    @Test
    public void test12317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12317");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.minusMillis(6);
        java.lang.String str16 = dateTime14.toString("0");
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime14.getZone();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        long long31 = dateTime29.getMillis();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        int int42 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime41.toMutableDateTime();
        org.joda.time.Instant instant44 = mutableDateTime43.toInstant();
        boolean boolean45 = dateTime22.equals((java.lang.Object) instant44);
        int int46 = dateTime14.compareTo((org.joda.time.ReadableInstant) instant44);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645402199990L + "'", long31 == 1645402199990L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test12318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12318");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("US", 0.0d);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        java.lang.String str5 = languageRange2.getRange();
        java.lang.String str6 = languageRange2.getRange();
        double double7 = languageRange2.getWeight();
        double double8 = languageRange2.getWeight();
        java.lang.String str9 = languageRange2.getRange();
        double double10 = languageRange2.getWeight();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "us" + "'", str4, "us");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "us" + "'", str5, "us");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "us" + "'", str6, "us");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "us" + "'", str9, "us");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test12319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12319");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime.Property property10 = dateTime8.millisOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.DateTime dateTime13 = property10.addToCopy(14);
        org.joda.time.DateTime dateTime15 = dateTime13.plusSeconds(3);
        java.util.GregorianCalendar gregorianCalendar16 = dateTime13.toGregorianCalendar();
        gregorianCalendar16.set(18000000, (int) '4', 44, 366, (-95), 30);
        java.util.TimeZone timeZone24 = gregorianCalendar16.getTimeZone();
        java.util.TimeZone timeZone25 = gregorianCalendar16.getTimeZone();
        gregorianCalendar16.setTimeInMillis(0L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "53821614" + "'", str11, "53821614");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Koordinierte Universalzeit");
    }

    @Test
    public void test12320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12320");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime14.toDateTimeToday(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.minusHours((int) 'a');
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        java.util.Locale locale39 = java.util.Locale.US;
        java.lang.String str40 = locale39.getDisplayName();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale39.getDisplayName(locale41);
        java.lang.String str43 = property38.getAsText(locale39);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property38.getFieldType();
        int int45 = dateTime31.get(dateTimeFieldType44);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.get();
        org.joda.time.Interval interval54 = property52.toInterval();
        org.joda.time.Interval interval55 = interval54.toInterval();
        long long56 = interval54.toDurationMillis();
        org.joda.time.Interval interval58 = interval54.withStartMillis(10L);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localTime62.toDateTime(readableInstant63);
        org.joda.time.Chronology chronology65 = localTime62.getChronology();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) (byte) 1, chronology65);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology65);
        org.joda.time.Interval interval68 = interval54.withChronology(chronology65);
        org.joda.time.DateTimeZone dateTimeZone69 = chronology65.getZone();
        boolean boolean70 = dateTimeFieldType44.isSupported(chronology65);
        org.joda.time.DateTimeField dateTimeField71 = chronology65.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField72 = chronology65.weekyear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str40, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str42, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "10" + "'", str43, "10");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 57 + "'", int45 == 57);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 60000L + "'", long56 == 60000L);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test12321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12321");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        int int13 = property9.get();
        org.joda.time.LocalTime localTime15 = property9.addWrapFieldToCopy((-100800));
        java.lang.String str16 = localTime15.toString();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfMonth();
        org.joda.time.Chronology chronology27 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology27.getZone();
        org.joda.time.DateTime dateTime33 = localTime15.toDateTimeToday(dateTimeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "00:10:00.000" + "'", str16, "00:10:00.000");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test12322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12322");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withDefaultYear((-95));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter13.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withZoneUTC();
        java.io.Writer writer16 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        int int25 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.LocalTime.Property property26 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime28 = property26.addCopy(6);
        int int29 = localTime28.getSecondOfMinute();
        org.joda.time.LocalTime.Property property30 = localTime28.secondOfMinute();
        org.joda.time.LocalTime localTime31 = property30.getLocalTime();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.getMinimumValue();
        org.joda.time.DateTime dateTime40 = property38.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfYear();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.minus(readableDuration42);
        org.joda.time.DateTime dateTime45 = dateTime40.minusDays(0);
        int int46 = property30.getDifference((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        int int48 = property30.getDifference(readableInstant47);
        org.joda.time.LocalTime localTime49 = property30.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(writer16, (org.joda.time.ReadablePartial) localTime49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1645380000) + "'", int46 == (-1645380000));
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1645433221) + "'", int48 == (-1645433221));
        org.junit.Assert.assertNotNull(localTime49);
    }

    @Test
    public void test12323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12323");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = dateTime4.toString(dateTimeFormatter9);
        org.joda.time.DateTime dateTime12 = dateTime4.plusMinutes(17);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime12.weekyear();
        org.joda.time.DateTime.Property property16 = dateTime12.weekyear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.dayOfMonth();
        org.joda.time.Chronology chronology27 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.clockhourOfDay();
        long long31 = dateTimeField29.roundFloor((long) 1970);
        java.lang.String str32 = dateTimeField29.toString();
        boolean boolean34 = dateTimeField29.isLeap(4234200000L);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = locale38.getDisplayLanguage();
        java.lang.String str41 = locale38.getCountry();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = localTime46.getChronology();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (byte) 1, chronology49);
        boolean boolean51 = dateTimeFieldType42.isSupported(chronology49);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.centuryOfEra();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.Chronology chronology59 = localTime56.getChronology();
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) (byte) 1, chronology59);
        int int61 = dateTimeField52.getMaximumValue((org.joda.time.ReadablePartial) localTime60);
        java.util.Locale locale63 = java.util.Locale.ROOT;
        java.lang.String str64 = dateTimeField52.getAsText((long) 42, locale63);
        java.lang.String str65 = locale38.getDisplayCountry(locale63);
        int int66 = dateTimeField29.getMaximumShortTextLength(locale63);
        java.lang.String str67 = locale63.getDisplayName();
        boolean boolean68 = property16.equals((java.lang.Object) str67);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-21T00:10:00.000Z" + "'", str10, "2022-02-21T00:10:00.000Z");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DateTimeField[clockhourOfDay]" + "'", str32, "DateTimeField[clockhourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "und" + "'", str39, "und");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "HI!" + "'", str41, "HI!");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2922789 + "'", int61 == 2922789);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "19" + "'", str64, "19");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "HI!" + "'", str65, "HI!");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test12324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12324");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        java.lang.String str9 = dateTimeZone3.getNameKey((long) (short) 100);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.weekyears();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = localTime28.getChronology();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (byte) 1, chronology31);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePartial) localTime32, (long) (short) -1);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.getMinimumValue();
        org.joda.time.DateTime dateTime43 = property41.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone45.isLocalDateTimeGap(localDateTime46);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime43.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateTime dateTime50 = localTime32.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        long long51 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime52 = property16.getDateTime();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.LocalTime localTime58 = dateTime57.toLocalTime();
        int int59 = dateTime57.getMonthOfYear();
        int int60 = dateTime57.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime57, readablePeriod61);
        org.joda.time.DateTime dateTime64 = dateTime57.plusMinutes(5);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime67 = dateTime57.minusMillis(3);
        int int68 = dateTime57.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime57.toMutableDateTimeISO();
        int int70 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localTime75.toDateTime(readableInstant76);
        org.joda.time.Chronology chronology78 = localTime75.getChronology();
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((long) (byte) 1, chronology78);
        boolean boolean80 = dateTimeFieldType71.isSupported(chronology78);
        org.joda.time.DateTimeField dateTimeField81 = chronology78.centuryOfEra();
        org.joda.time.LocalTime localTime82 = org.joda.time.LocalTime.now(chronology78);
        org.joda.time.DateTimeField dateTimeField83 = chronology78.weekyearOfCentury();
        int int84 = mutableDateTime69.get(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 10L + "'", long51 == 10L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 22 + "'", int84 == 22);
    }

    @Test
    public void test12325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12325");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int4 = dateTimeZone2.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0L, dateTimeZone2);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(dateTimeZone2);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime18 = localTime14.plus(readablePeriod17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean20 = localTime18.isSupported(dateTimeFieldType19);
        org.joda.time.DateTime dateTime21 = dateTime11.withFields((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int27 = dateTimeZone25.getOffset((long) (byte) 1);
        long long29 = dateTimeZone23.getMillisKeepLocal(dateTimeZone25, (long) 3);
        long long32 = dateTimeZone23.convertLocalToUTC((long) 9, false);
        java.lang.String str33 = dateTimeZone23.toString();
        org.joda.time.DateTime dateTime34 = localTime18.toDateTimeToday(dateTimeZone23);
        long long37 = dateTimeZone23.convertLocalToUTC((long) 27424249, false);
        long long39 = dateTimeZone2.getMillisKeepLocal(dateTimeZone23, 1645455153669L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3L + "'", long29 == 3L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.010" + "'", str33, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 27424239L + "'", long37 == 27424239L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645455153669L + "'", long39 == 1645455153669L);
    }

    @Test
    public void test12326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12326");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        boolean boolean10 = dateTime8.isAfterNow();
        org.joda.time.DateTime dateTime12 = dateTime8.withMillis((-770547548000L));
        org.joda.time.DateTime.Property property13 = dateTime8.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime8.withWeekOfWeekyear(54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test12327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12327");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfHalfday();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears(7);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.Chronology chronology19 = chronology9.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.era();
        org.joda.time.Chronology chronology21 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.hourOfDay();
        org.joda.time.DurationField durationField23 = chronology21.months();
        long long26 = durationField23.subtract(1645455382475L, (int) (byte) -1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1647874582475L + "'", long26 == 1647874582475L);
    }

    @Test
    public void test12328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12328");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime5.withPeriodAdded(readablePeriod6, 17);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        int int15 = dateTime13.getMonthOfYear();
        int int16 = dateTime13.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int22 = dateTimeZone20.getOffset((long) (byte) 1);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 3);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime25.withYearOfCentury((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime25.plus(3003279000000L);
        org.joda.time.DateTime dateTime30 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        java.util.Locale locale31 = java.util.Locale.US;
        java.lang.String str32 = locale31.getDisplayLanguage();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale31);
        java.lang.String str34 = locale31.getDisplayLanguage();
        java.util.Calendar calendar35 = dateTime25.toCalendar(locale31);
        int int37 = calendar35.getActualMinimum(11);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Englisch" + "'", str32, "Englisch");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455421878,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=1,MILLISECOND=878,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Englisch" + "'", str34, "Englisch");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645402199990,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test12329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12329");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Calendar.Builder builder9 = builder0.setDate(24, 86399999, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder12 = builder9.setWeekDefinition(42, (-27423369));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test12330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12330");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        int int9 = dateTimeFormatter6.getDefaultYear();
        boolean boolean10 = dateTimeFormatter6.isPrinter();
        int int11 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean13 = dateTimeFormatter12.isParser();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2000 + "'", int9 == 2000);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2000 + "'", int11 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test12331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12331");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.halfdayOfDay();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        int int22 = localTime16.compareTo((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime.Property property23 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime25 = property23.addCopy(6);
        int int26 = localTime25.getSecondOfMinute();
        org.joda.time.LocalTime.Property property27 = localTime25.secondOfMinute();
        org.joda.time.LocalTime localTime28 = property27.getLocalTime();
        org.joda.time.LocalTime localTime30 = property27.addCopy(52);
        org.joda.time.LocalTime.Property property31 = localTime30.minuteOfHour();
        int int32 = localTime30.getMillisOfDay();
        org.joda.time.LocalTime localTime34 = localTime30.minusHours((-54848503));
        int int35 = dateTimeField13.getMaximumValue((org.joda.time.ReadablePartial) localTime34);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22252000 + "'", int32 == 22252000);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test12332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12332");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-1519753794000L));
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) (-1519753794000L));
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int4 = localTime2.get(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test12333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12333");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime17 = property9.setCopy("1");
        org.joda.time.LocalTime localTime18 = property9.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test12334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12334");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int10 = dateTimeZone8.getOffset((long) (byte) 1);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 3);
        org.joda.time.DateTime dateTime13 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, readableDuration16);
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = interval17.toPeriod(periodType19);
        org.joda.time.Period period21 = period20.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        int int24 = period21.getValue(2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test12335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12335");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int18 = dateTimeZone16.getOffset((long) (byte) 1);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = localTime25.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (byte) 1, chronology36);
        int[] intArray39 = chronology28.get((org.joda.time.ReadablePartial) localTime37, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField40 = chronology28.dayOfYear();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        org.joda.time.DateTime.Property property47 = dateTime45.minuteOfHour();
        int int48 = property47.get();
        org.joda.time.Interval interval49 = property47.toInterval();
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Period period51 = interval49.toPeriod();
        int[] intArray53 = chronology28.get((org.joda.time.ReadablePeriod) period51, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localTime57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = localTime57.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.weekyears();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localTime65.toDateTime(readableInstant66);
        org.joda.time.Chronology chronology68 = localTime65.getChronology();
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((long) (byte) 1, chronology68);
        int[] intArray71 = chronology60.get((org.joda.time.ReadablePartial) localTime69, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField72 = chronology60.dayOfYear();
        org.joda.time.DurationField durationField73 = durationFieldType54.getField(chronology60);
        int int74 = period51.get(durationFieldType54);
        org.joda.time.DateTime dateTime75 = dateTime21.plus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.PeriodType periodType76 = period51.getPeriodType();
        org.joda.time.Period period77 = period51.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int79 = period77.getValue(23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 23");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    public void test12336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12336");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getVariant();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        java.lang.String str4 = calendar3.getCalendarType();
        java.time.Instant instant5 = calendar3.toInstant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455421988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=1,MILLISECOND=988,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(instant5);
    }

    @Test
    public void test12337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12337");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.year();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) (-95), chronology11);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) (short) 1);
        org.joda.time.LocalTime.Property property17 = localTime14.hourOfDay();
        long long18 = property17.remainder();
        org.joda.time.LocalTime localTime19 = property17.withMinimumValue();
        int int20 = property17.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3599905L + "'", long18 == 3599905L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test12338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12338");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime13 = property9.addCopy(1645454873951L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.DateTime.Property property20 = dateTime18.minuteOfHour();
        int int21 = property20.get();
        org.joda.time.Interval interval22 = property20.toInterval();
        org.joda.time.Interval interval23 = interval22.toInterval();
        long long24 = interval22.toDurationMillis();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = interval22.toPeriod(periodType25);
        java.lang.String str27 = period26.toString();
        org.joda.time.MutablePeriod mutablePeriod28 = period26.toMutablePeriod();
        org.joda.time.LocalTime localTime30 = localTime13.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 26185096);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1M" + "'", str27, "PT1M");
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test12339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12339");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(21488);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean8 = dateTimeFormatter6.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withPivotYear((java.lang.Integer) (-26));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withOffsetParsed();
        java.lang.Appendable appendable12 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        int int20 = property19.get();
        org.joda.time.Interval interval21 = property19.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.LocalTime localTime28 = dateTime27.toLocalTime();
        org.joda.time.DateTime.Property property29 = dateTime27.minuteOfHour();
        int int30 = property29.getMinimumValue();
        org.joda.time.DateTime dateTime31 = property29.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime34 = null;
        boolean boolean35 = dateTimeZone33.isLocalDateTimeGap(localDateTime34);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = dateTime31.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((java.lang.Object) dateTime37);
        org.joda.time.Interval interval39 = interval22.withEnd((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        org.joda.time.DateTime dateTime48 = localTime47.toDateTimeToday();
        org.joda.time.Interval interval49 = interval22.withStart((org.joda.time.ReadableInstant) dateTime48);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter10.printTo(appendable12, (org.joda.time.ReadableInstant) dateTime48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
    }

    @Test
    public void test12340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12340");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        long long20 = chronology5.add((long) ' ', (-61914758399990L), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField21 = chronology5.minuteOfDay();
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale.Builder builder26 = builder24.clear();
        java.util.Locale.Builder builder28 = builder24.setVariant("53275870");
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale.Builder builder31 = builder28.setRegion("");
        java.util.Locale locale32 = builder31.build();
        java.util.Locale locale33 = builder31.build();
        java.lang.String str34 = dateTimeField21.getAsText(readablePartial22, 789, locale33);
        java.lang.String str35 = locale33.getDisplayVariant();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-61914758399958L) + "'", long20 == (-61914758399958L));
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "789" + "'", str34, "789");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test12341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12341");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        int int10 = localTime4.compareTo((org.joda.time.ReadablePartial) localTime7);
        org.joda.time.LocalTime.Property property11 = localTime4.hourOfDay();
        org.joda.time.LocalTime localTime13 = property11.addCopy(6);
        org.joda.time.LocalTime localTime14 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property11.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime17 = property11.roundHalfEvenCopy();
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology18.halfdays();
        long long25 = durationField22.getDifferenceAsLong((-52938L), (-1510305130035L));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 34960L + "'", long25 == 34960L);
    }

    @Test
    public void test12342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12342");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime16 = property13.addWrapFieldToCopy(4);
        org.joda.time.LocalTime localTime17 = property13.getLocalTime();
        org.joda.time.LocalTime localTime19 = localTime17.minusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = localTime19.withMinuteOfHour(1620);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1620 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test12343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12343");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType3 = null;
        boolean boolean4 = localTime2.isSupported(durationFieldType3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.LocalTime localTime10 = dateTime9.toLocalTime();
        org.joda.time.DateTime.Property property11 = dateTime9.minuteOfHour();
        int int12 = property11.get();
        org.joda.time.Interval interval13 = property11.toInterval();
        org.joda.time.Interval interval14 = interval13.toInterval();
        long long15 = interval13.toDurationMillis();
        org.joda.time.Interval interval16 = interval13.toInterval();
        boolean boolean17 = localTime2.equals((java.lang.Object) interval13);
        int int18 = localTime2.getMillisOfDay();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 60000L + "'", long15 == 60000L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test12344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12344");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime17 = property9.setCopy("1");
        org.joda.time.LocalTime.Property property18 = localTime17.minuteOfHour();
        int int19 = property18.getMaximumValue();
        java.lang.String str20 = property18.getAsText();
        org.joda.time.Interval interval21 = property18.toInterval();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 59 + "'", int19 == 59);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "10" + "'", str20, "10");
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test12345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12345");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = chronology5.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.hourOfHalfday();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology5);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12346");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.DateTime dateTime9 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(53);
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        boolean boolean15 = dateTime12.isEqual((long) 15);
        org.joda.time.DateTime dateTime17 = dateTime12.withWeekyear(86399999);
        org.joda.time.LocalTime localTime18 = dateTime12.toLocalTime();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test12347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12347");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.Period period10 = interval8.toPeriod();
        java.lang.String str11 = interval8.toString();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime.Property property18 = dateTime16.minuteOfHour();
        int int19 = property18.get();
        org.joda.time.Interval interval20 = property18.toInterval();
        org.joda.time.Interval interval21 = interval20.toInterval();
        long long22 = interval20.toDurationMillis();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = interval20.toPeriod(periodType23);
        org.joda.time.Interval interval25 = interval8.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = interval25.toPeriod(periodType26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = interval25.contains(readableInterval28);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        int int36 = dateTime34.getMonthOfYear();
        int int37 = dateTime34.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int43 = dateTimeZone41.getOffset((long) (byte) 1);
        long long45 = dateTimeZone39.getMillisKeepLocal(dateTimeZone41, (long) 3);
        org.joda.time.DateTime dateTime46 = dateTime34.toDateTime(dateTimeZone39);
        org.joda.time.Interval interval47 = interval25.withEnd((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology48 = interval25.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = localTime53.getChronology();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) (byte) 1, chronology56);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTimeField dateTimeField59 = chronology56.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology56.getZone();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 'u', dateTimeZone60);
        org.joda.time.Chronology chronology62 = chronology48.withZone(dateTimeZone60);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        int int71 = localTime65.compareTo((org.joda.time.ReadablePartial) localTime68);
        org.joda.time.LocalTime.Property property72 = localTime65.hourOfDay();
        org.joda.time.LocalTime localTime74 = property72.addCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime76 = localTime74.plusMillis(13);
        int[] intArray78 = chronology62.get((org.joda.time.ReadablePartial) localTime74, 7171200000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField80 = localTime74.getField(27424247);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 27424247");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str11, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 60000L + "'", long22 == 60000L);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0, 0, 0, 0]");
    }

    @Test
    public void test12348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12348");
        java.util.Locale locale1 = new java.util.Locale("+00:00:00.010");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.LocalTime localTime14 = localTime12.plusHours((int) 'u');
        org.joda.time.LocalTime.Property property15 = localTime12.minuteOfHour();
        java.util.Locale locale16 = java.util.Locale.US;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.lang.String str18 = property15.getAsText(locale16);
        java.lang.String str19 = locale1.getDisplayVariant(locale16);
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Englisch" + "'", str17, "Englisch");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "57" + "'", str18, "57");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test12349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12349");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        int int28 = property27.get();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.Interval interval30 = interval29.toInterval();
        boolean boolean31 = interval9.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.LocalTime localTime37 = dateTime36.toLocalTime();
        org.joda.time.DateTime.Property property38 = dateTime36.minuteOfHour();
        int int39 = property38.get();
        org.joda.time.Interval interval40 = property38.toInterval();
        org.joda.time.Interval interval41 = interval40.toInterval();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.getMinimumValue();
        org.joda.time.DateTime dateTime50 = property48.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime53 = null;
        boolean boolean54 = dateTimeZone52.isLocalDateTimeGap(localDateTime53);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = dateTime50.withZoneRetainFields(dateTimeZone52);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((java.lang.Object) dateTime56);
        org.joda.time.Interval interval58 = interval41.withEnd((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Interval interval59 = interval9.withStart((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((java.lang.Object) dateTime56);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localTime64.toDateTime(readableInstant65);
        org.joda.time.Chronology chronology67 = localTime64.getChronology();
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) (byte) 1, chronology67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology67);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTime.Property property71 = dateTime69.millisOfDay();
        boolean boolean72 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime74 = dateTime60.withMinuteOfHour(9);
        org.joda.time.DateTime dateTime76 = dateTime74.plusWeeks((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay77 = dateTime74.toTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay78 = dateTime74.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateTime.Property property80 = dateTime74.property(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test12350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12350");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        boolean boolean10 = dateTime8.isAfterNow();
        org.joda.time.DateTime dateTime12 = dateTime8.withMillis((-770547548000L));
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePartial) localTime27, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField30 = chronology18.dayOfYear();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        org.joda.time.DateTime.Property property37 = dateTime35.minuteOfHour();
        int int38 = property37.get();
        org.joda.time.Interval interval39 = property37.toInterval();
        org.joda.time.DateTime dateTime40 = interval39.getEnd();
        org.joda.time.Period period41 = interval39.toPeriod();
        int[] intArray43 = chronology18.get((org.joda.time.ReadablePeriod) period41, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.weekyears();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) (byte) 1, chronology58);
        int[] intArray61 = chronology50.get((org.joda.time.ReadablePartial) localTime59, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField62 = chronology50.dayOfYear();
        org.joda.time.DurationField durationField63 = durationFieldType44.getField(chronology50);
        int int64 = period41.get(durationFieldType44);
        org.joda.time.DateTime dateTime65 = dateTime12.plus((org.joda.time.ReadablePeriod) period41);
        int int66 = dateTime12.getCenturyOfEra();
        org.joda.time.DateTime dateTime68 = dateTime12.minusWeeks(1020);
        boolean boolean69 = dateTime68.isEqualNow();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 19 + "'", int66 == 19);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test12351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12351");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        int int24 = property23.get();
        org.joda.time.Interval interval25 = property23.toInterval();
        org.joda.time.DateTime dateTime26 = interval25.getEnd();
        org.joda.time.Period period27 = interval25.toPeriod();
        org.joda.time.LocalTime localTime29 = localTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period27, 17);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.get();
        org.joda.time.Interval interval38 = property36.toInterval();
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Period period40 = interval38.toPeriod();
        java.lang.String str41 = interval38.toString();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.get();
        org.joda.time.Interval interval50 = property48.toInterval();
        org.joda.time.Interval interval51 = interval50.toInterval();
        long long52 = interval50.toDurationMillis();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = interval50.toPeriod(periodType53);
        org.joda.time.Interval interval55 = interval38.overlap((org.joda.time.ReadableInterval) interval50);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = interval55.toPeriod(periodType56);
        org.joda.time.LocalTime localTime58 = localTime14.plus((org.joda.time.ReadablePeriod) period57);
        int[] intArray59 = localTime58.getValues();
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = localTime58.getFields();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010" + "'", str41, "2022-02-21T00:10:00.000+00:00:00.010/2022-02-21T00:11:00.000+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 60000L + "'", long52 == 60000L);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 1, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
    }

    @Test
    public void test12352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12352");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.getMinimumValue();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime21 = null;
        boolean boolean22 = dateTimeZone20.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime24);
        org.joda.time.Interval interval26 = interval9.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = localTime30.getChronology();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (byte) 1, chronology33);
        org.joda.time.DateTime dateTime35 = localTime34.toDateTimeToday();
        org.joda.time.Interval interval36 = interval9.withStart((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime37.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test12353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12353");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.weekyear();
        org.joda.time.DurationField durationField18 = chronology5.months();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test12354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12354");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology37);
        long long43 = chronology5.set((org.joda.time.ReadablePartial) localTime41, 25200000L);
        org.joda.time.LocalTime localTime45 = localTime41.withHourOfDay(23);
        boolean boolean47 = localTime45.equals((java.lang.Object) (byte) 10);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = localTime50.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.weekyears();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField55.getType();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime60 = null;
        boolean boolean61 = dateTimeZone59.isLocalDateTimeGap(localDateTime60);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone59);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalTime localTime65 = localTime62.withPeriodAdded(readablePeriod63, 17);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localTime68.toDateTime(readableInstant69);
        org.joda.time.LocalTime localTime71 = dateTime70.toLocalTime();
        int int72 = dateTime70.getMonthOfYear();
        int int73 = dateTime70.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int79 = dateTimeZone77.getOffset((long) (byte) 1);
        long long81 = dateTimeZone75.getMillisKeepLocal(dateTimeZone77, (long) 3);
        org.joda.time.DateTime dateTime82 = dateTime70.toDateTime(dateTimeZone75);
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime85 = dateTime70.withFieldAdded(durationFieldType83, 2022);
        org.joda.time.LocalTime localTime87 = localTime65.withFieldAdded(durationFieldType83, 122);
        int int88 = dateTimeField55.getMinimumValue((org.joda.time.ReadablePartial) localTime87);
        boolean boolean89 = localTime45.isBefore((org.joda.time.ReadablePartial) localTime87);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 53822368L + "'", long43 == 53822368L);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3L + "'", long81 == 3L);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test12355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12355");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.getMinimumValue();
        org.joda.time.DateTime dateTime38 = property36.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone40.isLocalDateTimeGap(localDateTime41);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime38.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((java.lang.Object) dateTime44);
        org.joda.time.Interval interval46 = interval29.withEnd((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean47 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.LocalTime localTime53 = dateTime52.toLocalTime();
        org.joda.time.DateTime.Property property54 = dateTime52.minuteOfHour();
        int int55 = property54.get();
        org.joda.time.Interval interval56 = property54.toInterval();
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.Interval interval59 = interval57.withStartMillis((long) 17);
        long long60 = interval57.getEndMillis();
        boolean boolean61 = interval8.overlaps((org.joda.time.ReadableInterval) interval57);
        long long62 = interval8.getStartMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645402259990L + "'", long60 == 1645402259990L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645402199990L + "'", long62 == 1645402199990L);
    }

    @Test
    public void test12356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12356");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (byte) 1, chronology16);
        boolean boolean18 = dateTimeFieldType9.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.centuryOfEra();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(chronology16);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(chronology16);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology16);
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str24 = locale23.getVariant();
        java.lang.String str25 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localTime22, locale23);
        long long27 = dateTimeField8.roundHalfEven((long) 32769);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        int int36 = localTime30.compareTo((org.joda.time.ReadablePartial) localTime33);
        org.joda.time.LocalTime.Property property37 = localTime30.hourOfDay();
        org.joda.time.LocalTime localTime39 = property37.addCopy(6);
        org.joda.time.LocalTime localTime40 = property37.roundCeilingCopy();
        java.util.Locale locale42 = java.util.Locale.US;
        java.lang.String str43 = locale42.getDisplayName();
        org.joda.time.LocalTime localTime44 = property37.setCopy("0", locale42);
        org.joda.time.LocalTime localTime46 = property37.addCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime47 = property37.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime48 = property37.roundHalfCeilingCopy();
        java.util.Locale locale49 = java.util.Locale.US;
        java.lang.String str50 = locale49.getDisplayName();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str52 = locale51.getVariant();
        java.lang.String str53 = locale49.getDisplayName(locale51);
        java.lang.String str54 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime48, locale49);
        java.lang.String str55 = locale49.getCountry();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2" + "'", str25, "2");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str43, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str50, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u82f1\u6587\u7f8e\u56fd)" + "'", str53, "\u82f1\u6587\u7f8e\u56fd)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "US" + "'", str55, "US");
    }

    @Test
    public void test12357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12357");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.clockhourOfDay();
        org.joda.time.DurationField durationField18 = chronology5.weeks();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(chronology5);
        org.joda.time.DateTimeField dateTimeField20 = chronology5.era();
        org.joda.time.Chronology chronology21 = chronology5.withUTC();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology5.getZone();
        boolean boolean24 = dateTimeZone22.isStandardOffset(35160100L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test12358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12358");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645454898487L);
        org.joda.time.Instant instant3 = instant1.plus(1645402259990L);
        org.joda.time.DateTime dateTime4 = instant1.toDateTime();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test12359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12359");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        int int19 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.LocalTime.Property property20 = localTime18.minuteOfHour();
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.LocalTime localTime23 = localTime18.minusMillis(895);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2922789 + "'", int19 == 2922789);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test12360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12360");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        java.lang.String str4 = date1.toLocaleString();
        java.lang.String str5 = date1.toGMTString();
        java.time.Instant instant6 = date1.toInstant();
        date1.setMinutes(34);
        int int9 = date1.getYear();
        date1.setMonth(0);
        date1.setMonth(1408);
        org.junit.Assert.assertEquals(date1.toString(), "Thu May 01 00:34:00 UTC 2087");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Jan 1, 1970 12:11:00 AM" + "'", str4, "Jan 1, 1970 12:11:00 AM");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1 Jan 1970 00:11:00 GMT" + "'", str5, "1 Jan 1970 00:11:00 GMT");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 70 + "'", int9 == 70);
    }

    @Test
    public void test12361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12361");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        long long1 = calendar0.getTimeInMillis();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime.Property property8 = dateTime6.minuteOfHour();
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = locale9.getDisplayName();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale9.getDisplayName(locale11);
        java.lang.String str13 = property8.getAsText(locale9);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str15 = locale14.getCountry();
        java.lang.String str16 = property8.getAsText(locale14);
        boolean boolean17 = calendar0.before((java.lang.Object) str16);
        calendar0.set((int) (byte) 10, 888, 32772);
        int int22 = calendar0.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=888,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=32772,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=2,MILLISECOND=521,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645455422521L + "'", long1 == 1645455422521L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str10, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Englisch (Vereinigte Staaten von Amerika)" + "'", str12, "Englisch (Vereinigte Staaten von Amerika)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10" + "'", str13, "10");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CN" + "'", str15, "CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "10" + "'", str16, "10");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test12362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12362");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.getLocalTime();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime48.plusWeeks(0);
        int int53 = dateTime52.getYearOfEra();
        org.joda.time.DateTime.Property property54 = dateTime52.year();
        int int55 = dateTime52.getYearOfCentury();
        int int56 = property42.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalTime localTime57 = property42.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime58 = property42.roundHalfEvenCopy();
        java.lang.String str59 = property42.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
    }

    @Test
    public void test12363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12363");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.dayOfYear();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.hourOfHalfday();
        long long31 = dateTimeField28.add((long) 'u', 7);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        int int40 = localTime34.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.LocalTime.Property property41 = localTime34.hourOfDay();
        org.joda.time.LocalTime localTime43 = property41.addCopy(6);
        org.joda.time.LocalTime localTime44 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime45 = property41.roundCeilingCopy();
        org.joda.time.LocalTime localTime47 = localTime45.plusHours(2922789);
        java.util.Locale locale48 = java.util.Locale.ITALY;
        boolean boolean49 = locale48.hasExtensions();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localTime45, locale48);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale54 = java.util.Locale.ITALY;
        boolean boolean55 = locale54.hasExtensions();
        java.lang.String str56 = locale53.getDisplayVariant(locale54);
        java.lang.String str57 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localTime45, (int) '4', locale53);
        java.lang.String str58 = locale53.getDisplayVariant();
        java.lang.String str59 = locale0.getDisplayName(locale53);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            calendar60.add(7800000, 53611753);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 25200117L + "'", long31 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "52" + "'", str57, "52");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u5fb7\u6587" + "'", str59, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645455422563,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=2,MILLISECOND=563,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test12364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12364");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withPivotYear((java.lang.Integer) (-14));
        java.util.Locale locale10 = new java.util.Locale("dayOfYear", "11");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withLocale(locale10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 32769);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTimeFormatter13.parseDateTime("14:56:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals(locale10.toString(), "dayofyear_11");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test12365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12365");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(86399);
        boolean boolean11 = dateTimeFormatter10.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withOffsetParsed();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test12366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12366");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DurationField durationField12 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) '4');
        org.joda.time.LocalTime localTime17 = localTime15.withMillisOfSecond(0);
        int[] intArray19 = chronology7.get((org.joda.time.ReadablePartial) localTime17, 53390339L);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.parse("1970-01-01");
        boolean boolean22 = localTime17.equals((java.lang.Object) dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[14, 49, 50, 339]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test12367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12367");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int4 = dateTimeZone2.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0L, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = dateTimeZone2.getShortName(0L, locale8);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfHour();
        java.lang.String str18 = property17.toString();
        org.joda.time.DateTime dateTime19 = property17.roundFloorCopy();
        org.joda.time.DateTime dateTime21 = property17.addToCopy((long) 366);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusYears(7);
        org.joda.time.DateTime dateTime30 = dateTime26.plusWeeks((int) (short) 10);
        int int31 = property17.getDifference((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, readableDuration32);
        int int34 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime30);
        int int36 = dateTimeZone2.getStandardOffset((long) 292278993);
        long long39 = dateTimeZone2.adjustOffset(3195670080000L, true);
        java.lang.String str40 = dateTimeZone2.getID();
        long long44 = dateTimeZone2.convertLocalToUTC(0L, false, (long) 22200000);
        java.lang.String str46 = dateTimeZone2.getNameKey((long) 41);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.util.Locale locale49 = java.util.Locale.US;
        java.util.Locale locale50 = locale49.stripExtensions();
        java.lang.String str51 = locale49.getISO3Language();
        java.lang.String str52 = locale48.getDisplayName(locale49);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale48);
        java.util.Locale.setDefault(locale48);
        java.lang.String str55 = locale48.getLanguage();
        java.lang.String str56 = dateTimeZone2.getShortName(1645454937994L, locale48);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CN" + "'", str9, "CN");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.010" + "'", str10, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[minuteOfHour]" + "'", str18, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-100800) + "'", int31 == (-100800));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3195670080000L + "'", long39 == 3195670080000L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-10L) + "'", long44 == (-10L));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "English" + "'", str52, "English");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645455422637,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=2,MILLISECOND=637,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en" + "'", str55, "en");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.010" + "'", str56, "+00:00:00.010");
    }

    @Test
    public void test12368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12368");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"AM\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12369");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.plus(readablePeriod5);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int17 = dateTimeZone15.getOffset((long) (byte) 1);
        long long19 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, (long) 3);
        org.joda.time.DateTime dateTime20 = dateTime11.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime22 = dateTime20.minusSeconds((int) 'u');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, readableDuration23);
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.LocalTime localTime26 = localTime2.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.LocalTime localTime28 = localTime2.plusMinutes(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        boolean boolean30 = localTime28.isSupported(dateTimeFieldType29);
        org.joda.time.LocalTime localTime32 = localTime28.plusSeconds(23);
        org.joda.time.LocalTime.Property property33 = localTime28.millisOfDay();
        org.joda.time.LocalTime localTime34 = property33.roundHalfFloorCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = null;
        org.joda.time.format.DateTimeParser dateTimeParser36 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser36);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter37.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter37.withDefaultYear(1);
        boolean boolean41 = dateTimeFormatter40.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter40.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime47 = null;
        boolean boolean48 = dateTimeZone46.isLocalDateTimeGap(localDateTime47);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone46);
        boolean boolean51 = dateTimeZone46.isStandardOffset((long) 59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter40.withZone(dateTimeZone46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter52.withOffsetParsed();
        org.joda.time.Chronology chronology54 = dateTimeFormatter52.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter52.withOffsetParsed();
        boolean boolean56 = dateTimeFormatter52.isOffsetParsed();
        boolean boolean57 = localTime34.equals((java.lang.Object) dateTimeFormatter52);
        java.lang.Appendable appendable58 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter52.printTo(appendable58, (-1519750800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3L + "'", long19 == 3L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNull(dateTimePrinter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test12370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12370");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime14.toDateTimeToday(dateTimeZone16);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMillis(2);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears(7);
        org.joda.time.DateTime dateTime39 = dateTime35.plusWeeks((int) (short) 10);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.LocalTime localTime45 = dateTime44.toLocalTime();
        org.joda.time.DateTime.Property property46 = dateTime44.minuteOfHour();
        org.joda.time.DateTime dateTime48 = dateTime44.plusWeeks(0);
        org.joda.time.Chronology chronology49 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.millisOfDay();
        org.joda.time.DateTime dateTime51 = dateTime35.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone52 = chronology49.getZone();
        java.lang.String str53 = chronology49.toString();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.fromMillisOfDay(906093692L, chronology49);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localTime60.toDateTime(readableInstant61);
        int int63 = localTime57.compareTo((org.joda.time.ReadablePartial) localTime60);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean65 = localTime57.isSupported(dateTimeFieldType64);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localTime69.toDateTime(readableInstant70);
        org.joda.time.Chronology chronology72 = localTime69.getChronology();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) (byte) 1, chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField75 = chronology72.dayOfMonth();
        org.joda.time.LocalTime localTime76 = org.joda.time.LocalTime.now(chronology72);
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType64.getField(chronology72);
        boolean boolean78 = localTime54.isSupported(dateTimeFieldType64);
        int int79 = dateTime29.get(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 57 + "'", int79 == 57);
    }

    @Test
    public void test12371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12371");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval32 = interval8.toInterval();
        org.joda.time.Interval interval33 = interval8.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = interval8.toMutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.Interval interval37 = interval35.withStartMillis((long) 7200000);
        boolean boolean38 = interval35.containsNow();
        org.joda.time.Interval interval39 = interval35.toInterval();
        org.joda.time.DateTime dateTime40 = interval35.getStart();
        int int41 = dateTime40.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test12372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12372");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser9 = dateTimeFormatter5.getParser();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int15 = dateTimeZone13.getOffset((long) (byte) 1);
        long long17 = dateTimeZone11.getMillisKeepLocal(dateTimeZone13, (long) 3);
        long long20 = dateTimeZone11.convertLocalToUTC((long) 9, false);
        java.lang.String str21 = dateTimeZone11.toString();
        java.lang.String str23 = dateTimeZone11.getShortName((long) (byte) 100);
        java.lang.String str24 = dateTimeZone11.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter5.withZone(dateTimeZone11);
        boolean boolean26 = dateTimeFormatter5.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter5.withDefaultYear(53358486);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = dateTimeFormatter28.parseLocalDate("zh");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimeParser9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3L + "'", long17 == 3L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.010" + "'", str21, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.010" + "'", str23, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test12373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12373");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval32 = interval8.toInterval();
        org.joda.time.DateTime dateTime33 = interval8.getEnd();
        org.joda.time.DateTime dateTime34 = interval8.getEnd();
        org.joda.time.Interval interval35 = interval8.toInterval();
        long long36 = interval35.getStartMillis();
        org.joda.time.Period period37 = interval35.toPeriod();
        long long38 = interval35.getEndMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645402200000L + "'", long36 == 1645402200000L);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645402260000L + "'", long38 == 1645402260000L);
    }

    @Test
    public void test12374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12374");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 1);
        int[] intArray2 = localTime1.getValues();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfHour();
        int int10 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone13.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = dateTime11.withZoneRetainFields(dateTimeZone13);
        int int18 = dateTime17.getDayOfWeek();
        org.joda.time.DateTime dateTime19 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime21 = localTime1.minusMinutes(419);
        int int22 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property23 = localTime1.secondOfMinute();
        java.lang.String str24 = property23.getAsShortText();
        org.joda.time.LocalTime localTime25 = property23.withMinimumValue();
        org.joda.time.LocalTime localTime26 = property23.roundHalfFloorCopy();
        org.joda.time.Interval interval27 = property23.toInterval();
        java.lang.String str28 = property23.getName();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "secondOfMinute" + "'", str28, "secondOfMinute");
    }

    @Test
    public void test12375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12375");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 5);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime.Property property8 = dateTime6.minuteOfHour();
        int int9 = property8.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        org.joda.time.LocalTime localTime13 = localTime1.withFieldAdded(durationFieldType11, 51000000);
        org.joda.time.LocalTime localTime15 = localTime1.minusMinutes((int) (short) 10);
        org.joda.time.LocalTime.Property property16 = localTime15.secondOfMinute();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test12376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12376");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getVariant();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        java.lang.String str4 = calendar3.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            calendar3.add(1022, 789);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455422847,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=2,MILLISECOND=847,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
    }

    @Test
    public void test12377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12377");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime11.toDateTimeToday(dateTimeZone16);
        int int29 = dateTimeZone16.getOffsetFromLocal((long) 17590);
        long long31 = dateTimeZone16.previousTransition((long) 1020);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1020L + "'", long31 == 1020L);
    }

    @Test
    public void test12378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12378");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int36 = dateTimeZone34.getOffset((long) (byte) 1);
        long long38 = dateTimeZone32.getMillisKeepLocal(dateTimeZone34, (long) 3);
        long long41 = dateTimeZone32.convertLocalToUTC((long) 9, false);
        java.lang.String str42 = dateTimeZone32.toString();
        org.joda.time.Chronology chronology43 = chronology5.withZone(dateTimeZone32);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(dateTimeZone32);
        org.joda.time.LocalTime.Property property45 = localTime44.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3L + "'", long38 == 3L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test12379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12379");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.LocalTime localTime7 = dateTime6.toLocalTime();
        org.joda.time.DateTime.Property property8 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime10 = dateTime6.plusWeeks(0);
        org.joda.time.Chronology chronology11 = dateTime6.getChronology();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(1L, (long) 15, chronology11);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.LocalTime localTime18 = dateTime17.toLocalTime();
        org.joda.time.DateTime.Property property19 = dateTime17.minuteOfHour();
        int int20 = property19.get();
        org.joda.time.Interval interval21 = property19.toInterval();
        org.joda.time.Interval interval22 = interval21.toInterval();
        long long23 = interval21.toDurationMillis();
        org.joda.time.Interval interval25 = interval21.withStartMillis(10L);
        boolean boolean26 = interval12.contains((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Interval interval28 = interval12.withEndMillis(1645402200000L);
        long long29 = interval12.getEndMillis();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 60000L + "'", long23 == 60000L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 15L + "'", long29 == 15L);
    }

    @Test
    public void test12380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12380");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 122);
        java.util.Locale locale11 = dateTimeFormatter8.getLocale();
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = locale12.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter8.withLocale(locale12);
        org.joda.time.Chronology chronology15 = dateTimeFormatter14.getChronolgy();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English (United States)" + "'", str13, "English (United States)");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(chronology15);
    }

    @Test
    public void test12381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12381");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        long long39 = interval8.getStartMillis();
        org.joda.time.Interval interval40 = interval8.toInterval();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        org.joda.time.DateTime.Property property47 = dateTime45.minuteOfHour();
        int int48 = property47.get();
        org.joda.time.Interval interval49 = property47.toInterval();
        org.joda.time.DateTime dateTime50 = interval49.getEnd();
        org.joda.time.Period period51 = interval49.toPeriod();
        java.lang.String str52 = interval49.toString();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.LocalTime localTime58 = dateTime57.toLocalTime();
        org.joda.time.DateTime.Property property59 = dateTime57.minuteOfHour();
        int int60 = property59.get();
        org.joda.time.Interval interval61 = property59.toInterval();
        org.joda.time.Interval interval62 = interval61.toInterval();
        long long63 = interval61.toDurationMillis();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = interval61.toPeriod(periodType64);
        org.joda.time.Interval interval66 = interval49.overlap((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Interval interval67 = interval8.overlap((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Interval interval69 = interval67.withEndMillis(1645454989831L);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.DateTime dateTime74 = localTime72.toDateTime(readableInstant73);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int80 = dateTimeZone78.getOffset((long) (byte) 1);
        long long82 = dateTimeZone76.getMillisKeepLocal(dateTimeZone78, (long) 3);
        org.joda.time.DateTime dateTime83 = dateTime74.withZone(dateTimeZone76);
        org.joda.time.DateTime dateTime85 = dateTime74.minus((long) '#');
        org.joda.time.DateTime.Property property86 = dateTime74.weekyear();
        org.joda.time.ReadableDuration readableDuration87 = null;
        org.joda.time.DateTime dateTime88 = dateTime74.plus(readableDuration87);
        org.joda.time.DateTime dateTime89 = dateTime88.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int91 = dateTime89.get(dateTimeFieldType90);
        org.joda.time.DateTime dateTime93 = dateTime89.plusMonths(22);
        org.joda.time.LocalTime localTime94 = dateTime93.toLocalTime();
        boolean boolean95 = interval67.isBefore((org.joda.time.ReadableInstant) dateTime93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval97 = interval67.withStartMillis(1645454910407L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645402200000L + "'", long39 == 1645402200000L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-21T00:10:00.000Z/2022-02-21T00:11:00.000Z" + "'", str52, "2022-02-21T00:10:00.000Z/2022-02-21T00:11:00.000Z");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 60000L + "'", long63 == 60000L);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 3L + "'", long82 == 3L);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 600 + "'", int91 == 600);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test12382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12382");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        long long1 = calendar0.getTimeInMillis();
        int int2 = calendar0.getMinimalDaysInFirstWeek();
        java.util.Date date3 = calendar0.getTime();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int14 = dateTimeZone12.getOffset((long) (byte) 1);
        long long16 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, (long) 3);
        org.joda.time.DateTime dateTime17 = dateTime8.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime19 = dateTime8.minus((long) '#');
        org.joda.time.DateTime.Property property20 = dateTime8.weekyear();
        org.joda.time.DateTime dateTime22 = dateTime8.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime8.toDateTime();
        org.joda.time.TimeOfDay timeOfDay24 = dateTime8.toTimeOfDay();
        boolean boolean25 = calendar0.before((java.lang.Object) timeOfDay24);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.setWeekDate(789, 21, 990);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 990");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455422977,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=2,MILLISECOND=977,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645455422977L + "'", long1 == 1645455422977L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 21 14:57:02 UTC 2022");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3L + "'", long16 == 3L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test12383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12383");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder3.setDate(7200000, (-100800), 53358486);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.clockhourOfHalfday();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        org.joda.time.DateTime dateTime27 = localTime26.toDateTimeToday();
        org.joda.time.LocalTime localTime29 = localTime26.minusMinutes(1);
        org.joda.time.LocalTime.Property property30 = localTime26.millisOfDay();
        int int31 = localTime26.getMillisOfDay();
        int[] intArray33 = chronology14.get((org.joda.time.ReadablePartial) localTime26, 1970L);
        java.util.Calendar.Builder builder34 = builder3.setFields(intArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder36 = builder34.setInstant((long) 993);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 1, 970]");
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test12384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12384");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.weekyears();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 1, chronology15);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePartial) localTime16, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.dayOfYear();
        org.joda.time.DurationField durationField20 = durationFieldType1.getField(chronology7);
        org.joda.time.DurationField durationField21 = chronology7.minutes();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(53308315L, chronology7);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime25 = dateTime23.plusHours((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime23.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.minusMonths(501);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test12385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12385");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime.Property property13 = localTime10.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property13.addCopy((long) 11);
        org.joda.time.LocalTime localTime16 = property13.roundHalfFloorCopy();
        java.lang.String str17 = property13.getName();
        org.joda.time.DateTimeField dateTimeField18 = property13.getField();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "minuteOfHour" + "'", str17, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test12386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12386");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval32 = interval8.toInterval();
        org.joda.time.Interval interval33 = interval8.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = interval8.toMutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        org.joda.time.Interval interval37 = interval35.withStartMillis((long) 7200000);
        org.joda.time.Interval interval38 = interval37.toInterval();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localTime41.toDateTime(readableInstant42);
        org.joda.time.LocalTime localTime44 = dateTime43.toLocalTime();
        int int45 = dateTime43.getMonthOfYear();
        int int46 = dateTime43.getHourOfDay();
        org.joda.time.DateTime.Property property47 = dateTime43.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = dateTime43.toString(dateTimeFormatter48);
        org.joda.time.DateTime dateTime51 = dateTime43.plusMinutes(17);
        org.joda.time.DateTime dateTime53 = dateTime43.withWeekyear(5);
        org.joda.time.DateTime dateTime55 = dateTime53.minusYears((int) (byte) -1);
        org.joda.time.DateTime.Property property56 = dateTime55.minuteOfDay();
        org.joda.time.DateTime dateTime57 = property56.roundHalfCeilingCopy();
        boolean boolean58 = interval37.isAfter((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = interval37.containsNow();
        org.joda.time.DateTime dateTime60 = interval37.getStart();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(mutableInterval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-21T00:10:00.000Z" + "'", str49, "2022-02-21T00:10:00.000Z");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test12387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12387");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology6.getDateTimeMillis(1620000, 989, (-95), 43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 989 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12388");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean9 = dateTime7.isSupported(dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int14 = dateTimeZone12.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(0L, dateTimeZone12);
        java.util.TimeZone timeZone16 = dateTimeZone12.toTimeZone();
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str19 = locale18.getCountry();
        java.lang.String str20 = dateTimeZone12.getShortName(0L, locale18);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.DateTime dateTime22 = dateTime7.toDateTime(dateTimeZone12);
        org.joda.time.DateTime.Property property23 = dateTime7.weekOfWeekyear();
        int int24 = dateTime7.getDayOfYear();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localTime30.toDateTime(readableInstant31);
        int int33 = localTime27.compareTo((org.joda.time.ReadablePartial) localTime30);
        org.joda.time.LocalTime.Property property34 = localTime27.hourOfDay();
        org.joda.time.LocalTime localTime36 = property34.addCopy(6);
        int int37 = localTime36.getSecondOfMinute();
        org.joda.time.LocalTime.Property property38 = localTime36.secondOfMinute();
        org.joda.time.Interval interval39 = property38.toInterval();
        org.joda.time.LocalTime localTime41 = property38.addCopy(10381800000L);
        boolean boolean42 = dateTime7.equals((java.lang.Object) property38);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CN" + "'", str19, "CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.010" + "'", str20, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test12389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12389");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        int int8 = dateTimeFormatter7.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.weekyears();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePartial) localTime26, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField29 = chronology17.dayOfYear();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.get();
        org.joda.time.Interval interval38 = property36.toInterval();
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Period period40 = interval38.toPeriod();
        int[] intArray42 = chronology17.get((org.joda.time.ReadablePeriod) period40, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField43 = chronology17.dayOfYear();
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(chronology17);
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readablePeriod11, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = dateTime47.toString(dateTimeFormatter48);
        int int50 = dateTime47.getEra();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, readableDuration51);
        org.joda.time.Interval interval53 = interval45.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = localTime58.getChronology();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) (byte) 1, chronology61);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField64 = chronology61.monthOfYear();
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.fromMillisOfDay((long) 370, chronology61);
        org.joda.time.Interval interval66 = interval52.withChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField67 = chronology61.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter10.withChronology(chronology61);
        java.util.Locale locale70 = new java.util.Locale("hours");
        java.lang.String str71 = locale70.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter10.withLocale(locale70);
        // The following exception was thrown during execution in test generation
        try {
            long long74 = dateTimeFormatter10.parseMillis("2022-02-21T00:09:59.990Z/2022-02-21T00:10:59.990Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.052Z" + "'", str49, "1970-01-01T00:00:00.052Z");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNull(interval53);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertEquals(locale70.toString(), "hours");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
    }

    @Test
    public void test12390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12390");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(false);
        java.util.Calendar.Builder builder5 = builder3.setLenient(true);
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str7 = locale6.getDisplayLanguage();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale6);
        calendar8.setMinimalDaysInFirstWeek(5);
        java.util.TimeZone timeZone11 = calendar8.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.Calendar.Builder builder14 = builder5.setTimeZone(timeZone11);
        java.util.Calendar.Builder builder16 = builder14.setInstant(53389102L);
        java.util.Calendar.Builder builder20 = builder16.setWeekDate(54, 457070, 11);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455423139,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=5,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=3,MILLISECOND=139,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test12391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12391");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology6.weeks();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.secondOfMinute();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime15 = localTime13.minusMillis(32769);
        org.joda.time.LocalTime localTime17 = localTime15.minusMillis(21);
        org.joda.time.LocalTime localTime19 = localTime15.plusMinutes(53328);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 1, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfMonth();
        org.joda.time.Chronology chronology31 = chronology27.withUTC();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        boolean boolean33 = durationFieldType20.isSupported(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfYear();
        org.joda.time.DurationField durationField35 = chronology31.weeks();
        org.joda.time.DurationField durationField36 = chronology31.weekyears();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromMillisOfDay((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.era();
        boolean boolean40 = localTime38.isSupported(dateTimeFieldType39);
        org.joda.time.LocalTime.Property property41 = localTime38.minuteOfHour();
        org.joda.time.LocalTime localTime43 = property41.addCopy((-26));
        long long45 = chronology31.set((org.joda.time.ReadablePartial) localTime43, 1645454905307L);
        boolean boolean46 = localTime15.isBefore((org.joda.time.ReadablePartial) localTime43);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645486442022L + "'", long45 == 1645486442022L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test12392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12392");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(605, 574);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 605 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12393");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear(3);
        boolean boolean34 = dateTime30.isEqual(175367340000L);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.Chronology chronology45 = chronology41.withUTC();
        org.joda.time.DateTime dateTime46 = dateTime30.toDateTime(chronology41);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime30.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime49 = dateTime30.plus(0L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test12394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12394");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.weekyear();
        long long19 = dateTimeField17.roundHalfEven((long) (short) 0);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        int int28 = localTime22.compareTo((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.LocalTime.Property property29 = localTime22.hourOfDay();
        org.joda.time.LocalTime localTime31 = property29.addCopy(6);
        int int32 = localTime31.getSecondOfMinute();
        org.joda.time.LocalTime.Property property33 = localTime31.secondOfMinute();
        org.joda.time.LocalTime localTime34 = property33.getLocalTime();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.getMinimumValue();
        org.joda.time.DateTime dateTime43 = property41.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfYear();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.minus(readableDuration45);
        org.joda.time.DateTime dateTime48 = dateTime43.minusDays(0);
        int int49 = property33.getDifference((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalTime localTime50 = property33.getLocalTime();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.Chronology chronology58 = localTime55.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.weekyears();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.Chronology chronology66 = localTime63.getChronology();
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) (byte) 1, chronology66);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePartial) localTime67, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField70 = chronology58.dayOfYear();
        org.joda.time.DurationField durationField71 = durationFieldType52.getField(chronology58);
        org.joda.time.DurationField durationField72 = chronology58.minutes();
        org.joda.time.DateTimeField dateTimeField73 = chronology58.monthOfYear();
        long long75 = dateTimeField73.roundHalfFloor(1645402140000L);
        java.util.Locale locale76 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str77 = locale76.getVariant();
        int int78 = dateTimeField73.getMaximumShortTextLength(locale76);
        java.lang.String str79 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localTime50, 86399999, locale76);
        org.joda.time.LocalTime.Property property80 = localTime50.millisOfSecond();
        org.joda.time.LocalTime localTime82 = localTime50.withSecondOfMinute(24);
        java.lang.String str84 = localTime82.toString("12:53:22.152");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-259200000L) + "'", long19 == (-259200000L));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1645380000) + "'", int49 == (-1645380000));
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1646092800000L + "'", long75 == 1646092800000L);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "86399999" + "'", str79, "86399999");
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "12:53:22.152" + "'", str84, "12:53:22.152");
    }

    @Test
    public void test12395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12395");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Appendable appendable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(appendable7, 53572551L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test12396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12396");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int13 = dateTimeZone11.getOffset((long) (byte) 1);
        long long15 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 3);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone9);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.minusSeconds(1);
        int int20 = dateTime16.getMillisOfSecond();
        org.joda.time.DateTime.Property property21 = dateTime16.monthOfYear();
        java.lang.String str22 = property21.getAsShortText();
        java.util.Locale locale25 = new java.util.Locale("12");
        java.lang.String str26 = locale25.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = property21.setCopy("892", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"892\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Feb" + "'", str22, "Feb");
        org.junit.Assert.assertEquals(locale25.toString(), "12");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "12" + "'", str26, "12");
    }

    @Test
    public void test12397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12397");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (byte) 1, chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.hourOfHalfday();
        int int13 = dateTimeField11.getMaximumValue(3L);
        boolean boolean14 = dateTimeField11.isLenient();
        java.util.Locale locale16 = new java.util.Locale("hours");
        int int17 = dateTimeField11.getMaximumTextLength(locale16);
        java.util.Locale.Builder builder18 = builder2.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder2.clear();
        java.util.Locale.Builder builder22 = builder19.setExtension('a', "53610736");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals(locale16.toString(), "hours");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test12398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12398");
        java.util.Locale locale1 = new java.util.Locale("property[minuteofhour]");
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        org.junit.Assert.assertEquals(locale1.toString(), "property[minuteofhour]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test12399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12399");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.DateTimeField dateTimeField31 = chronology5.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial32 = null;
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("");
        java.util.Locale.setDefault(category34, locale36);
        java.util.Locale locale38 = java.util.Locale.UK;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale.setDefault(category34, locale38);
        java.lang.String str41 = dateTimeField31.getAsShortText(readablePartial32, 600, locale38);
        int int43 = dateTimeField31.getLeapAmount(10739990L);
        int int44 = dateTimeField31.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "600" + "'", str41, "600");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test12400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12400");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        boolean boolean10 = dateTime8.isBefore((long) (byte) 10);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = localTime21.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = localTime29.getChronology();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (byte) 1, chronology32);
        int[] intArray35 = chronology24.get((org.joda.time.ReadablePartial) localTime33, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField36 = chronology24.dayOfYear();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.LocalTime localTime42 = dateTime41.toLocalTime();
        org.joda.time.DateTime.Property property43 = dateTime41.minuteOfHour();
        int int44 = property43.get();
        org.joda.time.Interval interval45 = property43.toInterval();
        org.joda.time.DateTime dateTime46 = interval45.getEnd();
        org.joda.time.Period period47 = interval45.toPeriod();
        int[] intArray49 = chronology24.get((org.joda.time.ReadablePeriod) period47, (long) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = localTime53.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.weekyears();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localTime61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = localTime61.getChronology();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) (byte) 1, chronology64);
        int[] intArray67 = chronology56.get((org.joda.time.ReadablePartial) localTime65, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField68 = chronology56.dayOfYear();
        org.joda.time.DurationField durationField69 = durationFieldType50.getField(chronology56);
        int int70 = period47.get(durationFieldType50);
        int[] intArray73 = chronology17.get((org.joda.time.ReadablePeriod) period47, 1645454861756L, (long) 9);
        boolean boolean74 = dateTime8.equals((java.lang.Object) chronology17);
        org.joda.time.DurationField durationField75 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField76 = chronology17.year();
        long long78 = dateTimeField76.roundHalfCeiling(1645454967960L);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetHours(10);
        java.util.Locale locale84 = java.util.Locale.US;
        java.lang.String str85 = dateTimeZone82.getShortName(1645454982417L, locale84);
        // The following exception was thrown during execution in test generation
        try {
            long long86 = dateTimeField76.set(53815201L, "", locale84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-52, -1, -2, -6, -14, -47, -41, -747]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1640995200000L + "'", long78 == 1640995200000L);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+10:00" + "'", str85, "+10:00");
    }

    @Test
    public void test12401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12401");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime12 = localTime10.plusHours((int) 'u');
        org.joda.time.LocalTime localTime14 = localTime10.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.plus(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean23 = localTime21.isSupported(dateTimeFieldType22);
        org.joda.time.LocalTime localTime24 = localTime14.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.LocalTime localTime26 = localTime14.minusMillis((-95));
        org.joda.time.LocalTime.Property property27 = localTime14.millisOfSecond();
        org.joda.time.LocalTime localTime29 = property27.addNoWrapToCopy(2);
        int int30 = property27.get();
        java.lang.String str31 = property27.getName();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "millisOfSecond" + "'", str31, "millisOfSecond");
    }

    @Test
    public void test12402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12402");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime16 = property9.withMaximumValue();
        org.joda.time.LocalTime localTime18 = property9.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime19 = property9.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField20 = property9.getField();
        long long22 = dateTimeField20.remainder(111539999L);
        long long25 = dateTimeField20.add(168455806617599990L, 1645455136047L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3539999L + "'", long22 == 3539999L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 6092094296386799990L + "'", long25 == 6092094296386799990L);
    }

    @Test
    public void test12403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12403");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Interval interval22 = interval8.withChronology(chronology19);
        boolean boolean23 = interval8.isAfterNow();
        long long24 = interval8.toDurationMillis();
        boolean boolean26 = interval8.isAfter(1645455054012L);
        org.joda.time.Duration duration27 = interval8.toDuration();
        org.joda.time.Period period28 = duration27.toPeriod();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 60000L + "'", long24 == 60000L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test12404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12404");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 45, 1645454972356L);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfHour();
        int int10 = property9.get();
        org.joda.time.Interval interval11 = property9.toInterval();
        org.joda.time.Interval interval12 = interval11.toInterval();
        long long13 = interval11.toDurationMillis();
        org.joda.time.Interval interval15 = interval11.withStartMillis(10L);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (byte) 1, chronology22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology22);
        org.joda.time.Interval interval25 = interval11.withChronology(chronology22);
        boolean boolean26 = interval11.isAfterNow();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        int int34 = property33.getMinimumValue();
        org.joda.time.DateTime dateTime35 = property33.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime38 = null;
        boolean boolean39 = dateTimeZone37.isLocalDateTimeGap(localDateTime38);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = dateTime35.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime43 = dateTime41.withYearOfEra(6);
        org.joda.time.DateTime dateTime45 = dateTime41.plusMonths(1439);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, readableDuration46);
        org.joda.time.Interval interval48 = interval11.withEnd((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Interval interval50 = interval11.withEndMillis(1645454895971L);
        org.joda.time.Interval interval51 = interval11.toInterval();
        org.joda.time.Duration duration52 = interval51.toDuration();
        org.joda.time.Duration duration53 = duration52.toDuration();
        boolean boolean54 = interval2.equals((java.lang.Object) duration53);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 60000L + "'", long13 == 60000L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test12405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12405");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Period period11 = interval8.toPeriod();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localTime17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = localTime17.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (byte) 1, chronology20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology20);
        org.joda.time.Interval interval23 = new org.joda.time.Interval(0L, 0L, chronology20);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.LocalTime localTime29 = dateTime28.toLocalTime();
        org.joda.time.LocalTime localTime31 = localTime29.minusMillis((int) (byte) 10);
        int[] intArray33 = chronology20.get((org.joda.time.ReadablePartial) localTime29, (long) 53);
        boolean boolean34 = interval8.equals((java.lang.Object) intArray33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Interval interval36 = interval8.withDurationAfterStart(readableDuration35);
        org.joda.time.MutableInterval mutableInterval37 = interval36.toMutableInterval();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 53]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(mutableInterval37);
    }

    @Test
    public void test12406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12406");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-21T14:55:15.152+00:00:00.010/2022-02-21T14:56:15.152+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t14:55:15.152+00:00:00.010/2022-02-21t14:56:15.152+00:00:00.010");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12407");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("centuries");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test12408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12408");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        int int19 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localTime18);
        int int21 = dateTimeField10.get((long) 16);
        long long23 = dateTimeField10.roundHalfFloor(3195590399991L);
        org.joda.time.DurationField durationField24 = dateTimeField10.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2922789 + "'", int19 == 2922789);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4102444800000L + "'", long23 == 4102444800000L);
        org.junit.Assert.assertNull(durationField24);
    }

    @Test
    public void test12409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12409");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 1);
        int[] intArray2 = localTime1.getValues();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfHour();
        int int10 = property9.getMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone13.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = dateTime11.withZoneRetainFields(dateTimeZone13);
        int int18 = dateTime17.getDayOfWeek();
        org.joda.time.DateTime dateTime19 = localTime1.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        int int20 = localTime1.size();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
    }

    @Test
    public void test12410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12410");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear(1);
        org.joda.time.format.DateTimeParser dateTimeParser7 = dateTimeFormatter6.getParser();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weekyears();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = localTime18.getChronology();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (byte) 1, chronology21);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePartial) localTime22, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField25 = chronology13.clockhourOfDay();
        org.joda.time.DurationField durationField26 = chronology13.seconds();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology13.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter6.withZone(dateTimeZone27);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter28.getParser();
        boolean boolean30 = dateTimeFormatter28.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.parse("de", dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(dateTimeParser7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test12411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12411");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 9, false);
        java.lang.String str26 = dateTimeZone16.toString();
        org.joda.time.DateTime dateTime27 = localTime11.toDateTimeToday(dateTimeZone16);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.DateTime.Property property29 = dateTime27.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.010" + "'", str26, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test12412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12412");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.dayOfYear();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = property25.get();
        org.joda.time.Interval interval27 = property25.toInterval();
        org.joda.time.DateTime dateTime28 = interval27.getEnd();
        org.joda.time.Period period29 = interval27.toPeriod();
        int[] intArray31 = chronology6.get((org.joda.time.ReadablePeriod) period29, (long) (byte) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = null;
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = dateTimeFormatter34.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter34.withDefaultYear(1);
        boolean boolean38 = dateTimeFormatter37.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withPivotYear(0);
        java.util.Locale locale43 = new java.util.Locale("English");
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.Character> charSet45 = locale43.getExtensionKeys();
        java.util.Locale locale46 = java.util.Locale.US;
        java.util.Locale locale47 = locale46.stripExtensions();
        java.lang.String str48 = locale46.getVariant();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale46);
        java.lang.String str51 = locale46.getUnicodeLocaleType("CN");
        java.lang.String str52 = locale46.getLanguage();
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.lang.String str57 = locale56.getVariant();
        java.lang.String str58 = locale46.getDisplayName(locale56);
        java.lang.String str59 = locale43.getDisplayLanguage(locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter37.withLocale(locale46);
        boolean boolean61 = period29.equals((java.lang.Object) dateTimeFormatter60);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeFormatter60.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.parse("\u82f1\u8a9e\u30a2\u30e1\u30ea\u30ab\u5408\u8846\u56fd)", dateTimeFormatter60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNull(dateTimePrinter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertEquals(locale43.toString(), "english");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645455423558,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=3,MILLISECOND=558,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en" + "'", str52, "en");
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "English (United States)" + "'", str58, "English (United States)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "english" + "'", str59, "english");
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(dateTimeZone62);
    }

    @Test
    public void test12413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12413");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundCeilingCopy();
        java.util.Locale locale14 = java.util.Locale.US;
        java.lang.String str15 = locale14.getDisplayName();
        org.joda.time.LocalTime localTime16 = property9.setCopy("0", locale14);
        org.joda.time.LocalTime localTime17 = property9.roundFloorCopy();
        int int18 = property9.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField19 = property9.getField();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (United States)" + "'", str15, "English (United States)");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test12414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12414");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        java.lang.String str7 = property6.toString();
        org.joda.time.DateTime dateTime8 = property6.roundFloorCopy();
        org.joda.time.DateTime dateTime10 = property6.addToCopy((long) 366);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears(7);
        org.joda.time.DateTime dateTime19 = dateTime15.plusWeeks((int) (short) 10);
        int int20 = property6.getDifference((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, readableDuration21);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (byte) 1, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.dayOfMonth();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology29);
        org.joda.time.LocalTime localTime35 = localTime33.plusHours((int) 'u');
        org.joda.time.LocalTime localTime37 = localTime33.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int43 = dateTimeZone41.getOffset((long) (byte) 1);
        long long45 = dateTimeZone39.getMillisKeepLocal(dateTimeZone41, (long) 3);
        long long48 = dateTimeZone39.convertLocalToUTC((long) 9, false);
        java.lang.String str49 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime50 = localTime37.toDateTimeToday(dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.minus(readableDuration51);
        org.joda.time.DateTime dateTime54 = dateTime50.minusHours((int) 'a');
        boolean boolean55 = interval22.contains((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime57 = dateTime50.minusSeconds(888);
        org.joda.time.DateTime.Property property58 = dateTime57.year();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[minuteOfHour]" + "'", str7, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-100800) + "'", int20 == (-100800));
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test12415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12415");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        boolean boolean7 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear(15706);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withDefaultYear(56321361);
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test12416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12416");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime12 = null;
        boolean boolean13 = dateTimeZone11.isLocalDateTimeGap(localDateTime12);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone11);
        boolean boolean16 = dateTimeZone11.isStandardOffset((long) 59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter5.withZone(dateTimeZone11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter5.withPivotYear((-1645432682));
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = localTime24.getChronology();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (byte) 1, chronology27);
        boolean boolean29 = dateTimeFieldType20.isSupported(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.centuryOfEra();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(chronology27);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter19.withChronology(chronology27);
        boolean boolean35 = dateTimeFormatter19.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter19.withPivotYear(3720000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter19.withOffsetParsed();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((-1663837435000L));
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.Instant instant43 = instant40.withMillis(53283791L);
        org.joda.time.Instant instant44 = instant43.toInstant();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.LocalTime localTime51 = dateTime50.toLocalTime();
        org.joda.time.DateTime.Property property52 = dateTime50.minuteOfHour();
        int int53 = property52.getMinimumValue();
        org.joda.time.DateTime dateTime54 = property52.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property55 = dateTime54.dayOfYear();
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = localTime58.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.weekyears();
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localTime66.toDateTime(readableInstant67);
        org.joda.time.Chronology chronology69 = localTime66.getChronology();
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime((long) (byte) 1, chronology69);
        int[] intArray72 = chronology61.get((org.joda.time.ReadablePartial) localTime70, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField73 = chronology61.dayOfYear();
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localTime76.toDateTime(readableInstant77);
        org.joda.time.LocalTime localTime79 = dateTime78.toLocalTime();
        org.joda.time.DateTime.Property property80 = dateTime78.minuteOfHour();
        int int81 = property80.get();
        org.joda.time.Interval interval82 = property80.toInterval();
        org.joda.time.DateTime dateTime83 = interval82.getEnd();
        org.joda.time.Period period84 = interval82.toPeriod();
        int[] intArray86 = chronology61.get((org.joda.time.ReadablePeriod) period84, (long) (byte) 100);
        org.joda.time.DateTime dateTime87 = dateTime54.minus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.Interval interval88 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) period84);
        boolean boolean90 = interval88.equals((java.lang.Object) 1645454980767L);
        org.joda.time.Duration duration91 = interval88.toDuration();
        org.joda.time.Instant instant92 = instant43.minus((org.joda.time.ReadableDuration) duration91);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = dateTimeFormatter38.print((org.joda.time.ReadableInstant) instant92);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 10 + "'", int81 == 10);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(intArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(instant92);
    }

    @Test
    public void test12417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12417");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        java.lang.String str4 = calendar0.getCalendarType();
        java.time.Instant instant5 = calendar0.toInstant();
        int int6 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.set(366, (-1), (-27422807), 3, 1439);
        boolean boolean14 = calendar0.before((java.lang.Object) 8362592323200099L);
        int int15 = calendar0.getFirstDayOfWeek();
        int int16 = calendar0.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=366,MONTH=-1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=-27422807,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=3,MINUTE=1439,SECOND=3,MILLISECOND=692,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(instant5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test12418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12418");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 15706);
        int int2 = dateTime1.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test12419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12419");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        org.joda.time.Interval interval22 = interval8.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField23 = chronology19.year();
        java.lang.String str24 = dateTimeField23.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[year]" + "'", str24, "DateTimeField[year]");
    }

    @Test
    public void test12420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12420");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        java.util.Locale locale9 = java.util.Locale.US;
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale9.getDisplayCountry(locale13);
        java.lang.String str15 = property6.getAsText(locale13);
        org.joda.time.DateTime dateTime16 = property6.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField17 = property6.getField();
        org.joda.time.DateTime dateTime18 = property6.withMinimumValue();
        org.joda.time.Interval interval19 = property6.toInterval();
        org.joda.time.MutableInterval mutableInterval20 = interval19.toMutableInterval();
        long long21 = interval19.getEndMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "United States" + "'", str14, "United States");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10" + "'", str15, "10");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645402260000L + "'", long21 == 1645402260000L);
    }

    @Test
    public void test12421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12421");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfEra(6);
        org.joda.time.DateTime dateTime18 = dateTime14.plusMonths(1439);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, readableDuration19);
        org.joda.time.DateTime dateTime21 = interval20.getEnd();
        boolean boolean22 = interval20.isBeforeNow();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar30 = dateTime27.toGregorianCalendar();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.weekyears();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfEra();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.Chronology chronology45 = localTime42.getChronology();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) (byte) 1, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfMonth();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now(chronology45);
        org.joda.time.LocalTime localTime51 = localTime49.plusHours((int) 'u');
        long long53 = chronology36.set((org.joda.time.ReadablePartial) localTime49, 0L);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.DateTime.Property property60 = dateTime58.minuteOfHour();
        int int61 = property60.get();
        org.joda.time.Interval interval62 = property60.toInterval();
        org.joda.time.Period period63 = interval62.toPeriod();
        int[] intArray66 = chronology36.get((org.joda.time.ReadablePeriod) period63, (-2208988800000L), 473354280000L);
        org.joda.time.Period period67 = period63.toPeriod();
        org.joda.time.DateTime dateTime68 = dateTime27.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime69 = dateTime68.withEarlierOffsetAtOverlap();
        boolean boolean70 = interval20.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 53823767L + "'", long53 == 53823767L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[84, 11, 4, 2, 15, 18, 0, 0]");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test12422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12422");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getVariant();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        int int4 = calendar3.getWeekYear();
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder10 = builder5.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Locale locale11 = java.util.Locale.US;
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.lang.String str16 = locale11.getDisplayCountry(locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale11);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder19 = builder10.setTimeZone(timeZone18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone18);
        calendar3.setTimeZone(timeZone18);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455423824,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=3,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United States" + "'", str16, "United States");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455423824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=3,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645455423824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=3,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test12423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12423");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        org.joda.time.LocalTime localTime45 = property42.addNoWrapToCopy(43419768);
        org.joda.time.LocalTime localTime47 = localTime45.minusMinutes(47);
        org.joda.time.Chronology chronology48 = localTime47.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(chronology48);
    }

    @Test
    public void test12424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12424");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder3.setTimeOfDay((int) (short) 0, (int) '4', (int) (byte) 1);
        java.util.Calendar.Builder builder11 = builder7.setTimeOfDay(125, 24, 29);
        java.util.Calendar.Builder builder15 = builder11.setDate(120, 53545, (-46800000));
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        boolean boolean17 = calendar16.isWeekDateSupported();
        long long18 = calendar16.getTimeInMillis();
        java.util.TimeZone timeZone19 = calendar16.getTimeZone();
        int int20 = calendar16.getMinimalDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int26 = dateTimeZone24.getOffset((long) (byte) 1);
        long long28 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, (long) 3);
        long long31 = dateTimeZone22.convertLocalToUTC((long) 9, false);
        java.lang.String str32 = dateTimeZone22.toString();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(dateTimeZone22);
        int int35 = dateTimeZone22.getStandardOffset((long) 9);
        java.util.Locale locale37 = java.util.Locale.US;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.lang.String str39 = locale37.getVariant();
        java.lang.String str40 = dateTimeZone22.getShortName((long) 122, locale37);
        java.util.TimeZone timeZone41 = dateTimeZone22.toTimeZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone41);
        calendar16.setTimeZone(timeZone41);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41);
        java.util.Calendar.Builder builder45 = builder15.setTimeZone(timeZone41);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645455423876,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=3,MILLISECOND=876,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645455423876L + "'", long18 == 1645455423876L);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.010" + "'", str32, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645455423876,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=3,MILLISECOND=886,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645455423876,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=3,MILLISECOND=886,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test12425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12425");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        int int23 = localTime17.compareTo((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.LocalTime.Property property24 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime26 = property24.addCopy(6);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localTime29.toDateTime(readableInstant30);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.DateTime.Property property33 = dateTime31.minuteOfHour();
        int int34 = property33.get();
        org.joda.time.Interval interval35 = property33.toInterval();
        org.joda.time.Interval interval36 = interval35.toInterval();
        long long37 = interval35.toDurationMillis();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = interval35.toPeriod(periodType38);
        org.joda.time.LocalTime localTime41 = localTime26.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 8);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localTime44.toDateTime(readableInstant45);
        org.joda.time.LocalTime localTime47 = dateTime46.toLocalTime();
        org.joda.time.DateTime.Property property48 = dateTime46.minuteOfHour();
        int int49 = property48.get();
        org.joda.time.Interval interval50 = property48.toInterval();
        org.joda.time.DateTime dateTime52 = property48.addToCopy(9);
        org.joda.time.DateTime dateTime53 = localTime26.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = localTime14.isAfter((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localTime58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = localTime58.getChronology();
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) (byte) 1, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.dayOfMonth();
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.now(chronology61);
        org.joda.time.LocalTime localTime67 = localTime65.plusHours((int) 'u');
        org.joda.time.LocalTime localTime69 = localTime65.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int75 = dateTimeZone73.getOffset((long) (byte) 1);
        long long77 = dateTimeZone71.getMillisKeepLocal(dateTimeZone73, (long) 3);
        long long80 = dateTimeZone71.convertLocalToUTC((long) 9, false);
        java.lang.String str81 = dateTimeZone71.toString();
        org.joda.time.DateTime dateTime82 = localTime69.toDateTimeToday(dateTimeZone71);
        org.joda.time.DateTime dateTime83 = localTime26.toDateTimeToday(dateTimeZone71);
        int int84 = localTime11.compareTo((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.Chronology chronology85 = localTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField87 = chronology85.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField88 = chronology85.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 60000L + "'", long37 == 60000L);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 3L + "'", long77 == 3L);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00:00.010" + "'", str81, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test12426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12426");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.era();
        boolean boolean3 = localTime1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTime(readableInstant7);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        int[] intArray20 = chronology9.get((org.joda.time.ReadablePartial) localTime18, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField21 = chronology9.dayOfYear();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localTime24.toDateTime(readableInstant25);
        org.joda.time.LocalTime localTime27 = dateTime26.toLocalTime();
        org.joda.time.DateTime.Property property28 = dateTime26.minuteOfHour();
        int int29 = property28.get();
        org.joda.time.Interval interval30 = property28.toInterval();
        org.joda.time.DateTime dateTime31 = interval30.getEnd();
        org.joda.time.Period period32 = interval30.toPeriod();
        int[] intArray34 = chronology9.get((org.joda.time.ReadablePeriod) period32, (long) (byte) 100);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) (byte) 1, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(chronology41);
        long long47 = chronology9.set((org.joda.time.ReadablePartial) localTime45, 25200000L);
        org.joda.time.DateTimeField dateTimeField48 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType2.getField(chronology9);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localTime45);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53823940L + "'", long47 == 53823940L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test12427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12427");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime11 = null;
        boolean boolean12 = dateTimeZone10.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTime dateTime14 = dateTime8.withZoneRetainFields(dateTimeZone10);
        int int15 = dateTime8.getDayOfYear();
        org.joda.time.DateTime.Property property16 = dateTime8.minuteOfHour();
        org.joda.time.DurationField durationField17 = property16.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNull(durationField17);
    }

    @Test
    public void test12428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12428");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int36 = dateTimeZone34.getOffset((long) (byte) 1);
        long long38 = dateTimeZone32.getMillisKeepLocal(dateTimeZone34, (long) 3);
        long long41 = dateTimeZone32.convertLocalToUTC((long) 9, false);
        java.lang.String str42 = dateTimeZone32.toString();
        org.joda.time.Chronology chronology43 = chronology5.withZone(dateTimeZone32);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(dateTimeZone32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType46 = localTime44.getFieldType(287);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 287");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3L + "'", long38 == 3L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.010" + "'", str42, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology43);
    }

    @Test
    public void test12429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12429");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(7200000, (-457055), (-1645401599), 53401530, 2029, 1620, 53560109);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53401530 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12430");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getFirstDayOfWeek();
        int int3 = calendar0.getLeastMaximum(2);
        java.lang.String str4 = calendar0.getCalendarType();
        java.time.Instant instant5 = calendar0.toInstant();
        java.util.Date date7 = new java.util.Date((long) (byte) 100);
        date7.setMinutes(11);
        long long10 = date7.getTime();
        int int11 = date7.getMonth();
        calendar0.setTime(date7);
        int int13 = date7.getHours();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=660100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=11,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 660100L + "'", long10 == 660100L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test12431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12431");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime.Property property13 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property13.getLocalTime();
        org.joda.time.DurationField durationField15 = property13.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant16 = new org.joda.time.Instant((java.lang.Object) durationField15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.PreciseDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test12432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12432");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        long long10 = dateTimeField8.roundFloor((long) 1);
        int int13 = dateTimeField8.getDifference(0L, (-60000L));
        long long15 = dateTimeField8.roundHalfEven((long) 2922789);
        long long17 = dateTimeField8.roundHalfCeiling(1645455083437L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3600000L + "'", long15 == 3600000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455600000L + "'", long17 == 1645455600000L);
    }

    @Test
    public void test12433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12433");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("KOR");
        double double2 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test12434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12434");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.setVariant("53275870");
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.dayOfYear();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("English");
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = dateTimeField16.getAsShortText((long) 70, locale19);
        java.lang.String str22 = locale19.getVariant();
        java.util.Locale.Builder builder23 = builder6.setLocale(locale19);
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder26 = builder23.removeUnicodeLocaleAttribute("china");
        java.util.Locale.Builder builder27 = builder23.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "english");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "english" + "'", str20, "english");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test12435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12435");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        long long2 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone3 = calendar0.getTimeZone();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (byte) 1, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfMonth();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.LocalTime localTime16 = localTime14.plusHours((int) 'u');
        org.joda.time.LocalTime localTime18 = localTime14.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int24 = dateTimeZone22.getOffset((long) (byte) 1);
        long long26 = dateTimeZone20.getMillisKeepLocal(dateTimeZone22, (long) 3);
        long long29 = dateTimeZone20.convertLocalToUTC((long) 9, false);
        java.lang.String str30 = dateTimeZone20.toString();
        org.joda.time.DateTime dateTime31 = localTime18.toDateTimeToday(dateTimeZone20);
        java.util.Locale locale33 = java.util.Locale.US;
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.lang.String str38 = locale33.getDisplayCountry(locale37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale33);
        java.util.Locale locale40 = java.util.Locale.ITALY;
        boolean boolean41 = locale40.hasExtensions();
        java.lang.String str42 = locale33.getDisplayCountry(locale40);
        java.lang.String str43 = dateTimeZone20.getShortName((long) 2022, locale33);
        java.lang.String str44 = locale33.getDisplayScript();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone3, locale33);
        java.util.TimeZone timeZone46 = calendar45.getTimeZone();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone46);
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.fromCalendarFields(calendar47);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455424102,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=102,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645455424102L + "'", long2 == 1645455424102L);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3L + "'", long26 == 3L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.010" + "'", str30, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "United States" + "'", str38, "United States");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645455424102,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=102,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Stati Uniti" + "'", str42, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.010" + "'", str43, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645455424102,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=102,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645455424102,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=102,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime48);
    }

    @Test
    public void test12436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12436");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.hourOfHalfday();
        long long11 = dateTimeField8.add((long) 'u', 7);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (byte) 1, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfMonth();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology18);
        org.joda.time.LocalTime localTime24 = localTime22.plusHours((int) 'u');
        int int25 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.LocalTime.Property property26 = localTime22.millisOfSecond();
        org.joda.time.LocalTime.Property property27 = localTime22.secondOfMinute();
        org.joda.time.LocalTime.Property property28 = localTime22.millisOfDay();
        org.joda.time.Chronology chronology29 = localTime22.getChronology();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 25200117L + "'", long11 == 25200117L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
    }

    @Test
    public void test12437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12437");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Locale locale6 = java.util.Locale.US;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayCountry(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale6);
        java.util.TimeZone timeZone13 = calendar12.getTimeZone();
        java.util.Calendar.Builder builder14 = builder5.setTimeZone(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.util.Locale locale17 = java.util.Locale.US;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale17.getISO3Language();
        java.lang.String str20 = locale16.getDisplayName(locale17);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale16);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone13, locale16);
        calendar22.set(99, 9, 0, 891, 21488, 100);
        int int30 = calendar22.getWeeksInWeekYear();
        java.lang.Object obj31 = calendar22.clone();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "United States" + "'", str11, "United States");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645455424145,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=145,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645455424145,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=145,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645455424145,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=145,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=99,MONTH=9,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=891,MINUTE=21488,SECOND=100,MILLISECOND=145,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 52 + "'", int30 == 52);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=99,MONTH=9,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=891,MINUTE=21488,SECOND=100,MILLISECOND=145,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=99,MONTH=9,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=891,MINUTE=21488,SECOND=100,MILLISECOND=145,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=99,MONTH=9,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=891,MINUTE=21488,SECOND=100,MILLISECOND=145,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test12438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12438");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime4.toGregorianCalendar();
        gregorianCalendar7.setMinimalDaysInFirstWeek((-1));
        boolean boolean10 = gregorianCalendar7.isWeekDateSupported();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        boolean boolean12 = calendar11.isWeekDateSupported();
        long long13 = calendar11.getTimeInMillis();
        java.util.TimeZone timeZone14 = calendar11.getTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        gregorianCalendar7.setTimeZone(timeZone14);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = calendar17.getGreatestMinimum(464304);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 464304");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455424158,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=158,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645455424158L + "'", long13 == 1645455424158L);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645455424158,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=158,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test12439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12439");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.lang.String str3 = dateTimeZone0.getShortName((long) 2922789, locale2);
        long long6 = dateTimeZone0.adjustOffset((long) (-1), false);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(22);
        int int10 = dateTime7.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53824172 + "'", int10 == 53824172);
    }

    @Test
    public void test12440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12440");
        java.util.Date date5 = new java.util.Date(53, 32772, 125, 99, (int) (short) 10);
        java.time.Instant instant6 = date5.toInstant();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder11 = builder7.setVariant("53275870");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.setVariant("weekyear");
        boolean boolean16 = date5.equals((java.lang.Object) builder13);
        org.junit.Assert.assertEquals(date5.toString(), "Thu May 08 03:10:00 UTC 4684");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test12441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12441");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.LocalTime localTime10 = localTime7.minusMinutes(1);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime7.withPeriodAdded(readablePeriod11, 2);
        org.joda.time.LocalTime localTime15 = localTime13.plusHours((-74714));
        org.joda.time.LocalTime localTime17 = localTime13.plusMinutes((int) (byte) 100);
        org.joda.time.LocalTime.Property property18 = localTime13.millisOfSecond();
        org.joda.time.LocalTime localTime20 = localTime13.minusSeconds(2720);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test12442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12442");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.setCopy((int) (byte) 10);
        org.joda.time.LocalTime localTime16 = property9.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField17 = property9.getField();
        org.joda.time.LocalTime localTime19 = property9.addCopy(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant(0L);
        org.joda.time.DateTime dateTime22 = localTime19.toDateTime((org.joda.time.ReadableInstant) instant21);
        int int23 = dateTime22.getMinuteOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withYearOfCentury(16);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = localTime31.getChronology();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) (byte) 1, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.dayOfMonth();
        org.joda.time.Chronology chronology38 = chronology34.withUTC();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.year();
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromMillisOfDay((long) (-95), chronology38);
        org.joda.time.DurationField durationField42 = chronology38.weeks();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology38.getZone();
        org.joda.time.DateTimeField dateTimeField44 = chronology38.centuryOfEra();
        long long47 = dateTimeField44.add(4083000L, 746);
        long long50 = dateTimeField44.add(227207376000000L, (int) '#');
        int int51 = dateTime26.get(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 190 + "'", int23 == 190);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2354148666483000L + "'", long47 == 2354148666483000L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 337656729600000L + "'", long50 == 337656729600000L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 19 + "'", int51 == 19);
    }

    @Test
    public void test12443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12443");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        long long6 = dateTime4.getMillis();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int12 = dateTimeZone10.getOffset((long) (byte) 1);
        long long14 = dateTimeZone8.getMillisKeepLocal(dateTimeZone10, (long) 3);
        long long17 = dateTimeZone8.convertLocalToUTC((long) 9, false);
        java.lang.String str18 = dateTimeZone8.toString();
        long long20 = dateTimeZone8.convertUTCToLocal((long) 7);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime4.toMutableDateTime(dateTimeZone8);
        boolean boolean23 = mutableDateTime21.isBefore(63560213757081L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645402200000L + "'", long6 == 1645402200000L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3L + "'", long14 == 3L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.010" + "'", str18, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 17L + "'", long20 == 17L);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test12444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12444");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.DateTime.Property property24 = dateTime22.minuteOfHour();
        int int25 = property24.get();
        org.joda.time.Interval interval26 = property24.toInterval();
        org.joda.time.DateTime dateTime27 = interval26.getEnd();
        org.joda.time.Period period28 = interval26.toPeriod();
        int[] intArray30 = chronology5.get((org.joda.time.ReadablePeriod) period28, (long) (byte) 100);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology37);
        long long43 = chronology5.set((org.joda.time.ReadablePartial) localTime41, 25200000L);
        org.joda.time.DateTimeField dateTimeField44 = chronology5.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField44.getType();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = localTime49.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfMonth();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.LocalTime localTime58 = localTime56.plusHours((int) 'u');
        org.joda.time.LocalTime localTime60 = localTime56.withMillisOfSecond(1);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localTime63.toDateTime(readableInstant64);
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.LocalTime localTime67 = localTime63.plus(readablePeriod66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean69 = localTime67.isSupported(dateTimeFieldType68);
        org.joda.time.LocalTime localTime70 = localTime60.withFields((org.joda.time.ReadablePartial) localTime67);
        org.joda.time.LocalTime localTime72 = localTime60.minusMillis((-95));
        java.util.Locale locale75 = new java.util.Locale("Property[millisOfDay]", "21 Feb 2022 00:10:00 GMT");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = dateTimeField44.getAsShortText((org.joda.time.ReadablePartial) localTime72, locale75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 53824260L + "'", long43 == 53824260L);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertEquals(locale75.toString(), "property[millisofday]_21 FEB 2022 00:10:00 GMT");
    }

    @Test
    public void test12445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12445");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.year();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) (-95), chronology11);
        org.joda.time.DurationField durationField15 = chronology11.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = durationField15.getMillis(64029106204110L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 64029106204110 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test12446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12446");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval32 = interval8.toInterval();
        org.joda.time.DateTime dateTime33 = interval8.getEnd();
        org.joda.time.DateTime dateTime34 = interval8.getEnd();
        org.joda.time.Interval interval35 = interval8.toInterval();
        java.lang.Object obj36 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = localTime40.getChronology();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 1, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.dayOfMonth();
        org.joda.time.Chronology chronology47 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology47.year();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.clockhourOfDay();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(obj36, chronology47);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localTime55.toDateTime(readableInstant56);
        org.joda.time.LocalTime localTime58 = dateTime57.toLocalTime();
        org.joda.time.DateTime.Property property59 = dateTime57.minuteOfHour();
        int int60 = property59.get();
        org.joda.time.Interval interval61 = property59.toInterval();
        org.joda.time.Interval interval62 = interval61.toInterval();
        long long63 = interval61.toDurationMillis();
        org.joda.time.Interval interval65 = interval61.withStartMillis(10L);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localTime69.toDateTime(readableInstant70);
        org.joda.time.Chronology chronology72 = localTime69.getChronology();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) (byte) 1, chronology72);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(chronology72);
        org.joda.time.Interval interval75 = interval61.withChronology(chronology72);
        long long76 = interval75.getStartMillis();
        boolean boolean78 = interval75.isAfter(53379962L);
        org.joda.time.MutableInterval mutableInterval79 = interval75.toMutableInterval();
        boolean boolean80 = interval52.isAfter((org.joda.time.ReadableInterval) mutableInterval79);
        boolean boolean81 = interval8.contains((org.joda.time.ReadableInterval) interval52);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 60000L + "'", long63 == 60000L);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645402200000L + "'", long76 == 1645402200000L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test12447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12447");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(53820565L);
    }

    @Test
    public void test12448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12448");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.DateTime.Property property16 = dateTime14.minuteOfHour();
        int int17 = property16.get();
        org.joda.time.Interval interval18 = property16.toInterval();
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInterval) interval18);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.LocalTime localTime26 = dateTime25.toLocalTime();
        org.joda.time.DateTime.Property property27 = dateTime25.minuteOfHour();
        java.lang.String str28 = property27.toString();
        org.joda.time.DateTime dateTime29 = property27.roundFloorCopy();
        org.joda.time.DateTime dateTime31 = property27.addToCopy((long) 366);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears(7);
        org.joda.time.DateTime dateTime40 = dateTime36.plusWeeks((int) (short) 10);
        int int41 = property27.getDifference((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, readableDuration42);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.Chronology chronology50 = localTime47.getChronology();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (byte) 1, chronology50);
        org.joda.time.DateTimeField dateTimeField52 = chronology50.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = chronology50.dayOfMonth();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology50);
        org.joda.time.LocalTime localTime56 = localTime54.plusHours((int) 'u');
        org.joda.time.LocalTime localTime58 = localTime54.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int64 = dateTimeZone62.getOffset((long) (byte) 1);
        long long66 = dateTimeZone60.getMillisKeepLocal(dateTimeZone62, (long) 3);
        long long69 = dateTimeZone60.convertLocalToUTC((long) 9, false);
        java.lang.String str70 = dateTimeZone60.toString();
        org.joda.time.DateTime dateTime71 = localTime58.toDateTimeToday(dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime71.minus(readableDuration72);
        org.joda.time.DateTime dateTime75 = dateTime71.minusHours((int) 'a');
        boolean boolean76 = interval43.contains((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean77 = interval9.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = interval43.toPeriod(periodType78);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[minuteOfHour]" + "'", str28, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-100800) + "'", int41 == (-100800));
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3L + "'", long66 == 3L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.010" + "'", str70, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(period79);
    }

    @Test
    public void test12449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12449");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.dayOfMonth();
        org.joda.time.DateTime.Property property9 = dateTime4.dayOfMonth();
        org.joda.time.DateTime.Property property10 = dateTime4.monthOfYear();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.LocalTime localTime16 = dateTime15.toLocalTime();
        int int17 = dateTime15.getMonthOfYear();
        int int18 = dateTime15.getHourOfDay();
        org.joda.time.DateTime.Property property19 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = null;
        java.lang.String str22 = dateTime20.toString(dateTimeFormatter21);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localTime26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = localTime26.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.weekyears();
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localTime34.toDateTime(readableInstant35);
        org.joda.time.Chronology chronology37 = localTime34.getChronology();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (byte) 1, chronology37);
        int[] intArray40 = chronology29.get((org.joda.time.ReadablePartial) localTime38, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField41 = chronology29.weekyear();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 5, chronology29);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.LocalTime localTime48 = dateTime47.toLocalTime();
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfHour();
        int int50 = property49.get();
        org.joda.time.Interval interval51 = property49.toInterval();
        org.joda.time.Period period52 = interval51.toPeriod();
        org.joda.time.DateTime dateTime53 = dateTime42.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = dateTime20.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime56 = dateTime20.plusMillis(18);
        int int57 = property10.compareTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime58 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime60 = dateTime20.minusMonths(60005);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-21T00:10:00.000Z" + "'", str22, "2022-02-21T00:10:00.000Z");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test12450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12450");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar9 = dateTime6.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int15 = dateTimeZone13.getOffset((long) (byte) 1);
        long long17 = dateTimeZone11.getMillisKeepLocal(dateTimeZone13, (long) 3);
        long long19 = dateTimeZone11.previousTransition(0L);
        java.lang.String str21 = dateTimeZone11.getNameKey(720100L);
        org.joda.time.DateTime dateTime22 = dateTime6.withZoneRetainFields(dateTimeZone11);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localTime28.toDateTime(readableInstant29);
        int int31 = localTime25.compareTo((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.LocalTime.Property property32 = localTime25.hourOfDay();
        org.joda.time.DateTime dateTime33 = dateTime22.withFields((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = localTime36.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.weekyears();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.yearOfEra();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.Chronology chronology48 = localTime45.getChronology();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) (byte) 1, chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.dayOfMonth();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology48);
        org.joda.time.LocalTime localTime54 = localTime52.plusHours((int) 'u');
        long long56 = chronology39.set((org.joda.time.ReadablePartial) localTime52, 0L);
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((java.lang.Object) localTime25, chronology39);
        org.joda.time.Chronology chronology58 = localTime25.getChronology();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime1, chronology58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime61 = dateTime59.withWeekOfWeekyear(574);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 574 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(gregorianCalendar9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3L + "'", long17 == 3L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + 53824460L + "'", long56 == 53824460L);
        org.junit.Assert.assertNotNull(chronology58);
    }

    @Test
    public void test12451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12451");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.Chronology chronology7 = dateTimeFormatter2.getChronology();
        int int8 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withPivotYear((-1645401599));
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeFormatter2.parseMillis("DurationField[weeks]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNull(chronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2000 + "'", int8 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test12452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12452");
        java.util.Date date1 = new java.util.Date((long) (byte) 100);
        date1.setMinutes(11);
        long long4 = date1.getTime();
        int int5 = date1.getMonth();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date1);
        org.joda.time.LocalTime localTime8 = localTime6.withMinuteOfHour((int) '#');
        org.joda.time.LocalTime localTime10 = localTime6.minusMinutes((-100800));
        org.joda.time.LocalTime localTime12 = localTime6.plusSeconds((int) (short) 1);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        int int21 = localTime15.compareTo((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.LocalTime.Property property22 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime24 = property22.addCopy(6);
        org.joda.time.LocalTime localTime25 = property22.roundCeilingCopy();
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = locale27.getDisplayName();
        org.joda.time.LocalTime localTime29 = property22.setCopy("0", locale27);
        org.joda.time.LocalTime localTime30 = property22.roundFloorCopy();
        org.joda.time.LocalTime localTime32 = localTime30.minusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int34 = localTime30.get(dateTimeFieldType33);
        int int35 = localTime6.get(dateTimeFieldType33);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.LocalTime localTime41 = dateTime40.toLocalTime();
        org.joda.time.DateTime.Property property42 = dateTime40.minuteOfHour();
        int int43 = property42.getMinimumValue();
        org.joda.time.DateTime dateTime44 = property42.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property45 = dateTime44.dayOfYear();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.minus(readableDuration46);
        org.joda.time.DateTime dateTime49 = dateTime44.minusDays(0);
        org.joda.time.DateTime.Property property50 = dateTime49.era();
        org.joda.time.DateTime dateTime51 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localTime54.toDateTime(readableInstant55);
        org.joda.time.LocalTime localTime57 = dateTime56.toLocalTime();
        int int58 = dateTime56.getMonthOfYear();
        int int59 = dateTime56.getHourOfDay();
        org.joda.time.DateTime.Property property60 = dateTime56.dayOfMonth();
        org.joda.time.DateTime dateTime61 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property62 = dateTime61.dayOfWeek();
        org.joda.time.DateTime dateTime64 = property62.addToCopy(53);
        int int65 = dateTime64.getMinuteOfHour();
        org.joda.time.DateTime dateTime67 = dateTime64.minusYears(99);
        org.joda.time.DateTime dateTime69 = dateTime64.plusWeeks((-14));
        boolean boolean70 = dateTime51.isAfter((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 660100L + "'", long4 == 660100L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (United States)" + "'", str28, "English (United States)");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test12453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12453");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.year();
        org.joda.time.DurationField durationField19 = chronology6.months();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(63560213483231L, chronology6);
        org.joda.time.DateTimeField dateTimeField21 = chronology6.weekyearOfCentury();
        java.lang.String str22 = dateTimeField21.getName();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyearOfCentury" + "'", str22, "weekyearOfCentury");
    }

    @Test
    public void test12454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12454");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.minuteOfDay();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localTime13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = localTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfEra();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfMonth();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.LocalTime localTime31 = localTime29.plusHours((int) 'u');
        long long33 = chronology16.set((org.joda.time.ReadablePartial) localTime29, 0L);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localTime36.toDateTime(readableInstant37);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        org.joda.time.DateTime.Property property40 = dateTime38.minuteOfHour();
        int int41 = property40.get();
        org.joda.time.Interval interval42 = property40.toInterval();
        org.joda.time.Period period43 = interval42.toPeriod();
        int[] intArray46 = chronology16.get((org.joda.time.ReadablePeriod) period43, (-2208988800000L), 473354280000L);
        org.joda.time.Period period47 = period43.toPeriod();
        org.joda.time.Period period48 = period47.toPeriod();
        int[] intArray51 = chronology6.get((org.joda.time.ReadablePeriod) period47, 606L, 98724096000000000L);
        org.joda.time.DateTimeField dateTimeField52 = chronology6.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 53824543L + "'", long33 == 53824543L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[84, 11, 4, 2, 15, 18, 0, 0]");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[3128442, 0, 3, 1, 23, 59, 59, 394]");
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test12455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12455");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((-1663837435000L));
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.Instant instant4 = instant1.withMillis(53283791L);
        org.joda.time.Instant instant5 = instant4.toInstant();
        org.joda.time.Instant instant7 = instant4.withMillis(604800000L);
        org.joda.time.Instant instant10 = instant4.withDurationAdded(1645454883623L, 21488);
        org.joda.time.Instant instant12 = instant10.plus(1645454951919L);
        org.joda.time.DateTime dateTime13 = instant12.toDateTimeISO();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test12456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12456");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (byte) 1, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.era();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePartial) localTime27, (long) (short) -1);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.get();
        org.joda.time.Interval interval38 = property36.toInterval();
        org.joda.time.DateTime dateTime39 = interval38.getEnd();
        org.joda.time.Period period40 = interval38.toPeriod();
        org.joda.time.LocalTime localTime42 = localTime27.withPeriodAdded((org.joda.time.ReadablePeriod) period40, 17);
        org.joda.time.Period period43 = period40.toPeriod();
        int[] intArray46 = chronology9.get((org.joda.time.ReadablePeriod) period43, (long) 19, 7L);
        java.lang.String str47 = period43.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, -12]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT1M" + "'", str47, "PT1M");
    }

    @Test
    public void test12457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12457");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder2.setLanguage("java.util.gregoriancalendar[time=1645454895324,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=9,week_of_month=4,day_of_month=21,day_of_year=52,day_of_week=2,day_of_week_in_month=3,am_pm=1,hour=2,hour_of_day=14,minute=48,second=15,millisecond=324,zone_offset=0,dst_offset=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: java.util.gregoriancalendar[time=1645454895324,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=9,week_of_month=4,day_of_month=21,day_of_year=52,day_of_week=2,day_of_week_in_month=3,am_pm=1,hour=2,hour_of_day=14,minute=48,second=15,millisecond=324,zone_offset=0,dst_offset=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test12458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12458");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours((int) 'u');
        org.joda.time.LocalTime localTime15 = localTime11.withMillisOfSecond(1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int21 = dateTimeZone19.getOffset((long) (byte) 1);
        long long23 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 3);
        long long26 = dateTimeZone17.convertLocalToUTC((long) 9, false);
        java.lang.String str27 = dateTimeZone17.toString();
        org.joda.time.DateTime dateTime28 = localTime15.toDateTimeToday(dateTimeZone17);
        java.util.Locale locale30 = java.util.Locale.US;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayCountry(locale34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale30);
        java.util.Locale locale37 = java.util.Locale.ITALY;
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String str39 = locale30.getDisplayCountry(locale37);
        java.lang.String str40 = dateTimeZone17.getShortName((long) 2022, locale30);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(7L, dateTimeZone17);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone17);
        java.lang.String str44 = dateTimeZone17.getShortName(0L);
        long long46 = dateTimeZone17.nextTransition(1L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3L + "'", long23 == 3L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.010" + "'", str27, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "United States" + "'", str35, "United States");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645455424619,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=619,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Stati Uniti" + "'", str39, "Stati Uniti");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.010" + "'", str40, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
    }

    @Test
    public void test12459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12459");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.DurationField durationField20 = chronology6.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.dayOfWeek();
        int int24 = dateTimeField21.getDifference((-3241594890627141L), 10346400000L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-37518579) + "'", int24 == (-37518579));
    }

    @Test
    public void test12460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12460");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        int int27 = property26.get();
        org.joda.time.Interval interval28 = property26.toInterval();
        org.joda.time.Period period29 = interval28.toPeriod();
        org.joda.time.DateTime dateTime30 = dateTime19.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime32 = dateTime30.withWeekyear(3);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, readableDuration33);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        int int43 = localTime37.compareTo((org.joda.time.ReadablePartial) localTime40);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean45 = localTime37.isSupported(dateTimeFieldType44);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.Chronology chronology52 = localTime49.getChronology();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) (byte) 1, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfMonth();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType44.getField(chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.millisOfDay();
        org.joda.time.DurationField durationField59 = chronology52.halfdays();
        org.joda.time.Interval interval60 = interval34.withChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField61 = chronology52.minuteOfDay();
        long long64 = dateTimeField61.add(3110618865369600000L, (-44));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3110618865366960000L + "'", long64 == 3110618865366960000L);
    }

    @Test
    public void test12461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12461");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.getLocalTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int20 = dateTimeZone18.getOffset((long) (byte) 1);
        long long22 = dateTimeZone16.getMillisKeepLocal(dateTimeZone18, (long) 3);
        long long24 = dateTimeZone16.previousTransition(0L);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(1645454875924L, dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((java.lang.Object) property9, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3L + "'", long22 == 3L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test12462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12462");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder6 = builder0.setTimeOfDay((-457055), 0, (-100800), 2);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 1);
        int[] intArray9 = localTime8.getValues();
        java.util.Calendar.Builder builder10 = builder0.setFields(intArray9);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay((int) (short) 10, (int) '4', 99, 35);
        java.util.Calendar.Builder builder18 = builder15.set(9, 35);
        java.util.Calendar.Builder builder22 = builder18.setTimeOfDay(53321001, (-1645379999), 163239569);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder25 = builder22.set(115079981, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test12463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12463");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusYears(7);
        org.joda.time.DateTime dateTime8 = dateTime4.plusWeeks((int) (short) 10);
        org.joda.time.DateTime.Property property9 = dateTime4.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime4.getZone();
        int int11 = dateTime4.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 600000 + "'", int11 == 600000);
    }

    @Test
    public void test12464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12464");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.getLocalTime();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.LocalTime localTime49 = dateTime48.toLocalTime();
        org.joda.time.DateTime.Property property50 = dateTime48.minuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime48.plusWeeks(0);
        int int53 = dateTime52.getYearOfEra();
        org.joda.time.DateTime.Property property54 = dateTime52.year();
        int int55 = dateTime52.getYearOfCentury();
        int int56 = property42.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalTime localTime57 = property42.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime58 = property42.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime59 = property42.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2022 + "'", int53 == 2022);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
    }

    @Test
    public void test12465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12465");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (byte) 1, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.year();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(17L, 1645454862530L, chronology12);
        org.joda.time.DurationField durationField15 = chronology12.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.halfdayOfDay();
        java.lang.String str17 = chronology12.toString();
        org.joda.time.DurationField durationField18 = chronology12.years();
        long long20 = durationField18.getMillis((long) 53513);
        long long22 = durationField18.getValueAsLong(0L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1688707172376000L + "'", long20 == 1688707172376000L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test12466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12466");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale0.getVariant();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale0);
        java.lang.String str5 = locale0.getUnicodeLocaleType("CN");
        java.lang.String str6 = locale0.getLanguage();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(7);
        org.joda.time.DateTime dateTime16 = dateTime12.plusWeeks((int) (short) 10);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.LocalTime localTime22 = dateTime21.toLocalTime();
        org.joda.time.DateTime.Property property23 = dateTime21.minuteOfHour();
        org.joda.time.DateTime dateTime25 = dateTime21.plusWeeks(0);
        org.joda.time.Chronology chronology26 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.millisOfDay();
        org.joda.time.DateTime dateTime28 = dateTime12.toDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone29 = chronology26.getZone();
        java.lang.String str30 = chronology26.toString();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay(906093692L, chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.centuryOfEra();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.util.Locale locale40 = new java.util.Locale("", "hi!", "");
        java.lang.String str41 = locale40.getVariant();
        java.lang.String str42 = locale36.getDisplayScript(locale40);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localTime45.toDateTime(readableInstant46);
        org.joda.time.LocalTime localTime48 = dateTime47.toLocalTime();
        org.joda.time.DateTime.Property property49 = dateTime47.minuteOfHour();
        int int50 = property49.getMinimumValue();
        org.joda.time.DateTime dateTime51 = property49.roundHalfEvenCopy();
        java.util.Locale locale52 = java.util.Locale.US;
        java.util.Locale locale56 = new java.util.Locale("", "hi!", "");
        java.lang.String str57 = locale52.getDisplayCountry(locale56);
        java.lang.String str58 = property49.getAsText(locale56);
        java.lang.String str59 = locale40.getDisplayVariant(locale56);
        java.lang.String str60 = locale34.getDisplayVariant(locale40);
        java.util.Set<java.lang.String> strSet61 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str62 = dateTimeField32.getAsShortText(53401, locale40);
        java.lang.String str63 = locale0.getDisplayCountry(locale40);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645455424793,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=4,MILLISECOND=793,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[UTC]" + "'", str30, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale40.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertEquals(locale56.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "United States" + "'", str57, "United States");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "10" + "'", str58, "10");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "53401" + "'", str62, "53401");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "United States" + "'", str63, "United States");
    }

    @Test
    public void test12467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12467");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.Chronology chronology8 = dateTimeFormatter7.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter7.withPivotYear(86399);
        boolean boolean11 = dateTimeFormatter10.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withZoneUTC();
        java.util.Locale locale13 = dateTimeFormatter10.getLocale();
        org.joda.time.Chronology chronology14 = dateTimeFormatter10.getChronology();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNull(chronology14);
    }

    @Test
    public void test12468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12468");
        java.util.Date date1 = new java.util.Date(45L);
        int int2 = date1.getTimezoneOffset();
        int int3 = date1.getTimezoneOffset();
        java.util.Date date5 = new java.util.Date((long) (byte) 100);
        date5.setMinutes(11);
        long long8 = date5.getTime();
        int int9 = date5.getMonth();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date5);
        java.lang.String str11 = date5.toLocaleString();
        date5.setDate(1);
        boolean boolean14 = date1.before(date5);
        java.util.Date date16 = new java.util.Date((long) (byte) 100);
        date16.setMinutes(11);
        int int19 = date16.getSeconds();
        java.util.Date date21 = new java.util.Date((long) (byte) 100);
        date21.setMinutes(11);
        boolean boolean24 = date16.before(date21);
        int int25 = date16.getDate();
        boolean boolean26 = date1.before(date16);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 660100L + "'", long8 == 660100L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Jan 1, 1970 12:11:00 AM" + "'", str11, "Jan 1, 1970 12:11:00 AM");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 00:11:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test12469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12469");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfHour();
        int int16 = property15.getMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        boolean boolean19 = interval8.contains((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.LocalTime localTime25 = dateTime24.toLocalTime();
        org.joda.time.DateTime.Property property26 = dateTime24.minuteOfHour();
        java.lang.String str27 = property26.toString();
        org.joda.time.DateTime dateTime28 = property26.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.Interval interval31 = interval8.withStart((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean33 = interval8.contains((long) 35);
        org.joda.time.Interval interval34 = interval8.toInterval();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.getMinimumValue();
        org.joda.time.DateTime dateTime43 = property41.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime46 = null;
        boolean boolean47 = dateTimeZone45.isLocalDateTimeGap(localDateTime46);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = dateTime43.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfEra(6);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfMonth();
        org.joda.time.DateTime dateTime53 = property52.withMaximumValue();
        boolean boolean55 = property52.equals((java.lang.Object) 366L);
        org.joda.time.Interval interval56 = property52.toInterval();
        boolean boolean58 = interval56.contains(53295139L);
        org.joda.time.DateTime dateTime59 = interval56.getStart();
        org.joda.time.DateTime dateTime60 = interval56.getEnd();
        boolean boolean61 = interval34.overlaps((org.joda.time.ReadableInterval) interval56);
        java.lang.String str62 = interval34.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Property[minuteOfHour]" + "'", str27, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-21T00:10:00.000Z/2022-02-21T00:11:00.000Z" + "'", str62, "2022-02-21T00:10:00.000Z/2022-02-21T00:11:00.000Z");
    }

    @Test
    public void test12470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12470");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        long long6 = dateTime4.getMillis();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localTime9.toDateTime(readableInstant10);
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        org.joda.time.DateTime.Property property13 = dateTime11.minuteOfHour();
        int int14 = property13.get();
        org.joda.time.Interval interval15 = property13.toInterval();
        org.joda.time.DateTime dateTime16 = interval15.getEnd();
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.minusHours(1970);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks(366);
        org.joda.time.DateTime dateTime22 = dateTime19.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localTime25.toDateTime(readableInstant26);
        org.joda.time.Chronology chronology28 = localTime25.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (byte) 1, chronology36);
        int[] intArray39 = chronology28.get((org.joda.time.ReadablePartial) localTime37, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField40 = chronology28.clockhourOfDay();
        org.joda.time.DurationField durationField41 = chronology28.weeks();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DateTimeField dateTimeField43 = chronology28.era();
        org.joda.time.Chronology chronology44 = chronology28.withUTC();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology28.getZone();
        boolean boolean47 = dateTimeZone45.isStandardOffset(35160100L);
        org.joda.time.DateTime dateTime48 = dateTime22.toDateTime(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645402200000L + "'", long6 == 1645402200000L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test12471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12471");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 1);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        org.joda.time.DateTime dateTime27 = localTime26.toDateTimeToday();
        org.joda.time.LocalTime localTime29 = localTime26.minusMinutes(1);
        org.joda.time.LocalTime.Property property30 = localTime26.millisOfDay();
        int int31 = localTime26.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean33 = localTime26.isSupported(dateTimeFieldType32);
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType32.getDurationType();
        org.joda.time.LocalTime.Property property35 = localTime18.property(dateTimeFieldType32);
        boolean boolean36 = localTime14.isSupported(dateTimeFieldType32);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.Chronology chronology43 = localTime40.getChronology();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) (byte) 1, chronology43);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology43);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfHalfday();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localTime50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusYears(7);
        org.joda.time.DateTimeZone dateTimeZone55 = dateTime54.getZone();
        org.joda.time.Chronology chronology56 = chronology46.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = chronology56.era();
        org.joda.time.Chronology chronology58 = chronology56.withUTC();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType32.getField(chronology56);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test12472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12472");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = localTime11.getField(0);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((-259200010L), 2605186100796L);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        int int25 = localTime19.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.LocalTime.Property property26 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime28 = property26.addCopy(6);
        org.joda.time.LocalTime localTime29 = property26.roundCeilingCopy();
        java.util.Locale locale31 = java.util.Locale.US;
        java.lang.String str32 = locale31.getDisplayName();
        org.joda.time.LocalTime localTime33 = property26.setCopy("0", locale31);
        org.joda.time.LocalTime localTime35 = localTime33.plusHours(4);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.year();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.yearOfCentury();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localTime48.toDateTime(readableInstant49);
        org.joda.time.Chronology chronology51 = localTime48.getChronology();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) (byte) 1, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.dayOfMonth();
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.now(chronology51);
        org.joda.time.LocalTime localTime57 = localTime55.plusHours((int) 'u');
        org.joda.time.LocalTime localTime59 = localTime57.plusMillis(2);
        long long61 = chronology42.set((org.joda.time.ReadablePartial) localTime57, 1645454912708L);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(110L, chronology42);
        org.joda.time.DateTime dateTime63 = localTime35.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.Interval interval64 = interval16.withStart((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Period period65 = interval64.toPeriod();
        org.joda.time.LocalTime localTime67 = localTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period65, 32772);
        java.lang.String str68 = period65.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "English (United States)" + "'", str32, "English (United States)");
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645444624982L + "'", long61 == 1645444624982L);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "P82Y6M2W6DT10H38M20.796S" + "'", str68, "P82Y6M2W6DT10H38M20.796S");
    }

    @Test
    public void test12473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12473");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology6.minuteOfHour();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology6);
        long long24 = chronology6.add(53308315L, (long) (byte) 1, 100);
        org.joda.time.DurationField durationField25 = chronology6.millis();
        long long27 = durationField25.getMillis(27424247L);
        long long29 = durationField25.getMillis(31);
        boolean boolean30 = durationField25.isSupported();
        org.joda.time.DurationFieldType durationFieldType31 = durationField25.getType();
        long long34 = durationField25.subtract(1645455255688L, 934);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 53308415L + "'", long24 == 53308415L);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 27424247L + "'", long27 == 27424247L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 31L + "'", long29 == 31L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645455254754L + "'", long34 == 1645455254754L);
    }

    @Test
    public void test12474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12474");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter2.getZone();
        boolean boolean6 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(15706);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withDefaultYear(53419115);
        boolean boolean11 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology15 = dateTimeFormatter14.getChronology();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(chronology15);
    }

    @Test
    public void test12475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12475");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalTime localTime20 = localTime16.plus(readablePeriod19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean22 = localTime20.isSupported(dateTimeFieldType21);
        org.joda.time.DateTime dateTime23 = dateTime13.withFields((org.joda.time.ReadablePartial) localTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        long long31 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 3);
        long long34 = dateTimeZone25.convertLocalToUTC((long) 9, false);
        java.lang.String str35 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime36 = localTime20.toDateTimeToday(dateTimeZone25);
        long long37 = dateTime36.getMillis();
        boolean boolean38 = interval8.equals((java.lang.Object) long37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localTime43.toDateTime(readableInstant44);
        org.joda.time.Chronology chronology46 = localTime43.getChronology();
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (byte) 1, chronology46);
        boolean boolean48 = dateTimeFieldType39.isSupported(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.centuryOfEra();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(chronology46);
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.Interval interval53 = interval8.withChronology(chronology46);
        org.joda.time.DateTimeField dateTimeField54 = chronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField55 = chronology46.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField55.getType();
        org.joda.time.DurationField durationField57 = dateTimeField55.getRangeDurationField();
        org.joda.time.DurationField durationField58 = dateTimeField55.getLeapDurationField();
        org.joda.time.DurationField durationField59 = dateTimeField55.getDurationField();
        long long62 = durationField59.add((long) (-36000), 4140);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.010" + "'", str35, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645402199990L + "'", long37 == 1645402199990L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 357695964000L + "'", long62 == 357695964000L);
    }

    @Test
    public void test12476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12476");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localTime3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = localTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.weekyears();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localTime11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (byte) 1, chronology14);
        int[] intArray17 = chronology6.get((org.joda.time.ReadablePartial) localTime15, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.weekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 5, chronology6);
        org.joda.time.DurationField durationField20 = chronology6.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology6.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology6.year();
        org.joda.time.DurationField durationField23 = dateTimeField22.getDurationField();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test12477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12477");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int5 = dateTimeZone3.getOffset((long) (byte) 1);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 3);
        long long10 = dateTimeZone1.convertLocalToUTC((long) 9, false);
        java.lang.String str11 = dateTimeZone1.toString();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(dateTimeZone1);
        int int14 = dateTimeZone1.getStandardOffset((long) 9);
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale16.getVariant();
        java.lang.String str19 = dateTimeZone1.getShortName((long) 122, locale16);
        java.util.TimeZone timeZone20 = dateTimeZone1.toTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        int int22 = calendar21.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00:00.010" + "'", str11, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.010" + "'", str19, "+00:00:00.010");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645455425073,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.010,offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=57,SECOND=5,MILLISECOND=83,ZONE_OFFSET=10,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test12478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12478");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.getMinimumValue();
        org.joda.time.DateTime dateTime8 = property6.roundHalfEvenCopy();
        java.util.Locale locale9 = java.util.Locale.US;
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale9.getDisplayCountry(locale13);
        java.lang.String str15 = property6.getAsText(locale13);
        long long16 = property6.remainder();
        org.joda.time.DateTimeField dateTimeField17 = property6.getField();
        int int18 = dateTimeField17.getMaximumValue();
        long long20 = dateTimeField17.remainder(0L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "United States" + "'", str14, "United States");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "10" + "'", str15, "10");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 59 + "'", int18 == 59);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test12479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12479");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withDefaultYear(1);
        boolean boolean7 = dateTimeFormatter6.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter6.getParser();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int16 = dateTimeZone14.getOffset((long) (byte) 1);
        long long18 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) 3);
        long long21 = dateTimeZone12.convertLocalToUTC((long) 9, false);
        java.lang.String str22 = dateTimeZone12.toString();
        java.lang.String str24 = dateTimeZone12.getShortName((long) (byte) 100);
        java.lang.String str25 = dateTimeZone12.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter6.withZone(dateTimeZone12);
        boolean boolean27 = dateTimeFormatter6.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter6.withDefaultYear(53358486);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter29.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter30.withDefaultYear(21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant33 = org.joda.time.Instant.parse("\u4e0a\u5348 12:11:32", dateTimeFormatter30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeParser10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.010" + "'", str24, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.010" + "'", str25, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
    }

    @Test
    public void test12480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12480");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property42.getFieldType();
        org.joda.time.LocalTime localTime45 = property42.withMinimumValue();
        int int46 = property42.getMaximumValue();
        org.joda.time.LocalTime localTime47 = property42.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 999 + "'", int46 == 999);
        org.junit.Assert.assertNotNull(localTime47);
    }

    @Test
    public void test12481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12481");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(1140568157L, 1645454955233L);
        boolean boolean3 = interval2.isBeforeNow();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Interval interval5 = interval2.withDurationAfterStart(readableDuration4);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(interval5);
    }

    @Test
    public void test12482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12482");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localTime5.toDateTime(readableInstant6);
        int int8 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime5);
        org.joda.time.LocalTime.Property property9 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime11 = property9.addCopy(6);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = localTime13.withMinuteOfHour(31);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localTime19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = localTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = localTime27.getChronology();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (byte) 1, chronology30);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePartial) localTime31, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField34 = chronology22.dayOfYear();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localTime37.toDateTime(readableInstant38);
        org.joda.time.LocalTime localTime40 = dateTime39.toLocalTime();
        org.joda.time.DateTime.Property property41 = dateTime39.minuteOfHour();
        int int42 = property41.get();
        org.joda.time.Interval interval43 = property41.toInterval();
        org.joda.time.DateTime dateTime44 = interval43.getEnd();
        org.joda.time.Period period45 = interval43.toPeriod();
        int[] intArray47 = chronology22.get((org.joda.time.ReadablePeriod) period45, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int53 = dateTimeZone51.getOffset((long) (byte) 1);
        long long55 = dateTimeZone49.getMillisKeepLocal(dateTimeZone51, (long) 3);
        long long58 = dateTimeZone49.convertLocalToUTC((long) 9, false);
        java.lang.String str59 = dateTimeZone49.toString();
        org.joda.time.Chronology chronology60 = chronology22.withZone(dateTimeZone49);
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(dateTimeZone49);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(2863424L, dateTimeZone49);
        org.joda.time.DateTime dateTime63 = localTime13.toDateTime((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = dateTime62.minus((-32368521L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = dateTime65.withDayOfWeek(53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 3L + "'", long55 == 3L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.010" + "'", str59, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test12483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12483");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder0.setTimeOfDay(16, 53, (-100800), 3);
        java.util.Calendar calendar6 = builder0.build();
        calendar6.clear();
        java.time.Instant instant8 = calendar6.toInstant();
        java.util.Date date9 = calendar6.getTime();
        int int10 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.setMinimalDaysInFirstWeek((int) 'x');
        java.lang.String str13 = calendar6.toString();
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=120,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 UTC 1970");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=120,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]" + "'", str13, "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=120,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test12484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12484");
        java.util.Locale locale2 = new java.util.Locale("", "Property[minuteOfHour]");
        java.util.Locale locale5 = new java.util.Locale("2022-02-21T00:10:00.000+00:00:00.010", "");
        java.lang.String str6 = locale2.getDisplayLanguage(locale5);
        java.lang.String str7 = locale2.getDisplayLanguage();
        java.lang.String str8 = locale2.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "_PROPERTY[MINUTEOFHOUR]");
        org.junit.Assert.assertEquals(locale5.toString(), "2022-02-21t00:10:00.000+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PROPERTY[MINUTEOFHOUR]" + "'", str8, "PROPERTY[MINUTEOFHOUR]");
    }

    @Test
    public void test12485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12485");
        java.lang.Object obj0 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfMonth();
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.clockhourOfDay();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(obj0, chronology11);
        long long17 = interval16.getStartMillis();
        org.joda.time.Chronology chronology18 = interval16.getChronology();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTime(readableInstant22);
        org.joda.time.LocalTime localTime24 = dateTime23.toLocalTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        int int26 = property25.getMinimumValue();
        org.joda.time.DateTime dateTime27 = property25.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = localTime31.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.weekyears();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = localTime39.getChronology();
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (byte) 1, chronology42);
        int[] intArray45 = chronology34.get((org.joda.time.ReadablePartial) localTime43, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField46 = chronology34.dayOfYear();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.LocalTime localTime52 = dateTime51.toLocalTime();
        org.joda.time.DateTime.Property property53 = dateTime51.minuteOfHour();
        int int54 = property53.get();
        org.joda.time.Interval interval55 = property53.toInterval();
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.Period period57 = interval55.toPeriod();
        int[] intArray59 = chronology34.get((org.joda.time.ReadablePeriod) period57, (long) (byte) 100);
        org.joda.time.DateTime dateTime60 = dateTime27.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime61 = dateTime27.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = dateTime27.withZoneRetainFields(dateTimeZone62);
        int int64 = dateTime63.getSecondOfMinute();
        org.joda.time.Interval interval65 = interval16.withStart((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration66 = interval65.toDuration();
        long long67 = duration66.getMillis();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645455425203L + "'", long17 == 1645455425203L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(duration66);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 53225203L + "'", long67 == 53225203L);
    }

    @Test
    public void test12486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12486");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime3 = null;
        boolean boolean4 = dateTimeZone2.isLocalDateTimeGap(localDateTime3);
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = localTime5.toString(dateTimeFormatter6);
        org.joda.time.Chronology chronology8 = localTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localTime16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = localTime16.getChronology();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (byte) 1, chronology19);
        boolean boolean21 = dateTimeFieldType12.isSupported(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.centuryOfEra();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int29 = dateTimeZone27.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(0L, dateTimeZone27);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(dateTimeZone27);
        org.joda.time.Chronology chronology32 = chronology19.withZone(dateTimeZone27);
        org.joda.time.DurationField durationField33 = chronology19.eras();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int38 = dateTimeZone36.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(0L, dateTimeZone36);
        java.util.TimeZone timeZone40 = dateTimeZone36.toTimeZone();
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str43 = locale42.getCountry();
        java.lang.String str44 = dateTimeZone36.getShortName(0L, locale42);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime(dateTimeZone36);
        org.joda.time.Chronology chronology46 = localTime45.getChronology();
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.DateTime dateTime51 = localTime49.toDateTime(readableInstant50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusYears(7);
        java.util.GregorianCalendar gregorianCalendar54 = dateTime51.toGregorianCalendar();
        int int56 = gregorianCalendar54.getActualMaximum(0);
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar54);
        java.lang.String str58 = localTime57.toString();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localTime61.toDateTime(readableInstant62);
        org.joda.time.LocalTime localTime64 = dateTime63.toLocalTime();
        org.joda.time.DateTime.Property property65 = dateTime63.minuteOfHour();
        int int66 = property65.get();
        org.joda.time.Interval interval67 = property65.toInterval();
        org.joda.time.DateTime dateTime68 = interval67.getEnd();
        org.joda.time.Period period69 = interval67.toPeriod();
        java.lang.String str70 = interval67.toString();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localTime73.toDateTime(readableInstant74);
        org.joda.time.LocalTime localTime76 = dateTime75.toLocalTime();
        org.joda.time.DateTime.Property property77 = dateTime75.minuteOfHour();
        int int78 = property77.get();
        org.joda.time.Interval interval79 = property77.toInterval();
        org.joda.time.Interval interval80 = interval79.toInterval();
        long long81 = interval79.toDurationMillis();
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = interval79.toPeriod(periodType82);
        org.joda.time.Interval interval84 = interval67.overlap((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Period period85 = interval79.toPeriod();
        org.joda.time.LocalTime localTime87 = localTime57.withPeriodAdded((org.joda.time.ReadablePeriod) period85, 47);
        org.joda.time.LocalTime localTime88 = localTime45.minus((org.joda.time.ReadablePeriod) period85);
        int[] intArray90 = chronology19.get((org.joda.time.ReadablePeriod) period85, 1645454927844L);
        int[] intArray93 = chronology8.get((org.joda.time.ReadablePeriod) period85, 19736038800000L, 3110618865369600000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "00:00:00.010" + "'", str7, "00:00:00.010");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CN" + "'", str43, "CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(gregorianCalendar54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "00:10:00.000" + "'", str58, "00:10:00.000");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-21T00:10:00.000Z/2022-02-21T00:11:00.000Z" + "'", str70, "2022-02-21T00:10:00.000Z/2022-02-21T00:11:00.000Z");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 60000L + "'", long81 == 60000L);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(intArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[0, 0, 2720, 4, 14, 48, 47, 844]");
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[98570962, 4, 3, 5, 15, 0, 0, 0]");
    }

    @Test
    public void test12487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12487");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        org.joda.time.DateTime.Property property6 = dateTime4.minuteOfHour();
        int int7 = property6.get();
        org.joda.time.Interval interval8 = property6.toInterval();
        org.joda.time.Interval interval9 = interval8.toInterval();
        long long10 = interval8.toDurationMillis();
        org.joda.time.Interval interval12 = interval8.withStartMillis(10L);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localTime15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = localTime15.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.weekyears();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (byte) 1, chronology26);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePartial) localTime27, (long) (short) -1);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.joda.time.DateTime.Property property36 = dateTime34.minuteOfHour();
        int int37 = property36.getMinimumValue();
        org.joda.time.DateTime dateTime38 = property36.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime41 = null;
        boolean boolean42 = dateTimeZone40.isLocalDateTimeGap(localDateTime41);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime38.withZoneRetainFields(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = localTime27.toDateTime((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.TimeOfDay timeOfDay46 = dateTime44.toTimeOfDay();
        int int47 = dateTime44.getDayOfYear();
        boolean boolean48 = interval8.isAfter((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean50 = interval8.isBefore((-541029143446888L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 60000L + "'", long10 == 60000L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test12488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12488");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localTime7.toDateTime(readableInstant8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime7.plus(readablePeriod10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = dateTime4.withFields((org.joda.time.ReadablePartial) localTime11);
        org.joda.time.Instant instant15 = dateTime14.toInstant();
        org.joda.time.DateTime dateTime16 = instant15.toDateTimeISO();
        org.joda.time.Instant instant19 = instant15.withDurationAdded((long) 15, (-1645432682));
        long long20 = instant15.getMillis();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localTime23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = localTime23.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.weekyears();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localTime31.toDateTime(readableInstant32);
        org.joda.time.Chronology chronology34 = localTime31.getChronology();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((long) (byte) 1, chronology34);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePartial) localTime35, (long) (short) -1);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.LocalTime localTime43 = dateTime42.toLocalTime();
        org.joda.time.DateTime.Property property44 = dateTime42.minuteOfHour();
        int int45 = property44.get();
        org.joda.time.Interval interval46 = property44.toInterval();
        org.joda.time.DateTime dateTime47 = interval46.getEnd();
        org.joda.time.Period period48 = interval46.toPeriod();
        org.joda.time.LocalTime localTime50 = localTime35.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 17);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localTime53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = localTime53.getChronology();
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology56);
        org.joda.time.DateTime dateTime58 = dateTime57.withTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean60 = dateTime58.isSupported(dateTimeFieldType59);
        int int61 = localTime50.get(dateTimeFieldType59);
        boolean boolean62 = instant15.equals((java.lang.Object) localTime50);
        long long63 = instant15.getMillis();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645402200000L + "'", long20 == 1645402200000L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1020 + "'", int61 == 1020);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645402200000L + "'", long63 == 1645402200000L);
    }

    @Test
    public void test12489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12489");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(35);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localTime12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = localTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.weekyears();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localTime20.toDateTime(readableInstant21);
        org.joda.time.Chronology chronology23 = localTime20.getChronology();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (byte) 1, chronology23);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePartial) localTime24, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField27 = chronology15.dayOfYear();
        org.joda.time.DurationField durationField28 = durationFieldType9.getField(chronology15);
        org.joda.time.DurationField durationField29 = chronology15.minutes();
        org.joda.time.DateTimeField dateTimeField30 = chronology15.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter8.withChronology(chronology15);
        java.io.Writer writer32 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int38 = dateTimeZone36.getOffset((long) (byte) 1);
        long long40 = dateTimeZone34.getMillisKeepLocal(dateTimeZone36, (long) 3);
        long long43 = dateTimeZone34.convertLocalToUTC((long) 9, false);
        java.lang.String str44 = dateTimeZone34.toString();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer32, (org.joda.time.ReadablePartial) localTime45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3L + "'", long40 == 3L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.010" + "'", str44, "+00:00:00.010");
        org.junit.Assert.assertNotNull(localTime45);
    }

    @Test
    public void test12490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12490");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.LocalTime localTime5 = dateTime4.toLocalTime();
        int int6 = dateTime4.getMonthOfYear();
        int int7 = dateTime4.getHourOfDay();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int18 = dateTimeZone16.getOffset((long) (byte) 1);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 3);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone14);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean24 = interval22.isAfter(660100L);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localTime27.toDateTime(readableInstant28);
        org.joda.time.LocalTime localTime30 = dateTime29.toLocalTime();
        org.joda.time.DateTime.Property property31 = dateTime29.minuteOfHour();
        int int32 = property31.get();
        org.joda.time.Interval interval33 = property31.toInterval();
        org.joda.time.Interval interval34 = interval33.toInterval();
        long long35 = interval33.toDurationMillis();
        org.joda.time.Period period36 = interval33.toPeriod();
        org.joda.time.Interval interval37 = interval22.withPeriodAfterStart((org.joda.time.ReadablePeriod) period36);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localTime40.toDateTime(readableInstant41);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int48 = dateTimeZone46.getOffset((long) (byte) 1);
        long long50 = dateTimeZone44.getMillisKeepLocal(dateTimeZone46, (long) 3);
        org.joda.time.DateTime dateTime51 = dateTime42.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime53 = dateTime42.minus((long) '#');
        org.joda.time.DateTime.Property property54 = dateTime42.weekyear();
        org.joda.time.DateTime dateTime56 = dateTime42.plusYears((int) (byte) 10);
        boolean boolean57 = interval37.equals((java.lang.Object) dateTime42);
        boolean boolean58 = interval37.isBeforeNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval60 = interval37.withStartMillis(1645402260989L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 60000L + "'", long35 == 60000L);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3L + "'", long50 == 3L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test12491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12491");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.lang.String str3 = calendar2.getCalendarType();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        calendar2.clear();
        calendar2.set(28, (int) (short) 10, 0);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromCalendarFields(calendar2);
        int int11 = calendar2.getWeeksInWeekYear();
        java.lang.String str12 = calendar2.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=-61257513600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=28,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=305,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.util.GregorianCalendar[time=-61257513600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=28,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=305,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str12, "java.util.GregorianCalendar[time=-61257513600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=28,MONTH=9,WEEK_OF_YEAR=45,WEEK_OF_MONTH=6,DAY_OF_MONTH=31,DAY_OF_YEAR=305,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test12492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12492");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear(35);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = localTime14.getChronology();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (byte) 1, chronology17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology17);
        org.joda.time.Interval interval20 = new org.joda.time.Interval(0L, 0L, chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.dayOfWeek();
        org.joda.time.DurationField durationField24 = chronology17.millis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-36000));
        boolean boolean28 = dateTimeFormatter2.isPrinter();
        java.io.Writer writer29 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localTime33.toDateTime(readableInstant34);
        org.joda.time.Chronology chronology36 = localTime33.getChronology();
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (byte) 1, chronology36);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        java.lang.String str39 = localTime37.toString();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localTime42.toDateTime(readableInstant43);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localTime47.toDateTime(readableInstant48);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalTime localTime51 = localTime47.plus(readablePeriod50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean53 = localTime51.isSupported(dateTimeFieldType52);
        org.joda.time.DateTime dateTime54 = dateTime44.withFields((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int60 = dateTimeZone58.getOffset((long) (byte) 1);
        long long62 = dateTimeZone56.getMillisKeepLocal(dateTimeZone58, (long) 3);
        long long65 = dateTimeZone56.convertLocalToUTC((long) 9, false);
        java.lang.String str66 = dateTimeZone56.toString();
        org.joda.time.DateTime dateTime67 = localTime51.toDateTimeToday(dateTimeZone56);
        org.joda.time.LocalTime localTime68 = org.joda.time.LocalTime.now(dateTimeZone56);
        org.joda.time.DateTime dateTime69 = localTime37.toDateTimeToday(dateTimeZone56);
        org.joda.time.DateTime dateTime71 = dateTime69.withYear((-95));
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType72.getRangeDurationType();
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localTime79.toDateTime(readableInstant80);
        int int82 = localTime76.compareTo((org.joda.time.ReadablePartial) localTime79);
        org.joda.time.LocalTime.Property property83 = localTime76.hourOfDay();
        org.joda.time.LocalTime localTime85 = property83.addCopy(6);
        org.joda.time.LocalTime localTime86 = property83.withMaximumValue();
        org.joda.time.LocalTime localTime88 = property83.addCopy((int) (short) 10);
        org.joda.time.LocalTime localTime89 = property83.roundHalfEvenCopy();
        org.joda.time.Chronology chronology90 = localTime89.getChronology();
        org.joda.time.DateTimeField dateTimeField91 = dateTimeFieldType72.getField(chronology90);
        int int92 = dateTime69.get(dateTimeFieldType72);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer29, (org.joda.time.ReadableInstant) dateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "00:00:00.001" + "'", str39, "00:00:00.001");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3L + "'", long62 == 3L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.010" + "'", str66, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 52 + "'", int92 == 52);
    }

    @Test
    public void test12493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12493");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.DateTime dateTime4 = localTime2.toDateTime(readableInstant3);
        org.joda.time.Chronology chronology5 = localTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.weekyears();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        int[] intArray16 = chronology5.get((org.joda.time.ReadablePartial) localTime14, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField17 = chronology5.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localTime22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = localTime22.getChronology();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (byte) 1, chronology25);
        boolean boolean27 = dateTimeFieldType18.isSupported(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.centuryOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localTime32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = localTime32.getChronology();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (byte) 1, chronology35);
        int int37 = dateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localTime36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 1);
        int[] intArray40 = localTime39.getValues();
        int int41 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localTime36, intArray40);
        org.joda.time.LocalTime.Property property42 = localTime36.millisOfSecond();
        org.joda.time.LocalTime localTime43 = property42.withMaximumValue();
        int int44 = localTime43.getMinuteOfHour();
        org.joda.time.DateTime dateTime45 = localTime43.toDateTimeToday();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localTime51.toDateTime(readableInstant52);
        int int54 = localTime48.compareTo((org.joda.time.ReadablePartial) localTime51);
        org.joda.time.LocalTime.Property property55 = localTime48.hourOfDay();
        org.joda.time.LocalTime localTime57 = property55.addCopy(6);
        org.joda.time.LocalTime localTime58 = property55.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime59 = property55.getLocalTime();
        org.joda.time.LocalTime localTime61 = localTime59.plusMillis(53509260);
        boolean boolean62 = localTime43.isAfter((org.joda.time.ReadablePartial) localTime61);
        org.joda.time.DateTime dateTime63 = localTime43.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922789 + "'", int37 == 2922789);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 366 + "'", int41 == 366);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test12494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12494");
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localTime10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = localTime10.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (byte) 1, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.monthOfYear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(1645402259990L, chronology13);
        org.joda.time.DurationField durationField19 = chronology13.weekyears();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(chronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((-19699), 27424248, 22252000, 27419008, 5304, 501, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27419008 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test12495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12495");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        org.joda.time.LocalTime localTime11 = localTime8.minusMinutes(1);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localTime18.toDateTime(readableInstant19);
        int int21 = localTime15.compareTo((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.LocalTime.Property property22 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime24 = property22.addCopy(6);
        org.joda.time.LocalTime localTime25 = property22.roundCeilingCopy();
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = locale27.getDisplayName();
        org.joda.time.LocalTime localTime29 = property22.setCopy("0", locale27);
        org.joda.time.LocalTime localTime30 = property22.roundFloorCopy();
        int[] intArray32 = chronology12.get((org.joda.time.ReadablePartial) localTime30, 8362592323200099L);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay(1645454977311L, chronology12);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localTime38.toDateTime(readableInstant39);
        org.joda.time.Chronology chronology41 = localTime38.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.weekyears();
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localTime46.toDateTime(readableInstant47);
        org.joda.time.Chronology chronology49 = localTime46.getChronology();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (byte) 1, chronology49);
        int[] intArray52 = chronology41.get((org.joda.time.ReadablePartial) localTime50, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField53 = chronology41.dayOfYear();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localTime56.toDateTime(readableInstant57);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.DateTime.Property property60 = dateTime58.minuteOfHour();
        int int61 = property60.get();
        org.joda.time.Interval interval62 = property60.toInterval();
        org.joda.time.DateTime dateTime63 = interval62.getEnd();
        org.joda.time.Period period64 = interval62.toPeriod();
        int[] intArray66 = chronology41.get((org.joda.time.ReadablePeriod) period64, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int72 = dateTimeZone70.getOffset((long) (byte) 1);
        long long74 = dateTimeZone68.getMillisKeepLocal(dateTimeZone70, (long) 3);
        long long77 = dateTimeZone68.convertLocalToUTC((long) 9, false);
        java.lang.String str78 = dateTimeZone68.toString();
        org.joda.time.Chronology chronology79 = chronology41.withZone(dateTimeZone68);
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime(dateTimeZone68);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(2863424L, dateTimeZone68);
        org.joda.time.Chronology chronology82 = chronology12.withZone(dateTimeZone68);
        org.joda.time.DurationField durationField83 = chronology82.eras();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English (United States)" + "'", str28, "English (United States)");
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 99]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3L + "'", long74 == 3L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00:00.010" + "'", str78, "+00:00:00.010");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField83);
    }

    @Test
    public void test12496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12496");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.joda.time.DurationField durationField13 = dateTimeField12.getRangeDurationField();
        int int16 = dateTimeField12.getDifference((long) 15, 3003279000000L);
        boolean boolean17 = dateTimeField12.isLenient();
        long long20 = dateTimeField12.set(0L, 52);
        java.lang.String str21 = dateTimeField12.getName();
        int int23 = dateTimeField12.getMinimumValue(600000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField12.getType();
        int int25 = dateTimeField12.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-95) + "'", int16 == (-95));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-60526224000000L) + "'", long20 == (-60526224000000L));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "year" + "'", str21, "year");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-292275054) + "'", int23 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
    }

    @Test
    public void test12497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12497");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder3.setDate(7200000, (-100800), 53358486);
        java.util.Calendar.Builder builder11 = builder7.setWeekDate(53419115, (-27423368), 892);
        java.util.Calendar.Builder builder16 = builder11.setTimeOfDay((int) (short) 10, 53748945, 1140, 27423369);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder18 = builder11.setInstant(1649400672000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test12498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12498");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((int) (byte) 0, (int) (short) 10);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localTime4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = localTime4.getChronology();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (byte) 1, chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.LocalDateTime localDateTime14 = null;
        boolean boolean15 = dateTimeZone13.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (byte) 0, dateTimeZone13);
        org.joda.time.LocalTime localTime18 = localTime16.minusMinutes(3);
        java.util.Locale locale22 = new java.util.Locale("Property[minuteOfHour]", "Thu Jan 01 00:00:00 UTC 1970");
        java.lang.String str23 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localTime16, (int) (byte) 100, locale22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField10.getType();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("Apr 8, 2022 6:51:12 AM");
        java.lang.String str28 = dateTimeField10.getAsText(2000, locale27);
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder34 = builder30.setTimeOfDay(5, 292278993, (-143999));
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        int int39 = dateTimeZone37.getOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(0L, dateTimeZone37);
        java.util.TimeZone timeZone41 = dateTimeZone37.toTimeZone();
        java.util.Calendar.Builder builder42 = builder34.setTimeZone(timeZone41);
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.lang.String str48 = locale47.getVariant();
        java.lang.String str49 = locale43.getDisplayScript(locale47);
        java.util.Calendar.Builder builder50 = builder42.setLocale(locale47);
        java.lang.String str51 = locale47.getDisplayName();
        java.lang.String str52 = dateTimeField10.getAsShortText(1645455329754L, locale47);
        java.lang.String str54 = dateTimeField10.getAsShortText(1645455182838L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals(locale22.toString(), "property[minuteofhour]_THU JAN 01 00:00:00 UTC 1970");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "100" + "'", str23, "100");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2000" + "'", str28, "2000");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale47.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "HI!" + "'", str51, "HI!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "20" + "'", str52, "20");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "20" + "'", str54, "20");
    }

    @Test
    public void test12499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12499");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(1);
        java.lang.Integer int6 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter2.withDefaultYear((int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withDefaultYear((-95));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withPivotYear(59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withDefaultYear((int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withZoneUTC();
        boolean boolean17 = dateTimeFormatter16.isParser();
        java.lang.Appendable appendable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter16.printTo(appendable18, 1645455013868L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(int6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test12500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12500");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-21T14:51:08.014+00:00:00.010/2022-02-21T14:52:08.014+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:51:08.014+00:00:00.010/2022-02-21T14:52:08.014+00:00:0...\" is malformed at \"/2022-02-21T14:52:08.014+00:00:0...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }
}
